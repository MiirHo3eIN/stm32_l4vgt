
sd_card_l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b174  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800b304  0800b304  0001b304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b494  0800b494  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800b494  0800b494  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b494  0800b494  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b494  0800b494  0001b494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800b49c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052dc  20000014  0800b4b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052f0  0800b4b0  000252f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a34  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048ae  00000000  00000000  00042a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ac8  00000000  00000000  00047328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001880  00000000  00000000  00048df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002be20  00000000  00000000  0004a670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018601  00000000  00000000  00076490  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe674  00000000  00000000  0008ea91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c1c  00000000  00000000  0018d180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2ec 	.word	0x0800b2ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800b2ec 	.word	0x0800b2ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <BSP_SD_Init>:
/**
 * @brief  Initializes the SD card device.
 * @retval SD status
 */
  uint8_t BSP_SD_Init(void)
{
 80001e0:	b508      	push	{r3, lr}
	uint8_t sd_state = MSD_OK;
	/* Check if the SD card is plugged in the slot */
	if (BSP_SD_IsDetected() != SD_PRESENT)
 80001e2:	f005 f8c7 	bl	8005374 <BSP_SD_IsDetected>
 80001e6:	2801      	cmp	r0, #1
 80001e8:	d001      	beq.n	80001ee <BSP_SD_Init+0xe>
	{
		return MSD_ERROR_SD_NOT_PRESENT;
 80001ea:	2002      	movs	r0, #2
			sd_state = MSD_ERROR;
		}
	}

	return sd_state;
}
 80001ec:	bd08      	pop	{r3, pc}
	sd_state = HAL_SD_Init(&hsd1);
 80001ee:	4807      	ldr	r0, [pc, #28]	; (800020c <BSP_SD_Init+0x2c>)
 80001f0:	f002 fdd8 	bl	8002da4 <HAL_SD_Init>
	if (sd_state == MSD_OK)
 80001f4:	2800      	cmp	r0, #0
 80001f6:	d1f9      	bne.n	80001ec <BSP_SD_Init+0xc>
		if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80001f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <BSP_SD_Init+0x2c>)
 80001fe:	f003 fb73 	bl	80038e8 <HAL_SD_ConfigWideBusOperation>
		return MSD_ERROR_SD_NOT_PRESENT;
 8000202:	3000      	adds	r0, #0
 8000204:	bf18      	it	ne
 8000206:	2001      	movne	r0, #1
}
 8000208:	bd08      	pop	{r3, pc}
 800020a:	bf00      	nop
 800020c:	20003130 	.word	0x20003130

08000210 <BSP_SD_ReadBlocks_DMA>:
 * @param  ReadAddr: Address from where data is to be read
 * @param  NumOfBlocks: Number of SD blocks to read
 * @retval SD status
 */
  uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8000210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t sd_state = MSD_OK;

	/* Invalidate the dma tx handle*/
	hsd1.hdmatx = NULL;
 8000212:	4c0b      	ldr	r4, [pc, #44]	; (8000240 <BSP_SD_ReadBlocks_DMA+0x30>)
{
 8000214:	4605      	mov	r5, r0
	hsd1.hdmatx = NULL;
 8000216:	2300      	movs	r3, #0

	/* Prepare the dma channel for a read operation */
	sd_state = SD_DMAConfigRx(&hsd1);
 8000218:	4620      	mov	r0, r4
{
 800021a:	460e      	mov	r6, r1
 800021c:	4617      	mov	r7, r2
	hsd1.hdmatx = NULL;
 800021e:	63e3      	str	r3, [r4, #60]	; 0x3c
	sd_state = SD_DMAConfigRx(&hsd1);
 8000220:	f000 f848 	bl	80002b4 <SD_DMAConfigRx>

	if(sd_state == HAL_OK)
 8000224:	b108      	cbz	r0, 800022a <BSP_SD_ReadBlocks_DMA+0x1a>
	{
		return MSD_OK;
	}
	else
	{
		return MSD_ERROR;
 8000226:	2001      	movs	r0, #1
	}

}
 8000228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sd_state = HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 800022a:	463b      	mov	r3, r7
 800022c:	4632      	mov	r2, r6
 800022e:	4629      	mov	r1, r5
 8000230:	4620      	mov	r0, r4
 8000232:	f002 fe75 	bl	8002f20 <HAL_SD_ReadBlocks_DMA>
		return MSD_OK;
 8000236:	3000      	adds	r0, #0
 8000238:	bf18      	it	ne
 800023a:	2001      	movne	r0, #1
}
 800023c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800023e:	bf00      	nop
 8000240:	20003130 	.word	0x20003130

08000244 <BSP_SD_WriteBlocks_DMA>:
 * @param  WriteAddr: Address from where data is to be written
 * @param  NumOfBlocks: Number of SD blocks to write
 * @retval SD status
 */
  uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8000244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t sd_state = MSD_OK;

	/* Invalidate the dma rx handle*/
	hsd1.hdmarx = NULL;
 8000246:	4c0b      	ldr	r4, [pc, #44]	; (8000274 <BSP_SD_WriteBlocks_DMA+0x30>)
{
 8000248:	4605      	mov	r5, r0
	hsd1.hdmarx = NULL;
 800024a:	2300      	movs	r3, #0

	/* Prepare the dma channel for a read operation */
	sd_state = SD_DMAConfigTx(&hsd1);
 800024c:	4620      	mov	r0, r4
{
 800024e:	460e      	mov	r6, r1
 8000250:	4617      	mov	r7, r2
	hsd1.hdmarx = NULL;
 8000252:	6423      	str	r3, [r4, #64]	; 0x40
	sd_state = SD_DMAConfigTx(&hsd1);
 8000254:	f000 f85c 	bl	8000310 <SD_DMAConfigTx>

	if(sd_state == HAL_OK)
 8000258:	b108      	cbz	r0, 800025e <BSP_SD_WriteBlocks_DMA+0x1a>
	{
		return MSD_OK;
	}
	else
	{
		return MSD_ERROR;
 800025a:	2001      	movs	r0, #1
	}
}
 800025c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sd_state = HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 800025e:	463b      	mov	r3, r7
 8000260:	4632      	mov	r2, r6
 8000262:	4629      	mov	r1, r5
 8000264:	4620      	mov	r0, r4
 8000266:	f002 ff23 	bl	80030b0 <HAL_SD_WriteBlocks_DMA>
		return MSD_OK;
 800026a:	3000      	adds	r0, #0
 800026c:	bf18      	it	ne
 800026e:	2001      	movne	r0, #1
}
 8000270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000272:	bf00      	nop
 8000274:	20003130 	.word	0x20003130

08000278 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hsd1.hdmatx);
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 800027a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800027c:	f000 bfc1 	b.w	8001202 <HAL_DMA_IRQHandler>
 8000280:	20003130 	.word	0x20003130

08000284 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hsd1.hdmarx);
 8000284:	4b01      	ldr	r3, [pc, #4]	; (800028c <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 8000286:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000288:	f000 bfbb 	b.w	8001202 <HAL_DMA_IRQHandler>
 800028c:	20003130 	.word	0x20003130

08000290 <BSP_SD_GetCardState>:
 *          This value can be one of the following values:
 *            @arg  SD_TRANSFER_OK: No data transfer is acting
 *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 */
  uint8_t BSP_SD_GetCardState(void)
{
 8000290:	b508      	push	{r3, lr}
	return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <BSP_SD_GetCardState+0x10>)
 8000294:	f003 fbbe 	bl	8003a14 <HAL_SD_GetCardState>
}
 8000298:	3804      	subs	r0, #4
 800029a:	bf18      	it	ne
 800029c:	2001      	movne	r0, #1
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	20003130 	.word	0x20003130

080002a4 <BSP_SD_GetCardInfo>:
 * @retval None
 */
  void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
	/* Get SD card Information */
	HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80002a4:	4601      	mov	r1, r0
 80002a6:	4801      	ldr	r0, [pc, #4]	; (80002ac <BSP_SD_GetCardInfo+0x8>)
 80002a8:	f003 baf2 	b.w	8003890 <HAL_SD_GetCardInfo>
 80002ac:	20003130 	.word	0x20003130

080002b0 <BSP_SD_AbortCallback>:
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
  void BSP_SD_AbortCallback(void)
{

}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop

080002b4 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80002b4:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80002b6:	4c14      	ldr	r4, [pc, #80]	; (8000308 <SD_DMAConfigRx+0x54>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80002b8:	6404      	str	r4, [r0, #64]	; 0x40
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80002ba:	2307      	movs	r3, #7
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002bc:	f44f 7500 	mov.w	r5, #512	; 0x200
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80002c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80002c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80002c8:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80002ca:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002cc:	6165      	str	r5, [r4, #20]
  hdma_rx.Instance = DMA2_Channel4;
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <SD_DMAConfigRx+0x58>)
 80002d0:	6023      	str	r3, [r4, #0]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80002d2:	2500      	movs	r5, #0
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80002d4:	2680      	movs	r6, #128	; 0x80

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 80002d6:	4620      	mov	r0, r4
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80002d8:	61a1      	str	r1, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80002da:	6222      	str	r2, [r4, #32]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80002dc:	6126      	str	r6, [r4, #16]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80002de:	e9c4 5502 	strd	r5, r5, [r4, #8]
  HAL_DMA_Abort(&hdma_rx);
 80002e2:	f000 ff0f 	bl	8001104 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 80002e6:	4620      	mov	r0, r4
 80002e8:	f000 fe1a 	bl	8000f20 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 80002ec:	4620      	mov	r0, r4
 80002ee:	f000 fd5f 	bl	8000db0 <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 80002f2:	462a      	mov	r2, r5
  status = HAL_DMA_Init(&hdma_rx);
 80002f4:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 80002f6:	2106      	movs	r1, #6
 80002f8:	203b      	movs	r0, #59	; 0x3b
 80002fa:	f000 fd2f 	bl	8000d5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80002fe:	203b      	movs	r0, #59	; 0x3b
 8000300:	f000 fd48 	bl	8000d94 <HAL_NVIC_EnableIRQ>

  return (status);
}
 8000304:	4620      	mov	r0, r4
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	20000030 	.word	0x20000030
 800030c:	40020444 	.word	0x40020444

08000310 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8000310:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8000312:	4c15      	ldr	r4, [pc, #84]	; (8000368 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8000314:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8000316:	2207      	movs	r2, #7
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000318:	2310      	movs	r3, #16
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800031a:	f44f 7500 	mov.w	r5, #512	; 0x200
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800031e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8000322:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8000324:	6062      	str	r2, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000326:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8000328:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  hdma_tx.Instance = DMA2_Channel4;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <SD_DMAConfigTx+0x5c>)
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800032e:	6165      	str	r5, [r4, #20]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000330:	2680      	movs	r6, #128	; 0x80
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000332:	2500      	movs	r5, #0

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 8000334:	4620      	mov	r0, r4
  hdma_tx.Instance = DMA2_Channel4;
 8000336:	6023      	str	r3, [r4, #0]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000338:	61a1      	str	r1, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800033a:	6222      	str	r2, [r4, #32]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800033c:	6126      	str	r6, [r4, #16]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800033e:	60e5      	str	r5, [r4, #12]
  HAL_DMA_Abort(&hdma_tx);
 8000340:	f000 fee0 	bl	8001104 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 8000344:	4620      	mov	r0, r4
 8000346:	f000 fdeb 	bl	8000f20 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 800034a:	4620      	mov	r0, r4
 800034c:	f000 fd30 	bl	8000db0 <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 8000350:	462a      	mov	r2, r5
  status = HAL_DMA_Init(&hdma_tx);
 8000352:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 8000354:	2106      	movs	r1, #6
 8000356:	203b      	movs	r0, #59	; 0x3b
 8000358:	f000 fd00 	bl	8000d5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800035c:	203b      	movs	r0, #59	; 0x3b
 800035e:	f000 fd19 	bl	8000d94 <HAL_NVIC_EnableIRQ>

  return (status);
}
 8000362:	4620      	mov	r0, r4
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	bf00      	nop
 8000368:	20000078 	.word	0x20000078
 800036c:	40020444 	.word	0x40020444

08000370 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_DMA_Init+0x38>)
 8000378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <MX_DMA_Init+0x38>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	6493      	str	r3, [r2, #72]	; 0x48
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_DMA_Init+0x38>)
 8000384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000386:	f003 0302 	and.w	r3, r3, #2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2105      	movs	r1, #5
 8000392:	203b      	movs	r0, #59	; 0x3b
 8000394:	f000 fce2 	bl	8000d5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000398:	203b      	movs	r0, #59	; 0x3b
 800039a:	f000 fcfb 	bl	8000d94 <HAL_NVIC_EnableIRQ>

}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000

080003ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80003bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	4a06      	ldr	r2, [pc, #24]	; (80003dc <vApplicationGetIdleTaskMemory+0x30>)
 80003c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2280      	movs	r2, #128	; 0x80
 80003c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	200000c0 	.word	0x200000c0
 80003dc:	20000118 	.word	0x20000118

080003e0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	4a07      	ldr	r2, [pc, #28]	; (800040c <vApplicationGetTimerTaskMemory+0x2c>)
 80003f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <vApplicationGetTimerTaskMemory+0x30>)
 80003f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003fe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	20000318 	.word	0x20000318
 8000410:	20000370 	.word	0x20000370

08000414 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000414:	b5b0      	push	{r4, r5, r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <MX_FREERTOS_Init+0x30>)
 800041c:	1d3c      	adds	r4, r7, #4
 800041e:	461d      	mov	r5, r3
 8000420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000424:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f007 fd49 	bl	8007ec8 <osThreadCreate>
 8000436:	4602      	mov	r2, r0
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <MX_FREERTOS_Init+0x34>)
 800043a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bdb0      	pop	{r4, r5, r7, pc}
 8000444:	0800b310 	.word	0x0800b310
 8000448:	20003128 	.word	0x20003128

0800044c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800044c:	b5b0      	push	{r4, r5, r7, lr}
 800044e:	b08a      	sub	sp, #40	; 0x28
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint8_t filename[12];
	uint8_t SD_Data[18];
	sprintf(filename, "TEST.csv");
 8000454:	f107 031c 	add.w	r3, r7, #28
 8000458:	4a2b      	ldr	r2, [pc, #172]	; (8000508 <StartDefaultTask+0xbc>)
 800045a:	ca07      	ldmia	r2, {r0, r1, r2}
 800045c:	c303      	stmia	r3!, {r0, r1}
 800045e:	701a      	strb	r2, [r3, #0]
	sprintf(SD_Data, "x,y,z,arsnr,mse\n");
 8000460:	f107 0308 	add.w	r3, r7, #8
 8000464:	4a29      	ldr	r2, [pc, #164]	; (800050c <StartDefaultTask+0xc0>)
 8000466:	461c      	mov	r4, r3
 8000468:	4615      	mov	r5, r2
 800046a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800046c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800046e:	682b      	ldr	r3, [r5, #0]
 8000470:	7023      	strb	r3, [r4, #0]
	if (f_mount(&SDFatFS, SDPath, 0) == FR_OK)
 8000472:	2200      	movs	r2, #0
 8000474:	4926      	ldr	r1, [pc, #152]	; (8000510 <StartDefaultTask+0xc4>)
 8000476:	4827      	ldr	r0, [pc, #156]	; (8000514 <StartDefaultTask+0xc8>)
 8000478:	f006 ff80 	bl	800737c <f_mount>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d138      	bne.n	80004f4 <StartDefaultTask+0xa8>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000488:	4823      	ldr	r0, [pc, #140]	; (8000518 <StartDefaultTask+0xcc>)
 800048a:	f001 f959 	bl	8001740 <HAL_GPIO_WritePin>
		if ((f_open(&SDFile, (const TCHAR*)filename , FA_CREATE_ALWAYS | FA_WRITE)) == FR_OK)
 800048e:	f107 031c 	add.w	r3, r7, #28
 8000492:	220a      	movs	r2, #10
 8000494:	4619      	mov	r1, r3
 8000496:	4821      	ldr	r0, [pc, #132]	; (800051c <StartDefaultTask+0xd0>)
 8000498:	f006 ffd4 	bl	8007444 <f_open>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d12e      	bne.n	8000500 <StartDefaultTask+0xb4>
				{
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a8:	481b      	ldr	r0, [pc, #108]	; (8000518 <StartDefaultTask+0xcc>)
 80004aa:	f001 f949 	bl	8001740 <HAL_GPIO_WritePin>
					if (f_write(&SDFile, SD_Data , strlen(SD_Data) , (void *)&byteswritten) == FR_OK)
 80004ae:	f107 0308 	add.w	r3, r7, #8
 80004b2:	4618      	mov	r0, r3
 80004b4:	f7ff fe8c 	bl	80001d0 <strlen>
 80004b8:	4602      	mov	r2, r0
 80004ba:	f107 0108 	add.w	r1, r7, #8
 80004be:	4b18      	ldr	r3, [pc, #96]	; (8000520 <StartDefaultTask+0xd4>)
 80004c0:	4816      	ldr	r0, [pc, #88]	; (800051c <StartDefaultTask+0xd0>)
 80004c2:	f007 f992 	bl	80077ea <f_write>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d119      	bne.n	8000500 <StartDefaultTask+0xb4>
					{
						if (byteswritten == strlen(SD_Data))
 80004cc:	f107 0308 	add.w	r3, r7, #8
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff fe7d 	bl	80001d0 <strlen>
 80004d6:	4602      	mov	r2, r0
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <StartDefaultTask+0xd4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d10f      	bne.n	8000500 <StartDefaultTask+0xb4>
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <StartDefaultTask+0xcc>)
 80004e8:	f001 f92a 	bl	8001740 <HAL_GPIO_WritePin>
							f_close(&SDFile);
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <StartDefaultTask+0xd0>)
 80004ee:	f007 fbc8 	bl	8007c82 <f_close>
 80004f2:	e005      	b.n	8000500 <StartDefaultTask+0xb4>
					}

				}

	}
	else HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004fa:	4807      	ldr	r0, [pc, #28]	; (8000518 <StartDefaultTask+0xcc>)
 80004fc:	f001 f920 	bl	8001740 <HAL_GPIO_WritePin>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f007 fd2d 	bl	8007f60 <osDelay>
 8000506:	e7fb      	b.n	8000500 <StartDefaultTask+0xb4>
 8000508:	0800b32c 	.word	0x0800b32c
 800050c:	0800b338 	.word	0x0800b338
 8000510:	20003244 	.word	0x20003244
 8000514:	20004278 	.word	0x20004278
 8000518:	48000c00 	.word	0x48000c00
 800051c:	20003248 	.word	0x20003248
 8000520:	2000312c 	.word	0x2000312c

08000524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800053a:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_GPIO_Init+0xac>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053e:	4a24      	ldr	r2, [pc, #144]	; (80005d0 <MX_GPIO_Init+0xac>)
 8000540:	f043 0308 	orr.w	r3, r3, #8
 8000544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000546:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_GPIO_Init+0xac>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054a:	f003 0308 	and.w	r3, r3, #8
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_GPIO_Init+0xac>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <MX_GPIO_Init+0xac>)
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_GPIO_Init+0xac>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_GPIO_Init+0xac>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <MX_GPIO_Init+0xac>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_GPIO_Init+0xac>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000588:	4812      	ldr	r0, [pc, #72]	; (80005d4 <MX_GPIO_Init+0xb0>)
 800058a:	f001 f8d9 	bl	8001740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800058e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000598:	2302      	movs	r3, #2
 800059a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	4619      	mov	r1, r3
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_GPIO_Init+0xb0>)
 80005a4:	f000 ff0c 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80005a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ae:	2301      	movs	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	4619      	mov	r1, r3
 80005c0:	4804      	ldr	r0, [pc, #16]	; (80005d4 <MX_GPIO_Init+0xb0>)
 80005c2:	f000 fefd 	bl	80013c0 <HAL_GPIO_Init>

}
 80005c6:	bf00      	nop
 80005c8:	3720      	adds	r7, #32
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40021000 	.word	0x40021000
 80005d4:	48000c00 	.word	0x48000c00

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 faad 	bl	8000b3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f80d 	bl	80005fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f7ff ff9e 	bl	8000524 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f7ff fec2 	bl	8000370 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80005ec:	f000 f8aa 	bl	8000744 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005f0:	f004 fe88 	bl	8005304 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80005f4:	f7ff ff0e 	bl	8000414 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80005f8:	f007 fc43 	bl	8007e82 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x24>

080005fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b0b8      	sub	sp, #224	; 0xe0
 8000602:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000604:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000608:	2244      	movs	r2, #68	; 0x44
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f00a fe64 	bl	800b2da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000612:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2288      	movs	r2, #136	; 0x88
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f00a fe56 	bl	800b2da <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800062e:	2310      	movs	r3, #16
 8000630:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000640:	2360      	movs	r3, #96	; 0x60
 8000642:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800064c:	2301      	movs	r3, #1
 800064e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000658:	2328      	movs	r3, #40	; 0x28
 800065a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800065e:	2307      	movs	r3, #7
 8000660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f8df 	bl	8001838 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000680:	f000 f858 	bl	8000734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2303      	movs	r3, #3
 800068c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006a6:	2104      	movs	r1, #4
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fcab 	bl	8002004 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006b4:	f000 f83e 	bl	8000734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80006b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80006bc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80006be:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006c2:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80006cc:	2310      	movs	r3, #16
 80006ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006d0:	2307      	movs	r3, #7
 80006d2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006e0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fead 	bl	8002444 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006f0:	f000 f820 	bl	8000734 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006f8:	f001 f848 	bl	800178c <HAL_PWREx_ControlVoltageScaling>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000702:	f000 f817 	bl	8000734 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	37e0      	adds	r7, #224	; 0xe0
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d101      	bne.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000722:	f000 fa23 	bl	8000b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40012c00 	.word	0x40012c00

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_SDMMC1_SD_Init+0x3c>)
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <MX_SDMMC1_SD_Init+0x40>)
 800074c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SDMMC1_SD_Init+0x3c>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SDMMC1_SD_Init+0x3c>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SDMMC1_SD_Init+0x3c>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SDMMC1_SD_Init+0x3c>)
 8000762:	2200      	movs	r2, #0
 8000764:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SDMMC1_SD_Init+0x3c>)
 8000768:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 6;
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <MX_SDMMC1_SD_Init+0x3c>)
 8000770:	2206      	movs	r2, #6
 8000772:	619a      	str	r2, [r3, #24]

}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20003130 	.word	0x20003130
 8000784:	40012800 	.word	0x40012800

08000788 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a4b      	ldr	r2, [pc, #300]	; (80008d4 <HAL_SD_MspInit+0x14c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	f040 8090 	bne.w	80008cc <HAL_SD_MspInit+0x144>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80007ac:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <HAL_SD_MspInit+0x150>)
 80007ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b0:	4a49      	ldr	r2, [pc, #292]	; (80008d8 <HAL_SD_MspInit+0x150>)
 80007b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b6:	6613      	str	r3, [r2, #96]	; 0x60
 80007b8:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <HAL_SD_MspInit+0x150>)
 80007ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c4:	4b44      	ldr	r3, [pc, #272]	; (80008d8 <HAL_SD_MspInit+0x150>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	4a43      	ldr	r2, [pc, #268]	; (80008d8 <HAL_SD_MspInit+0x150>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d0:	4b41      	ldr	r3, [pc, #260]	; (80008d8 <HAL_SD_MspInit+0x150>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007dc:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <HAL_SD_MspInit+0x150>)
 80007de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e0:	4a3d      	ldr	r2, [pc, #244]	; (80008d8 <HAL_SD_MspInit+0x150>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e8:	4b3b      	ldr	r3, [pc, #236]	; (80008d8 <HAL_SD_MspInit+0x150>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80007f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000806:	230c      	movs	r3, #12
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4832      	ldr	r0, [pc, #200]	; (80008dc <HAL_SD_MspInit+0x154>)
 8000812:	f000 fdd5 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000828:	230c      	movs	r3, #12
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	482a      	ldr	r0, [pc, #168]	; (80008dc <HAL_SD_MspInit+0x154>)
 8000834:	f000 fdc4 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000838:	2304      	movs	r3, #4
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000840:	2301      	movs	r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000848:	230c      	movs	r3, #12
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4823      	ldr	r0, [pc, #140]	; (80008e0 <HAL_SD_MspInit+0x158>)
 8000854:	f000 fdb4 	bl	80013c0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 800085a:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <HAL_SD_MspInit+0x160>)
 800085c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 8000860:	2207      	movs	r2, #7
 8000862:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800086a:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000870:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 8000880:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000884:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 800088e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000892:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 8000896:	f000 fa8b 	bl	8000db0 <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_SD_MspInit+0x11c>
    {
      Error_Handler();
 80008a0:	f7ff ff48 	bl	8000734 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 80008b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_SD_MspInit+0x15c>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2105      	movs	r1, #5
 80008c0:	2031      	movs	r0, #49	; 0x31
 80008c2:	f000 fa4b 	bl	8000d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80008c6:	2031      	movs	r0, #49	; 0x31
 80008c8:	f000 fa64 	bl	8000d94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40012800 	.word	0x40012800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000800 	.word	0x48000800
 80008e0:	48000c00 	.word	0x48000c00
 80008e4:	200031b4 	.word	0x200031b4
 80008e8:	40020444 	.word	0x40020444

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <HAL_MspInit+0x4c>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <HAL_MspInit+0x4c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6613      	str	r3, [r2, #96]	; 0x60
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_MspInit+0x4c>)
 8000900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <HAL_MspInit+0x4c>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6593      	str	r3, [r2, #88]	; 0x58
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <HAL_MspInit+0x4c>)
 8000918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	210f      	movs	r1, #15
 8000926:	f06f 0001 	mvn.w	r0, #1
 800092a:	f000 fa17 	bl	8000d5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 800094c:	2200      	movs	r2, #0
 800094e:	6879      	ldr	r1, [r7, #4]
 8000950:	2019      	movs	r0, #25
 8000952:	f000 fa03 	bl	8000d5c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000956:	2019      	movs	r0, #25
 8000958:	f000 fa1c 	bl	8000d94 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <HAL_InitTick+0x9c>)
 800095e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000960:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <HAL_InitTick+0x9c>)
 8000962:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000966:	6613      	str	r3, [r2, #96]	; 0x60
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <HAL_InitTick+0x9c>)
 800096a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000974:	f107 0210 	add.w	r2, r7, #16
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4611      	mov	r1, r2
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fcce 	bl	8002320 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000984:	f001 fcb6 	bl	80022f4 <HAL_RCC_GetPCLK2Freq>
 8000988:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800098a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <HAL_InitTick+0xa0>)
 800098e:	fba2 2303 	umull	r2, r3, r2, r3
 8000992:	0c9b      	lsrs	r3, r3, #18
 8000994:	3b01      	subs	r3, #1
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_InitTick+0xa4>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <HAL_InitTick+0xa8>)
 800099c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_InitTick+0xa4>)
 80009a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <HAL_InitTick+0xa4>)
 80009a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_InitTick+0xa4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_InitTick+0xa4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <HAL_InitTick+0xa4>)
 80009ba:	f003 fcdd 	bl	8004378 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d104      	bne.n	80009ce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009c4:	4806      	ldr	r0, [pc, #24]	; (80009e0 <HAL_InitTick+0xa4>)
 80009c6:	f003 fd0d 	bl	80043e4 <HAL_TIM_Base_Start_IT>
 80009ca:	4603      	mov	r3, r0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3730      	adds	r7, #48	; 0x30
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	431bde83 	.word	0x431bde83
 80009e0:	200031fc 	.word	0x200031fc
 80009e4:	40012c00 	.word	0x40012c00

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a20:	4802      	ldr	r0, [pc, #8]	; (8000a2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a22:	f003 fd09 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200031fc 	.word	0x200031fc

08000a30 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <SDMMC1_IRQHandler+0x10>)
 8000a36:	f002 fc07 	bl	8003248 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20003130 	.word	0x20003130

08000a44 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <DMA2_Channel4_IRQHandler+0x34>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	2b81      	cmp	r3, #129	; 0x81
 8000a4e:	d003      	beq.n	8000a58 <DMA2_Channel4_IRQHandler+0x14>
      (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK)))
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <DMA2_Channel4_IRQHandler+0x34>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 8000a54:	2b82      	cmp	r3, #130	; 0x82
 8000a56:	d102      	bne.n	8000a5e <DMA2_Channel4_IRQHandler+0x1a>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 8000a58:	f7ff fc14 	bl	8000284 <BSP_SD_DMA_Rx_IRQHandler>
 8000a5c:	e009      	b.n	8000a72 <DMA2_Channel4_IRQHandler+0x2e>
  }
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <DMA2_Channel4_IRQHandler+0x34>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	2b90      	cmp	r3, #144	; 0x90
 8000a64:	d003      	beq.n	8000a6e <DMA2_Channel4_IRQHandler+0x2a>
      (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK)))
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <DMA2_Channel4_IRQHandler+0x34>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8000a6a:	2ba0      	cmp	r3, #160	; 0xa0
 8000a6c:	d102      	bne.n	8000a74 <DMA2_Channel4_IRQHandler+0x30>
  {
    BSP_SD_DMA_Tx_IRQHandler();
 8000a6e:	f7ff fc03 	bl	8000278 <BSP_SD_DMA_Tx_IRQHandler>
  }
  return; 
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20003130 	.word	0x20003130

08000a7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <SystemInit+0x64>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <SystemInit+0x64>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <SystemInit+0x68>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <SystemInit+0x68>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <SystemInit+0x68>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <SystemInit+0x68>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <SystemInit+0x68>)
 8000aa8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000aac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ab0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <SystemInit+0x68>)
 8000ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <SystemInit+0x68>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a09      	ldr	r2, [pc, #36]	; (8000ae4 <SystemInit+0x68>)
 8000ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <SystemInit+0x68>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SystemInit+0x64>)
 8000ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000aec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aee:	e003      	b.n	8000af8 <LoopCopyDataInit>

08000af0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000af2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000af4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000af6:	3104      	adds	r1, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000afc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000afe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b00:	d3f6      	bcc.n	8000af0 <CopyDataInit>
	ldr	r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b04:	e002      	b.n	8000b0c <LoopFillZerobss>

08000b06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b08:	f842 3b04 	str.w	r3, [r2], #4

08000b0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <LoopForever+0x16>)
	cmp	r2, r3
 8000b0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b10:	d3f9      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b12:	f7ff ffb3 	bl	8000a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f00a fbb1 	bl	800b27c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1a:	f7ff fd5d 	bl	80005d8 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b20:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000b24:	0800b49c 	.word	0x0800b49c
	ldr	r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b2c:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000b30:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000b34:	200052f0 	.word	0x200052f0

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>

08000b3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f8fe 	bl	8000d46 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fef6 	bl	800093c <HAL_InitTick>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	e001      	b.n	8000b60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5c:	f7ff fec6 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x20>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4413      	add	r3, r2
 8000b7a:	4a03      	ldr	r2, [pc, #12]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b7c:	6013      	str	r3, [r2, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	2000323c 	.word	0x2000323c
 8000b8c:	20000008 	.word	0x20000008

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	2000323c 	.word	0x2000323c

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff ffee 	bl	8000b90 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bc0:	d004      	beq.n	8000bcc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <HAL_Delay+0x40>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bcc:	bf00      	nop
 8000bce:	f7ff ffdf 	bl	8000b90 <HAL_GetTick>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d8f7      	bhi.n	8000bce <HAL_Delay+0x26>
  {
  }
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	db0b      	blt.n	8000c7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f003 021f 	and.w	r2, r3, #31
 8000c68:	4907      	ldr	r1, [pc, #28]	; (8000c88 <__NVIC_EnableIRQ+0x38>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	2001      	movs	r0, #1
 8000c72:	fa00 f202 	lsl.w	r2, r0, r2
 8000c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000e100 	.word	0xe000e100

08000c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	6039      	str	r1, [r7, #0]
 8000c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	db0a      	blt.n	8000cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	490c      	ldr	r1, [pc, #48]	; (8000cd8 <__NVIC_SetPriority+0x4c>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	0112      	lsls	r2, r2, #4
 8000cac:	b2d2      	uxtb	r2, r2
 8000cae:	440b      	add	r3, r1
 8000cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb4:	e00a      	b.n	8000ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <__NVIC_SetPriority+0x50>)
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	f003 030f 	and.w	r3, r3, #15
 8000cc2:	3b04      	subs	r3, #4
 8000cc4:	0112      	lsls	r2, r2, #4
 8000cc6:	b2d2      	uxtb	r2, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	761a      	strb	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f1c3 0307 	rsb	r3, r3, #7
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	bf28      	it	cs
 8000cfe:	2304      	movcs	r3, #4
 8000d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3304      	adds	r3, #4
 8000d06:	2b06      	cmp	r3, #6
 8000d08:	d902      	bls.n	8000d10 <NVIC_EncodePriority+0x30>
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3b03      	subs	r3, #3
 8000d0e:	e000      	b.n	8000d12 <NVIC_EncodePriority+0x32>
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43da      	mvns	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	401a      	ands	r2, r3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d32:	43d9      	mvns	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	4313      	orrs	r3, r2
         );
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3724      	adds	r7, #36	; 0x24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ff4c 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6e:	f7ff ff61 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	6978      	ldr	r0, [r7, #20]
 8000d7a:	f7ff ffb1 	bl	8000ce0 <NVIC_EncodePriority>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d84:	4611      	mov	r1, r2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff ff80 	bl	8000c8c <__NVIC_SetPriority>
}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ff54 	bl	8000c50 <__NVIC_EnableIRQ>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e098      	b.n	8000ef4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b4d      	ldr	r3, [pc, #308]	; (8000f00 <HAL_DMA_Init+0x150>)
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d80f      	bhi.n	8000dee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b4b      	ldr	r3, [pc, #300]	; (8000f04 <HAL_DMA_Init+0x154>)
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a4b      	ldr	r2, [pc, #300]	; (8000f08 <HAL_DMA_Init+0x158>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	091b      	lsrs	r3, r3, #4
 8000de0:	009a      	lsls	r2, r3, #2
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_DMA_Init+0x15c>)
 8000dea:	641a      	str	r2, [r3, #64]	; 0x40
 8000dec:	e00e      	b.n	8000e0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b46      	ldr	r3, [pc, #280]	; (8000f10 <HAL_DMA_Init+0x160>)
 8000df6:	4413      	add	r3, r2
 8000df8:	4a43      	ldr	r2, [pc, #268]	; (8000f08 <HAL_DMA_Init+0x158>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	009a      	lsls	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a42      	ldr	r2, [pc, #264]	; (8000f14 <HAL_DMA_Init+0x164>)
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	691b      	ldr	r3, [r3, #16]
 8000e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e66:	d039      	beq.n	8000edc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	4a27      	ldr	r2, [pc, #156]	; (8000f0c <HAL_DMA_Init+0x15c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d11a      	bne.n	8000ea8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <HAL_DMA_Init+0x168>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f003 031c 	and.w	r3, r3, #28
 8000e7e:	210f      	movs	r1, #15
 8000e80:	fa01 f303 	lsl.w	r3, r1, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4924      	ldr	r1, [pc, #144]	; (8000f18 <HAL_DMA_Init+0x168>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_DMA_Init+0x168>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6859      	ldr	r1, [r3, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e98:	f003 031c 	and.w	r3, r3, #28
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	491d      	ldr	r1, [pc, #116]	; (8000f18 <HAL_DMA_Init+0x168>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]
 8000ea6:	e019      	b.n	8000edc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_DMA_Init+0x16c>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb0:	f003 031c 	and.w	r3, r3, #28
 8000eb4:	210f      	movs	r1, #15
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4917      	ldr	r1, [pc, #92]	; (8000f1c <HAL_DMA_Init+0x16c>)
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_DMA_Init+0x16c>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6859      	ldr	r1, [r3, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f003 031c 	and.w	r3, r3, #28
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	4911      	ldr	r1, [pc, #68]	; (8000f1c <HAL_DMA_Init+0x16c>)
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40020407 	.word	0x40020407
 8000f04:	bffdfff8 	.word	0xbffdfff8
 8000f08:	cccccccd 	.word	0xcccccccd
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	bffdfbf8 	.word	0xbffdfbf8
 8000f14:	40020400 	.word	0x40020400
 8000f18:	400200a8 	.word	0x400200a8
 8000f1c:	400204a8 	.word	0x400204a8

08000f20 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e072      	b.n	8001018 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0201 	bic.w	r2, r2, #1
 8000f40:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <HAL_DMA_DeInit+0x104>)
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d80f      	bhi.n	8000f6e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b34      	ldr	r3, [pc, #208]	; (8001028 <HAL_DMA_DeInit+0x108>)
 8000f56:	4413      	add	r3, r2
 8000f58:	4a34      	ldr	r2, [pc, #208]	; (800102c <HAL_DMA_DeInit+0x10c>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	009a      	lsls	r2, r3, #2
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a31      	ldr	r2, [pc, #196]	; (8001030 <HAL_DMA_DeInit+0x110>)
 8000f6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000f6c:	e00e      	b.n	8000f8c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b2f      	ldr	r3, [pc, #188]	; (8001034 <HAL_DMA_DeInit+0x114>)
 8000f76:	4413      	add	r3, r2
 8000f78:	4a2c      	ldr	r2, [pc, #176]	; (800102c <HAL_DMA_DeInit+0x10c>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	091b      	lsrs	r3, r3, #4
 8000f80:	009a      	lsls	r2, r3, #2
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a2b      	ldr	r2, [pc, #172]	; (8001038 <HAL_DMA_DeInit+0x118>)
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f98:	f003 021c 	and.w	r2, r3, #28
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a20      	ldr	r2, [pc, #128]	; (8001030 <HAL_DMA_DeInit+0x110>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d10d      	bne.n	8000fce <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <HAL_DMA_DeInit+0x11c>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f003 031c 	and.w	r3, r3, #28
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	491d      	ldr	r1, [pc, #116]	; (800103c <HAL_DMA_DeInit+0x11c>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]
 8000fcc:	e00c      	b.n	8000fe8 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_DMA_DeInit+0x120>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f003 031c 	and.w	r3, r3, #28
 8000fda:	210f      	movs	r1, #15
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4917      	ldr	r1, [pc, #92]	; (8001040 <HAL_DMA_DeInit+0x120>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40020407 	.word	0x40020407
 8001028:	bffdfff8 	.word	0xbffdfff8
 800102c:	cccccccd 	.word	0xcccccccd
 8001030:	40020000 	.word	0x40020000
 8001034:	bffdfbf8 	.word	0xbffdfbf8
 8001038:	40020400 	.word	0x40020400
 800103c:	400200a8 	.word	0x400200a8
 8001040:	400204a8 	.word	0x400204a8

08001044 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <HAL_DMA_Start_IT+0x20>
 8001060:	2302      	movs	r3, #2
 8001062:	e04b      	b.n	80010fc <HAL_DMA_Start_IT+0xb8>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d13a      	bne.n	80010ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2202      	movs	r2, #2
 800107c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2200      	movs	r2, #0
 8001084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0201 	bic.w	r2, r2, #1
 8001094:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	68b9      	ldr	r1, [r7, #8]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 f95f 	bl	8001360 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d008      	beq.n	80010bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f042 020e 	orr.w	r2, r2, #14
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e00f      	b.n	80010dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0204 	bic.w	r2, r2, #4
 80010ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 020a 	orr.w	r2, r2, #10
 80010da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0201 	orr.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e005      	b.n	80010fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80010f6:	2302      	movs	r3, #2
 80010f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d008      	beq.n	800112e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2204      	movs	r2, #4
 8001120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e022      	b.n	8001174 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f022 020e 	bic.w	r2, r2, #14
 800113c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f003 021c 	and.w	r2, r3, #28
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	2101      	movs	r1, #1
 800115c:	fa01 f202 	lsl.w	r2, r1, r2
 8001160:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d005      	beq.n	80011a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2204      	movs	r2, #4
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e029      	b.n	80011f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 020e 	bic.w	r2, r2, #14
 80011b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0201 	bic.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	f003 021c 	and.w	r2, r3, #28
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f202 	lsl.w	r2, r1, r2
 80011d6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	4798      	blx	r3
    }
  }
  return status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b084      	sub	sp, #16
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f003 031c 	and.w	r3, r3, #28
 8001222:	2204      	movs	r2, #4
 8001224:	409a      	lsls	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4013      	ands	r3, r2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d026      	beq.n	800127c <HAL_DMA_IRQHandler+0x7a>
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d021      	beq.n	800127c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0320 	and.w	r3, r3, #32
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0204 	bic.w	r2, r2, #4
 8001254:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f003 021c 	and.w	r2, r3, #28
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	2104      	movs	r1, #4
 8001264:	fa01 f202 	lsl.w	r2, r1, r2
 8001268:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	2b00      	cmp	r3, #0
 8001270:	d071      	beq.n	8001356 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800127a:	e06c      	b.n	8001356 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001280:	f003 031c 	and.w	r3, r3, #28
 8001284:	2202      	movs	r2, #2
 8001286:	409a      	lsls	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4013      	ands	r3, r2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d02e      	beq.n	80012ee <HAL_DMA_IRQHandler+0xec>
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d029      	beq.n	80012ee <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10b      	bne.n	80012c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 020a 	bic.w	r2, r2, #10
 80012b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	f003 021c 	and.w	r2, r3, #28
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	2102      	movs	r1, #2
 80012ce:	fa01 f202 	lsl.w	r2, r1, r2
 80012d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d038      	beq.n	8001356 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012ec:	e033      	b.n	8001356 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f003 031c 	and.w	r3, r3, #28
 80012f6:	2208      	movs	r2, #8
 80012f8:	409a      	lsls	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d02a      	beq.n	8001358 <HAL_DMA_IRQHandler+0x156>
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d025      	beq.n	8001358 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 020e 	bic.w	r2, r2, #14
 800131a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	f003 021c 	and.w	r2, r3, #28
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001356:	bf00      	nop
 8001358:	bf00      	nop
}
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f003 021c 	and.w	r2, r3, #28
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	2b10      	cmp	r3, #16
 8001390:	d108      	bne.n	80013a4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013a2:	e007      	b.n	80013b4 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	60da      	str	r2, [r3, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e17f      	b.n	80016d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8171 	beq.w	80016ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d00b      	beq.n	8001408 <HAL_GPIO_Init+0x48>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b03      	cmp	r3, #3
 8001474:	d118      	bne.n	80014a8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800147c:	2201      	movs	r2, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	08db      	lsrs	r3, r3, #3
 8001492:	f003 0201 	and.w	r2, r3, #1
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x128>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b12      	cmp	r3, #18
 80014e6:	d123      	bne.n	8001530 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	08da      	lsrs	r2, r3, #3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3208      	adds	r2, #8
 80014f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	6939      	ldr	r1, [r7, #16]
 800152c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0203 	and.w	r2, r3, #3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80ac 	beq.w	80016ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <HAL_GPIO_Init+0x32c>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001576:	4a5d      	ldr	r2, [pc, #372]	; (80016ec <HAL_GPIO_Init+0x32c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6613      	str	r3, [r2, #96]	; 0x60
 800157e:	4b5b      	ldr	r3, [pc, #364]	; (80016ec <HAL_GPIO_Init+0x32c>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800158a:	4a59      	ldr	r2, [pc, #356]	; (80016f0 <HAL_GPIO_Init+0x330>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015b4:	d025      	beq.n	8001602 <HAL_GPIO_Init+0x242>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4e      	ldr	r2, [pc, #312]	; (80016f4 <HAL_GPIO_Init+0x334>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d01f      	beq.n	80015fe <HAL_GPIO_Init+0x23e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4d      	ldr	r2, [pc, #308]	; (80016f8 <HAL_GPIO_Init+0x338>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d019      	beq.n	80015fa <HAL_GPIO_Init+0x23a>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4c      	ldr	r2, [pc, #304]	; (80016fc <HAL_GPIO_Init+0x33c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x236>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4b      	ldr	r2, [pc, #300]	; (8001700 <HAL_GPIO_Init+0x340>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x232>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4a      	ldr	r2, [pc, #296]	; (8001704 <HAL_GPIO_Init+0x344>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x22e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	; (8001708 <HAL_GPIO_Init+0x348>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x22a>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00c      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015ea:	2307      	movs	r3, #7
 80015ec:	e00a      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015ee:	2305      	movs	r3, #5
 80015f0:	e008      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e006      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015f6:	2303      	movs	r3, #3
 80015f8:	e004      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_Init+0x244>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_GPIO_Init+0x244>
 8001602:	2300      	movs	r3, #0
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	f002 0203 	and.w	r2, r2, #3
 800160a:	0092      	lsls	r2, r2, #2
 800160c:	4093      	lsls	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001614:	4936      	ldr	r1, [pc, #216]	; (80016f0 <HAL_GPIO_Init+0x330>)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <HAL_GPIO_Init+0x34c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001646:	4a31      	ldr	r2, [pc, #196]	; (800170c <HAL_GPIO_Init+0x34c>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_GPIO_Init+0x34c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001670:	4a26      	ldr	r2, [pc, #152]	; (800170c <HAL_GPIO_Init+0x34c>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_GPIO_Init+0x34c>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <HAL_GPIO_Init+0x34c>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <HAL_GPIO_Init+0x34c>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c4:	4a11      	ldr	r2, [pc, #68]	; (800170c <HAL_GPIO_Init+0x34c>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f ae78 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 80016e0:	bf00      	nop
 80016e2:	371c      	adds	r7, #28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000
 80016f4:	48000400 	.word	0x48000400
 80016f8:	48000800 	.word	0x48000800
 80016fc:	48000c00 	.word	0x48000c00
 8001700:	48001000 	.word	0x48001000
 8001704:	48001400 	.word	0x48001400
 8001708:	48001800 	.word	0x48001800
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e001      	b.n	8001732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	460b      	mov	r3, r1
 800174a:	807b      	strh	r3, [r7, #2]
 800174c:	4613      	mov	r3, r2
 800174e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001750:	787b      	ldrb	r3, [r7, #1]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800175c:	e002      	b.n	8001764 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800175e:	887a      	ldrh	r2, [r7, #2]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <HAL_PWREx_GetVoltageRange+0x18>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40007000 	.word	0x40007000

0800178c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179a:	d130      	bne.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a8:	d038      	beq.n	800181c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017b2:	4a1e      	ldr	r2, [pc, #120]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2232      	movs	r2, #50	; 0x32
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0c9b      	lsrs	r3, r3, #18
 80017cc:	3301      	adds	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d0:	e002      	b.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e4:	d102      	bne.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f2      	bne.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f8:	d110      	bne.n	800181c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e00f      	b.n	800181e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180a:	d007      	beq.n	800181c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001814:	4a05      	ldr	r2, [pc, #20]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40007000 	.word	0x40007000
 8001830:	20000000 	.word	0x20000000
 8001834:	431bde83 	.word	0x431bde83

08001838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e3d4      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184a:	4ba1      	ldr	r3, [pc, #644]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001854:	4b9e      	ldr	r3, [pc, #632]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80e4 	beq.w	8001a34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d007      	beq.n	8001882 <HAL_RCC_OscConfig+0x4a>
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b0c      	cmp	r3, #12
 8001876:	f040 808b 	bne.w	8001990 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b01      	cmp	r3, #1
 800187e:	f040 8087 	bne.w	8001990 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001882:	4b93      	ldr	r3, [pc, #588]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x62>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e3ac      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1a      	ldr	r2, [r3, #32]
 800189e:	4b8c      	ldr	r3, [pc, #560]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d004      	beq.n	80018b4 <HAL_RCC_OscConfig+0x7c>
 80018aa:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018b2:	e005      	b.n	80018c0 <HAL_RCC_OscConfig+0x88>
 80018b4:	4b86      	ldr	r3, [pc, #536]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80018b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ba:	091b      	lsrs	r3, r3, #4
 80018bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d223      	bcs.n	800190c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 fd5b 	bl	8002384 <RCC_SetFlashLatencyFromMSIRange>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e38d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d8:	4b7d      	ldr	r3, [pc, #500]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a7c      	ldr	r2, [pc, #496]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4977      	ldr	r1, [pc, #476]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f6:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	4972      	ldr	r1, [pc, #456]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
 800190a:	e025      	b.n	8001958 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190c:	4b70      	ldr	r3, [pc, #448]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a6f      	ldr	r2, [pc, #444]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b6d      	ldr	r3, [pc, #436]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	496a      	ldr	r1, [pc, #424]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800192a:	4b69      	ldr	r3, [pc, #420]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4965      	ldr	r1, [pc, #404]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fd1b 	bl	8002384 <RCC_SetFlashLatencyFromMSIRange>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e34d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001958:	f000 fc36 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 800195c:	4601      	mov	r1, r0
 800195e:	4b5c      	ldr	r3, [pc, #368]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	4a5a      	ldr	r2, [pc, #360]	; (8001ad4 <HAL_RCC_OscConfig+0x29c>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	fa21 f303 	lsr.w	r3, r1, r3
 8001974:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <HAL_RCC_OscConfig+0x2a0>)
 8001976:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001978:	4b58      	ldr	r3, [pc, #352]	; (8001adc <HAL_RCC_OscConfig+0x2a4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe ffdd 	bl	800093c <HAL_InitTick>
 8001982:	4603      	mov	r3, r0
 8001984:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d052      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
 800198e:	e331      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d032      	beq.n	80019fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001998:	4b4d      	ldr	r3, [pc, #308]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a4c      	ldr	r2, [pc, #304]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019a4:	f7ff f8f4 	bl	8000b90 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ac:	f7ff f8f0 	bl	8000b90 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e31a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ca:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a40      	ldr	r2, [pc, #256]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80019d0:	f043 0308 	orr.w	r3, r3, #8
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	493b      	ldr	r1, [pc, #236]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	4936      	ldr	r1, [pc, #216]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
 80019fc:	e01a      	b.n	8001a34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019fe:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a33      	ldr	r2, [pc, #204]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f8c1 	bl	8000b90 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a12:	f7ff f8bd 	bl	8000b90 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e2e7      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a24:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x1da>
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d074      	beq.n	8001b2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x21a>
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d10e      	bne.n	8001a6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d10b      	bne.n	8001a6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d064      	beq.n	8001b28 <HAL_RCC_OscConfig+0x2f0>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d160      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e2c4      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x24a>
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a15      	ldr	r2, [pc, #84]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e01d      	b.n	8001abe <HAL_RCC_OscConfig+0x286>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x26e>
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	e00b      	b.n	8001abe <HAL_RCC_OscConfig+0x286>
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d01c      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff f863 	bl	8000b90 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001acc:	e011      	b.n	8001af2 <HAL_RCC_OscConfig+0x2ba>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	0800b3b8 	.word	0x0800b3b8
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff f856 	bl	8000b90 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e280      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af2:	4baf      	ldr	r3, [pc, #700]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x2a8>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f846 	bl	8000b90 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff f842 	bl	8000b90 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e26c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b1a:	4ba5      	ldr	r3, [pc, #660]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x2d0>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d060      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_OscConfig+0x310>
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d119      	bne.n	8001b76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d116      	bne.n	8001b76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b48:	4b99      	ldr	r3, [pc, #612]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_OscConfig+0x328>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e249      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b93      	ldr	r3, [pc, #588]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	4990      	ldr	r1, [pc, #576]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b74:	e040      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d023      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7e:	4b8c      	ldr	r3, [pc, #560]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a8b      	ldr	r2, [pc, #556]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8a:	f7ff f801 	bl	8000b90 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b92:	f7fe fffd 	bl	8000b90 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e227      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba4:	4b82      	ldr	r3, [pc, #520]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb0:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	061b      	lsls	r3, r3, #24
 8001bbe:	497c      	ldr	r1, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e018      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc6:	4b7a      	ldr	r3, [pc, #488]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a79      	ldr	r2, [pc, #484]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7fe ffdd 	bl	8000b90 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bda:	f7fe ffd9 	bl	8000b90 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e203      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bec:	4b70      	ldr	r3, [pc, #448]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d03c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0c:	4b68      	ldr	r3, [pc, #416]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c12:	4a67      	ldr	r2, [pc, #412]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7fe ffb8 	bl	8000b90 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7fe ffb4 	bl	8000b90 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1de      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c36:	4b5e      	ldr	r3, [pc, #376]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ef      	beq.n	8001c24 <HAL_RCC_OscConfig+0x3ec>
 8001c44:	e01b      	b.n	8001c7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c46:	4b5a      	ldr	r3, [pc, #360]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4c:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7fe ff9b 	bl	8000b90 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5e:	f7fe ff97 	bl	8000b90 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1c1      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c70:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ef      	bne.n	8001c5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80a6 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c90:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	4a43      	ldr	r2, [pc, #268]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca8:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb8:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <HAL_RCC_OscConfig+0x57c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d118      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_OscConfig+0x57c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3a      	ldr	r2, [pc, #232]	; (8001db4 <HAL_RCC_OscConfig+0x57c>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd0:	f7fe ff5e 	bl	8000b90 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7fe ff5a 	bl	8000b90 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e184      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cea:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <HAL_RCC_OscConfig+0x57c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d108      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4d8>
 8001cfe:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d04:	4a2a      	ldr	r2, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d0e:	e024      	b.n	8001d5a <HAL_RCC_OscConfig+0x522>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d110      	bne.n	8001d3a <HAL_RCC_OscConfig+0x502>
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d28:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	4a20      	ldr	r2, [pc, #128]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d38:	e00f      	b.n	8001d5a <HAL_RCC_OscConfig+0x522>
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d40:	4a1b      	ldr	r2, [pc, #108]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d52:	f023 0304 	bic.w	r3, r3, #4
 8001d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d016      	beq.n	8001d90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7fe ff15 	bl	8000b90 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe ff11 	bl	8000b90 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e139      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_RCC_OscConfig+0x578>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0ed      	beq.n	8001d6a <HAL_RCC_OscConfig+0x532>
 8001d8e:	e01a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d90:	f7fe fefe 	bl	8000b90 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d96:	e00f      	b.n	8001db8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7fe fefa 	bl	8000b90 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d906      	bls.n	8001db8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e122      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db8:	4b90      	ldr	r3, [pc, #576]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1e8      	bne.n	8001d98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d105      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dcc:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8108 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	f040 80d0 	bne.w	8001f8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dec:	4b83      	ldr	r3, [pc, #524]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d130      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d127      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d11f      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e2c:	2a07      	cmp	r2, #7
 8001e2e:	bf14      	ite	ne
 8001e30:	2201      	movne	r2, #1
 8001e32:	2200      	moveq	r2, #0
 8001e34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d113      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d109      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d06e      	beq.n	8001f40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	d069      	beq.n	8001f3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e68:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e74:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0b7      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e84:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a5c      	ldr	r2, [pc, #368]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e90:	f7fe fe7e 	bl	8000b90 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7fe fe7a 	bl	8000b90 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e0a4      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eaa:	4b54      	ldr	r3, [pc, #336]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb6:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	4b51      	ldr	r3, [pc, #324]	; (8002000 <HAL_RCC_OscConfig+0x7c8>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ec6:	3a01      	subs	r2, #1
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	4311      	orrs	r1, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ed0:	0212      	lsls	r2, r2, #8
 8001ed2:	4311      	orrs	r1, r2
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ed8:	0852      	lsrs	r2, r2, #1
 8001eda:	3a01      	subs	r2, #1
 8001edc:	0552      	lsls	r2, r2, #21
 8001ede:	4311      	orrs	r1, r2
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ee4:	0852      	lsrs	r2, r2, #1
 8001ee6:	3a01      	subs	r2, #1
 8001ee8:	0652      	lsls	r2, r2, #25
 8001eea:	4311      	orrs	r1, r2
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ef0:	0912      	lsrs	r2, r2, #4
 8001ef2:	0452      	lsls	r2, r2, #17
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	4941      	ldr	r1, [pc, #260]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a3e      	ldr	r2, [pc, #248]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f08:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f14:	f7fe fe3c 	bl	8000b90 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe fe38 	bl	8000b90 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e062      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f3a:	e05a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e059      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d152      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4a27      	ldr	r2, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f64:	f7fe fe14 	bl	8000b90 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6c:	f7fe fe10 	bl	8000b90 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e03a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7e:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x734>
 8001f8a:	e032      	b.n	8001ff2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2b0c      	cmp	r3, #12
 8001f90:	d02d      	beq.n	8001fee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001f98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001faa:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001fb0:	f023 0303 	bic.w	r3, r3, #3
 8001fb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001fbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fde3 	bl	8000b90 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe fddf 	bl	8000b90 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e009      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_OscConfig+0x7c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x796>
 8001fec:	e001      	b.n	8001ff2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	f99d808c 	.word	0xf99d808c

08002004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0c8      	b.n	80021aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_RCC_ClockConfig+0x1b0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4961      	ldr	r1, [pc, #388]	; (80021b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b5f      	ldr	r3, [pc, #380]	; (80021b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b0      	b.n	80021aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d04c      	beq.n	80020ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d107      	bne.n	800206c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205c:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d121      	bne.n	80020ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e09e      	b.n	80021aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d107      	bne.n	8002084 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d115      	bne.n	80020ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e092      	b.n	80021aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800208c:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d109      	bne.n	80020ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e086      	b.n	80021aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e07e      	b.n	80021aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020ac:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 0203 	bic.w	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	493f      	ldr	r1, [pc, #252]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020be:	f7fe fd67 	bl	8000b90 <HAL_GetTick>
 80020c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c6:	f7fe fd63 	bl	8000b90 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e066      	b.n	80021aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020dc:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 020c 	and.w	r2, r3, #12
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d1eb      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d008      	beq.n	800210c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	492c      	ldr	r1, [pc, #176]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_RCC_ClockConfig+0x1b0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d210      	bcs.n	800213c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <HAL_RCC_ClockConfig+0x1b0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4924      	ldr	r1, [pc, #144]	; (80021b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_RCC_ClockConfig+0x1b0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e036      	b.n	80021aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4918      	ldr	r1, [pc, #96]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4910      	ldr	r1, [pc, #64]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800217a:	f000 f825 	bl	80021c8 <HAL_RCC_GetSysClockFreq>
 800217e:	4601      	mov	r1, r0
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	fa21 f303 	lsr.w	r3, r1, r3
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fbcc 	bl	800093c <HAL_InitTick>
 80021a4:	4603      	mov	r3, r0
 80021a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80021a8:	7afb      	ldrb	r3, [r7, #11]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40022000 	.word	0x40022000
 80021b8:	40021000 	.word	0x40021000
 80021bc:	0800b3b8 	.word	0x0800b3b8
 80021c0:	20000000 	.word	0x20000000
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_GetSysClockFreq+0x104>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e0:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_RCC_GetSysClockFreq+0x104>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x34>
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d121      	bne.n	800223a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d11e      	bne.n	800223a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021fc:	4b33      	ldr	r3, [pc, #204]	; (80022cc <HAL_RCC_GetSysClockFreq+0x104>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002208:	4b30      	ldr	r3, [pc, #192]	; (80022cc <HAL_RCC_GetSysClockFreq+0x104>)
 800220a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	e005      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002218:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <HAL_RCC_GetSysClockFreq+0x104>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10d      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d102      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	e004      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b08      	cmp	r3, #8
 800224a:	d101      	bne.n	8002250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800224e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d133      	bne.n	80022be <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <HAL_RCC_GetSysClockFreq+0x104>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d002      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0xa4>
 8002266:	2b03      	cmp	r3, #3
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0xaa>
 800226a:	e005      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800226e:	617b      	str	r3, [r7, #20]
      break;
 8002270:	e005      	b.n	800227e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002274:	617b      	str	r3, [r7, #20]
      break;
 8002276:	e002      	b.n	800227e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	617b      	str	r3, [r7, #20]
      break;
 800227c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_RCC_GetSysClockFreq+0x104>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	091b      	lsrs	r3, r3, #4
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	3301      	adds	r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_RCC_GetSysClockFreq+0x104>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	fb02 f203 	mul.w	r2, r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_RCC_GetSysClockFreq+0x104>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	0e5b      	lsrs	r3, r3, #25
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	3301      	adds	r3, #1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022b4:	697a      	ldr	r2, [r7, #20]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022bc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022be:	69bb      	ldr	r3, [r7, #24]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	40021000 	.word	0x40021000
 80022d0:	0800b3d0 	.word	0x0800b3d0
 80022d4:	00f42400 	.word	0x00f42400
 80022d8:	007a1200 	.word	0x007a1200

080022dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000000 	.word	0x20000000

080022f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022f8:	f7ff fff0 	bl	80022dc <HAL_RCC_GetHCLKFreq>
 80022fc:	4601      	mov	r1, r0
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0adb      	lsrs	r3, r3, #11
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_RCC_GetPCLK2Freq+0x28>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	0800b3c8 	.word	0x0800b3c8

08002320 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	220f      	movs	r2, #15
 800232e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_RCC_GetClockConfig+0x5c>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800233c:	4b0f      	ldr	r3, [pc, #60]	; (800237c <HAL_RCC_GetClockConfig+0x5c>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <HAL_RCC_GetClockConfig+0x5c>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_GetClockConfig+0x5c>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	08db      	lsrs	r3, r3, #3
 800235a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_RCC_GetClockConfig+0x60>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0207 	and.w	r2, r3, #7
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	601a      	str	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40021000 	.word	0x40021000
 8002380:	40022000 	.word	0x40022000

08002384 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002390:	4b2a      	ldr	r3, [pc, #168]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800239c:	f7ff f9e8 	bl	8001770 <HAL_PWREx_GetVoltageRange>
 80023a0:	6178      	str	r0, [r7, #20]
 80023a2:	e014      	b.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	4a24      	ldr	r2, [pc, #144]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6593      	str	r3, [r2, #88]	; 0x58
 80023b0:	4b22      	ldr	r3, [pc, #136]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023bc:	f7ff f9d8 	bl	8001770 <HAL_PWREx_GetVoltageRange>
 80023c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	4a1d      	ldr	r2, [pc, #116]	; (800243c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d4:	d10b      	bne.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b80      	cmp	r3, #128	; 0x80
 80023da:	d919      	bls.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2ba0      	cmp	r3, #160	; 0xa0
 80023e0:	d902      	bls.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023e2:	2302      	movs	r3, #2
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	e013      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e8:	2301      	movs	r3, #1
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	e010      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b80      	cmp	r3, #128	; 0x80
 80023f2:	d902      	bls.n	80023fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023f4:	2303      	movs	r3, #3
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	e00a      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d102      	bne.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002400:	2302      	movs	r3, #2
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e004      	b.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b70      	cmp	r3, #112	; 0x70
 800240a:	d101      	bne.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800240c:	2301      	movs	r3, #1
 800240e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 0207 	bic.w	r2, r3, #7
 8002418:	4909      	ldr	r1, [pc, #36]	; (8002440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002420:	4b07      	ldr	r3, [pc, #28]	; (8002440 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	40022000 	.word	0x40022000

08002444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800244c:	2300      	movs	r3, #0
 800244e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002450:	2300      	movs	r3, #0
 8002452:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800245c:	2b00      	cmp	r3, #0
 800245e:	d03f      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002468:	d01c      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800246a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246e:	d802      	bhi.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00e      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002474:	e01f      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800247a:	d003      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800247c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002480:	d01c      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002482:	e018      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002484:	4b85      	ldr	r3, [pc, #532]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a84      	ldr	r2, [pc, #528]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002490:	e015      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fab9 	bl	8002a10 <RCCEx_PLLSAI1_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024a2:	e00c      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3320      	adds	r3, #32
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fba0 	bl	8002bf0 <RCCEx_PLLSAI2_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b4:	e003      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	74fb      	strb	r3, [r7, #19]
      break;
 80024ba:	e000      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80024bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024be:	7cfb      	ldrb	r3, [r7, #19]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c4:	4b75      	ldr	r3, [pc, #468]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d2:	4972      	ldr	r1, [pc, #456]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024da:	e001      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03f      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f4:	d01c      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80024f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fa:	d802      	bhi.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00e      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002500:	e01f      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002506:	d003      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002508:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800250c:	d01c      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800250e:	e018      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002510:	4b62      	ldr	r3, [pc, #392]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a61      	ldr	r2, [pc, #388]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800251c:	e015      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3304      	adds	r3, #4
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fa73 	bl	8002a10 <RCCEx_PLLSAI1_Config>
 800252a:	4603      	mov	r3, r0
 800252c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800252e:	e00c      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3320      	adds	r3, #32
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fb5a 	bl	8002bf0 <RCCEx_PLLSAI2_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002540:	e003      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	74fb      	strb	r3, [r7, #19]
      break;
 8002546:	e000      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254a:	7cfb      	ldrb	r3, [r7, #19]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002550:	4b52      	ldr	r3, [pc, #328]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800255e:	494f      	ldr	r1, [pc, #316]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002566:	e001      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80a0 	beq.w	80026ba <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800258e:	2300      	movs	r3, #0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00d      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002598:	4a40      	ldr	r2, [pc, #256]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	6593      	str	r3, [r2, #88]	; 0x58
 80025a0:	4b3e      	ldr	r3, [pc, #248]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025b0:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a3a      	ldr	r2, [pc, #232]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025bc:	f7fe fae8 	bl	8000b90 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025c2:	e009      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c4:	f7fe fae4 	bl	8000b90 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d902      	bls.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	74fb      	strb	r3, [r7, #19]
        break;
 80025d6:	e005      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025d8:	4b31      	ldr	r3, [pc, #196]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ef      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d15c      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01f      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	d019      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002608:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002612:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	4a20      	ldr	r2, [pc, #128]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	4a1c      	ldr	r2, [pc, #112]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002634:	4a19      	ldr	r2, [pc, #100]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d016      	beq.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe faa3 	bl	8000b90 <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264c:	e00b      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fa9f 	bl	8000b90 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	f241 3288 	movw	r2, #5000	; 0x1388
 800265c:	4293      	cmp	r3, r2
 800265e:	d902      	bls.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	74fb      	strb	r3, [r7, #19]
            break;
 8002664:	e006      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ec      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10c      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268a:	4904      	ldr	r1, [pc, #16]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002692:	e009      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	74bb      	strb	r3, [r7, #18]
 8002698:	e006      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026a8:	7c7b      	ldrb	r3, [r7, #17]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d105      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ae:	4b9e      	ldr	r3, [pc, #632]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b2:	4a9d      	ldr	r2, [pc, #628]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026c6:	4b98      	ldr	r3, [pc, #608]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	f023 0203 	bic.w	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	4994      	ldr	r1, [pc, #592]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026e8:	4b8f      	ldr	r3, [pc, #572]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f023 020c 	bic.w	r2, r3, #12
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	498c      	ldr	r1, [pc, #560]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800270a:	4b87      	ldr	r3, [pc, #540]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	4983      	ldr	r1, [pc, #524]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800272c:	4b7e      	ldr	r3, [pc, #504]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	497b      	ldr	r1, [pc, #492]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275c:	4972      	ldr	r1, [pc, #456]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002770:	4b6d      	ldr	r3, [pc, #436]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	496a      	ldr	r1, [pc, #424]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002792:	4b65      	ldr	r3, [pc, #404]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	4961      	ldr	r1, [pc, #388]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027b4:	4b5c      	ldr	r3, [pc, #368]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	4959      	ldr	r1, [pc, #356]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d6:	4b54      	ldr	r3, [pc, #336]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e4:	4950      	ldr	r1, [pc, #320]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027f8:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	4948      	ldr	r1, [pc, #288]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800281a:	4b43      	ldr	r3, [pc, #268]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	493f      	ldr	r1, [pc, #252]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d028      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800283c:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800284a:	4937      	ldr	r1, [pc, #220]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002856:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800285a:	d106      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4a31      	ldr	r2, [pc, #196]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002866:	60d3      	str	r3, [r2, #12]
 8002868:	e011      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002872:	d10c      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3304      	adds	r3, #4
 8002878:	2101      	movs	r1, #1
 800287a:	4618      	mov	r0, r3
 800287c:	f000 f8c8 	bl	8002a10 <RCCEx_PLLSAI1_Config>
 8002880:	4603      	mov	r3, r0
 8002882:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800288a:	7cfb      	ldrb	r3, [r7, #19]
 800288c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d028      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800289a:	4b23      	ldr	r3, [pc, #140]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	491f      	ldr	r1, [pc, #124]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028b8:	d106      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028c4:	60d3      	str	r3, [r2, #12]
 80028c6:	e011      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 f899 	bl	8002a10 <RCCEx_PLLSAI1_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d02b      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002906:	4908      	ldr	r1, [pc, #32]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002916:	d109      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a02      	ldr	r2, [pc, #8]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800291e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002922:	60d3      	str	r3, [r2, #12]
 8002924:	e014      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002934:	d10c      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f867 	bl	8002a10 <RCCEx_PLLSAI1_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02f      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296a:	4928      	ldr	r1, [pc, #160]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800297a:	d10d      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	2102      	movs	r1, #2
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f844 	bl	8002a10 <RCCEx_PLLSAI1_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d014      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	74bb      	strb	r3, [r7, #18]
 8002996:	e011      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800299c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3320      	adds	r3, #32
 80029a6:	2102      	movs	r1, #2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f921 	bl	8002bf0 <RCCEx_PLLSAI2_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80029b8:	7cfb      	ldrb	r3, [r7, #19]
 80029ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029d6:	490d      	ldr	r1, [pc, #52]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029fa:	4904      	ldr	r1, [pc, #16]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a02:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000

08002a10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a1e:	4b73      	ldr	r3, [pc, #460]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d018      	beq.n	8002a5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a2a:	4b70      	ldr	r3, [pc, #448]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0203 	and.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d10d      	bne.n	8002a56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a42:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	091b      	lsrs	r3, r3, #4
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
       ||
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d044      	beq.n	8002ae0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e041      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d00c      	beq.n	8002a7e <RCCEx_PLLSAI1_Config+0x6e>
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d013      	beq.n	8002a90 <RCCEx_PLLSAI1_Config+0x80>
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d120      	bne.n	8002aae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a6c:	4b5f      	ldr	r3, [pc, #380]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d11d      	bne.n	8002ab4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a7c:	e01a      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a7e:	4b5b      	ldr	r3, [pc, #364]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8e:	e013      	b.n	8002ab8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a90:	4b56      	ldr	r3, [pc, #344]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a9c:	4b53      	ldr	r3, [pc, #332]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aac:	e006      	b.n	8002abc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab2:	e004      	b.n	8002abe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ab4:	bf00      	nop
 8002ab6:	e002      	b.n	8002abe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002ab8:	bf00      	nop
 8002aba:	e000      	b.n	8002abe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002abc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10d      	bne.n	8002ae0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ac4:	4b49      	ldr	r3, [pc, #292]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6819      	ldr	r1, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	4944      	ldr	r1, [pc, #272]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d17d      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ae6:	4b41      	ldr	r3, [pc, #260]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a40      	ldr	r2, [pc, #256]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af2:	f7fe f84d 	bl	8000b90 <HAL_GetTick>
 8002af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002af8:	e009      	b.n	8002b0e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002afa:	f7fe f849 	bl	8000b90 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d902      	bls.n	8002b0e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	73fb      	strb	r3, [r7, #15]
        break;
 8002b0c:	e005      	b.n	8002b1a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b0e:	4b37      	ldr	r3, [pc, #220]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1ef      	bne.n	8002afa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d160      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d111      	bne.n	8002b4a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6892      	ldr	r2, [r2, #8]
 8002b36:	0211      	lsls	r1, r2, #8
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68d2      	ldr	r2, [r2, #12]
 8002b3c:	0912      	lsrs	r2, r2, #4
 8002b3e:	0452      	lsls	r2, r2, #17
 8002b40:	430a      	orrs	r2, r1
 8002b42:	492a      	ldr	r1, [pc, #168]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	610b      	str	r3, [r1, #16]
 8002b48:	e027      	b.n	8002b9a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d112      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b50:	4b26      	ldr	r3, [pc, #152]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	0211      	lsls	r1, r2, #8
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6912      	ldr	r2, [r2, #16]
 8002b66:	0852      	lsrs	r2, r2, #1
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0552      	lsls	r2, r2, #21
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	491f      	ldr	r1, [pc, #124]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	610b      	str	r3, [r1, #16]
 8002b74:	e011      	b.n	8002b9a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b76:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6892      	ldr	r2, [r2, #8]
 8002b86:	0211      	lsls	r1, r2, #8
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6952      	ldr	r2, [r2, #20]
 8002b8c:	0852      	lsrs	r2, r2, #1
 8002b8e:	3a01      	subs	r2, #1
 8002b90:	0652      	lsls	r2, r2, #25
 8002b92:	430a      	orrs	r2, r1
 8002b94:	4915      	ldr	r1, [pc, #84]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b9a:	4b14      	ldr	r3, [pc, #80]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a13      	ldr	r2, [pc, #76]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ba4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7fd fff3 	bl	8000b90 <HAL_GetTick>
 8002baa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bac:	e009      	b.n	8002bc2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bae:	f7fd ffef 	bl	8000b90 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d902      	bls.n	8002bc2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	73fb      	strb	r3, [r7, #15]
          break;
 8002bc0:	e005      	b.n	8002bce <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ef      	beq.n	8002bae <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	4903      	ldr	r1, [pc, #12]	; (8002bec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000

08002bf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bfe:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d018      	beq.n	8002c3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0203 	and.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d10d      	bne.n	8002c36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c22:	4b5f      	ldr	r3, [pc, #380]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
       ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d044      	beq.n	8002cc0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
 8002c3a:	e041      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d00c      	beq.n	8002c5e <RCCEx_PLLSAI2_Config+0x6e>
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d013      	beq.n	8002c70 <RCCEx_PLLSAI2_Config+0x80>
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d120      	bne.n	8002c8e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c4c:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11d      	bne.n	8002c94 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c5c:	e01a      	b.n	8002c94 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c5e:	4b50      	ldr	r3, [pc, #320]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6e:	e013      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c70:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10f      	bne.n	8002c9c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c7c:	4b48      	ldr	r3, [pc, #288]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c8c:	e006      	b.n	8002c9c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
      break;
 8002c92:	e004      	b.n	8002c9e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c94:	bf00      	nop
 8002c96:	e002      	b.n	8002c9e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c98:	bf00      	nop
 8002c9a:	e000      	b.n	8002c9e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002c9c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ca4:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	4939      	ldr	r1, [pc, #228]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d167      	bne.n	8002d96 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002cc6:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a35      	ldr	r2, [pc, #212]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd2:	f7fd ff5d 	bl	8000b90 <HAL_GetTick>
 8002cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cd8:	e009      	b.n	8002cee <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cda:	f7fd ff59 	bl	8000b90 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d902      	bls.n	8002cee <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	73fb      	strb	r3, [r7, #15]
        break;
 8002cec:	e005      	b.n	8002cfa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cee:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ef      	bne.n	8002cda <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d14a      	bne.n	8002d96 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d111      	bne.n	8002d2a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6892      	ldr	r2, [r2, #8]
 8002d16:	0211      	lsls	r1, r2, #8
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68d2      	ldr	r2, [r2, #12]
 8002d1c:	0912      	lsrs	r2, r2, #4
 8002d1e:	0452      	lsls	r2, r2, #17
 8002d20:	430a      	orrs	r2, r1
 8002d22:	491f      	ldr	r1, [pc, #124]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	614b      	str	r3, [r1, #20]
 8002d28:	e011      	b.n	8002d4e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6892      	ldr	r2, [r2, #8]
 8002d3a:	0211      	lsls	r1, r2, #8
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6912      	ldr	r2, [r2, #16]
 8002d40:	0852      	lsrs	r2, r2, #1
 8002d42:	3a01      	subs	r2, #1
 8002d44:	0652      	lsls	r2, r2, #25
 8002d46:	430a      	orrs	r2, r1
 8002d48:	4915      	ldr	r1, [pc, #84]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a13      	ldr	r2, [pc, #76]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fd ff19 	bl	8000b90 <HAL_GetTick>
 8002d5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d60:	e009      	b.n	8002d76 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d62:	f7fd ff15 	bl	8000b90 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d902      	bls.n	8002d76 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	73fb      	strb	r3, [r7, #15]
          break;
 8002d74:	e005      	b.n	8002d82 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0ef      	beq.n	8002d62 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d8a:	695a      	ldr	r2, [r3, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e022      	b.n	8002dfc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fd fcdd 	bl	8000788 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f814 	bl	8002e04 <HAL_SD_InitCard>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00a      	b.n	8002dfc <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e04:	b5b0      	push	{r4, r5, r7, lr}
 8002e06:	b08e      	sub	sp, #56	; 0x38
 8002e08:	af04      	add	r7, sp, #16
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002e20:	2376      	movs	r3, #118	; 0x76
 8002e22:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681d      	ldr	r5, [r3, #0]
 8002e28:	466c      	mov	r4, sp
 8002e2a:	f107 0314 	add.w	r3, r7, #20
 8002e2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	f001 fcfb 	bl	8004838 <SDMMC_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e05f      	b.n	8002f14 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e62:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 fd30 	bl	80048ce <SDMMC_PowerState_ON>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e049      	b.n	8002f14 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e8e:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 ffb5 	bl	8003e00 <SD_PowerON>
 8002e96:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e02e      	b.n	8002f14 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fed4 	bl	8003c64 <SD_InitCard>
 8002ebc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e01b      	b.n	8002f14 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 fd85 	bl	80049f4 <SDMMC_CmdBlockLength>
 8002eea:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00f      	beq.n	8002f12 <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <HAL_SD_InitCard+0x118>)
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3728      	adds	r7, #40	; 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f1c:	004005ff 	.word	0x004005ff

08002f20 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	; 0x30
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0a9      	b.n	800309c <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	f040 80a2 	bne.w	800309a <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	441a      	add	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d907      	bls.n	8002f7a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e090      	b.n	800309c <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a45      	ldr	r2, [pc, #276]	; (80030a4 <HAL_SD_ReadBlocks_DMA+0x184>)
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a44      	ldr	r2, [pc, #272]	; (80030a8 <HAL_SD_ReadBlocks_DMA+0x188>)
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3380      	adds	r3, #128	; 0x80
 8002fac:	4619      	mov	r1, r3
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	025b      	lsls	r3, r3, #9
 8002fb4:	089b      	lsrs	r3, r3, #2
 8002fb6:	f7fe f845 	bl	8001044 <HAL_DMA_Start_IT>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00f      	beq.n	8002fe0 <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a39      	ldr	r2, [pc, #228]	; (80030ac <HAL_SD_ReadBlocks_DMA+0x18c>)
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e05d      	b.n	800309c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0208 	orr.w	r2, r2, #8
 8002fee:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d002      	beq.n	8002ffe <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	025b      	lsls	r3, r3, #9
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003002:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	025b      	lsls	r3, r3, #9
 8003008:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800300a:	2390      	movs	r3, #144	; 0x90
 800300c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800300e:	2302      	movs	r3, #2
 8003010:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003012:	2300      	movs	r3, #0
 8003014:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003016:	2301      	movs	r3, #1
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f107 0210 	add.w	r2, r7, #16
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f001 fcb9 	bl	800499c <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d90a      	bls.n	8003046 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2282      	movs	r2, #130	; 0x82
 8003034:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800303c:	4618      	mov	r0, r3
 800303e:	f001 fd1d 	bl	8004a7c <SDMMC_CmdReadMultiBlock>
 8003042:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003044:	e009      	b.n	800305a <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2281      	movs	r2, #129	; 0x81
 800304a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003052:	4618      	mov	r0, r3
 8003054:	f001 fcf0 	bl	8004a38 <SDMMC_CmdReadSingleBlock>
 8003058:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d012      	beq.n	8003086 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a11      	ldr	r2, [pc, #68]	; (80030ac <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	431a      	orrs	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e00a      	b.n	800309c <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003094:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3730      	adds	r7, #48	; 0x30
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	08003a7f 	.word	0x08003a7f
 80030a8:	08003af1 	.word	0x08003af1
 80030ac:	004005ff 	.word	0x004005ff

080030b0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08c      	sub	sp, #48	; 0x30
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0ac      	b.n	8003232 <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	f040 80a5 	bne.w	8003230 <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	441a      	add	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d907      	bls.n	800310a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e093      	b.n	8003232 <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2203      	movs	r2, #3
 800310e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2200      	movs	r2, #0
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311e:	4a47      	ldr	r2, [pc, #284]	; (800323c <HAL_SD_WriteBlocks_DMA+0x18c>)
 8003120:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003126:	4a46      	ldr	r2, [pc, #280]	; (8003240 <HAL_SD_WriteBlocks_DMA+0x190>)
 8003128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312e:	2200      	movs	r2, #0
 8003130:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	2b01      	cmp	r3, #1
 8003138:	d002      	beq.n	8003140 <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	025b      	lsls	r3, r3, #9
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d90a      	bls.n	800315c <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	22a0      	movs	r2, #160	; 0xa0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003152:	4618      	mov	r0, r3
 8003154:	f001 fcd6 	bl	8004b04 <SDMMC_CmdWriteMultiBlock>
 8003158:	62f8      	str	r0, [r7, #44]	; 0x2c
 800315a:	e009      	b.n	8003170 <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2290      	movs	r2, #144	; 0x90
 8003160:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003168:	4618      	mov	r0, r3
 800316a:	f001 fca9 	bl	8004ac0 <SDMMC_CmdWriteSingleBlock>
 800316e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d012      	beq.n	800319c <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a32      	ldr	r2, [pc, #200]	; (8003244 <HAL_SD_WriteBlocks_DMA+0x194>)
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e04a      	b.n	8003232 <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0208 	orr.w	r2, r2, #8
 80031aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3380      	adds	r3, #128	; 0x80
 80031b8:	461a      	mov	r2, r3
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	025b      	lsls	r3, r3, #9
 80031be:	089b      	lsrs	r3, r3, #2
 80031c0:	f7fd ff40 	bl	8001044 <HAL_DMA_Start_IT>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d012      	beq.n	80031f0 <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <HAL_SD_WriteBlocks_DMA+0x194>)
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e020      	b.n	8003232 <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	025b      	lsls	r3, r3, #9
 80031fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80031fc:	2390      	movs	r3, #144	; 0x90
 80031fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003204:	2300      	movs	r3, #0
 8003206:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003208:	2301      	movs	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f107 0210 	add.w	r2, r7, #16
 8003214:	4611      	mov	r1, r2
 8003216:	4618      	mov	r0, r3
 8003218:	f001 fbc0 	bl	800499c <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 021a 	orr.w	r2, r2, #26
 800322a:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	e000      	b.n	8003232 <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003230:	2302      	movs	r3, #2
  }
}
 8003232:	4618      	mov	r0, r3
 8003234:	3730      	adds	r7, #48	; 0x30
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	08003a55 	.word	0x08003a55
 8003240:	08003af1 	.word	0x08003af1
 8003244:	004005ff 	.word	0x004005ff

08003248 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_SD_IRQHandler+0x2e>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 ffdc 	bl	800422c <SD_Read_IT>
 8003274:	e155      	b.n	8003522 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 808f 	beq.w	80033a4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800328e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800329e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80032a2:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d039      	beq.n	8003332 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d104      	bne.n	80032d2 <HAL_SD_IRQHandler+0x8a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d011      	beq.n	80032f6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fc36 	bl	8004b48 <SDMMC_CmdStopTransfer>
 80032dc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f91f 	bl	8003534 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d104      	bne.n	8003322 <HAL_SD_IRQHandler+0xda>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f002 f81c 	bl	8005360 <HAL_SD_RxCpltCallback>
 8003328:	e0fb      	b.n	8003522 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f002 f80e 	bl	800534c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8003330:	e0f7      	b.n	8003522 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80f2 	beq.w	8003522 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d011      	beq.n	800336c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fbfb 	bl	8004b48 <SDMMC_CmdStopTransfer>
 8003352:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8e4 	bl	8003534 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 80d5 	bne.w	8003522 <HAL_SD_IRQHandler+0x2da>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 80cf 	bne.w	8003522 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0208 	bic.w	r2, r2, #8
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f001 ffd5 	bl	800534c <HAL_SD_TxCpltCallback>
}
 80033a2:	e0be      	b.n	8003522 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d008      	beq.n	80033c4 <HAL_SD_IRQHandler+0x17c>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 ff86 	bl	80042ce <SD_Write_IT>
 80033c2:	e0ae      	b.n	8003522 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 80a7 	beq.w	8003522 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	f043 0202 	orr.w	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	f043 0208 	orr.w	r2, r3, #8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d005      	beq.n	8003422 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	f043 0220 	orr.w	r2, r3, #32
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	f043 0210 	orr.w	r2, r3, #16
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f240 523a 	movw	r2, #1338	; 0x53a
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003454:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f001 fb74 	bl	8004b48 <SDMMC_CmdStopTransfer>
 8003460:	4602      	mov	r2, r0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 f855 	bl	8003534 <HAL_SD_ErrorCallback>
}
 800348a:	e04a      	b.n	8003522 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d045      	beq.n	8003522 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <HAL_SD_IRQHandler+0x262>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d011      	beq.n	80034ce <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_SD_IRQHandler+0x2e4>)
 80034b0:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fe62 	bl	8001180 <HAL_DMA_Abort_IT>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d02f      	beq.n	8003522 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fb5e 	bl	8003b88 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80034cc:	e029      	b.n	8003522 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d104      	bne.n	80034e2 <HAL_SD_IRQHandler+0x29a>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d011      	beq.n	8003506 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <HAL_SD_IRQHandler+0x2e8>)
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fe46 	bl	8001180 <HAL_DMA_Abort_IT>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fb79 	bl	8003bf6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003504:	e00d      	b.n	8003522 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f001 ff0c 	bl	8005338 <HAL_SD_AbortCallback>
}
 8003520:	e7ff      	b.n	8003522 <HAL_SD_IRQHandler+0x2da>
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	08003b89 	.word	0x08003b89
 8003530:	08003bf7 	.word	0x08003bf7

08003534 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003556:	0f9b      	lsrs	r3, r3, #30
 8003558:	b2da      	uxtb	r2, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	b2da      	uxtb	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003574:	0e1b      	lsrs	r3, r3, #24
 8003576:	b2db      	uxtb	r3, r3
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	b2da      	uxtb	r2, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003586:	0c1b      	lsrs	r3, r3, #16
 8003588:	b2da      	uxtb	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	b2da      	uxtb	r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035a8:	0d1b      	lsrs	r3, r3, #20
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c6:	0bdb      	lsrs	r3, r3, #15
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035d8:	0b9b      	lsrs	r3, r3, #14
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f003 0301 	and.w	r3, r3, #1
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ea:	0b5b      	lsrs	r3, r3, #13
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035fc:	0b1b      	lsrs	r3, r3, #12
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	b2da      	uxtb	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2200      	movs	r2, #0
 800360e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	2b00      	cmp	r3, #0
 8003616:	d163      	bne.n	80036e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003622:	4013      	ands	r3, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003628:	0f92      	lsrs	r2, r2, #30
 800362a:	431a      	orrs	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003634:	0edb      	lsrs	r3, r3, #27
 8003636:	b2db      	uxtb	r3, r3
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	b2da      	uxtb	r2, r3
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003646:	0e1b      	lsrs	r3, r3, #24
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	b2da      	uxtb	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003658:	0d5b      	lsrs	r3, r3, #21
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	b2da      	uxtb	r2, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800366a:	0c9b      	lsrs	r3, r3, #18
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	b2da      	uxtb	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367c:	0bdb      	lsrs	r3, r3, #15
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	b2da      	uxtb	r2, r3
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	7e1b      	ldrb	r3, [r3, #24]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	3302      	adds	r3, #2
 80036a0:	2201      	movs	r2, #1
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036aa:	fb02 f203 	mul.w	r2, r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	7a1b      	ldrb	r3, [r3, #8]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	2201      	movs	r2, #1
 80036be:	409a      	lsls	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80036cc:	0a52      	lsrs	r2, r2, #9
 80036ce:	fb02 f203 	mul.w	r2, r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036dc:	661a      	str	r2, [r3, #96]	; 0x60
 80036de:	e031      	b.n	8003744 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d11d      	bne.n	8003724 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ec:	041b      	lsls	r3, r3, #16
 80036ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	431a      	orrs	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	3301      	adds	r3, #1
 8003704:	029a      	lsls	r2, r3, #10
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003718:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	661a      	str	r2, [r3, #96]	; 0x60
 8003722:	e00f      	b.n	8003744 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a58      	ldr	r2, [pc, #352]	; (800388c <HAL_SD_GetCardCSD+0x344>)
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e09d      	b.n	8003880 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003748:	0b9b      	lsrs	r3, r3, #14
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	b2da      	uxtb	r2, r3
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375a:	09db      	lsrs	r3, r3, #7
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003762:	b2da      	uxtb	r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003772:	b2da      	uxtb	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	0fdb      	lsrs	r3, r3, #31
 800377e:	b2da      	uxtb	r2, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003788:	0f5b      	lsrs	r3, r3, #29
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 0303 	and.w	r3, r3, #3
 8003790:	b2da      	uxtb	r2, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	0e9b      	lsrs	r3, r3, #26
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	0d9b      	lsrs	r3, r3, #22
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	0d5b      	lsrs	r3, r3, #21
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	0c1b      	lsrs	r3, r3, #16
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	0bdb      	lsrs	r3, r3, #15
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	0b9b      	lsrs	r3, r3, #14
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	b2da      	uxtb	r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	0b5b      	lsrs	r3, r3, #13
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	b2da      	uxtb	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	0b1b      	lsrs	r3, r3, #12
 800382c:	b2db      	uxtb	r3, r3
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	b2da      	uxtb	r2, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	0a9b      	lsrs	r3, r3, #10
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	b2da      	uxtb	r2, r3
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	b2da      	uxtb	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800386e:	b2da      	uxtb	r2, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	004005ff 	.word	0x004005ff

08003890 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80038e8:	b5b0      	push	{r4, r5, r7, lr}
 80038ea:	b08e      	sub	sp, #56	; 0x38
 80038ec:	af04      	add	r7, sp, #16
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2203      	movs	r2, #3
 80038fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	2b03      	cmp	r3, #3
 8003906:	d02e      	beq.n	8003966 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390e:	d106      	bne.n	800391e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	639a      	str	r2, [r3, #56]	; 0x38
 800391c:	e029      	b.n	8003972 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003924:	d10a      	bne.n	800393c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fb20 	bl	8003f6c <SD_WideBus_Enable>
 800392c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
 800393a:	e01a      	b.n	8003972 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fb5d 	bl	8004002 <SD_WideBus_Disable>
 8003948:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
 8003956:	e00c      	b.n	8003972 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
 8003964:	e005      	b.n	8003972 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <HAL_SD_ConfigWideBusOperation+0x128>)
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003988:	e01f      	b.n	80039ca <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681d      	ldr	r5, [r3, #0]
 80039b0:	466c      	mov	r4, sp
 80039b2:	f107 0314 	add.w	r3, r7, #20
 80039b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80039ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039c4:	4628      	mov	r0, r5
 80039c6:	f000 ff37 	bl	8004838 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 f80e 	bl	80049f4 <SDMMC_CmdBlockLength>
 80039d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <HAL_SD_ConfigWideBusOperation+0x128>)
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3728      	adds	r7, #40	; 0x28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	004005ff 	.word	0x004005ff

08003a14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fa78 	bl	8003f1c <SD_SendStatus>
 8003a2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	0a5b      	lsrs	r3, r3, #9
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003a4a:	693b      	ldr	r3, [r7, #16]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	2b82      	cmp	r3, #130	; 0x82
 8003a92:	d111      	bne.n	8003ab8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f855 	bl	8004b48 <SDMMC_CmdStopTransfer>
 8003a9e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff fd3e 	bl	8003534 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0208 	bic.w	r2, r2, #8
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f001 fc3d 	bl	8005360 <HAL_SD_RxCpltCallback>
#endif
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b04:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0c:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d002      	beq.n	8003b1a <SD_DMAError+0x2a>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d12d      	bne.n	8003b76 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <SD_DMAError+0x94>)
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8003b3e:	6978      	ldr	r0, [r7, #20]
 8003b40:	f7ff ff68 	bl	8003a14 <HAL_SD_GetCardState>
 8003b44:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d002      	beq.n	8003b52 <SD_DMAError+0x62>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b05      	cmp	r3, #5
 8003b50:	d10a      	bne.n	8003b68 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fff6 	bl	8004b48 <SDMMC_CmdStopTransfer>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	431a      	orrs	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8003b76:	6978      	ldr	r0, [r7, #20]
 8003b78:	f7ff fcdc 	bl	8003534 <HAL_SD_ErrorCallback>
#endif
}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	004005ff 	.word	0x004005ff

08003b88 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f7ff ff37 	bl	8003a14 <HAL_SD_GetCardState>
 8003ba6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b06      	cmp	r3, #6
 8003bba:	d002      	beq.n	8003bc2 <SD_DMATxAbort+0x3a>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b05      	cmp	r3, #5
 8003bc0:	d10a      	bne.n	8003bd8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 ffbe 	bl	8004b48 <SDMMC_CmdStopTransfer>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f001 fba9 	bl	8005338 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003be6:	e002      	b.n	8003bee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff fca3 	bl	8003534 <HAL_SD_ErrorCallback>
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff ff00 	bl	8003a14 <HAL_SD_GetCardState>
 8003c14:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d002      	beq.n	8003c30 <SD_DMARxAbort+0x3a>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b05      	cmp	r3, #5
 8003c2e:	d10a      	bne.n	8003c46 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 ff87 	bl	8004b48 <SDMMC_CmdStopTransfer>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	431a      	orrs	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f001 fb72 	bl	8005338 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003c54:	e002      	b.n	8003c5c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f7ff fc6c 	bl	8003534 <HAL_SD_ErrorCallback>
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c64:	b5b0      	push	{r4, r5, r7, lr}
 8003c66:	b094      	sub	sp, #80	; 0x50
 8003c68:	af04      	add	r7, sp, #16
 8003c6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fe39 	bl	80048ec <SDMMC_GetPowerState>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003c80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c84:	e0b7      	b.n	8003df6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d02f      	beq.n	8003cee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 f862 	bl	8004d5c <SDMMC_CmdSendCID>
 8003c98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <SD_InitCard+0x40>
    {
      return errorstate;
 8003ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca2:	e0a8      	b.n	8003df6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fe63 	bl	8004976 <SDMMC_GetResponse>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2104      	movs	r1, #4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fe5a 	bl	8004976 <SDMMC_GetResponse>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2108      	movs	r1, #8
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f000 fe51 	bl	8004976 <SDMMC_GetResponse>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	210c      	movs	r1, #12
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fe48 	bl	8004976 <SDMMC_GetResponse>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d00d      	beq.n	8003d12 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f107 020e 	add.w	r2, r7, #14
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f001 f868 	bl	8004dd6 <SDMMC_CmdSetRelAdd>
 8003d06:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <SD_InitCard+0xae>
    {
      return errorstate;
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d10:	e071      	b.n	8003df6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d036      	beq.n	8003d88 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003d1a:	89fb      	ldrh	r3, [r7, #14]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2a:	041b      	lsls	r3, r3, #16
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4610      	mov	r0, r2
 8003d30:	f001 f832 	bl	8004d98 <SDMMC_CmdSendCSD>
 8003d34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3e:	e05a      	b.n	8003df6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fe15 	bl	8004976 <SDMMC_GetResponse>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2104      	movs	r1, #4
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 fe0c 	bl	8004976 <SDMMC_GetResponse>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2108      	movs	r1, #8
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fe03 	bl	8004976 <SDMMC_GetResponse>
 8003d70:	4602      	mov	r2, r0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	210c      	movs	r1, #12
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fdfa 	bl	8004976 <SDMMC_GetResponse>
 8003d82:	4602      	mov	r2, r0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2104      	movs	r1, #4
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fdf1 	bl	8004976 <SDMMC_GetResponse>
 8003d94:	4603      	mov	r3, r0
 8003d96:	0d1a      	lsrs	r2, r3, #20
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003d9c:	f107 0310 	add.w	r3, r7, #16
 8003da0:	4619      	mov	r1, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7ff fbd0 	bl	8003548 <HAL_SD_GetCardCSD>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003dae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003db2:	e020      	b.n	8003df6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6819      	ldr	r1, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	f04f 0400 	mov.w	r4, #0
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4623      	mov	r3, r4
 8003dc6:	4608      	mov	r0, r1
 8003dc8:	f000 fee0 	bl	8004b8c <SDMMC_CmdSelDesel>
 8003dcc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <SD_InitCard+0x174>
  {
    return errorstate;
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd6:	e00e      	b.n	8003df6 <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681d      	ldr	r5, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	466c      	mov	r4, sp
 8003de0:	f103 0210 	add.w	r2, r3, #16
 8003de4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003de6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003dea:	3304      	adds	r3, #4
 8003dec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dee:	4628      	mov	r0, r5
 8003df0:	f000 fd22 	bl	8004838 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3740      	adds	r7, #64	; 0x40
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	2300      	movs	r3, #0
 8003e12:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 feda 	bl	8004bd2 <SDMMC_CmdGoIdleState>
 8003e1e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	e072      	b.n	8003f10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 feed 	bl	8004c0e <SDMMC_CmdOperCond>
 8003e34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00d      	beq.n	8003e58 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fec3 	bl	8004bd2 <SDMMC_CmdGoIdleState>
 8003e4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <SD_PowerON+0x5e>
    {
      return errorstate;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	e05b      	b.n	8003f10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d137      	bne.n	8003ed6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 feed 	bl	8004c4c <SDMMC_CmdAppCommand>
 8003e72:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d02d      	beq.n	8003ed6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e7e:	e047      	b.n	8003f10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2100      	movs	r1, #0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fee0 	bl	8004c4c <SDMMC_CmdAppCommand>
 8003e8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <SD_PowerON+0x98>
    {
      return errorstate;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	e03b      	b.n	8003f10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	491e      	ldr	r1, [pc, #120]	; (8003f18 <SD_PowerON+0x118>)
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fef6 	bl	8004c90 <SDMMC_CmdAppOperCommand>
 8003ea4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003eac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003eb0:	e02e      	b.n	8003f10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fd5c 	bl	8004976 <SDMMC_GetResponse>
 8003ebe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	0fdb      	lsrs	r3, r3, #31
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <SD_PowerON+0xcc>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <SD_PowerON+0xce>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]

    count++;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d802      	bhi.n	8003ee6 <SD_PowerON+0xe6>
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0cc      	beq.n	8003e80 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d902      	bls.n	8003ef6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003ef0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ef4:	e00c      	b.n	8003f10 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
 8003f06:	e002      	b.n	8003f0e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	c1100000 	.word	0xc1100000

08003f1c <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003f2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f30:	e018      	b.n	8003f64 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f000 ff6a 	bl	8004e18 <SDMMC_CmdSendStatus>
 8003f44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	e009      	b.n	8003f64 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fd0d 	bl	8004976 <SDMMC_GetResponse>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8003f74:	2300      	movs	r3, #0
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fcf7 	bl	8004976 <SDMMC_GetResponse>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f92:	d102      	bne.n	8003f9a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003f94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f98:	e02f      	b.n	8003ffa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003f9a:	f107 030c 	add.w	r3, r7, #12
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f879 	bl	8004098 <SD_FindSCR>
 8003fa6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	e023      	b.n	8003ffa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01c      	beq.n	8003ff6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4610      	mov	r0, r2
 8003fca:	f000 fe3f 	bl	8004c4c <SDMMC_CmdAppCommand>
 8003fce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	e00f      	b.n	8003ffa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2102      	movs	r1, #2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fe78 	bl	8004cd6 <SDMMC_CmdBusWidth>
 8003fe6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	e003      	b.n	8003ffa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e001      	b.n	8003ffa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003ff6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fcac 	bl	8004976 <SDMMC_GetResponse>
 800401e:	4603      	mov	r3, r0
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004028:	d102      	bne.n	8004030 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800402a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800402e:	e02f      	b.n	8004090 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004030:	f107 030c 	add.w	r3, r7, #12
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f82e 	bl	8004098 <SD_FindSCR>
 800403c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	e023      	b.n	8004090 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01c      	beq.n	800408c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 fdf4 	bl	8004c4c <SDMMC_CmdAppCommand>
 8004064:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	e00f      	b.n	8004090 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fe2d 	bl	8004cd6 <SDMMC_CmdBusWidth>
 800407c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	e003      	b.n	8004090 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004088:	2300      	movs	r3, #0
 800408a:	e001      	b.n	8004090 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800408c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b08f      	sub	sp, #60	; 0x3c
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80040a2:	f7fc fd75 	bl	8000b90 <HAL_GetTick>
 80040a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80040ac:	2300      	movs	r3, #0
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2108      	movs	r1, #8
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fc98 	bl	80049f4 <SDMMC_CmdBlockLength>
 80040c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	e0a9      	b.n	8004224 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f000 fdb5 	bl	8004c4c <SDMMC_CmdAppCommand>
 80040e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	e09a      	b.n	8004224 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80040ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80040f4:	2308      	movs	r3, #8
 80040f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80040f8:	2330      	movs	r3, #48	; 0x30
 80040fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80040fc:	2302      	movs	r3, #2
 80040fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004100:	2300      	movs	r3, #0
 8004102:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004104:	2301      	movs	r3, #1
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f107 0210 	add.w	r2, r7, #16
 8004110:	4611      	mov	r1, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fc42 	bl	800499c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fdfc 	bl	8004d1a <SDMMC_CmdSendSCR>
 8004122:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b00      	cmp	r3, #0
 8004128:	d022      	beq.n	8004170 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	e07a      	b.n	8004224 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00e      	beq.n	800415a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	f107 0208 	add.w	r2, r7, #8
 8004148:	18d4      	adds	r4, r2, r3
 800414a:	4608      	mov	r0, r1
 800414c:	f000 fba1 	bl	8004892 <SDMMC_ReadFIFO>
 8004150:	4603      	mov	r3, r0
 8004152:	6023      	str	r3, [r4, #0]
      index++;
 8004154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004156:	3301      	adds	r3, #1
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800415a:	f7fc fd19 	bl	8000b90 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004168:	d102      	bne.n	8004170 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800416a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800416e:	e059      	b.n	8004224 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004176:	f240 432a 	movw	r3, #1066	; 0x42a
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0d6      	beq.n	800412e <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2208      	movs	r2, #8
 8004194:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004196:	2308      	movs	r3, #8
 8004198:	e044      	b.n	8004224 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2202      	movs	r2, #2
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80041b0:	2302      	movs	r3, #2
 80041b2:	e037      	b.n	8004224 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2220      	movs	r2, #32
 80041c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80041ca:	2320      	movs	r3, #32
 80041cc:	e02a      	b.n	8004224 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80041d6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	061a      	lsls	r2, r3, #24
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	0a1b      	lsrs	r3, r3, #8
 80041ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80041ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	0e1b      	lsrs	r3, r3, #24
 80041f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	601a      	str	r2, [r3, #0]
    scr++;
 80041fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fc:	3304      	adds	r3, #4
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	061a      	lsls	r2, r3, #24
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800420c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004216:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	0e1b      	lsrs	r3, r3, #24
 800421c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	373c      	adds	r7, #60	; 0x3c
 8004228:	46bd      	mov	sp, r7
 800422a:	bd90      	pop	{r4, r7, pc}

0800422c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d03f      	beq.n	80042c6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e033      	b.n	80042b4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 fb1e 	bl	8004892 <SDMMC_ReadFIFO>
 8004256:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3b01      	subs	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	0a1b      	lsrs	r3, r3, #8
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3301      	adds	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	3b01      	subs	r3, #1
 8004280:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	0c1b      	lsrs	r3, r3, #16
 8004286:	b2da      	uxtb	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3301      	adds	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	3b01      	subs	r3, #1
 8004296:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	0e1b      	lsrs	r3, r3, #24
 800429c:	b2da      	uxtb	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3301      	adds	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3301      	adds	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2b07      	cmp	r3, #7
 80042b8:	d9c8      	bls.n	800424c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80042c6:	bf00      	nop
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b086      	sub	sp, #24
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d043      	beq.n	8004370 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e037      	b.n	800435e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	3301      	adds	r3, #1
 80042f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	021a      	lsls	r2, r3, #8
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3301      	adds	r3, #1
 8004310:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	3b01      	subs	r3, #1
 8004316:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	041a      	lsls	r2, r3, #16
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4313      	orrs	r3, r2
 8004322:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3301      	adds	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3b01      	subs	r3, #1
 800432e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	061a      	lsls	r2, r3, #24
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4313      	orrs	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3301      	adds	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3b01      	subs	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f107 0208 	add.w	r2, r7, #8
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f000 faaa 	bl	80048ac <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3301      	adds	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2b07      	cmp	r3, #7
 8004362:	d9c4      	bls.n	80042ee <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004370:	bf00      	nop
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e01d      	b.n	80043c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f815 	bl	80043ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f000 f986 	bl	80046c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <HAL_TIM_Base_Start_IT+0x50>)
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b06      	cmp	r3, #6
 800440c:	d00b      	beq.n	8004426 <HAL_TIM_Base_Start_IT+0x42>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004414:	d007      	beq.n	8004426 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	00010007 	.word	0x00010007

08004438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b02      	cmp	r3, #2
 800444c:	d122      	bne.n	8004494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b02      	cmp	r3, #2
 800445a:	d11b      	bne.n	8004494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0202 	mvn.w	r2, #2
 8004464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f003 0303 	and.w	r3, r3, #3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f905 	bl	800468a <HAL_TIM_IC_CaptureCallback>
 8004480:	e005      	b.n	800448e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8f7 	bl	8004676 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f908 	bl	800469e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d122      	bne.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d11b      	bne.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0204 	mvn.w	r2, #4
 80044b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f8db 	bl	800468a <HAL_TIM_IC_CaptureCallback>
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f8cd 	bl	8004676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8de 	bl	800469e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b08      	cmp	r3, #8
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0208 	mvn.w	r2, #8
 800450c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2204      	movs	r2, #4
 8004512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8b1 	bl	800468a <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8a3 	bl	8004676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8b4 	bl	800469e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b10      	cmp	r3, #16
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b10      	cmp	r3, #16
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0210 	mvn.w	r2, #16
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2208      	movs	r2, #8
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f887 	bl	800468a <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f879 	bl	8004676 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f88a 	bl	800469e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10e      	bne.n	80045bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0201 	mvn.w	r2, #1
 80045b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc f8aa 	bl	8000710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d10e      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d107      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f914 	bl	8004810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f6:	d10e      	bne.n	8004616 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d107      	bne.n	8004616 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800460e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f907 	bl	8004824 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d10e      	bne.n	8004642 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d107      	bne.n	8004642 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800463a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f838 	bl	80046b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b20      	cmp	r3, #32
 800464e:	d10e      	bne.n	800466e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b20      	cmp	r3, #32
 800465c:	d107      	bne.n	800466e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f06f 0220 	mvn.w	r2, #32
 8004666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f8c7 	bl	80047fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a40      	ldr	r2, [pc, #256]	; (80047dc <TIM_Base_SetConfig+0x114>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d013      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e6:	d00f      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a3d      	ldr	r2, [pc, #244]	; (80047e0 <TIM_Base_SetConfig+0x118>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00b      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a3c      	ldr	r2, [pc, #240]	; (80047e4 <TIM_Base_SetConfig+0x11c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d007      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a3b      	ldr	r2, [pc, #236]	; (80047e8 <TIM_Base_SetConfig+0x120>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0x40>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a3a      	ldr	r2, [pc, #232]	; (80047ec <TIM_Base_SetConfig+0x124>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d108      	bne.n	800471a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a2f      	ldr	r2, [pc, #188]	; (80047dc <TIM_Base_SetConfig+0x114>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01f      	beq.n	8004762 <TIM_Base_SetConfig+0x9a>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d01b      	beq.n	8004762 <TIM_Base_SetConfig+0x9a>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2c      	ldr	r2, [pc, #176]	; (80047e0 <TIM_Base_SetConfig+0x118>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d017      	beq.n	8004762 <TIM_Base_SetConfig+0x9a>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2b      	ldr	r2, [pc, #172]	; (80047e4 <TIM_Base_SetConfig+0x11c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <TIM_Base_SetConfig+0x9a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <TIM_Base_SetConfig+0x120>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00f      	beq.n	8004762 <TIM_Base_SetConfig+0x9a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a29      	ldr	r2, [pc, #164]	; (80047ec <TIM_Base_SetConfig+0x124>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00b      	beq.n	8004762 <TIM_Base_SetConfig+0x9a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a28      	ldr	r2, [pc, #160]	; (80047f0 <TIM_Base_SetConfig+0x128>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d007      	beq.n	8004762 <TIM_Base_SetConfig+0x9a>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a27      	ldr	r2, [pc, #156]	; (80047f4 <TIM_Base_SetConfig+0x12c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d003      	beq.n	8004762 <TIM_Base_SetConfig+0x9a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <TIM_Base_SetConfig+0x130>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d108      	bne.n	8004774 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a10      	ldr	r2, [pc, #64]	; (80047dc <TIM_Base_SetConfig+0x114>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00f      	beq.n	80047c0 <TIM_Base_SetConfig+0xf8>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a12      	ldr	r2, [pc, #72]	; (80047ec <TIM_Base_SetConfig+0x124>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00b      	beq.n	80047c0 <TIM_Base_SetConfig+0xf8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <TIM_Base_SetConfig+0x128>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d007      	beq.n	80047c0 <TIM_Base_SetConfig+0xf8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a10      	ldr	r2, [pc, #64]	; (80047f4 <TIM_Base_SetConfig+0x12c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_Base_SetConfig+0xf8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a0f      	ldr	r2, [pc, #60]	; (80047f8 <TIM_Base_SetConfig+0x130>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d103      	bne.n	80047c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	615a      	str	r2, [r3, #20]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40013400 	.word	0x40013400
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800

080047fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004838:	b084      	sub	sp, #16
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	f107 001c 	add.w	r0, r7, #28
 8004846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8004856:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800485a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800485e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004862:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004866:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004876:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	b004      	add	sp, #16
 8004890:	4770      	bx	lr

08004892 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b082      	sub	sp, #8
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2203      	movs	r2, #3
 80048da:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80048dc:	2002      	movs	r0, #2
 80048de:	f7fc f963 	bl	8000ba8 <HAL_Delay>

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0303 	and.w	r3, r3, #3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004926:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800492c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004932:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004942:	f023 030f 	bic.w	r3, r3, #15
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	b2db      	uxtb	r3, r3
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3314      	adds	r3, #20
 8004984:	461a      	mov	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	4413      	add	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80049c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80049c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80049ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0

}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004a02:	2310      	movs	r3, #16
 8004a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a06:	2340      	movs	r3, #64	; 0x40
 8004a08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a14:	f107 0308 	add.w	r3, r7, #8
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff ff74 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	2110      	movs	r1, #16
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa40 	bl	8004eac <SDMMC_GetCmdResp1>
 8004a2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004a46:	2311      	movs	r3, #17
 8004a48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a4a:	2340      	movs	r3, #64	; 0x40
 8004a4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff ff52 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a68:	2111      	movs	r1, #17
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa1e 	bl	8004eac <SDMMC_GetCmdResp1>
 8004a70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a72:	69fb      	ldr	r3, [r7, #28]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004a8a:	2312      	movs	r3, #18
 8004a8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a8e:	2340      	movs	r3, #64	; 0x40
 8004a90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7ff ff30 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aac:	2112      	movs	r1, #18
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9fc 	bl	8004eac <SDMMC_GetCmdResp1>
 8004ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3720      	adds	r7, #32
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004ace:	2318      	movs	r3, #24
 8004ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ad2:	2340      	movs	r3, #64	; 0x40
 8004ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ae0:	f107 0308 	add.w	r3, r7, #8
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ff0e 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af0:	2118      	movs	r1, #24
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f9da 	bl	8004eac <SDMMC_GetCmdResp1>
 8004af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004afa:	69fb      	ldr	r3, [r7, #28]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004b12:	2319      	movs	r3, #25
 8004b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b16:	2340      	movs	r3, #64	; 0x40
 8004b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b24:	f107 0308 	add.w	r3, r7, #8
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff feec 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b34:	2119      	movs	r1, #25
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f9b8 	bl	8004eac <SDMMC_GetCmdResp1>
 8004b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004b54:	230c      	movs	r3, #12
 8004b56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b58:	2340      	movs	r3, #64	; 0x40
 8004b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b64:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b66:	f107 0308 	add.w	r3, r7, #8
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff fecb 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004b72:	4a05      	ldr	r2, [pc, #20]	; (8004b88 <SDMMC_CmdStopTransfer+0x40>)
 8004b74:	210c      	movs	r1, #12
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f998 	bl	8004eac <SDMMC_GetCmdResp1>
 8004b7c:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3720      	adds	r7, #32
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	05f5e100 	.word	0x05f5e100

08004b8c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004b9c:	2307      	movs	r3, #7
 8004b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ba0:	2340      	movs	r3, #64	; 0x40
 8004ba2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bac:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bae:	f107 0310 	add.w	r3, r7, #16
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff fea7 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bbe:	2107      	movs	r1, #7
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f973 	bl	8004eac <SDMMC_GetCmdResp1>
 8004bc6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3728      	adds	r7, #40	; 0x28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b088      	sub	sp, #32
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004be2:	2300      	movs	r3, #0
 8004be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bf0:	f107 0308 	add.w	r3, r7, #8
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff fe86 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f92d 	bl	8004e5c <SDMMC_GetCmdError>
 8004c02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c04:	69fb      	ldr	r3, [r7, #28]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b088      	sub	sp, #32
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004c16:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004c1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c20:	2340      	movs	r3, #64	; 0x40
 8004c22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c2e:	f107 0308 	add.w	r3, r7, #8
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff fe67 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb16 	bl	800526c <SDMMC_GetCmdResp7>
 8004c40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c42:	69fb      	ldr	r3, [r7, #28]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3720      	adds	r7, #32
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004c5a:	2337      	movs	r3, #55	; 0x37
 8004c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c5e:	2340      	movs	r3, #64	; 0x40
 8004c60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c6c:	f107 0308 	add.w	r3, r7, #8
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff fe48 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7c:	2137      	movs	r1, #55	; 0x37
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f914 	bl	8004eac <SDMMC_GetCmdResp1>
 8004c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c86:	69fb      	ldr	r3, [r7, #28]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca4:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004ca6:	2329      	movs	r3, #41	; 0x29
 8004ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004caa:	2340      	movs	r3, #64	; 0x40
 8004cac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cb8:	f107 0308 	add.w	r3, r7, #8
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fe22 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fa23 	bl	8005110 <SDMMC_GetCmdResp3>
 8004cca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b088      	sub	sp, #32
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004ce4:	2306      	movs	r3, #6
 8004ce6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ce8:	2340      	movs	r3, #64	; 0x40
 8004cea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cf6:	f107 0308 	add.w	r3, r7, #8
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fe03 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d06:	2106      	movs	r1, #6
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f8cf 	bl	8004eac <SDMMC_GetCmdResp1>
 8004d0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d10:	69fb      	ldr	r3, [r7, #28]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b088      	sub	sp, #32
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004d26:	2333      	movs	r3, #51	; 0x33
 8004d28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d2a:	2340      	movs	r3, #64	; 0x40
 8004d2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d38:	f107 0308 	add.w	r3, r7, #8
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fde2 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	2133      	movs	r1, #51	; 0x33
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8ae 	bl	8004eac <SDMMC_GetCmdResp1>
 8004d50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d52:	69fb      	ldr	r3, [r7, #28]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3720      	adds	r7, #32
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004d6c:	23c0      	movs	r3, #192	; 0xc0
 8004d6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d7a:	f107 0308 	add.w	r3, r7, #8
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fdc1 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f97c 	bl	8005084 <SDMMC_GetCmdResp2>
 8004d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004da6:	2309      	movs	r3, #9
 8004da8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004daa:	23c0      	movs	r3, #192	; 0xc0
 8004dac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004db8:	f107 0308 	add.w	r3, r7, #8
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fda2 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f95d 	bl	8005084 <SDMMC_GetCmdResp2>
 8004dca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b088      	sub	sp, #32
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004de4:	2303      	movs	r3, #3
 8004de6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004de8:	2340      	movs	r3, #64	; 0x40
 8004dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff fd83 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	2103      	movs	r1, #3
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f9bc 	bl	8005184 <SDMMC_GetCmdResp6>
 8004e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004e26:	230d      	movs	r3, #13
 8004e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e2a:	2340      	movs	r3, #64	; 0x40
 8004e2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e38:	f107 0308 	add.w	r3, r7, #8
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7ff fd62 	bl	8004908 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	210d      	movs	r1, #13
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f82e 	bl	8004eac <SDMMC_GetCmdResp1>
 8004e50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e52:	69fb      	ldr	r3, [r7, #28]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004e5c:	b490      	push	{r4, r7}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <SDMMC_GetCmdError+0x48>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a0f      	ldr	r2, [pc, #60]	; (8004ea8 <SDMMC_GetCmdError+0x4c>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	0a5b      	lsrs	r3, r3, #9
 8004e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e74:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004e78:	4623      	mov	r3, r4
 8004e7a:	1e5c      	subs	r4, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e84:	e009      	b.n	8004e9a <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f2      	beq.n	8004e78 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	22c5      	movs	r2, #197	; 0xc5
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc90      	pop	{r4, r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	10624dd3 	.word	0x10624dd3

08004eac <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004eac:	b590      	push	{r4, r7, lr}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	607a      	str	r2, [r7, #4]
 8004eb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004eba:	4b6f      	ldr	r3, [pc, #444]	; (8005078 <SDMMC_GetCmdResp1+0x1cc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6f      	ldr	r2, [pc, #444]	; (800507c <SDMMC_GetCmdResp1+0x1d0>)
 8004ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec4:	0a5b      	lsrs	r3, r3, #9
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004ecc:	4623      	mov	r3, r4
 8004ece:	1e5c      	subs	r4, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d102      	bne.n	8004eda <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ed4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ed8:	e0c9      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <SDMMC_GetCmdResp1+0x20>
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1eb      	bne.n	8004ecc <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d004      	beq.n	8004f0a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2204      	movs	r2, #4
 8004f04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f06:	2304      	movs	r3, #4
 8004f08:	e0b1      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e0a6      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	22c5      	movs	r2, #197	; 0xc5
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f7ff fd18 	bl	800495c <SDMMC_GetCommandResponse>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	7afb      	ldrb	r3, [r7, #11]
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d001      	beq.n	8004f3a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e099      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff fd1a 	bl	8004976 <SDMMC_GetResponse>
 8004f42:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4b4e      	ldr	r3, [pc, #312]	; (8005080 <SDMMC_GetCmdResp1+0x1d4>)
 8004f48:	4013      	ands	r3, r2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e08d      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	da02      	bge.n	8004f5e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f5c:	e087      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004f68:	2340      	movs	r3, #64	; 0x40
 8004f6a:	e080      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	e079      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f88:	e071      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f98:	e069      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa8:	e061      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004fb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fb8:	e059      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fc8:	e051      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fd8:	e049      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004fe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fe8:	e041      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff8:	e039      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005008:	e031      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005014:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005018:	e029      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005024:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005028:	e021      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005034:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005038:	e019      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005048:	e011      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005054:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005058:	e009      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005064:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005068:	e001      	b.n	800506e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800506a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800506e:	4618      	mov	r0, r3
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd90      	pop	{r4, r7, pc}
 8005076:	bf00      	nop
 8005078:	20000000 	.word	0x20000000
 800507c:	10624dd3 	.word	0x10624dd3
 8005080:	fdffe008 	.word	0xfdffe008

08005084 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005084:	b490      	push	{r4, r7}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800508c:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <SDMMC_GetCmdResp2+0x84>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1e      	ldr	r2, [pc, #120]	; (800510c <SDMMC_GetCmdResp2+0x88>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	0a5b      	lsrs	r3, r3, #9
 8005098:	f241 3288 	movw	r2, #5000	; 0x1388
 800509c:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80050a0:	4623      	mov	r3, r4
 80050a2:	1e5c      	subs	r4, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050ac:	e026      	b.n	80050fc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <SDMMC_GetCmdResp2+0x1c>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1eb      	bne.n	80050a0 <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2204      	movs	r2, #4
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050da:	2304      	movs	r3, #4
 80050dc:	e00e      	b.n	80050fc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e003      	b.n	80050fc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	22c5      	movs	r2, #197	; 0xc5
 80050f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bc90      	pop	{r4, r7}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000000 	.word	0x20000000
 800510c:	10624dd3 	.word	0x10624dd3

08005110 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005110:	b490      	push	{r4, r7}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005118:	4b18      	ldr	r3, [pc, #96]	; (800517c <SDMMC_GetCmdResp3+0x6c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a18      	ldr	r2, [pc, #96]	; (8005180 <SDMMC_GetCmdResp3+0x70>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	0a5b      	lsrs	r3, r3, #9
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800512c:	4623      	mov	r3, r4
 800512e:	1e5c      	subs	r4, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005134:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005138:	e01b      	b.n	8005172 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005146:	2b00      	cmp	r3, #0
 8005148:	d0f0      	beq.n	800512c <SDMMC_GetCmdResp3+0x1c>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1eb      	bne.n	800512c <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d004      	beq.n	800516a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2204      	movs	r2, #4
 8005164:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005166:	2304      	movs	r3, #4
 8005168:	e003      	b.n	8005172 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	22c5      	movs	r2, #197	; 0xc5
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bc90      	pop	{r4, r7}
 800517a:	4770      	bx	lr
 800517c:	20000000 	.word	0x20000000
 8005180:	10624dd3 	.word	0x10624dd3

08005184 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005184:	b590      	push	{r4, r7, lr}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	460b      	mov	r3, r1
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005192:	4b34      	ldr	r3, [pc, #208]	; (8005264 <SDMMC_GetCmdResp6+0xe0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a34      	ldr	r2, [pc, #208]	; (8005268 <SDMMC_GetCmdResp6+0xe4>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	0a5b      	lsrs	r3, r3, #9
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80051a6:	4623      	mov	r3, r4
 80051a8:	1e5c      	subs	r4, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051b2:	e052      	b.n	800525a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <SDMMC_GetCmdResp6+0x22>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1eb      	bne.n	80051a6 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2204      	movs	r2, #4
 80051de:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051e0:	2304      	movs	r3, #4
 80051e2:	e03a      	b.n	800525a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e02f      	b.n	800525a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7ff fbae 	bl	800495c <SDMMC_GetCommandResponse>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	7afb      	ldrb	r3, [r7, #11]
 8005206:	4293      	cmp	r3, r2
 8005208:	d001      	beq.n	800520e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800520a:	2301      	movs	r3, #1
 800520c:	e025      	b.n	800525a <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	22c5      	movs	r2, #197	; 0xc5
 8005212:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005214:	2100      	movs	r1, #0
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff fbad 	bl	8004976 <SDMMC_GetResponse>
 800521c:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d106      	bne.n	8005236 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8005232:	2300      	movs	r3, #0
 8005234:	e011      	b.n	800525a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005244:	e009      	b.n	800525a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005254:	e001      	b.n	800525a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	bd90      	pop	{r4, r7, pc}
 8005262:	bf00      	nop
 8005264:	20000000 	.word	0x20000000
 8005268:	10624dd3 	.word	0x10624dd3

0800526c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800526c:	b490      	push	{r4, r7}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005274:	4b21      	ldr	r3, [pc, #132]	; (80052fc <SDMMC_GetCmdResp7+0x90>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a21      	ldr	r2, [pc, #132]	; (8005300 <SDMMC_GetCmdResp7+0x94>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	0a5b      	lsrs	r3, r3, #9
 8005280:	f241 3288 	movw	r2, #5000	; 0x1388
 8005284:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8005288:	4623      	mov	r3, r4
 800528a:	1e5c      	subs	r4, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005290:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005294:	e02c      	b.n	80052f0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <SDMMC_GetCmdResp7+0x1c>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1eb      	bne.n	8005288 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2204      	movs	r2, #4
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052c2:	2304      	movs	r3, #4
 80052c4:	e014      	b.n	80052f0 <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d004      	beq.n	80052dc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80052d8:	2301      	movs	r3, #1
 80052da:	e009      	b.n	80052f0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2240      	movs	r2, #64	; 0x40
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80052ee:	2300      	movs	r3, #0

}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc90      	pop	{r4, r7}
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	20000000 	.word	0x20000000
 8005300:	10624dd3 	.word	0x10624dd3

08005304 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005308:	4904      	ldr	r1, [pc, #16]	; (800531c <MX_FATFS_Init+0x18>)
 800530a:	4805      	ldr	r0, [pc, #20]	; (8005320 <MX_FATFS_Init+0x1c>)
 800530c:	f002 fd34 	bl	8007d78 <FATFS_LinkDriver>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	4b03      	ldr	r3, [pc, #12]	; (8005324 <MX_FATFS_Init+0x20>)
 8005316:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005318:	bf00      	nop
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20003244 	.word	0x20003244
 8005320:	0800b400 	.word	0x0800b400
 8005324:	20003240 	.word	0x20003240

08005328 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800532c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800532e:	4618      	mov	r0, r3
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005340:	f7fa ffb6 	bl	80002b0 <BSP_SD_AbortCallback>
}
 8005344:	bf00      	nop
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005354:	f000 f9bc 	bl	80056d0 <BSP_SD_WriteCpltCallback>
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005368:	f000 f9c0 	bl	80056ec <BSP_SD_ReadCpltCallback>
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800537a:	2301      	movs	r3, #1
 800537c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800537e:	f000 f80b 	bl	8005398 <BSP_PlatformIsDetected>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005388:	2300      	movs	r3, #0
 800538a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	b2db      	uxtb	r3, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800539e:	2301      	movs	r3, #1
 80053a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80053a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053a6:	4806      	ldr	r0, [pc, #24]	; (80053c0 <BSP_PlatformIsDetected+0x28>)
 80053a8:	f7fc f9b2 	bl	8001710 <HAL_GPIO_ReadPin>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80053b2:	2300      	movs	r3, #0
 80053b4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80053b6:	79fb      	ldrb	r3, [r7, #7]
}  
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	48000c00 	.word	0x48000c00

080053c4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80053cc:	f002 fd6c 	bl	8007ea8 <osKernelSysTick>
 80053d0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80053d2:	e006      	b.n	80053e2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80053d4:	f7fa ff5c 	bl	8000290 <BSP_SD_GetCardState>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80053de:	2300      	movs	r3, #0
 80053e0:	e009      	b.n	80053f6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80053e2:	f002 fd61 	bl	8007ea8 <osKernelSysTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d8f0      	bhi.n	80053d4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80053f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <SD_CheckStatus+0x38>)
 800540c:	2201      	movs	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005410:	f7fa ff3e 	bl	8000290 <BSP_SD_GetCardState>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d107      	bne.n	800542a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <SD_CheckStatus+0x38>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	4b04      	ldr	r3, [pc, #16]	; (8005438 <SD_CheckStatus+0x38>)
 8005428:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800542a:	4b03      	ldr	r3, [pc, #12]	; (8005438 <SD_CheckStatus+0x38>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	b2db      	uxtb	r3, r3
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	2000000c 	.word	0x2000000c

0800543c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8005446:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <SD_initialize+0x8c>)
 8005448:	2201      	movs	r2, #1
 800544a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800544c:	f002 fd20 	bl	8007e90 <osKernelRunning>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d030      	beq.n	80054b8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8005456:	f7fa fec3 	bl	80001e0 <BSP_SD_Init>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d107      	bne.n	8005470 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff ffcc 	bl	8005400 <SD_CheckStatus>
 8005468:	4603      	mov	r3, r0
 800546a:	461a      	mov	r2, r3
 800546c:	4b16      	ldr	r3, [pc, #88]	; (80054c8 <SD_initialize+0x8c>)
 800546e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8005470:	4b15      	ldr	r3, [pc, #84]	; (80054c8 <SD_initialize+0x8c>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	d01e      	beq.n	80054b8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800547a:	4b14      	ldr	r3, [pc, #80]	; (80054cc <SD_initialize+0x90>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10e      	bne.n	80054a0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8005482:	4b13      	ldr	r3, [pc, #76]	; (80054d0 <SD_initialize+0x94>)
 8005484:	f107 0408 	add.w	r4, r7, #8
 8005488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800548a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800548e:	f107 0308 	add.w	r3, r7, #8
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f002 fe42 	bl	800811e <osMessageCreate>
 800549a:	4602      	mov	r2, r0
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <SD_initialize+0x90>)
 800549e:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80054a0:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <SD_initialize+0x90>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d107      	bne.n	80054b8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <SD_initialize+0x8c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	4b04      	ldr	r3, [pc, #16]	; (80054c8 <SD_initialize+0x8c>)
 80054b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80054b8:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <SD_initialize+0x8c>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	b2db      	uxtb	r3, r3
}
 80054be:	4618      	mov	r0, r3
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd90      	pop	{r4, r7, pc}
 80054c6:	bf00      	nop
 80054c8:	2000000c 	.word	0x2000000c
 80054cc:	20000770 	.word	0x20000770
 80054d0:	0800b34c 	.word	0x0800b34c

080054d4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ff8d 	bl	8005400 <SD_CheckStatus>
 80054e6:	4603      	mov	r3, r0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3708      	adds	r7, #8
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08a      	sub	sp, #40	; 0x28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
 80054fa:	603b      	str	r3, [r7, #0]
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005506:	f247 5030 	movw	r0, #30000	; 0x7530
 800550a:	f7ff ff5b 	bl	80053c4 <SD_CheckStatusWithTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	da02      	bge.n	800551a <SD_read+0x2a>
  {
    return res;
 8005514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005518:	e032      	b.n	8005580 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	68b8      	ldr	r0, [r7, #8]
 8005520:	f7fa fe76 	bl	8000210 <BSP_SD_ReadBlocks_DMA>
 8005524:	4603      	mov	r3, r0
 8005526:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800552a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800552e:	2b00      	cmp	r3, #0
 8005530:	d124      	bne.n	800557c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <SD_read+0x98>)
 8005534:	6819      	ldr	r1, [r3, #0]
 8005536:	f107 0314 	add.w	r3, r7, #20
 800553a:	f247 5230 	movw	r2, #30000	; 0x7530
 800553e:	4618      	mov	r0, r3
 8005540:	f002 fe56 	bl	80081f0 <osMessageGet>

    if (event.status == osEventMessage)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	2b10      	cmp	r3, #16
 8005548:	d118      	bne.n	800557c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d115      	bne.n	800557c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8005550:	f002 fcaa 	bl	8007ea8 <osKernelSysTick>
 8005554:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8005556:	e008      	b.n	800556a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005558:	f7fa fe9a 	bl	8000290 <BSP_SD_GetCardState>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <SD_read+0x7a>
              {
                res = RES_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8005568:	e008      	b.n	800557c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800556a:	f002 fc9d 	bl	8007ea8 <osKernelSysTick>
 800556e:	4602      	mov	r2, r0
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	f247 522f 	movw	r2, #29999	; 0x752f
 8005578:	4293      	cmp	r3, r2
 800557a:	d9ed      	bls.n	8005558 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800557c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005580:	4618      	mov	r0, r3
 8005582:	3728      	adds	r7, #40	; 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000770 	.word	0x20000770

0800558c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b08a      	sub	sp, #40	; 0x28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
 8005596:	603b      	str	r3, [r7, #0]
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80055a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80055a6:	f7ff ff0d 	bl	80053c4 <SD_CheckStatusWithTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	da02      	bge.n	80055b6 <SD_write+0x2a>
  {
    return res;
 80055b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b4:	e02e      	b.n	8005614 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	68b8      	ldr	r0, [r7, #8]
 80055bc:	f7fa fe42 	bl	8000244 <BSP_SD_WriteBlocks_DMA>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d124      	bne.n	8005610 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80055c6:	4b15      	ldr	r3, [pc, #84]	; (800561c <SD_write+0x90>)
 80055c8:	6819      	ldr	r1, [r3, #0]
 80055ca:	f107 0314 	add.w	r3, r7, #20
 80055ce:	f247 5230 	movw	r2, #30000	; 0x7530
 80055d2:	4618      	mov	r0, r3
 80055d4:	f002 fe0c 	bl	80081f0 <osMessageGet>

    if (event.status == osEventMessage)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d118      	bne.n	8005610 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d115      	bne.n	8005610 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 80055e4:	f002 fc60 	bl	8007ea8 <osKernelSysTick>
 80055e8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80055ea:	e008      	b.n	80055fe <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80055ec:	f7fa fe50 	bl	8000290 <BSP_SD_GetCardState>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d103      	bne.n	80055fe <SD_write+0x72>
          {
            res = RES_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80055fc:	e008      	b.n	8005610 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 80055fe:	f002 fc53 	bl	8007ea8 <osKernelSysTick>
 8005602:	4602      	mov	r2, r0
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	f247 522f 	movw	r2, #29999	; 0x752f
 800560c:	4293      	cmp	r3, r2
 800560e:	d9ed      	bls.n	80055ec <SD_write+0x60>
    }

  }
#endif

  return res;
 8005610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005614:	4618      	mov	r0, r3
 8005616:	3728      	adds	r7, #40	; 0x28
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000770 	.word	0x20000770

08005620 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08c      	sub	sp, #48	; 0x30
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	603a      	str	r2, [r7, #0]
 800562a:	71fb      	strb	r3, [r7, #7]
 800562c:	460b      	mov	r3, r1
 800562e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005636:	4b25      	ldr	r3, [pc, #148]	; (80056cc <SD_ioctl+0xac>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <SD_ioctl+0x28>
 8005644:	2303      	movs	r3, #3
 8005646:	e03c      	b.n	80056c2 <SD_ioctl+0xa2>

  switch (cmd)
 8005648:	79bb      	ldrb	r3, [r7, #6]
 800564a:	2b03      	cmp	r3, #3
 800564c:	d834      	bhi.n	80056b8 <SD_ioctl+0x98>
 800564e:	a201      	add	r2, pc, #4	; (adr r2, 8005654 <SD_ioctl+0x34>)
 8005650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005654:	08005665 	.word	0x08005665
 8005658:	0800566d 	.word	0x0800566d
 800565c:	08005685 	.word	0x08005685
 8005660:	0800569f 	.word	0x0800569f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800566a:	e028      	b.n	80056be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800566c:	f107 030c 	add.w	r3, r7, #12
 8005670:	4618      	mov	r0, r3
 8005672:	f7fa fe17 	bl	80002a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005682:	e01c      	b.n	80056be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005684:	f107 030c 	add.w	r3, r7, #12
 8005688:	4618      	mov	r0, r3
 800568a:	f7fa fe0b 	bl	80002a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	b29a      	uxth	r2, r3
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800569c:	e00f      	b.n	80056be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800569e:	f107 030c 	add.w	r3, r7, #12
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fa fdfe 	bl	80002a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	0a5a      	lsrs	r2, r3, #9
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056b6:	e002      	b.n	80056be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80056be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3730      	adds	r7, #48	; 0x30
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 80056d4:	4b04      	ldr	r3, [pc, #16]	; (80056e8 <BSP_SD_WriteCpltCallback+0x18>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2200      	movs	r2, #0
 80056da:	2102      	movs	r1, #2
 80056dc:	4618      	mov	r0, r3
 80056de:	f002 fd47 	bl	8008170 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80056e2:	bf00      	nop
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000770 	.word	0x20000770

080056ec <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 80056f0:	4b04      	ldr	r3, [pc, #16]	; (8005704 <BSP_SD_ReadCpltCallback+0x18>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2101      	movs	r1, #1
 80056f8:	4618      	mov	r0, r3
 80056fa:	f002 fd39 	bl	8008170 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 80056fe:	bf00      	nop
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20000770 	.word	0x20000770

08005708 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	4603      	mov	r3, r0
 8005710:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005712:	79fb      	ldrb	r3, [r7, #7]
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <disk_status+0x30>)
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	79fa      	ldrb	r2, [r7, #7]
 8005720:	4905      	ldr	r1, [pc, #20]	; (8005738 <disk_status+0x30>)
 8005722:	440a      	add	r2, r1
 8005724:	7a12      	ldrb	r2, [r2, #8]
 8005726:	4610      	mov	r0, r2
 8005728:	4798      	blx	r3
 800572a:	4603      	mov	r3, r0
 800572c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800572e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	2000079c 	.word	0x2000079c

0800573c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	4a0d      	ldr	r2, [pc, #52]	; (8005784 <disk_initialize+0x48>)
 800574e:	5cd3      	ldrb	r3, [r2, r3]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d111      	bne.n	8005778 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	4a0b      	ldr	r2, [pc, #44]	; (8005784 <disk_initialize+0x48>)
 8005758:	2101      	movs	r1, #1
 800575a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	4a09      	ldr	r2, [pc, #36]	; (8005784 <disk_initialize+0x48>)
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	79fa      	ldrb	r2, [r7, #7]
 800576a:	4906      	ldr	r1, [pc, #24]	; (8005784 <disk_initialize+0x48>)
 800576c:	440a      	add	r2, r1
 800576e:	7a12      	ldrb	r2, [r2, #8]
 8005770:	4610      	mov	r0, r2
 8005772:	4798      	blx	r3
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	2000079c 	.word	0x2000079c

08005788 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005788:	b590      	push	{r4, r7, lr}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <disk_read+0x3c>)
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	689c      	ldr	r4, [r3, #8]
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <disk_read+0x3c>)
 80057a8:	4413      	add	r3, r2
 80057aa:	7a18      	ldrb	r0, [r3, #8]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	47a0      	blx	r4
 80057b4:	4603      	mov	r3, r0
 80057b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd90      	pop	{r4, r7, pc}
 80057c2:	bf00      	nop
 80057c4:	2000079c 	.word	0x2000079c

080057c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80057c8:	b590      	push	{r4, r7, lr}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	603b      	str	r3, [r7, #0]
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <disk_write+0x3c>)
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	68dc      	ldr	r4, [r3, #12]
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	4a07      	ldr	r2, [pc, #28]	; (8005804 <disk_write+0x3c>)
 80057e8:	4413      	add	r3, r2
 80057ea:	7a18      	ldrb	r0, [r3, #8]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68b9      	ldr	r1, [r7, #8]
 80057f2:	47a0      	blx	r4
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd90      	pop	{r4, r7, pc}
 8005802:	bf00      	nop
 8005804:	2000079c 	.word	0x2000079c

08005808 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	603a      	str	r2, [r7, #0]
 8005812:	71fb      	strb	r3, [r7, #7]
 8005814:	460b      	mov	r3, r1
 8005816:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	4a09      	ldr	r2, [pc, #36]	; (8005840 <disk_ioctl+0x38>)
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	79fa      	ldrb	r2, [r7, #7]
 8005826:	4906      	ldr	r1, [pc, #24]	; (8005840 <disk_ioctl+0x38>)
 8005828:	440a      	add	r2, r1
 800582a:	7a10      	ldrb	r0, [r2, #8]
 800582c:	79b9      	ldrb	r1, [r7, #6]
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	4798      	blx	r3
 8005832:	4603      	mov	r3, r0
 8005834:	73fb      	strb	r3, [r7, #15]
  return res;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	2000079c 	.word	0x2000079c

08005844 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3301      	adds	r3, #1
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005854:	89fb      	ldrh	r3, [r7, #14]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	b21a      	sxth	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b21b      	sxth	r3, r3
 8005860:	4313      	orrs	r3, r2
 8005862:	b21b      	sxth	r3, r3
 8005864:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005866:	89fb      	ldrh	r3, [r7, #14]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3303      	adds	r3, #3
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	3202      	adds	r2, #2
 800588c:	7812      	ldrb	r2, [r2, #0]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	021b      	lsls	r3, r3, #8
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	3201      	adds	r2, #1
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	4313      	orrs	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	7812      	ldrb	r2, [r2, #0]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80058ac:	68fb      	ldr	r3, [r7, #12]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	607a      	str	r2, [r7, #4]
 80058cc:	887a      	ldrh	r2, [r7, #2]
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	887b      	ldrh	r3, [r7, #2]
 80058d4:	0a1b      	lsrs	r3, r3, #8
 80058d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	607a      	str	r2, [r7, #4]
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	b2d2      	uxtb	r2, r2
 80058e2:	701a      	strb	r2, [r3, #0]
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	0a1b      	lsrs	r3, r3, #8
 800590a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	b2d2      	uxtb	r2, r2
 800593a:	701a      	strb	r2, [r3, #0]
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	1c53      	adds	r3, r2, #1
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	6179      	str	r1, [r7, #20]
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3b01      	subs	r3, #1
 8005976:	607b      	str	r3, [r7, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f1      	bne.n	8005962 <mem_cpy+0x1a>
	}
}
 800597e:	bf00      	nop
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800598a:	b480      	push	{r7}
 800598c:	b087      	sub	sp, #28
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	617a      	str	r2, [r7, #20]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f3      	bne.n	800599a <mem_set+0x10>
}
 80059b2:	bf00      	nop
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80059be:	b480      	push	{r7}
 80059c0:	b089      	sub	sp, #36	; 0x24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	61fa      	str	r2, [r7, #28]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4619      	mov	r1, r3
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	61ba      	str	r2, [r7, #24]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	1acb      	subs	r3, r1, r3
 80059ea:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	607b      	str	r3, [r7, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <mem_cmp+0x40>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0eb      	beq.n	80059d6 <mem_cmp+0x18>

	return r;
 80059fe:	697b      	ldr	r3, [r7, #20]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3724      	adds	r7, #36	; 0x24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a16:	e002      	b.n	8005a1e <chk_chr+0x12>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d005      	beq.n	8005a32 <chk_chr+0x26>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d1f2      	bne.n	8005a18 <chk_chr+0xc>
	return *str;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	781b      	ldrb	r3, [r3, #0]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d009      	beq.n	8005a64 <lock_fs+0x22>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f002 f9ca 	bl	8007dee <ff_req_grant>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <lock_fs+0x22>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <lock_fs+0x24>
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00d      	beq.n	8005a9c <unlock_fs+0x2e>
 8005a80:	78fb      	ldrb	r3, [r7, #3]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	d00a      	beq.n	8005a9c <unlock_fs+0x2e>
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	2b0b      	cmp	r3, #11
 8005a8a:	d007      	beq.n	8005a9c <unlock_fs+0x2e>
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	2b0f      	cmp	r3, #15
 8005a90:	d004      	beq.n	8005a9c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f002 f9be 	bl	8007e18 <ff_rel_grant>
	}
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60bb      	str	r3, [r7, #8]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e029      	b.n	8005b0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ab8:	4a27      	ldr	r2, [pc, #156]	; (8005b58 <chk_lock+0xb4>)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	4413      	add	r3, r2
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d01d      	beq.n	8005b02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ac6:	4a24      	ldr	r2, [pc, #144]	; (8005b58 <chk_lock+0xb4>)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	4413      	add	r3, r2
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d116      	bne.n	8005b06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005ad8:	4a1f      	ldr	r2, [pc, #124]	; (8005b58 <chk_lock+0xb4>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	4413      	add	r3, r2
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d10c      	bne.n	8005b06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005aec:	4a1a      	ldr	r2, [pc, #104]	; (8005b58 <chk_lock+0xb4>)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	4413      	add	r3, r2
 8005af4:	3308      	adds	r3, #8
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d102      	bne.n	8005b06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b00:	e007      	b.n	8005b12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d9d2      	bls.n	8005ab8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d109      	bne.n	8005b2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d102      	bne.n	8005b24 <chk_lock+0x80>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d101      	bne.n	8005b28 <chk_lock+0x84>
 8005b24:	2300      	movs	r3, #0
 8005b26:	e010      	b.n	8005b4a <chk_lock+0xa6>
 8005b28:	2312      	movs	r3, #18
 8005b2a:	e00e      	b.n	8005b4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d108      	bne.n	8005b44 <chk_lock+0xa0>
 8005b32:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <chk_lock+0xb4>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	4413      	add	r3, r2
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b42:	d101      	bne.n	8005b48 <chk_lock+0xa4>
 8005b44:	2310      	movs	r3, #16
 8005b46:	e000      	b.n	8005b4a <chk_lock+0xa6>
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	2000077c 	.word	0x2000077c

08005b5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005b62:	2300      	movs	r3, #0
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	e002      	b.n	8005b6e <enq_lock+0x12>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d806      	bhi.n	8005b82 <enq_lock+0x26>
 8005b74:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <enq_lock+0x40>)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	4413      	add	r3, r2
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f2      	bne.n	8005b68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	bf14      	ite	ne
 8005b88:	2301      	movne	r3, #1
 8005b8a:	2300      	moveq	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	2000077c 	.word	0x2000077c

08005ba0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e01f      	b.n	8005bf0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005bb0:	4a41      	ldr	r2, [pc, #260]	; (8005cb8 <inc_lock+0x118>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	4413      	add	r3, r2
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d113      	bne.n	8005bea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005bc2:	4a3d      	ldr	r2, [pc, #244]	; (8005cb8 <inc_lock+0x118>)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	4413      	add	r3, r2
 8005bca:	3304      	adds	r3, #4
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d109      	bne.n	8005bea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005bd6:	4a38      	ldr	r2, [pc, #224]	; (8005cb8 <inc_lock+0x118>)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	4413      	add	r3, r2
 8005bde:	3308      	adds	r3, #8
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d006      	beq.n	8005bf8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3301      	adds	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d9dc      	bls.n	8005bb0 <inc_lock+0x10>
 8005bf6:	e000      	b.n	8005bfa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005bf8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d132      	bne.n	8005c66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e002      	b.n	8005c0c <inc_lock+0x6c>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d806      	bhi.n	8005c20 <inc_lock+0x80>
 8005c12:	4a29      	ldr	r2, [pc, #164]	; (8005cb8 <inc_lock+0x118>)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	4413      	add	r3, r2
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1f2      	bne.n	8005c06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d101      	bne.n	8005c2a <inc_lock+0x8a>
 8005c26:	2300      	movs	r3, #0
 8005c28:	e040      	b.n	8005cac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4922      	ldr	r1, [pc, #136]	; (8005cb8 <inc_lock+0x118>)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	440b      	add	r3, r1
 8005c36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	491e      	ldr	r1, [pc, #120]	; (8005cb8 <inc_lock+0x118>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	440b      	add	r3, r1
 8005c44:	3304      	adds	r3, #4
 8005c46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	491a      	ldr	r1, [pc, #104]	; (8005cb8 <inc_lock+0x118>)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	440b      	add	r3, r1
 8005c54:	3308      	adds	r3, #8
 8005c56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c58:	4a17      	ldr	r2, [pc, #92]	; (8005cb8 <inc_lock+0x118>)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	4413      	add	r3, r2
 8005c60:	330c      	adds	r3, #12
 8005c62:	2200      	movs	r2, #0
 8005c64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d009      	beq.n	8005c80 <inc_lock+0xe0>
 8005c6c:	4a12      	ldr	r2, [pc, #72]	; (8005cb8 <inc_lock+0x118>)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	4413      	add	r3, r2
 8005c74:	330c      	adds	r3, #12
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <inc_lock+0xe0>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e015      	b.n	8005cac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <inc_lock+0xf8>
 8005c86:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <inc_lock+0x118>)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	4413      	add	r3, r2
 8005c8e:	330c      	adds	r3, #12
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	e001      	b.n	8005c9c <inc_lock+0xfc>
 8005c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c9c:	4906      	ldr	r1, [pc, #24]	; (8005cb8 <inc_lock+0x118>)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	440b      	add	r3, r1
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	2000077c 	.word	0x2000077c

08005cbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	607b      	str	r3, [r7, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d825      	bhi.n	8005d1c <dec_lock+0x60>
		n = Files[i].ctr;
 8005cd0:	4a17      	ldr	r2, [pc, #92]	; (8005d30 <dec_lock+0x74>)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	4413      	add	r3, r2
 8005cd8:	330c      	adds	r3, #12
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005cde:	89fb      	ldrh	r3, [r7, #14]
 8005ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ce4:	d101      	bne.n	8005cea <dec_lock+0x2e>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005cea:	89fb      	ldrh	r3, [r7, #14]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <dec_lock+0x3a>
 8005cf0:	89fb      	ldrh	r3, [r7, #14]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005cf6:	4a0e      	ldr	r2, [pc, #56]	; (8005d30 <dec_lock+0x74>)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	011b      	lsls	r3, r3, #4
 8005cfc:	4413      	add	r3, r2
 8005cfe:	330c      	adds	r3, #12
 8005d00:	89fa      	ldrh	r2, [r7, #14]
 8005d02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d04:	89fb      	ldrh	r3, [r7, #14]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <dec_lock+0x5a>
 8005d0a:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <dec_lock+0x74>)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	4413      	add	r3, r2
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	737b      	strb	r3, [r7, #13]
 8005d1a:	e001      	b.n	8005d20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d20:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	2000077c 	.word	0x2000077c

08005d34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]
 8005d40:	e010      	b.n	8005d64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d42:	4a0d      	ldr	r2, [pc, #52]	; (8005d78 <clear_lock+0x44>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	4413      	add	r3, r2
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d105      	bne.n	8005d5e <clear_lock+0x2a>
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <clear_lock+0x44>)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	4413      	add	r3, r2
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d9eb      	bls.n	8005d42 <clear_lock+0xe>
	}
}
 8005d6a:	bf00      	nop
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	2000077c 	.word	0x2000077c

08005d7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	78db      	ldrb	r3, [r3, #3]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d034      	beq.n	8005dfa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	7858      	ldrb	r0, [r3, #1]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005da0:	2301      	movs	r3, #1
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	f7ff fd10 	bl	80057c8 <disk_write>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
 8005db2:	e022      	b.n	8005dfa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	1ad2      	subs	r2, r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d217      	bcs.n	8005dfa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	789b      	ldrb	r3, [r3, #2]
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	e010      	b.n	8005df4 <sync_window+0x78>
					wsect += fs->fsize;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7858      	ldrb	r0, [r3, #1]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005de6:	2301      	movs	r3, #1
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	f7ff fced 	bl	80057c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d8eb      	bhi.n	8005dd2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d01b      	beq.n	8005e54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff ffad 	bl	8005d7c <sync_window>
 8005e22:	4603      	mov	r3, r0
 8005e24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d113      	bne.n	8005e54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	7858      	ldrb	r0, [r3, #1]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e36:	2301      	movs	r3, #1
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	f7ff fca5 	bl	8005788 <disk_read>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d004      	beq.n	8005e4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff ff87 	bl	8005d7c <sync_window>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d159      	bne.n	8005f2c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d149      	bne.n	8005f14 <sync_fs+0xb4>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	791b      	ldrb	r3, [r3, #4]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d145      	bne.n	8005f14 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	899b      	ldrh	r3, [r3, #12]
 8005e92:	461a      	mov	r2, r3
 8005e94:	2100      	movs	r1, #0
 8005e96:	f7ff fd78 	bl	800598a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3338      	adds	r3, #56	; 0x38
 8005e9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ea2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fd07 	bl	80058ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3338      	adds	r3, #56	; 0x38
 8005eb0:	4921      	ldr	r1, [pc, #132]	; (8005f38 <sync_fs+0xd8>)
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fd1c 	bl	80058f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3338      	adds	r3, #56	; 0x38
 8005ebc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005ec0:	491e      	ldr	r1, [pc, #120]	; (8005f3c <sync_fs+0xdc>)
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fd14 	bl	80058f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3338      	adds	r3, #56	; 0x38
 8005ecc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f7ff fd0a 	bl	80058f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3338      	adds	r3, #56	; 0x38
 8005ee0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f7ff fd00 	bl	80058f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7858      	ldrb	r0, [r3, #1]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f08:	2301      	movs	r3, #1
 8005f0a:	f7ff fc5d 	bl	80057c8 <disk_write>
			fs->fsi_flag = 0;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fc73 	bl	8005808 <disk_ioctl>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <sync_fs+0xcc>
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	41615252 	.word	0x41615252
 8005f3c:	61417272 	.word	0x61417272

08005f40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	3b02      	subs	r3, #2
 8005f4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	3b02      	subs	r3, #2
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d301      	bcc.n	8005f60 <clust2sect+0x20>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e008      	b.n	8005f72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	895b      	ldrh	r3, [r3, #10]
 8005f64:	461a      	mov	r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	fb03 f202 	mul.w	r2, r3, r2
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	4413      	add	r3, r2
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b086      	sub	sp, #24
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d904      	bls.n	8005f9e <get_fat+0x20>
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e0b7      	b.n	8006114 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fa8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d05a      	beq.n	8006068 <get_fat+0xea>
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d07d      	beq.n	80060b2 <get_fat+0x134>
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	f040 80a2 	bne.w	8006100 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	899b      	ldrh	r3, [r3, #12]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fda:	4413      	add	r3, r2
 8005fdc:	4619      	mov	r1, r3
 8005fde:	6938      	ldr	r0, [r7, #16]
 8005fe0:	f7ff ff10 	bl	8005e04 <move_window>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f040 808d 	bne.w	8006106 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	60fa      	str	r2, [r7, #12]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	8992      	ldrh	r2, [r2, #12]
 8005ff6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ffa:	fb02 f201 	mul.w	r2, r2, r1
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006008:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	899b      	ldrh	r3, [r3, #12]
 8006012:	4619      	mov	r1, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	fbb3 f3f1 	udiv	r3, r3, r1
 800601a:	4413      	add	r3, r2
 800601c:	4619      	mov	r1, r3
 800601e:	6938      	ldr	r0, [r7, #16]
 8006020:	f7ff fef0 	bl	8005e04 <move_window>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d16f      	bne.n	800610a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	899b      	ldrh	r3, [r3, #12]
 800602e:	461a      	mov	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	fbb3 f1f2 	udiv	r1, r3, r2
 8006036:	fb02 f201 	mul.w	r2, r2, r1
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4413      	add	r3, r2
 8006040:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	461a      	mov	r2, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4313      	orrs	r3, r2
 800604c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <get_fat+0xe0>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	091b      	lsrs	r3, r3, #4
 800605c:	e002      	b.n	8006064 <get_fat+0xe6>
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006064:	617b      	str	r3, [r7, #20]
			break;
 8006066:	e055      	b.n	8006114 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	899b      	ldrh	r3, [r3, #12]
 8006070:	085b      	lsrs	r3, r3, #1
 8006072:	b29b      	uxth	r3, r3
 8006074:	4619      	mov	r1, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	fbb3 f3f1 	udiv	r3, r3, r1
 800607c:	4413      	add	r3, r2
 800607e:	4619      	mov	r1, r3
 8006080:	6938      	ldr	r0, [r7, #16]
 8006082:	f7ff febf 	bl	8005e04 <move_window>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d140      	bne.n	800610e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	8992      	ldrh	r2, [r2, #12]
 800609a:	fbb3 f0f2 	udiv	r0, r3, r2
 800609e:	fb02 f200 	mul.w	r2, r2, r0
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	440b      	add	r3, r1
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fbcc 	bl	8005844 <ld_word>
 80060ac:	4603      	mov	r3, r0
 80060ae:	617b      	str	r3, [r7, #20]
			break;
 80060b0:	e030      	b.n	8006114 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	899b      	ldrh	r3, [r3, #12]
 80060ba:	089b      	lsrs	r3, r3, #2
 80060bc:	b29b      	uxth	r3, r3
 80060be:	4619      	mov	r1, r3
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80060c6:	4413      	add	r3, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	6938      	ldr	r0, [r7, #16]
 80060cc:	f7ff fe9a 	bl	8005e04 <move_window>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d11d      	bne.n	8006112 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	8992      	ldrh	r2, [r2, #12]
 80060e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80060e8:	fb02 f200 	mul.w	r2, r2, r0
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	440b      	add	r3, r1
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fbbf 	bl	8005874 <ld_dword>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060fc:	617b      	str	r3, [r7, #20]
			break;
 80060fe:	e009      	b.n	8006114 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006100:	2301      	movs	r3, #1
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	e006      	b.n	8006114 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006106:	bf00      	nop
 8006108:	e004      	b.n	8006114 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800610a:	bf00      	nop
 800610c:	e002      	b.n	8006114 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006112:	bf00      	nop
		}
	}

	return val;
 8006114:	697b      	ldr	r3, [r7, #20]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800611e:	b590      	push	{r4, r7, lr}
 8006120:	b089      	sub	sp, #36	; 0x24
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800612a:	2302      	movs	r3, #2
 800612c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b01      	cmp	r3, #1
 8006132:	f240 8106 	bls.w	8006342 <put_fat+0x224>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	429a      	cmp	r2, r3
 800613e:	f080 8100 	bcs.w	8006342 <put_fat+0x224>
		switch (fs->fs_type) {
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	2b02      	cmp	r3, #2
 8006148:	f000 8088 	beq.w	800625c <put_fat+0x13e>
 800614c:	2b03      	cmp	r3, #3
 800614e:	f000 80b0 	beq.w	80062b2 <put_fat+0x194>
 8006152:	2b01      	cmp	r3, #1
 8006154:	f040 80f5 	bne.w	8006342 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	085b      	lsrs	r3, r3, #1
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4413      	add	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	899b      	ldrh	r3, [r3, #12]
 800616e:	4619      	mov	r1, r3
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	fbb3 f3f1 	udiv	r3, r3, r1
 8006176:	4413      	add	r3, r2
 8006178:	4619      	mov	r1, r3
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7ff fe42 	bl	8005e04 <move_window>
 8006180:	4603      	mov	r3, r0
 8006182:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006184:	7ffb      	ldrb	r3, [r7, #31]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 80d4 	bne.w	8006334 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	61ba      	str	r2, [r7, #24]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	8992      	ldrh	r2, [r2, #12]
 800619c:	fbb3 f0f2 	udiv	r0, r3, r2
 80061a0:	fb02 f200 	mul.w	r2, r2, r0
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	440b      	add	r3, r1
 80061a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00d      	beq.n	80061d0 <put_fat+0xb2>
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	b25a      	sxtb	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	b25b      	sxtb	r3, r3
 80061c8:	4313      	orrs	r3, r2
 80061ca:	b25b      	sxtb	r3, r3
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e001      	b.n	80061d4 <put_fat+0xb6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	899b      	ldrh	r3, [r3, #12]
 80061e6:	4619      	mov	r1, r3
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80061ee:	4413      	add	r3, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f7ff fe06 	bl	8005e04 <move_window>
 80061f8:	4603      	mov	r3, r0
 80061fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061fc:	7ffb      	ldrb	r3, [r7, #31]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f040 809a 	bne.w	8006338 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	899b      	ldrh	r3, [r3, #12]
 800620e:	461a      	mov	r2, r3
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	fbb3 f0f2 	udiv	r0, r3, r2
 8006216:	fb02 f200 	mul.w	r2, r2, r0
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	440b      	add	r3, r1
 800621e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <put_fat+0x114>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	b2db      	uxtb	r3, r3
 8006230:	e00e      	b.n	8006250 <put_fat+0x132>
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	b25b      	sxtb	r3, r3
 8006238:	f023 030f 	bic.w	r3, r3, #15
 800623c:	b25a      	sxtb	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	0a1b      	lsrs	r3, r3, #8
 8006242:	b25b      	sxtb	r3, r3
 8006244:	f003 030f 	and.w	r3, r3, #15
 8006248:	b25b      	sxtb	r3, r3
 800624a:	4313      	orrs	r3, r2
 800624c:	b25b      	sxtb	r3, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	70da      	strb	r2, [r3, #3]
			break;
 800625a:	e072      	b.n	8006342 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	899b      	ldrh	r3, [r3, #12]
 8006264:	085b      	lsrs	r3, r3, #1
 8006266:	b29b      	uxth	r3, r3
 8006268:	4619      	mov	r1, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006270:	4413      	add	r3, r2
 8006272:	4619      	mov	r1, r3
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff fdc5 	bl	8005e04 <move_window>
 800627a:	4603      	mov	r3, r0
 800627c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800627e:	7ffb      	ldrb	r3, [r7, #31]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d15b      	bne.n	800633c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	8992      	ldrh	r2, [r2, #12]
 8006292:	fbb3 f0f2 	udiv	r0, r3, r2
 8006296:	fb02 f200 	mul.w	r2, r2, r0
 800629a:	1a9b      	subs	r3, r3, r2
 800629c:	440b      	add	r3, r1
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	b292      	uxth	r2, r2
 80062a2:	4611      	mov	r1, r2
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fb08 	bl	80058ba <st_word>
			fs->wflag = 1;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	70da      	strb	r2, [r3, #3]
			break;
 80062b0:	e047      	b.n	8006342 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	899b      	ldrh	r3, [r3, #12]
 80062ba:	089b      	lsrs	r3, r3, #2
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4619      	mov	r1, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80062c6:	4413      	add	r3, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff fd9a 	bl	8005e04 <move_window>
 80062d0:	4603      	mov	r3, r0
 80062d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062d4:	7ffb      	ldrb	r3, [r7, #31]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d132      	bne.n	8006340 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	8992      	ldrh	r2, [r2, #12]
 80062ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80062f2:	fb02 f200 	mul.w	r2, r2, r0
 80062f6:	1a9b      	subs	r3, r3, r2
 80062f8:	440b      	add	r3, r1
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7ff faba 	bl	8005874 <ld_dword>
 8006300:	4603      	mov	r3, r0
 8006302:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006306:	4323      	orrs	r3, r4
 8006308:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	8992      	ldrh	r2, [r2, #12]
 8006318:	fbb3 f0f2 	udiv	r0, r3, r2
 800631c:	fb02 f200 	mul.w	r2, r2, r0
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	440b      	add	r3, r1
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fae2 	bl	80058f0 <st_dword>
			fs->wflag = 1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	70da      	strb	r2, [r3, #3]
			break;
 8006332:	e006      	b.n	8006342 <put_fat+0x224>
			if (res != FR_OK) break;
 8006334:	bf00      	nop
 8006336:	e004      	b.n	8006342 <put_fat+0x224>
			if (res != FR_OK) break;
 8006338:	bf00      	nop
 800633a:	e002      	b.n	8006342 <put_fat+0x224>
			if (res != FR_OK) break;
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <put_fat+0x224>
			if (res != FR_OK) break;
 8006340:	bf00      	nop
		}
	}
	return res;
 8006342:	7ffb      	ldrb	r3, [r7, #31]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3724      	adds	r7, #36	; 0x24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd90      	pop	{r4, r7, pc}

0800634c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d904      	bls.n	8006372 <remove_chain+0x26>
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	429a      	cmp	r2, r3
 8006370:	d301      	bcc.n	8006376 <remove_chain+0x2a>
 8006372:	2302      	movs	r3, #2
 8006374:	e04b      	b.n	800640e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00c      	beq.n	8006396 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800637c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	69b8      	ldr	r0, [r7, #24]
 8006384:	f7ff fecb 	bl	800611e <put_fat>
 8006388:	4603      	mov	r3, r0
 800638a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800638c:	7ffb      	ldrb	r3, [r7, #31]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <remove_chain+0x4a>
 8006392:	7ffb      	ldrb	r3, [r7, #31]
 8006394:	e03b      	b.n	800640e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff fdf0 	bl	8005f7e <get_fat>
 800639e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d031      	beq.n	800640a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <remove_chain+0x64>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e02e      	b.n	800640e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063b6:	d101      	bne.n	80063bc <remove_chain+0x70>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e028      	b.n	800640e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80063bc:	2200      	movs	r2, #0
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	69b8      	ldr	r0, [r7, #24]
 80063c2:	f7ff feac 	bl	800611e <put_fat>
 80063c6:	4603      	mov	r3, r0
 80063c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80063ca:	7ffb      	ldrb	r3, [r7, #31]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <remove_chain+0x88>
 80063d0:	7ffb      	ldrb	r3, [r7, #31]
 80063d2:	e01c      	b.n	800640e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	699a      	ldr	r2, [r3, #24]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	3b02      	subs	r3, #2
 80063de:	429a      	cmp	r2, r3
 80063e0:	d20b      	bcs.n	80063fa <remove_chain+0xae>
			fs->free_clst++;
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	791b      	ldrb	r3, [r3, #4]
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	429a      	cmp	r2, r3
 8006406:	d3c6      	bcc.n	8006396 <remove_chain+0x4a>
 8006408:	e000      	b.n	800640c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800640a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b088      	sub	sp, #32
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10d      	bne.n	8006448 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d004      	beq.n	8006442 <create_chain+0x2c>
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	429a      	cmp	r2, r3
 8006440:	d31b      	bcc.n	800647a <create_chain+0x64>
 8006442:	2301      	movs	r3, #1
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	e018      	b.n	800647a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff fd97 	bl	8005f7e <get_fat>
 8006450:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d801      	bhi.n	800645c <create_chain+0x46>
 8006458:	2301      	movs	r3, #1
 800645a:	e070      	b.n	800653e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006462:	d101      	bne.n	8006468 <create_chain+0x52>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	e06a      	b.n	800653e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	429a      	cmp	r2, r3
 8006470:	d201      	bcs.n	8006476 <create_chain+0x60>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	e063      	b.n	800653e <create_chain+0x128>
		scl = clst;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	3301      	adds	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	429a      	cmp	r2, r3
 800648c:	d307      	bcc.n	800649e <create_chain+0x88>
				ncl = 2;
 800648e:	2302      	movs	r3, #2
 8006490:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	429a      	cmp	r2, r3
 8006498:	d901      	bls.n	800649e <create_chain+0x88>
 800649a:	2300      	movs	r3, #0
 800649c:	e04f      	b.n	800653e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800649e:	69f9      	ldr	r1, [r7, #28]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f7ff fd6c 	bl	8005f7e <get_fat>
 80064a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d003      	beq.n	80064bc <create_chain+0xa6>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ba:	d101      	bne.n	80064c0 <create_chain+0xaa>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	e03e      	b.n	800653e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d1da      	bne.n	800647e <create_chain+0x68>
 80064c8:	2300      	movs	r3, #0
 80064ca:	e038      	b.n	800653e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80064cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80064ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064d2:	69f9      	ldr	r1, [r7, #28]
 80064d4:	6938      	ldr	r0, [r7, #16]
 80064d6:	f7ff fe22 	bl	800611e <put_fat>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064de:	7dfb      	ldrb	r3, [r7, #23]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d109      	bne.n	80064f8 <create_chain+0xe2>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d006      	beq.n	80064f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	6938      	ldr	r0, [r7, #16]
 80064f0:	f7ff fe15 	bl	800611e <put_fat>
 80064f4:	4603      	mov	r3, r0
 80064f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d116      	bne.n	800652c <create_chain+0x116>
		fs->last_clst = ncl;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	699a      	ldr	r2, [r3, #24]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	3b02      	subs	r3, #2
 800650e:	429a      	cmp	r2, r3
 8006510:	d804      	bhi.n	800651c <create_chain+0x106>
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	1e5a      	subs	r2, r3, #1
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	f043 0301 	orr.w	r3, r3, #1
 8006524:	b2da      	uxtb	r2, r3
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	711a      	strb	r2, [r3, #4]
 800652a:	e007      	b.n	800653c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d102      	bne.n	8006538 <create_chain+0x122>
 8006532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006536:	e000      	b.n	800653a <create_chain+0x124>
 8006538:	2301      	movs	r3, #1
 800653a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800653c:	69fb      	ldr	r3, [r7, #28]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006546:	b480      	push	{r7}
 8006548:	b087      	sub	sp, #28
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	3304      	adds	r3, #4
 800655c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	899b      	ldrh	r3, [r3, #12]
 8006562:	461a      	mov	r2, r3
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	fbb3 f3f2 	udiv	r3, r3, r2
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	8952      	ldrh	r2, [r2, #10]
 800656e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006572:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1d1a      	adds	r2, r3, #4
 8006578:	613a      	str	r2, [r7, #16]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <clmt_clust+0x42>
 8006584:	2300      	movs	r3, #0
 8006586:	e010      	b.n	80065aa <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	429a      	cmp	r2, r3
 800658e:	d307      	bcc.n	80065a0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	3304      	adds	r3, #4
 800659c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800659e:	e7e9      	b.n	8006574 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80065a0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	4413      	add	r3, r2
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065cc:	d204      	bcs.n	80065d8 <dir_sdi+0x22>
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <dir_sdi+0x26>
		return FR_INT_ERR;
 80065d8:	2302      	movs	r3, #2
 80065da:	e071      	b.n	80066c0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d106      	bne.n	80065fc <dir_sdi+0x46>
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d902      	bls.n	80065fc <dir_sdi+0x46>
		clst = fs->dirbase;
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10c      	bne.n	800661c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	095b      	lsrs	r3, r3, #5
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	8912      	ldrh	r2, [r2, #8]
 800660a:	4293      	cmp	r3, r2
 800660c:	d301      	bcc.n	8006612 <dir_sdi+0x5c>
 800660e:	2302      	movs	r3, #2
 8006610:	e056      	b.n	80066c0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	61da      	str	r2, [r3, #28]
 800661a:	e02d      	b.n	8006678 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	895b      	ldrh	r3, [r3, #10]
 8006620:	461a      	mov	r2, r3
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	899b      	ldrh	r3, [r3, #12]
 8006626:	fb03 f302 	mul.w	r3, r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800662c:	e019      	b.n	8006662 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6979      	ldr	r1, [r7, #20]
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff fca3 	bl	8005f7e <get_fat>
 8006638:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006640:	d101      	bne.n	8006646 <dir_sdi+0x90>
 8006642:	2301      	movs	r3, #1
 8006644:	e03c      	b.n	80066c0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d904      	bls.n	8006656 <dir_sdi+0xa0>
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	429a      	cmp	r2, r3
 8006654:	d301      	bcc.n	800665a <dir_sdi+0xa4>
 8006656:	2302      	movs	r3, #2
 8006658:	e032      	b.n	80066c0 <dir_sdi+0x10a>
			ofs -= csz;
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	429a      	cmp	r2, r3
 8006668:	d2e1      	bcs.n	800662e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800666a:	6979      	ldr	r1, [r7, #20]
 800666c:	6938      	ldr	r0, [r7, #16]
 800666e:	f7ff fc67 	bl	8005f40 <clust2sect>
 8006672:	4602      	mov	r2, r0
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <dir_sdi+0xd4>
 8006686:	2302      	movs	r3, #2
 8006688:	e01a      	b.n	80066c0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69da      	ldr	r2, [r3, #28]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	899b      	ldrh	r3, [r3, #12]
 8006692:	4619      	mov	r1, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	fbb3 f3f1 	udiv	r3, r3, r1
 800669a:	441a      	add	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	899b      	ldrh	r3, [r3, #12]
 80066aa:	461a      	mov	r2, r3
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80066b2:	fb02 f200 	mul.w	r2, r2, r0
 80066b6:	1a9b      	subs	r3, r3, r2
 80066b8:	18ca      	adds	r2, r1, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	3320      	adds	r3, #32
 80066de:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <dir_next+0x28>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ee:	d301      	bcc.n	80066f4 <dir_next+0x2c>
 80066f0:	2304      	movs	r3, #4
 80066f2:	e0bb      	b.n	800686c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	899b      	ldrh	r3, [r3, #12]
 80066f8:	461a      	mov	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006700:	fb02 f201 	mul.w	r2, r2, r1
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	2b00      	cmp	r3, #0
 8006708:	f040 809d 	bne.w	8006846 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10b      	bne.n	8006736 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	095b      	lsrs	r3, r3, #5
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	8912      	ldrh	r2, [r2, #8]
 8006726:	4293      	cmp	r3, r2
 8006728:	f0c0 808d 	bcc.w	8006846 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	61da      	str	r2, [r3, #28]
 8006732:	2304      	movs	r3, #4
 8006734:	e09a      	b.n	800686c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	899b      	ldrh	r3, [r3, #12]
 800673a:	461a      	mov	r2, r3
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	8952      	ldrh	r2, [r2, #10]
 8006746:	3a01      	subs	r2, #1
 8006748:	4013      	ands	r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d17b      	bne.n	8006846 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f7ff fc11 	bl	8005f7e <get_fat>
 800675c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d801      	bhi.n	8006768 <dir_next+0xa0>
 8006764:	2302      	movs	r3, #2
 8006766:	e081      	b.n	800686c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800676e:	d101      	bne.n	8006774 <dir_next+0xac>
 8006770:	2301      	movs	r3, #1
 8006772:	e07b      	b.n	800686c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	69db      	ldr	r3, [r3, #28]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	429a      	cmp	r2, r3
 800677c:	d359      	bcc.n	8006832 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d104      	bne.n	800678e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	61da      	str	r2, [r3, #28]
 800678a:	2304      	movs	r3, #4
 800678c:	e06e      	b.n	800686c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7ff fe3d 	bl	8006416 <create_chain>
 800679c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <dir_next+0xe0>
 80067a4:	2307      	movs	r3, #7
 80067a6:	e061      	b.n	800686c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <dir_next+0xea>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e05c      	b.n	800686c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b8:	d101      	bne.n	80067be <dir_next+0xf6>
 80067ba:	2301      	movs	r3, #1
 80067bc:	e056      	b.n	800686c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7ff fadc 	bl	8005d7c <sync_window>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <dir_next+0x106>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e04e      	b.n	800686c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	899b      	ldrh	r3, [r3, #12]
 80067d8:	461a      	mov	r2, r3
 80067da:	2100      	movs	r1, #0
 80067dc:	f7ff f8d5 	bl	800598a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]
 80067e4:	6979      	ldr	r1, [r7, #20]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f7ff fbaa 	bl	8005f40 <clust2sect>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	635a      	str	r2, [r3, #52]	; 0x34
 80067f2:	e012      	b.n	800681a <dir_next+0x152>
						fs->wflag = 1;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2201      	movs	r2, #1
 80067f8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff fabe 	bl	8005d7c <sync_window>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <dir_next+0x142>
 8006806:	2301      	movs	r3, #1
 8006808:	e030      	b.n	800686c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	3301      	adds	r3, #1
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	635a      	str	r2, [r3, #52]	; 0x34
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	895b      	ldrh	r3, [r3, #10]
 800681e:	461a      	mov	r2, r3
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4293      	cmp	r3, r2
 8006824:	d3e6      	bcc.n	80067f4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1ad2      	subs	r2, r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006838:	6979      	ldr	r1, [r7, #20]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff fb80 	bl	8005f40 <clust2sect>
 8006840:	4602      	mov	r2, r0
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	899b      	ldrh	r3, [r3, #12]
 8006856:	461a      	mov	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	fbb3 f0f2 	udiv	r0, r3, r2
 800685e:	fb02 f200 	mul.w	r2, r2, r0
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	18ca      	adds	r2, r1, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006884:	2100      	movs	r1, #0
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fe95 	bl	80065b6 <dir_sdi>
 800688c:	4603      	mov	r3, r0
 800688e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d12b      	bne.n	80068ee <dir_alloc+0x7a>
		n = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	4619      	mov	r1, r3
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff faaf 	bl	8005e04 <move_window>
 80068a6:	4603      	mov	r3, r0
 80068a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d11d      	bne.n	80068ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2be5      	cmp	r3, #229	; 0xe5
 80068b8:	d004      	beq.n	80068c4 <dir_alloc+0x50>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d107      	bne.n	80068d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	3301      	adds	r3, #1
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d102      	bne.n	80068d8 <dir_alloc+0x64>
 80068d2:	e00c      	b.n	80068ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80068d8:	2101      	movs	r1, #1
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fef4 	bl	80066c8 <dir_next>
 80068e0:	4603      	mov	r3, r0
 80068e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d0d7      	beq.n	800689a <dir_alloc+0x26>
 80068ea:	e000      	b.n	80068ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80068ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d101      	bne.n	80068f8 <dir_alloc+0x84>
 80068f4:	2307      	movs	r3, #7
 80068f6:	75fb      	strb	r3, [r7, #23]
	return res;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
 800690a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	331a      	adds	r3, #26
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe ff97 	bl	8005844 <ld_word>
 8006916:	4603      	mov	r3, r0
 8006918:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b03      	cmp	r3, #3
 8006920:	d109      	bne.n	8006936 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	3314      	adds	r3, #20
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe ff8c 	bl	8005844 <ld_word>
 800692c:	4603      	mov	r3, r0
 800692e:	041b      	lsls	r3, r3, #16
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006936:	68fb      	ldr	r3, [r7, #12]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	331a      	adds	r3, #26
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	b292      	uxth	r2, r2
 8006954:	4611      	mov	r1, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe ffaf 	bl	80058ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b03      	cmp	r3, #3
 8006962:	d109      	bne.n	8006978 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f103 0214 	add.w	r2, r3, #20
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	b29b      	uxth	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	4610      	mov	r0, r2
 8006974:	f7fe ffa1 	bl	80058ba <st_word>
	}
}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800698e:	2100      	movs	r1, #0
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff fe10 	bl	80065b6 <dir_sdi>
 8006996:	4603      	mov	r3, r0
 8006998:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <dir_find+0x24>
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	e03e      	b.n	8006a22 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	4619      	mov	r1, r3
 80069aa:	6938      	ldr	r0, [r7, #16]
 80069ac:	f7ff fa2a 	bl	8005e04 <move_window>
 80069b0:	4603      	mov	r3, r0
 80069b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d12f      	bne.n	8006a1a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <dir_find+0x4e>
 80069c8:	2304      	movs	r3, #4
 80069ca:	75fb      	strb	r3, [r7, #23]
 80069cc:	e028      	b.n	8006a20 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	330b      	adds	r3, #11
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	330b      	adds	r3, #11
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <dir_find+0x86>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a18      	ldr	r0, [r3, #32]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3324      	adds	r3, #36	; 0x24
 80069f8:	220b      	movs	r2, #11
 80069fa:	4619      	mov	r1, r3
 80069fc:	f7fe ffdf 	bl	80059be <mem_cmp>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00b      	beq.n	8006a1e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006a06:	2100      	movs	r1, #0
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff fe5d 	bl	80066c8 <dir_next>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0c5      	beq.n	80069a4 <dir_find+0x24>
 8006a18:	e002      	b.n	8006a20 <dir_find+0xa0>
		if (res != FR_OK) break;
 8006a1a:	bf00      	nop
 8006a1c:	e000      	b.n	8006a20 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006a1e:	bf00      	nop

	return res;
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006a38:	2101      	movs	r1, #1
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff ff1a 	bl	8006874 <dir_alloc>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d11c      	bne.n	8006a84 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	4619      	mov	r1, r3
 8006a50:	68b8      	ldr	r0, [r7, #8]
 8006a52:	f7ff f9d7 	bl	8005e04 <move_window>
 8006a56:	4603      	mov	r3, r0
 8006a58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d111      	bne.n	8006a84 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	2220      	movs	r2, #32
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe ff8e 	bl	800598a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a18      	ldr	r0, [r3, #32]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	3324      	adds	r3, #36	; 0x24
 8006a76:	220b      	movs	r2, #11
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f7fe ff65 	bl	8005948 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2201      	movs	r2, #1
 8006a82:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3324      	adds	r3, #36	; 0x24
 8006aa4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006aa6:	220b      	movs	r2, #11
 8006aa8:	2120      	movs	r1, #32
 8006aaa:	68b8      	ldr	r0, [r7, #8]
 8006aac:	f7fe ff6d 	bl	800598a <mem_set>
	si = i = 0; ni = 8;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	2308      	movs	r3, #8
 8006aba:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	617a      	str	r2, [r7, #20]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006aca:	7ffb      	ldrb	r3, [r7, #31]
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d94e      	bls.n	8006b6e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006ad0:	7ffb      	ldrb	r3, [r7, #31]
 8006ad2:	2b2f      	cmp	r3, #47	; 0x2f
 8006ad4:	d006      	beq.n	8006ae4 <create_name+0x54>
 8006ad6:	7ffb      	ldrb	r3, [r7, #31]
 8006ad8:	2b5c      	cmp	r3, #92	; 0x5c
 8006ada:	d110      	bne.n	8006afe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006adc:	e002      	b.n	8006ae4 <create_name+0x54>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	4413      	add	r3, r2
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b2f      	cmp	r3, #47	; 0x2f
 8006aee:	d0f6      	beq.n	8006ade <create_name+0x4e>
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	4413      	add	r3, r2
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b5c      	cmp	r3, #92	; 0x5c
 8006afa:	d0f0      	beq.n	8006ade <create_name+0x4e>
			break;
 8006afc:	e038      	b.n	8006b70 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006afe:	7ffb      	ldrb	r3, [r7, #31]
 8006b00:	2b2e      	cmp	r3, #46	; 0x2e
 8006b02:	d003      	beq.n	8006b0c <create_name+0x7c>
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d30c      	bcc.n	8006b26 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b0b      	cmp	r3, #11
 8006b10:	d002      	beq.n	8006b18 <create_name+0x88>
 8006b12:	7ffb      	ldrb	r3, [r7, #31]
 8006b14:	2b2e      	cmp	r3, #46	; 0x2e
 8006b16:	d001      	beq.n	8006b1c <create_name+0x8c>
 8006b18:	2306      	movs	r3, #6
 8006b1a:	e044      	b.n	8006ba6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	230b      	movs	r3, #11
 8006b22:	61bb      	str	r3, [r7, #24]
			continue;
 8006b24:	e022      	b.n	8006b6c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006b26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	da04      	bge.n	8006b38 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006b2e:	7ffb      	ldrb	r3, [r7, #31]
 8006b30:	3b80      	subs	r3, #128	; 0x80
 8006b32:	4a1f      	ldr	r2, [pc, #124]	; (8006bb0 <create_name+0x120>)
 8006b34:	5cd3      	ldrb	r3, [r2, r3]
 8006b36:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006b38:	7ffb      	ldrb	r3, [r7, #31]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	481d      	ldr	r0, [pc, #116]	; (8006bb4 <create_name+0x124>)
 8006b3e:	f7fe ff65 	bl	8005a0c <chk_chr>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <create_name+0xbc>
 8006b48:	2306      	movs	r3, #6
 8006b4a:	e02c      	b.n	8006ba6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006b4c:	7ffb      	ldrb	r3, [r7, #31]
 8006b4e:	2b60      	cmp	r3, #96	; 0x60
 8006b50:	d905      	bls.n	8006b5e <create_name+0xce>
 8006b52:	7ffb      	ldrb	r3, [r7, #31]
 8006b54:	2b7a      	cmp	r3, #122	; 0x7a
 8006b56:	d802      	bhi.n	8006b5e <create_name+0xce>
 8006b58:	7ffb      	ldrb	r3, [r7, #31]
 8006b5a:	3b20      	subs	r3, #32
 8006b5c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	613a      	str	r2, [r7, #16]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	4413      	add	r3, r2
 8006b68:	7ffa      	ldrb	r2, [r7, #31]
 8006b6a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006b6c:	e7a6      	b.n	8006abc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006b6e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	441a      	add	r2, r3
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <create_name+0xf4>
 8006b80:	2306      	movs	r3, #6
 8006b82:	e010      	b.n	8006ba6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2be5      	cmp	r3, #229	; 0xe5
 8006b8a:	d102      	bne.n	8006b92 <create_name+0x102>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2205      	movs	r2, #5
 8006b90:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b92:	7ffb      	ldrb	r3, [r7, #31]
 8006b94:	2b20      	cmp	r3, #32
 8006b96:	d801      	bhi.n	8006b9c <create_name+0x10c>
 8006b98:	2204      	movs	r2, #4
 8006b9a:	e000      	b.n	8006b9e <create_name+0x10e>
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	330b      	adds	r3, #11
 8006ba2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006ba4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3720      	adds	r7, #32
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	0800b414 	.word	0x0800b414
 8006bb4:	0800b35c 	.word	0x0800b35c

08006bb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006bcc:	e002      	b.n	8006bd4 <follow_path+0x1c>
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8006bda:	d0f8      	beq.n	8006bce <follow_path+0x16>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b5c      	cmp	r3, #92	; 0x5c
 8006be2:	d0f4      	beq.n	8006bce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2200      	movs	r2, #0
 8006be8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b1f      	cmp	r3, #31
 8006bf0:	d80a      	bhi.n	8006c08 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2280      	movs	r2, #128	; 0x80
 8006bf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff fcda 	bl	80065b6 <dir_sdi>
 8006c02:	4603      	mov	r3, r0
 8006c04:	75fb      	strb	r3, [r7, #23]
 8006c06:	e048      	b.n	8006c9a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c08:	463b      	mov	r3, r7
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff ff3f 	bl	8006a90 <create_name>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d139      	bne.n	8006c90 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f7ff feaf 	bl	8006980 <dir_find>
 8006c22:	4603      	mov	r3, r0
 8006c24:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c2c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006c34:	7dfb      	ldrb	r3, [r7, #23]
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d12c      	bne.n	8006c94 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	f003 0304 	and.w	r3, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d127      	bne.n	8006c94 <follow_path+0xdc>
 8006c44:	2305      	movs	r3, #5
 8006c46:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006c48:	e024      	b.n	8006c94 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c4a:	7afb      	ldrb	r3, [r7, #11]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d121      	bne.n	8006c98 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	799b      	ldrb	r3, [r3, #6]
 8006c58:	f003 0310 	and.w	r3, r3, #16
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006c60:	2305      	movs	r3, #5
 8006c62:	75fb      	strb	r3, [r7, #23]
 8006c64:	e019      	b.n	8006c9a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	8992      	ldrh	r2, [r2, #12]
 8006c74:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c78:	fb02 f200 	mul.w	r2, r2, r0
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	440b      	add	r3, r1
 8006c80:	4619      	mov	r1, r3
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f7ff fe3d 	bl	8006902 <ld_clust>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c8e:	e7bb      	b.n	8006c08 <follow_path+0x50>
			if (res != FR_OK) break;
 8006c90:	bf00      	nop
 8006c92:	e002      	b.n	8006c9a <follow_path+0xe2>
				break;
 8006c94:	bf00      	nop
 8006c96:	e000      	b.n	8006c9a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c98:	bf00      	nop
			}
		}
	}

	return res;
 8006c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d031      	beq.n	8006d1e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	e002      	b.n	8006cc8 <get_ldnumber+0x24>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d903      	bls.n	8006cd8 <get_ldnumber+0x34>
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b3a      	cmp	r3, #58	; 0x3a
 8006cd6:	d1f4      	bne.n	8006cc2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b3a      	cmp	r3, #58	; 0x3a
 8006cde:	d11c      	bne.n	8006d1a <get_ldnumber+0x76>
			tp = *path;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	60fa      	str	r2, [r7, #12]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	3b30      	subs	r3, #48	; 0x30
 8006cf0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b09      	cmp	r3, #9
 8006cf6:	d80e      	bhi.n	8006d16 <get_ldnumber+0x72>
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d10a      	bne.n	8006d16 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d107      	bne.n	8006d16 <get_ldnumber+0x72>
					vol = (int)i;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	e002      	b.n	8006d20 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006d1e:	693b      	ldr	r3, [r7, #16]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	70da      	strb	r2, [r3, #3]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d42:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff f85c 	bl	8005e04 <move_window>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <check_fs+0x2a>
 8006d52:	2304      	movs	r3, #4
 8006d54:	e038      	b.n	8006dc8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	3338      	adds	r3, #56	; 0x38
 8006d5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fd70 	bl	8005844 <ld_word>
 8006d64:	4603      	mov	r3, r0
 8006d66:	461a      	mov	r2, r3
 8006d68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d001      	beq.n	8006d74 <check_fs+0x48>
 8006d70:	2303      	movs	r3, #3
 8006d72:	e029      	b.n	8006dc8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d7a:	2be9      	cmp	r3, #233	; 0xe9
 8006d7c:	d009      	beq.n	8006d92 <check_fs+0x66>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d84:	2beb      	cmp	r3, #235	; 0xeb
 8006d86:	d11e      	bne.n	8006dc6 <check_fs+0x9a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d8e:	2b90      	cmp	r3, #144	; 0x90
 8006d90:	d119      	bne.n	8006dc6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3338      	adds	r3, #56	; 0x38
 8006d96:	3336      	adds	r3, #54	; 0x36
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fd6b 	bl	8005874 <ld_dword>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006da4:	4a0a      	ldr	r2, [pc, #40]	; (8006dd0 <check_fs+0xa4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d101      	bne.n	8006dae <check_fs+0x82>
 8006daa:	2300      	movs	r3, #0
 8006dac:	e00c      	b.n	8006dc8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3338      	adds	r3, #56	; 0x38
 8006db2:	3352      	adds	r3, #82	; 0x52
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fd5d 	bl	8005874 <ld_dword>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <check_fs+0xa8>)
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d101      	bne.n	8006dc6 <check_fs+0x9a>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e000      	b.n	8006dc8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006dc6:	2302      	movs	r3, #2
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	00544146 	.word	0x00544146
 8006dd4:	33544146 	.word	0x33544146

08006dd8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b096      	sub	sp, #88	; 0x58
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7ff ff59 	bl	8006ca4 <get_ldnumber>
 8006df2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da01      	bge.n	8006dfe <find_volume+0x26>
 8006dfa:	230b      	movs	r3, #11
 8006dfc:	e26c      	b.n	80072d8 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006dfe:	4aa4      	ldr	r2, [pc, #656]	; (8007090 <find_volume+0x2b8>)
 8006e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <find_volume+0x3a>
 8006e0e:	230c      	movs	r3, #12
 8006e10:	e262      	b.n	80072d8 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8006e12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e14:	f7fe fe15 	bl	8005a42 <lock_fs>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <find_volume+0x4a>
 8006e1e:	230f      	movs	r3, #15
 8006e20:	e25a      	b.n	80072d8 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e26:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006e28:	79fb      	ldrb	r3, [r7, #7]
 8006e2a:	f023 0301 	bic.w	r3, r3, #1
 8006e2e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01a      	beq.n	8006e6e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe fc63 	bl	8005708 <disk_status>
 8006e42:	4603      	mov	r3, r0
 8006e44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006e48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10c      	bne.n	8006e6e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006e54:	79fb      	ldrb	r3, [r7, #7]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d007      	beq.n	8006e6a <find_volume+0x92>
 8006e5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006e66:	230a      	movs	r3, #10
 8006e68:	e236      	b.n	80072d8 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e234      	b.n	80072d8 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	785b      	ldrb	r3, [r3, #1]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe fc5b 	bl	800573c <disk_initialize>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e21d      	b.n	80072d8 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <find_volume+0xda>
 8006ea2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8006eae:	230a      	movs	r3, #10
 8006eb0:	e212      	b.n	80072d8 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	7858      	ldrb	r0, [r3, #1]
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb8:	330c      	adds	r3, #12
 8006eba:	461a      	mov	r2, r3
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	f7fe fca3 	bl	8005808 <disk_ioctl>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <find_volume+0xf4>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e205      	b.n	80072d8 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	899b      	ldrh	r3, [r3, #12]
 8006ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed4:	d80d      	bhi.n	8006ef2 <find_volume+0x11a>
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	899b      	ldrh	r3, [r3, #12]
 8006eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ede:	d308      	bcc.n	8006ef2 <find_volume+0x11a>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	899b      	ldrh	r3, [r3, #12]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	899b      	ldrh	r3, [r3, #12]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	4013      	ands	r3, r2
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <find_volume+0x11e>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e1f0      	b.n	80072d8 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006efa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006efc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006efe:	f7ff ff15 	bl	8006d2c <check_fs>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d14b      	bne.n	8006fa8 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f10:	2300      	movs	r3, #0
 8006f12:	643b      	str	r3, [r7, #64]	; 0x40
 8006f14:	e01f      	b.n	8006f56 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006f24:	4413      	add	r3, r2
 8006f26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d006      	beq.n	8006f40 <find_volume+0x168>
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	3308      	adds	r3, #8
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fe fc9c 	bl	8005874 <ld_dword>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	e000      	b.n	8006f42 <find_volume+0x16a>
 8006f40:	2200      	movs	r2, #0
 8006f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006f4a:	440b      	add	r3, r1
 8006f4c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f52:	3301      	adds	r3, #1
 8006f54:	643b      	str	r3, [r7, #64]	; 0x40
 8006f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d9dc      	bls.n	8006f16 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d002      	beq.n	8006f6c <find_volume+0x194>
 8006f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006f74:	4413      	add	r3, r2
 8006f76:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006f7a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <find_volume+0x1b6>
 8006f82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f86:	f7ff fed1 	bl	8006d2c <check_fs>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	e000      	b.n	8006f90 <find_volume+0x1b8>
 8006f8e:	2303      	movs	r3, #3
 8006f90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d905      	bls.n	8006fa8 <find_volume+0x1d0>
 8006f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d9e1      	bls.n	8006f6c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d101      	bne.n	8006fb4 <find_volume+0x1dc>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e191      	b.n	80072d8 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d901      	bls.n	8006fc0 <find_volume+0x1e8>
 8006fbc:	230d      	movs	r3, #13
 8006fbe:	e18b      	b.n	80072d8 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	3338      	adds	r3, #56	; 0x38
 8006fc4:	330b      	adds	r3, #11
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fc3c 	bl	8005844 <ld_word>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	899b      	ldrh	r3, [r3, #12]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <find_volume+0x204>
 8006fd8:	230d      	movs	r3, #13
 8006fda:	e17d      	b.n	80072d8 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	3338      	adds	r3, #56	; 0x38
 8006fe0:	3316      	adds	r3, #22
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fc2e 	bl	8005844 <ld_word>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <find_volume+0x228>
 8006ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff4:	3338      	adds	r3, #56	; 0x38
 8006ff6:	3324      	adds	r3, #36	; 0x24
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fe fc3b 	bl	8005874 <ld_dword>
 8006ffe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007004:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	789b      	ldrb	r3, [r3, #2]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d005      	beq.n	8007024 <find_volume+0x24c>
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	789b      	ldrb	r3, [r3, #2]
 800701c:	2b02      	cmp	r3, #2
 800701e:	d001      	beq.n	8007024 <find_volume+0x24c>
 8007020:	230d      	movs	r3, #13
 8007022:	e159      	b.n	80072d8 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	789b      	ldrb	r3, [r3, #2]
 8007028:	461a      	mov	r2, r3
 800702a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702c:	fb02 f303 	mul.w	r3, r2, r3
 8007030:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007038:	b29a      	uxth	r2, r3
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007040:	895b      	ldrh	r3, [r3, #10]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <find_volume+0x280>
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	895b      	ldrh	r3, [r3, #10]
 800704a:	461a      	mov	r2, r3
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	895b      	ldrh	r3, [r3, #10]
 8007050:	3b01      	subs	r3, #1
 8007052:	4013      	ands	r3, r2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <find_volume+0x284>
 8007058:	230d      	movs	r3, #13
 800705a:	e13d      	b.n	80072d8 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	3338      	adds	r3, #56	; 0x38
 8007060:	3311      	adds	r3, #17
 8007062:	4618      	mov	r0, r3
 8007064:	f7fe fbee 	bl	8005844 <ld_word>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
 800706c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007072:	891b      	ldrh	r3, [r3, #8]
 8007074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007076:	8992      	ldrh	r2, [r2, #12]
 8007078:	0952      	lsrs	r2, r2, #5
 800707a:	b292      	uxth	r2, r2
 800707c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007080:	fb02 f201 	mul.w	r2, r2, r1
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <find_volume+0x2bc>
 800708c:	230d      	movs	r3, #13
 800708e:	e123      	b.n	80072d8 <find_volume+0x500>
 8007090:	20000774 	.word	0x20000774

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	3338      	adds	r3, #56	; 0x38
 8007098:	3313      	adds	r3, #19
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe fbd2 	bl	8005844 <ld_word>
 80070a0:	4603      	mov	r3, r0
 80070a2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80070a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d106      	bne.n	80070b8 <find_volume+0x2e0>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	3338      	adds	r3, #56	; 0x38
 80070ae:	3320      	adds	r3, #32
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe fbdf 	bl	8005874 <ld_dword>
 80070b6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	3338      	adds	r3, #56	; 0x38
 80070bc:	330e      	adds	r3, #14
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe fbc0 	bl	8005844 <ld_word>
 80070c4:	4603      	mov	r3, r0
 80070c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80070c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <find_volume+0x2fa>
 80070ce:	230d      	movs	r3, #13
 80070d0:	e102      	b.n	80072d8 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80070d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070d6:	4413      	add	r3, r2
 80070d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070da:	8911      	ldrh	r1, [r2, #8]
 80070dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070de:	8992      	ldrh	r2, [r2, #12]
 80070e0:	0952      	lsrs	r2, r2, #5
 80070e2:	b292      	uxth	r2, r2
 80070e4:	fbb1 f2f2 	udiv	r2, r1, r2
 80070e8:	b292      	uxth	r2, r2
 80070ea:	4413      	add	r3, r2
 80070ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80070ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d201      	bcs.n	80070fa <find_volume+0x322>
 80070f6:	230d      	movs	r3, #13
 80070f8:	e0ee      	b.n	80072d8 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80070fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007102:	8952      	ldrh	r2, [r2, #10]
 8007104:	fbb3 f3f2 	udiv	r3, r3, r2
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <find_volume+0x33c>
 8007110:	230d      	movs	r3, #13
 8007112:	e0e1      	b.n	80072d8 <find_volume+0x500>
		fmt = FS_FAT32;
 8007114:	2303      	movs	r3, #3
 8007116:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007120:	4293      	cmp	r3, r2
 8007122:	d802      	bhi.n	800712a <find_volume+0x352>
 8007124:	2302      	movs	r3, #2
 8007126:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007130:	4293      	cmp	r3, r2
 8007132:	d802      	bhi.n	800713a <find_volume+0x362>
 8007134:	2301      	movs	r3, #1
 8007136:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	1c9a      	adds	r2, r3, #2
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007146:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007148:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800714a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800714c:	441a      	add	r2, r3
 800714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007150:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007152:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	441a      	add	r2, r3
 8007158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800715c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007160:	2b03      	cmp	r3, #3
 8007162:	d11e      	bne.n	80071a2 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	3338      	adds	r3, #56	; 0x38
 8007168:	332a      	adds	r3, #42	; 0x2a
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fb6a 	bl	8005844 <ld_word>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <find_volume+0x3a2>
 8007176:	230d      	movs	r3, #13
 8007178:	e0ae      	b.n	80072d8 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	891b      	ldrh	r3, [r3, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <find_volume+0x3ae>
 8007182:	230d      	movs	r3, #13
 8007184:	e0a8      	b.n	80072d8 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	3338      	adds	r3, #56	; 0x38
 800718a:	332c      	adds	r3, #44	; 0x2c
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe fb71 	bl	8005874 <ld_dword>
 8007192:	4602      	mov	r2, r0
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	647b      	str	r3, [r7, #68]	; 0x44
 80071a0:	e01f      	b.n	80071e2 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	891b      	ldrh	r3, [r3, #8]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <find_volume+0x3d6>
 80071aa:	230d      	movs	r3, #13
 80071ac:	e094      	b.n	80072d8 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b4:	441a      	add	r2, r3
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80071ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d103      	bne.n	80071ca <find_volume+0x3f2>
 80071c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	e00a      	b.n	80071e0 <find_volume+0x408>
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	69da      	ldr	r2, [r3, #28]
 80071ce:	4613      	mov	r3, r2
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	4413      	add	r3, r2
 80071d4:	085a      	lsrs	r2, r3, #1
 80071d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80071e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	6a1a      	ldr	r2, [r3, #32]
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	899b      	ldrh	r3, [r3, #12]
 80071ea:	4619      	mov	r1, r3
 80071ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ee:	440b      	add	r3, r1
 80071f0:	3b01      	subs	r3, #1
 80071f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071f4:	8989      	ldrh	r1, [r1, #12]
 80071f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d201      	bcs.n	8007202 <find_volume+0x42a>
 80071fe:	230d      	movs	r3, #13
 8007200:	e06a      	b.n	80072d8 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007208:	619a      	str	r2, [r3, #24]
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	2280      	movs	r2, #128	; 0x80
 8007216:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800721c:	2b03      	cmp	r3, #3
 800721e:	d149      	bne.n	80072b4 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	3338      	adds	r3, #56	; 0x38
 8007224:	3330      	adds	r3, #48	; 0x30
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fb0c 	bl	8005844 <ld_word>
 800722c:	4603      	mov	r3, r0
 800722e:	2b01      	cmp	r3, #1
 8007230:	d140      	bne.n	80072b4 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007234:	3301      	adds	r3, #1
 8007236:	4619      	mov	r1, r3
 8007238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800723a:	f7fe fde3 	bl	8005e04 <move_window>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d137      	bne.n	80072b4 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	2200      	movs	r2, #0
 8007248:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	3338      	adds	r3, #56	; 0x38
 800724e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe faf6 	bl	8005844 <ld_word>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007260:	429a      	cmp	r2, r3
 8007262:	d127      	bne.n	80072b4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007266:	3338      	adds	r3, #56	; 0x38
 8007268:	4618      	mov	r0, r3
 800726a:	f7fe fb03 	bl	8005874 <ld_dword>
 800726e:	4602      	mov	r2, r0
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <find_volume+0x508>)
 8007272:	429a      	cmp	r2, r3
 8007274:	d11e      	bne.n	80072b4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007278:	3338      	adds	r3, #56	; 0x38
 800727a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe faf8 	bl	8005874 <ld_dword>
 8007284:	4602      	mov	r2, r0
 8007286:	4b17      	ldr	r3, [pc, #92]	; (80072e4 <find_volume+0x50c>)
 8007288:	429a      	cmp	r2, r3
 800728a:	d113      	bne.n	80072b4 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800728c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728e:	3338      	adds	r3, #56	; 0x38
 8007290:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007294:	4618      	mov	r0, r3
 8007296:	f7fe faed 	bl	8005874 <ld_dword>
 800729a:	4602      	mov	r2, r0
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	3338      	adds	r3, #56	; 0x38
 80072a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7fe fae3 	bl	8005874 <ld_dword>
 80072ae:	4602      	mov	r2, r0
 80072b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80072b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80072ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <find_volume+0x510>)
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <find_volume+0x510>)
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <find_volume+0x510>)
 80072ca:	881a      	ldrh	r2, [r3, #0]
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80072d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072d2:	f7fe fd2f 	bl	8005d34 <clear_lock>
#endif
	return FR_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3758      	adds	r7, #88	; 0x58
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	41615252 	.word	0x41615252
 80072e4:	61417272 	.word	0x61417272
 80072e8:	20000778 	.word	0x20000778

080072ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80072f6:	2309      	movs	r3, #9
 80072f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d02e      	beq.n	800735e <validate+0x72>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d02a      	beq.n	800735e <validate+0x72>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d025      	beq.n	800735e <validate+0x72>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	889a      	ldrh	r2, [r3, #4]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	88db      	ldrh	r3, [r3, #6]
 800731c:	429a      	cmp	r2, r3
 800731e:	d11e      	bne.n	800735e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fb8c 	bl	8005a42 <lock_fs>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d014      	beq.n	800735a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe f9e6 	bl	8005708 <disk_status>
 800733c:	4603      	mov	r3, r0
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d102      	bne.n	800734c <validate+0x60>
				res = FR_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
 800734a:	e008      	b.n	800735e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2100      	movs	r1, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fb8b 	bl	8005a6e <unlock_fs>
 8007358:	e001      	b.n	800735e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800735a:	230f      	movs	r3, #15
 800735c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d102      	bne.n	800736a <validate+0x7e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	e000      	b.n	800736c <validate+0x80>
 800736a:	2300      	movs	r3, #0
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	6013      	str	r3, [r2, #0]
	return res;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800738e:	f107 0310 	add.w	r3, r7, #16
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff fc86 	bl	8006ca4 <get_ldnumber>
 8007398:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	2b00      	cmp	r3, #0
 800739e:	da01      	bge.n	80073a4 <f_mount+0x28>
 80073a0:	230b      	movs	r3, #11
 80073a2:	e048      	b.n	8007436 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80073a4:	4a26      	ldr	r2, [pc, #152]	; (8007440 <f_mount+0xc4>)
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00f      	beq.n	80073d4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80073b4:	69b8      	ldr	r0, [r7, #24]
 80073b6:	f7fe fcbd 	bl	8005d34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fd09 	bl	8007dd6 <ff_del_syncobj>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <f_mount+0x52>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e033      	b.n	8007436 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00f      	beq.n	80073fa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	3310      	adds	r3, #16
 80073e8:	4619      	mov	r1, r3
 80073ea:	4610      	mov	r0, r2
 80073ec:	f000 fcd3 	bl	8007d96 <ff_cre_syncobj>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <f_mount+0x7e>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e01d      	b.n	8007436 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4910      	ldr	r1, [pc, #64]	; (8007440 <f_mount+0xc4>)
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <f_mount+0x94>
 800740a:	79fb      	ldrb	r3, [r7, #7]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d001      	beq.n	8007414 <f_mount+0x98>
 8007410:	2300      	movs	r3, #0
 8007412:	e010      	b.n	8007436 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007414:	f107 010c 	add.w	r1, r7, #12
 8007418:	f107 0308 	add.w	r3, r7, #8
 800741c:	2200      	movs	r2, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff fcda 	bl	8006dd8 <find_volume>
 8007424:	4603      	mov	r3, r0
 8007426:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	7dfa      	ldrb	r2, [r7, #23]
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fb1d 	bl	8005a6e <unlock_fs>
 8007434:	7dfb      	ldrb	r3, [r7, #23]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3720      	adds	r7, #32
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000774 	.word	0x20000774

08007444 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b098      	sub	sp, #96	; 0x60
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <f_open+0x18>
 8007458:	2309      	movs	r3, #9
 800745a:	e1c2      	b.n	80077e2 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007462:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	f107 0110 	add.w	r1, r7, #16
 800746a:	f107 0308 	add.w	r3, r7, #8
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fcb2 	bl	8006dd8 <find_volume>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800747a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800747e:	2b00      	cmp	r3, #0
 8007480:	f040 819f 	bne.w	80077c2 <f_open+0x37e>
		dj.obj.fs = fs;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	f107 0314 	add.w	r3, r7, #20
 800748e:	4611      	mov	r1, r2
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff fb91 	bl	8006bb8 <follow_path>
 8007496:	4603      	mov	r3, r0
 8007498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800749c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11a      	bne.n	80074da <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80074a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80074a8:	b25b      	sxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da03      	bge.n	80074b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80074ae:	2306      	movs	r3, #6
 80074b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80074b4:	e011      	b.n	80074da <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	f023 0301 	bic.w	r3, r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bf14      	ite	ne
 80074c0:	2301      	movne	r3, #1
 80074c2:	2300      	moveq	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	461a      	mov	r2, r3
 80074c8:	f107 0314 	add.w	r3, r7, #20
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fae8 	bl	8005aa4 <chk_lock>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	f003 031c 	and.w	r3, r3, #28
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d07f      	beq.n	80075e4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80074e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d017      	beq.n	800751c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80074ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d10e      	bne.n	8007512 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80074f4:	f7fe fb32 	bl	8005b5c <enq_lock>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d006      	beq.n	800750c <f_open+0xc8>
 80074fe:	f107 0314 	add.w	r3, r7, #20
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff fa91 	bl	8006a2a <dir_register>
 8007508:	4603      	mov	r3, r0
 800750a:	e000      	b.n	800750e <f_open+0xca>
 800750c:	2312      	movs	r3, #18
 800750e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	f043 0308 	orr.w	r3, r3, #8
 8007518:	71fb      	strb	r3, [r7, #7]
 800751a:	e010      	b.n	800753e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800751c:	7ebb      	ldrb	r3, [r7, #26]
 800751e:	f003 0311 	and.w	r3, r3, #17
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <f_open+0xea>
					res = FR_DENIED;
 8007526:	2307      	movs	r3, #7
 8007528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800752c:	e007      	b.n	800753e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800752e:	79fb      	ldrb	r3, [r7, #7]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <f_open+0xfa>
 8007538:	2308      	movs	r3, #8
 800753a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800753e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007542:	2b00      	cmp	r3, #0
 8007544:	d168      	bne.n	8007618 <f_open+0x1d4>
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d063      	beq.n	8007618 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007550:	f7fd feea 	bl	8005328 <get_fattime>
 8007554:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	330e      	adds	r3, #14
 800755a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800755c:	4618      	mov	r0, r3
 800755e:	f7fe f9c7 	bl	80058f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007564:	3316      	adds	r3, #22
 8007566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe f9c1 	bl	80058f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	330b      	adds	r3, #11
 8007572:	2220      	movs	r2, #32
 8007574:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800757a:	4611      	mov	r1, r2
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff f9c0 	bl	8006902 <ld_clust>
 8007582:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007588:	2200      	movs	r2, #0
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff f9d8 	bl	8006940 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	331c      	adds	r3, #28
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe f9aa 	bl	80058f0 <st_dword>
					fs->wflag = 1;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	2201      	movs	r2, #1
 80075a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80075a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d037      	beq.n	8007618 <f_open+0x1d4>
						dw = fs->winsect;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ac:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80075ae:	f107 0314 	add.w	r3, r7, #20
 80075b2:	2200      	movs	r2, #0
 80075b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fec8 	bl	800634c <remove_chain>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80075c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d126      	bne.n	8007618 <f_open+0x1d4>
							res = move_window(fs, dw);
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fc18 	bl	8005e04 <move_window>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075de:	3a01      	subs	r2, #1
 80075e0:	615a      	str	r2, [r3, #20]
 80075e2:	e019      	b.n	8007618 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80075e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d115      	bne.n	8007618 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80075ec:	7ebb      	ldrb	r3, [r7, #26]
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d003      	beq.n	80075fe <f_open+0x1ba>
					res = FR_NO_FILE;
 80075f6:	2304      	movs	r3, #4
 80075f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80075fc:	e00c      	b.n	8007618 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80075fe:	79fb      	ldrb	r3, [r7, #7]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d007      	beq.n	8007618 <f_open+0x1d4>
 8007608:	7ebb      	ldrb	r3, [r7, #26]
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <f_open+0x1d4>
						res = FR_DENIED;
 8007612:	2307      	movs	r3, #7
 8007614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800761c:	2b00      	cmp	r3, #0
 800761e:	d128      	bne.n	8007672 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007630:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800763a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	f023 0301 	bic.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf14      	ite	ne
 800764a:	2301      	movne	r3, #1
 800764c:	2300      	moveq	r3, #0
 800764e:	b2db      	uxtb	r3, r3
 8007650:	461a      	mov	r2, r3
 8007652:	f107 0314 	add.w	r3, r7, #20
 8007656:	4611      	mov	r1, r2
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe faa1 	bl	8005ba0 <inc_lock>
 800765e:	4602      	mov	r2, r0
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <f_open+0x22e>
 800766c:	2302      	movs	r3, #2
 800766e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007676:	2b00      	cmp	r3, #0
 8007678:	f040 80a3 	bne.w	80077c2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff f93d 	bl	8006902 <ld_clust>
 8007688:	4602      	mov	r2, r0
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800768e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007690:	331c      	adds	r3, #28
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe f8ee 	bl	8005874 <ld_dword>
 8007698:	4602      	mov	r2, r0
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	88da      	ldrh	r2, [r3, #6]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	79fa      	ldrb	r2, [r7, #7]
 80076b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3330      	adds	r3, #48	; 0x30
 80076ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076d2:	2100      	movs	r1, #0
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe f958 	bl	800598a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d06e      	beq.n	80077c2 <f_open+0x37e>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d06a      	beq.n	80077c2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	895b      	ldrh	r3, [r3, #10]
 80076f8:	461a      	mov	r2, r3
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	fb03 f302 	mul.w	r3, r3, r2
 8007702:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	657b      	str	r3, [r7, #84]	; 0x54
 8007710:	e016      	b.n	8007740 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fc31 	bl	8005f7e <get_fat>
 800771c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800771e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007720:	2b01      	cmp	r3, #1
 8007722:	d802      	bhi.n	800772a <f_open+0x2e6>
 8007724:	2302      	movs	r3, #2
 8007726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800772a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007730:	d102      	bne.n	8007738 <f_open+0x2f4>
 8007732:	2301      	movs	r3, #1
 8007734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800773a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	657b      	str	r3, [r7, #84]	; 0x54
 8007740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007744:	2b00      	cmp	r3, #0
 8007746:	d103      	bne.n	8007750 <f_open+0x30c>
 8007748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800774a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800774c:	429a      	cmp	r2, r3
 800774e:	d8e0      	bhi.n	8007712 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007754:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800775a:	2b00      	cmp	r3, #0
 800775c:	d131      	bne.n	80077c2 <f_open+0x37e>
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	899b      	ldrh	r3, [r3, #12]
 8007762:	461a      	mov	r2, r3
 8007764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007766:	fbb3 f1f2 	udiv	r1, r3, r2
 800776a:	fb02 f201 	mul.w	r2, r2, r1
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d026      	beq.n	80077c2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fbe1 	bl	8005f40 <clust2sect>
 800777e:	6478      	str	r0, [r7, #68]	; 0x44
 8007780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007782:	2b00      	cmp	r3, #0
 8007784:	d103      	bne.n	800778e <f_open+0x34a>
						res = FR_INT_ERR;
 8007786:	2302      	movs	r3, #2
 8007788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800778c:	e019      	b.n	80077c2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	899b      	ldrh	r3, [r3, #12]
 8007792:	461a      	mov	r2, r3
 8007794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007796:	fbb3 f2f2 	udiv	r2, r3, r2
 800779a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800779c:	441a      	add	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	7858      	ldrb	r0, [r3, #1]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1a      	ldr	r2, [r3, #32]
 80077b0:	2301      	movs	r3, #1
 80077b2:	f7fd ffe9 	bl	8005788 <disk_read>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <f_open+0x37e>
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80077c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <f_open+0x38c>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80077d6:	4611      	mov	r1, r2
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fe f948 	bl	8005a6e <unlock_fs>
 80077de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3760      	adds	r7, #96	; 0x60
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b08c      	sub	sp, #48	; 0x30
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
 80077f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f107 0210 	add.w	r2, r7, #16
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff fd6e 	bl	80072ec <validate>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800781a:	2b00      	cmp	r3, #0
 800781c:	d107      	bne.n	800782e <f_write+0x44>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	7d5b      	ldrb	r3, [r3, #21]
 8007822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800782a:	2b00      	cmp	r3, #0
 800782c:	d009      	beq.n	8007842 <f_write+0x58>
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe f919 	bl	8005a6e <unlock_fs>
 800783c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007840:	e192      	b.n	8007b68 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	7d1b      	ldrb	r3, [r3, #20]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <f_write+0x72>
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	2107      	movs	r1, #7
 8007852:	4618      	mov	r0, r3
 8007854:	f7fe f90b 	bl	8005a6e <unlock_fs>
 8007858:	2307      	movs	r3, #7
 800785a:	e185      	b.n	8007b68 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	699a      	ldr	r2, [r3, #24]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	441a      	add	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	429a      	cmp	r2, r3
 800786a:	f080 816a 	bcs.w	8007b42 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	43db      	mvns	r3, r3
 8007874:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007876:	e164      	b.n	8007b42 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	8992      	ldrh	r2, [r2, #12]
 8007880:	fbb3 f1f2 	udiv	r1, r3, r2
 8007884:	fb02 f201 	mul.w	r2, r2, r1
 8007888:	1a9b      	subs	r3, r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 810f 	bne.w	8007aae <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	8992      	ldrh	r2, [r2, #12]
 8007898:	fbb3 f3f2 	udiv	r3, r3, r2
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	8952      	ldrh	r2, [r2, #10]
 80078a0:	3a01      	subs	r2, #1
 80078a2:	4013      	ands	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d14d      	bne.n	8007948 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10c      	bne.n	80078ce <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11a      	bne.n	80078f6 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2100      	movs	r1, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fda6 	bl	8006416 <create_chain>
 80078ca:	62b8      	str	r0, [r7, #40]	; 0x28
 80078cc:	e013      	b.n	80078f6 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d007      	beq.n	80078e6 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	4619      	mov	r1, r3
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f7fe fe32 	bl	8006546 <clmt_clust>
 80078e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80078e4:	e007      	b.n	80078f6 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f7fe fd91 	bl	8006416 <create_chain>
 80078f4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8127 	beq.w	8007b4c <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80078fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007900:	2b01      	cmp	r3, #1
 8007902:	d109      	bne.n	8007918 <f_write+0x12e>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2202      	movs	r2, #2
 8007908:	755a      	strb	r2, [r3, #21]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	2102      	movs	r1, #2
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe f8ad 	bl	8005a6e <unlock_fs>
 8007914:	2302      	movs	r3, #2
 8007916:	e127      	b.n	8007b68 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800791e:	d109      	bne.n	8007934 <f_write+0x14a>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	755a      	strb	r2, [r3, #21]
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2101      	movs	r1, #1
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe f89f 	bl	8005a6e <unlock_fs>
 8007930:	2301      	movs	r3, #1
 8007932:	e119      	b.n	8007b68 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007938:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <f_write+0x15e>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007946:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	7d1b      	ldrb	r3, [r3, #20]
 800794c:	b25b      	sxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	da1d      	bge.n	800798e <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	7858      	ldrb	r0, [r3, #1]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6a1a      	ldr	r2, [r3, #32]
 8007960:	2301      	movs	r3, #1
 8007962:	f7fd ff31 	bl	80057c8 <disk_write>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d009      	beq.n	8007980 <f_write+0x196>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2201      	movs	r2, #1
 8007970:	755a      	strb	r2, [r3, #21]
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2101      	movs	r1, #1
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe f879 	bl	8005a6e <unlock_fs>
 800797c:	2301      	movs	r3, #1
 800797e:	e0f3      	b.n	8007b68 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	7d1b      	ldrb	r3, [r3, #20]
 8007984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007988:	b2da      	uxtb	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	4619      	mov	r1, r3
 8007996:	4610      	mov	r0, r2
 8007998:	f7fe fad2 	bl	8005f40 <clust2sect>
 800799c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d109      	bne.n	80079b8 <f_write+0x1ce>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2202      	movs	r2, #2
 80079a8:	755a      	strb	r2, [r3, #21]
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	2102      	movs	r1, #2
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe f85d 	bl	8005a6e <unlock_fs>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e0d7      	b.n	8007b68 <f_write+0x37e>
			sect += csect;
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	4413      	add	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	899b      	ldrh	r3, [r3, #12]
 80079c4:	461a      	mov	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80079cc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d048      	beq.n	8007a66 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	4413      	add	r3, r2
 80079da:	693a      	ldr	r2, [r7, #16]
 80079dc:	8952      	ldrh	r2, [r2, #10]
 80079de:	4293      	cmp	r3, r2
 80079e0:	d905      	bls.n	80079ee <f_write+0x204>
					cc = fs->csize - csect;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	895b      	ldrh	r3, [r3, #10]
 80079e6:	461a      	mov	r2, r3
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	7858      	ldrb	r0, [r3, #1]
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	69f9      	ldr	r1, [r7, #28]
 80079f8:	f7fd fee6 	bl	80057c8 <disk_write>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <f_write+0x22c>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	755a      	strb	r2, [r3, #21]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fe f82e 	bl	8005a6e <unlock_fs>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e0a8      	b.n	8007b68 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1a      	ldr	r2, [r3, #32]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	6a3a      	ldr	r2, [r7, #32]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d918      	bls.n	8007a56 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6a1a      	ldr	r2, [r3, #32]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	8992      	ldrh	r2, [r2, #12]
 8007a36:	fb02 f303 	mul.w	r3, r2, r3
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	18d1      	adds	r1, r2, r3
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	899b      	ldrh	r3, [r3, #12]
 8007a42:	461a      	mov	r2, r3
 8007a44:	f7fd ff80 	bl	8005948 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	7d1b      	ldrb	r3, [r3, #20]
 8007a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	899b      	ldrh	r3, [r3, #12]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	fb02 f303 	mul.w	r3, r2, r3
 8007a62:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007a64:	e050      	b.n	8007b08 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d01b      	beq.n	8007aa8 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	699a      	ldr	r2, [r3, #24]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d215      	bcs.n	8007aa8 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	7858      	ldrb	r0, [r3, #1]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a86:	2301      	movs	r3, #1
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	f7fd fe7d 	bl	8005788 <disk_read>
 8007a8e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d009      	beq.n	8007aa8 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	755a      	strb	r2, [r3, #21]
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f7fd ffe5 	bl	8005a6e <unlock_fs>
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e05f      	b.n	8007b68 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	899b      	ldrh	r3, [r3, #12]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	8992      	ldrh	r2, [r2, #12]
 8007abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ac0:	fb02 f201 	mul.w	r2, r2, r1
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	1ac3      	subs	r3, r0, r3
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d901      	bls.n	8007ad6 <f_write+0x2ec>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	8992      	ldrh	r2, [r2, #12]
 8007ae4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ae8:	fb02 f200 	mul.w	r2, r2, r0
 8007aec:	1a9b      	subs	r3, r3, r2
 8007aee:	440b      	add	r3, r1
 8007af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007af2:	69f9      	ldr	r1, [r7, #28]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7fd ff27 	bl	8005948 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	7d1b      	ldrb	r3, [r3, #20]
 8007afe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b08:	69fa      	ldr	r2, [r7, #28]
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	4413      	add	r3, r2
 8007b0e:	61fb      	str	r3, [r7, #28]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	441a      	add	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	619a      	str	r2, [r3, #24]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	bf38      	it	cc
 8007b28:	461a      	movcc	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	60da      	str	r2, [r3, #12]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	441a      	add	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f47f ae97 	bne.w	8007878 <f_write+0x8e>
 8007b4a:	e000      	b.n	8007b4e <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007b4c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	7d1b      	ldrb	r3, [r3, #20]
 8007b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	2100      	movs	r1, #0
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fd ff84 	bl	8005a6e <unlock_fs>
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3730      	adds	r7, #48	; 0x30
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f107 0208 	add.w	r2, r7, #8
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fbb3 	bl	80072ec <validate>
 8007b86:	4603      	mov	r3, r0
 8007b88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d16d      	bne.n	8007c6c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	7d1b      	ldrb	r3, [r3, #20]
 8007b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d067      	beq.n	8007c6c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	7d1b      	ldrb	r3, [r3, #20]
 8007ba0:	b25b      	sxtb	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	da1a      	bge.n	8007bdc <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	7858      	ldrb	r0, [r3, #1]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1a      	ldr	r2, [r3, #32]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f7fd fe07 	bl	80057c8 <disk_write>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d006      	beq.n	8007bce <f_sync+0x5e>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fd ff52 	bl	8005a6e <unlock_fs>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e055      	b.n	8007c7a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	7d1b      	ldrb	r3, [r3, #20]
 8007bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007bdc:	f7fd fba4 	bl	8005328 <get_fattime>
 8007be0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe f90a 	bl	8005e04 <move_window>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d138      	bne.n	8007c6c <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	330b      	adds	r3, #11
 8007c04:	781a      	ldrb	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	330b      	adds	r3, #11
 8007c0a:	f042 0220 	orr.w	r2, r2, #32
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	68f9      	ldr	r1, [r7, #12]
 8007c1e:	f7fe fe8f 	bl	8006940 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f103 021c 	add.w	r2, r3, #28
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	f7fd fe5e 	bl	80058f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3316      	adds	r3, #22
 8007c38:	6939      	ldr	r1, [r7, #16]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fd fe58 	bl	80058f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3312      	adds	r3, #18
 8007c44:	2100      	movs	r1, #0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fd fe37 	bl	80058ba <st_word>
					fs->wflag = 1;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7fe f903 	bl	8005e60 <sync_fs>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	7d1b      	ldrb	r3, [r3, #20]
 8007c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	7dfa      	ldrb	r2, [r7, #23]
 8007c70:	4611      	mov	r1, r2
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fd fefb 	bl	8005a6e <unlock_fs>
 8007c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff ff70 	bl	8007b70 <f_sync>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d11d      	bne.n	8007cd6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f107 0208 	add.w	r2, r7, #8
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff fb22 	bl	80072ec <validate>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d111      	bne.n	8007cd6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe f800 	bl	8005cbc <dec_lock>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fd fecc 	bl	8005a6e <unlock_fs>
#endif
		}
	}
	return res;
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007cf6:	4b1f      	ldr	r3, [pc, #124]	; (8007d74 <FATFS_LinkDriverEx+0x94>)
 8007cf8:	7a5b      	ldrb	r3, [r3, #9]
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d131      	bne.n	8007d64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d00:	4b1c      	ldr	r3, [pc, #112]	; (8007d74 <FATFS_LinkDriverEx+0x94>)
 8007d02:	7a5b      	ldrb	r3, [r3, #9]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	461a      	mov	r2, r3
 8007d08:	4b1a      	ldr	r3, [pc, #104]	; (8007d74 <FATFS_LinkDriverEx+0x94>)
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007d0e:	4b19      	ldr	r3, [pc, #100]	; (8007d74 <FATFS_LinkDriverEx+0x94>)
 8007d10:	7a5b      	ldrb	r3, [r3, #9]
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <FATFS_LinkDriverEx+0x94>)
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d1e:	4b15      	ldr	r3, [pc, #84]	; (8007d74 <FATFS_LinkDriverEx+0x94>)
 8007d20:	7a5b      	ldrb	r3, [r3, #9]
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	4b13      	ldr	r3, [pc, #76]	; (8007d74 <FATFS_LinkDriverEx+0x94>)
 8007d28:	4413      	add	r3, r2
 8007d2a:	79fa      	ldrb	r2, [r7, #7]
 8007d2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d2e:	4b11      	ldr	r3, [pc, #68]	; (8007d74 <FATFS_LinkDriverEx+0x94>)
 8007d30:	7a5b      	ldrb	r3, [r3, #9]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	b2d1      	uxtb	r1, r2
 8007d38:	4a0e      	ldr	r2, [pc, #56]	; (8007d74 <FATFS_LinkDriverEx+0x94>)
 8007d3a:	7251      	strb	r1, [r2, #9]
 8007d3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d3e:	7dbb      	ldrb	r3, [r7, #22]
 8007d40:	3330      	adds	r3, #48	; 0x30
 8007d42:	b2da      	uxtb	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	223a      	movs	r2, #58	; 0x3a
 8007d4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	3302      	adds	r3, #2
 8007d54:	222f      	movs	r2, #47	; 0x2f
 8007d56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	3303      	adds	r3, #3
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	371c      	adds	r7, #28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	2000079c 	.word	0x2000079c

08007d78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d82:	2200      	movs	r2, #0
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7ff ffaa 	bl	8007ce0 <FATFS_LinkDriverEx>
 8007d8c:	4603      	mov	r3, r0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b086      	sub	sp, #24
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	6039      	str	r1, [r7, #0]
 8007da0:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007daa:	f107 030c 	add.w	r3, r7, #12
 8007dae:	2101      	movs	r1, #1
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 f8e9 	bl	8007f88 <osSemaphoreCreate>
 8007db6:	4602      	mov	r2, r0
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bf14      	ite	ne
 8007dc4:	2301      	movne	r3, #1
 8007dc6:	2300      	moveq	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	617b      	str	r3, [r7, #20]

    return ret;
 8007dcc:	697b      	ldr	r3, [r7, #20]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f98a 	bl	80080f8 <osSemaphoreDelete>
#endif
    return 1;
 8007de4:	2301      	movs	r3, #1
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8007dfa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f8f6 	bl	8007ff0 <osSemaphoreWait>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f933 	bl	800808c <osSemaphoreRelease>
#endif
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b085      	sub	sp, #20
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	4603      	mov	r3, r0
 8007e36:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e40:	2b84      	cmp	r3, #132	; 0x84
 8007e42:	d005      	beq.n	8007e50 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3303      	adds	r3, #3
 8007e4e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e50:	68fb      	ldr	r3, [r7, #12]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3714      	adds	r7, #20
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e64:	f3ef 8305 	mrs	r3, IPSR
 8007e68:	607b      	str	r3, [r7, #4]
  return(result);
 8007e6a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bf14      	ite	ne
 8007e70:	2301      	movne	r3, #1
 8007e72:	2300      	moveq	r3, #0
 8007e74:	b2db      	uxtb	r3, r3
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e86:	f001 fc25 	bl	80096d4 <vTaskStartScheduler>
  
  return osOK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8007e94:	f002 f864 	bl	8009f60 <xTaskGetSchedulerState>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <osKernelRunning+0x12>
    return 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e000      	b.n	8007ea4 <osKernelRunning+0x14>
  else
    return 1;
 8007ea2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007eac:	f7ff ffd7 	bl	8007e5e <inHandlerMode>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d003      	beq.n	8007ebe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007eb6:	f001 fd2b 	bl	8009910 <xTaskGetTickCountFromISR>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	e002      	b.n	8007ec4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007ebe:	f001 fd17 	bl	80098f0 <xTaskGetTickCount>
 8007ec2:	4603      	mov	r3, r0
  }
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eca:	b089      	sub	sp, #36	; 0x24
 8007ecc:	af04      	add	r7, sp, #16
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d020      	beq.n	8007f1c <osThreadCreate+0x54>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d01c      	beq.n	8007f1c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685c      	ldr	r4, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681d      	ldr	r5, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691e      	ldr	r6, [r3, #16]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7ff ff9a 	bl	8007e2e <makeFreeRtosPriority>
 8007efa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f04:	9202      	str	r2, [sp, #8]
 8007f06:	9301      	str	r3, [sp, #4]
 8007f08:	9100      	str	r1, [sp, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	4632      	mov	r2, r6
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4620      	mov	r0, r4
 8007f12:	f001 fa19 	bl	8009348 <xTaskCreateStatic>
 8007f16:	4603      	mov	r3, r0
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	e01c      	b.n	8007f56 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685c      	ldr	r4, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f28:	b29e      	uxth	r6, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff ff7c 	bl	8007e2e <makeFreeRtosPriority>
 8007f36:	4602      	mov	r2, r0
 8007f38:	f107 030c 	add.w	r3, r7, #12
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	9200      	str	r2, [sp, #0]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	4632      	mov	r2, r6
 8007f44:	4629      	mov	r1, r5
 8007f46:	4620      	mov	r0, r4
 8007f48:	f001 fa58 	bl	80093fc <xTaskCreate>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d001      	beq.n	8007f56 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	e000      	b.n	8007f58 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007f56:	68fb      	ldr	r3, [r7, #12]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <osDelay+0x16>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	e000      	b.n	8007f78 <osDelay+0x18>
 8007f76:	2301      	movs	r3, #1
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 fb77 	bl	800966c <vTaskDelay>
  
  return osOK;
 8007f7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d010      	beq.n	8007fbc <osSemaphoreCreate+0x34>
    if (count == 1) {
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d10b      	bne.n	8007fb8 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	2200      	movs	r2, #0
 8007fac:	2100      	movs	r1, #0
 8007fae:	2001      	movs	r0, #1
 8007fb0:	f000 faae 	bl	8008510 <xQueueGenericCreateStatic>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	e016      	b.n	8007fe6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e014      	b.n	8007fe6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d110      	bne.n	8007fe4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	f000 fb15 	bl	80085f6 <xQueueGenericCreate>
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <osSemaphoreCreate+0x58>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2100      	movs	r1, #0
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fb6a 	bl	80086b4 <xQueueGenericSend>
      return sema;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	e000      	b.n	8007fe6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007fe4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008004:	2380      	movs	r3, #128	; 0x80
 8008006:	e03a      	b.n	800807e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008012:	d103      	bne.n	800801c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008018:	60fb      	str	r3, [r7, #12]
 800801a:	e009      	b.n	8008030 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d006      	beq.n	8008030 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <osSemaphoreWait+0x40>
      ticks = 1;
 800802c:	2301      	movs	r3, #1
 800802e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008030:	f7ff ff15 	bl	8007e5e <inHandlerMode>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d017      	beq.n	800806a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800803a:	f107 0308 	add.w	r3, r7, #8
 800803e:	461a      	mov	r2, r3
 8008040:	2100      	movs	r1, #0
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 ff32 	bl	8008eac <xQueueReceiveFromISR>
 8008048:	4603      	mov	r3, r0
 800804a:	2b01      	cmp	r3, #1
 800804c:	d001      	beq.n	8008052 <osSemaphoreWait+0x62>
      return osErrorOS;
 800804e:	23ff      	movs	r3, #255	; 0xff
 8008050:	e015      	b.n	800807e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d011      	beq.n	800807c <osSemaphoreWait+0x8c>
 8008058:	4b0b      	ldr	r3, [pc, #44]	; (8008088 <osSemaphoreWait+0x98>)
 800805a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805e:	601a      	str	r2, [r3, #0]
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	e008      	b.n	800807c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800806a:	68f9      	ldr	r1, [r7, #12]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fe15 	bl	8008c9c <xQueueSemaphoreTake>
 8008072:	4603      	mov	r3, r0
 8008074:	2b01      	cmp	r3, #1
 8008076:	d001      	beq.n	800807c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008078:	23ff      	movs	r3, #255	; 0xff
 800807a:	e000      	b.n	800807e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008098:	2300      	movs	r3, #0
 800809a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800809c:	f7ff fedf 	bl	8007e5e <inHandlerMode>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d016      	beq.n	80080d4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80080a6:	f107 0308 	add.w	r3, r7, #8
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fc8f 	bl	80089d0 <xQueueGiveFromISR>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d001      	beq.n	80080bc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80080b8:	23ff      	movs	r3, #255	; 0xff
 80080ba:	e017      	b.n	80080ec <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d013      	beq.n	80080ea <osSemaphoreRelease+0x5e>
 80080c2:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <osSemaphoreRelease+0x68>)
 80080c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	e00a      	b.n	80080ea <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80080d4:	2300      	movs	r3, #0
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 faea 	bl	80086b4 <xQueueGenericSend>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d001      	beq.n	80080ea <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80080e6:	23ff      	movs	r3, #255	; 0xff
 80080e8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80080ea:	68fb      	ldr	r3, [r7, #12]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	e000ed04 	.word	0xe000ed04

080080f8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008100:	f7ff fead 	bl	8007e5e <inHandlerMode>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800810a:	2382      	movs	r3, #130	; 0x82
 800810c:	e003      	b.n	8008116 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 ff49 	bl	8008fa6 <vQueueDelete>

  return osOK; 
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800811e:	b590      	push	{r4, r7, lr}
 8008120:	b085      	sub	sp, #20
 8008122:	af02      	add	r7, sp, #8
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d012      	beq.n	8008156 <osMessageCreate+0x38>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00e      	beq.n	8008156 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6859      	ldr	r1, [r3, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68dc      	ldr	r4, [r3, #12]
 8008148:	2300      	movs	r3, #0
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	4623      	mov	r3, r4
 800814e:	f000 f9df 	bl	8008510 <xQueueGenericCreateStatic>
 8008152:	4603      	mov	r3, r0
 8008154:	e008      	b.n	8008168 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	4619      	mov	r1, r3
 8008162:	f000 fa48 	bl	80085f6 <xQueueGenericCreate>
 8008166:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008168:	4618      	mov	r0, r3
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	bd90      	pop	{r4, r7, pc}

08008170 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800817c:	2300      	movs	r3, #0
 800817e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <osMessagePut+0x1e>
    ticks = 1;
 800818a:	2301      	movs	r3, #1
 800818c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800818e:	f7ff fe66 	bl	8007e5e <inHandlerMode>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d018      	beq.n	80081ca <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008198:	f107 0210 	add.w	r2, r7, #16
 800819c:	f107 0108 	add.w	r1, r7, #8
 80081a0:	2300      	movs	r3, #0
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fb80 	bl	80088a8 <xQueueGenericSendFromISR>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d001      	beq.n	80081b2 <osMessagePut+0x42>
      return osErrorOS;
 80081ae:	23ff      	movs	r3, #255	; 0xff
 80081b0:	e018      	b.n	80081e4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d014      	beq.n	80081e2 <osMessagePut+0x72>
 80081b8:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <osMessagePut+0x7c>)
 80081ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081be:	601a      	str	r2, [r3, #0]
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	e00b      	b.n	80081e2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80081ca:	f107 0108 	add.w	r1, r7, #8
 80081ce:	2300      	movs	r3, #0
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fa6e 	bl	80086b4 <xQueueGenericSend>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d001      	beq.n	80081e2 <osMessagePut+0x72>
      return osErrorOS;
 80081de:	23ff      	movs	r3, #255	; 0xff
 80081e0:	e000      	b.n	80081e4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80081f0:	b590      	push	{r4, r7, lr}
 80081f2:	b08b      	sub	sp, #44	; 0x2c
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008200:	2300      	movs	r3, #0
 8008202:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10a      	bne.n	8008220 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800820a:	2380      	movs	r3, #128	; 0x80
 800820c:	617b      	str	r3, [r7, #20]
    return event;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	461c      	mov	r4, r3
 8008212:	f107 0314 	add.w	r3, r7, #20
 8008216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800821a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800821e:	e054      	b.n	80082ca <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008220:	2300      	movs	r3, #0
 8008222:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800822e:	d103      	bne.n	8008238 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
 8008236:	e009      	b.n	800824c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d006      	beq.n	800824c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <osMessageGet+0x5c>
      ticks = 1;
 8008248:	2301      	movs	r3, #1
 800824a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800824c:	f7ff fe07 	bl	8007e5e <inHandlerMode>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d01c      	beq.n	8008290 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008256:	f107 0220 	add.w	r2, r7, #32
 800825a:	f107 0314 	add.w	r3, r7, #20
 800825e:	3304      	adds	r3, #4
 8008260:	4619      	mov	r1, r3
 8008262:	68b8      	ldr	r0, [r7, #8]
 8008264:	f000 fe22 	bl	8008eac <xQueueReceiveFromISR>
 8008268:	4603      	mov	r3, r0
 800826a:	2b01      	cmp	r3, #1
 800826c:	d102      	bne.n	8008274 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800826e:	2310      	movs	r3, #16
 8008270:	617b      	str	r3, [r7, #20]
 8008272:	e001      	b.n	8008278 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d01d      	beq.n	80082ba <osMessageGet+0xca>
 800827e:	4b15      	ldr	r3, [pc, #84]	; (80082d4 <osMessageGet+0xe4>)
 8008280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	e014      	b.n	80082ba <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008290:	f107 0314 	add.w	r3, r7, #20
 8008294:	3304      	adds	r3, #4
 8008296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008298:	4619      	mov	r1, r3
 800829a:	68b8      	ldr	r0, [r7, #8]
 800829c:	f000 fc22 	bl	8008ae4 <xQueueReceive>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d102      	bne.n	80082ac <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80082a6:	2310      	movs	r3, #16
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	e006      	b.n	80082ba <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <osMessageGet+0xc6>
 80082b2:	2300      	movs	r3, #0
 80082b4:	e000      	b.n	80082b8 <osMessageGet+0xc8>
 80082b6:	2340      	movs	r3, #64	; 0x40
 80082b8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	461c      	mov	r4, r3
 80082be:	f107 0314 	add.w	r3, r7, #20
 80082c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	372c      	adds	r7, #44	; 0x2c
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd90      	pop	{r4, r7, pc}
 80082d2:	bf00      	nop
 80082d4:	e000ed04 	.word	0xe000ed04

080082d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f103 0208 	add.w	r2, r3, #8
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f103 0208 	add.w	r2, r3, #8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f103 0208 	add.w	r2, r3, #8
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008332:	b480      	push	{r7}
 8008334:	b085      	sub	sp, #20
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	601a      	str	r2, [r3, #0]
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800837a:	b480      	push	{r7}
 800837c:	b085      	sub	sp, #20
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008390:	d103      	bne.n	800839a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	e00c      	b.n	80083b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3308      	adds	r3, #8
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	e002      	b.n	80083a8 <vListInsert+0x2e>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d2f6      	bcs.n	80083a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	601a      	str	r2, [r3, #0]
}
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	6892      	ldr	r2, [r2, #8]
 8008402:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	6852      	ldr	r2, [r2, #4]
 800840c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	429a      	cmp	r2, r3
 8008416:	d103      	bne.n	8008420 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	1e5a      	subs	r2, r3, #1
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d109      	bne.n	8008468 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	60bb      	str	r3, [r7, #8]
 8008466:	e7fe      	b.n	8008466 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8008468:	f002 fc18 	bl	800ac9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008474:	68f9      	ldr	r1, [r7, #12]
 8008476:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008478:	fb01 f303 	mul.w	r3, r1, r3
 800847c:	441a      	add	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008498:	3b01      	subs	r3, #1
 800849a:	68f9      	ldr	r1, [r7, #12]
 800849c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800849e:	fb01 f303 	mul.w	r3, r1, r3
 80084a2:	441a      	add	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	22ff      	movs	r2, #255	; 0xff
 80084ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	22ff      	movs	r2, #255	; 0xff
 80084b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d114      	bne.n	80084e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01a      	beq.n	80084fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3310      	adds	r3, #16
 80084ca:	4618      	mov	r0, r3
 80084cc:	f001 fb92 	bl	8009bf4 <xTaskRemoveFromEventList>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d012      	beq.n	80084fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80084d6:	4b0d      	ldr	r3, [pc, #52]	; (800850c <xQueueGenericReset+0xcc>)
 80084d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	e009      	b.n	80084fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	3310      	adds	r3, #16
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7ff fef3 	bl	80082d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3324      	adds	r3, #36	; 0x24
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff feee 	bl	80082d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80084fc:	f002 fbfc 	bl	800acf8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008500:	2301      	movs	r3, #1
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	e000ed04 	.word	0xe000ed04

08008510 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08e      	sub	sp, #56	; 0x38
 8008514:	af02      	add	r7, sp, #8
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <xQueueGenericCreateStatic+0x28>
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	62bb      	str	r3, [r7, #40]	; 0x28
 8008536:	e7fe      	b.n	8008536 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d109      	bne.n	8008552 <xQueueGenericCreateStatic+0x42>
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	627b      	str	r3, [r7, #36]	; 0x24
 8008550:	e7fe      	b.n	8008550 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <xQueueGenericCreateStatic+0x4e>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <xQueueGenericCreateStatic+0x52>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <xQueueGenericCreateStatic+0x54>
 8008562:	2300      	movs	r3, #0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d109      	bne.n	800857c <xQueueGenericCreateStatic+0x6c>
 8008568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	623b      	str	r3, [r7, #32]
 800857a:	e7fe      	b.n	800857a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d102      	bne.n	8008588 <xQueueGenericCreateStatic+0x78>
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <xQueueGenericCreateStatic+0x7c>
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <xQueueGenericCreateStatic+0x7e>
 800858c:	2300      	movs	r3, #0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d109      	bne.n	80085a6 <xQueueGenericCreateStatic+0x96>
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	61fb      	str	r3, [r7, #28]
 80085a4:	e7fe      	b.n	80085a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085a6:	2348      	movs	r3, #72	; 0x48
 80085a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	2b48      	cmp	r3, #72	; 0x48
 80085ae:	d009      	beq.n	80085c4 <xQueueGenericCreateStatic+0xb4>
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	61bb      	str	r3, [r7, #24]
 80085c2:	e7fe      	b.n	80085c2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80085c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00d      	beq.n	80085ec <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	4613      	mov	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 f844 	bl	8008674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3730      	adds	r7, #48	; 0x30
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b08a      	sub	sp, #40	; 0x28
 80085fa:	af02      	add	r7, sp, #8
 80085fc:	60f8      	str	r0, [r7, #12]
 80085fe:	60b9      	str	r1, [r7, #8]
 8008600:	4613      	mov	r3, r2
 8008602:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d109      	bne.n	800861e <xQueueGenericCreate+0x28>
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	e7fe      	b.n	800861c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008624:	2300      	movs	r3, #0
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	e004      	b.n	8008634 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	fb02 f303 	mul.w	r3, r2, r3
 8008632:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	3348      	adds	r3, #72	; 0x48
 8008638:	4618      	mov	r0, r3
 800863a:	f002 fc49 	bl	800aed0 <pvPortMalloc>
 800863e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d011      	beq.n	800866a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	3348      	adds	r3, #72	; 0x48
 800864e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008658:	79fa      	ldrb	r2, [r7, #7]
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	4613      	mov	r3, r2
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 f805 	bl	8008674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800866a:	69bb      	ldr	r3, [r7, #24]
	}
 800866c:	4618      	mov	r0, r3
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	e002      	b.n	8008696 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086a2:	2101      	movs	r1, #1
 80086a4:	69b8      	ldr	r0, [r7, #24]
 80086a6:	f7ff fecb 	bl	8008440 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086aa:	bf00      	nop
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b08e      	sub	sp, #56	; 0x38
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80086c2:	2300      	movs	r3, #0
 80086c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d109      	bne.n	80086e4 <xQueueGenericSend+0x30>
 80086d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d4:	f383 8811 	msr	BASEPRI, r3
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80086e2:	e7fe      	b.n	80086e2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d103      	bne.n	80086f2 <xQueueGenericSend+0x3e>
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <xQueueGenericSend+0x42>
 80086f2:	2301      	movs	r3, #1
 80086f4:	e000      	b.n	80086f8 <xQueueGenericSend+0x44>
 80086f6:	2300      	movs	r3, #0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d109      	bne.n	8008710 <xQueueGenericSend+0x5c>
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
 800870e:	e7fe      	b.n	800870e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	2b02      	cmp	r3, #2
 8008714:	d103      	bne.n	800871e <xQueueGenericSend+0x6a>
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871a:	2b01      	cmp	r3, #1
 800871c:	d101      	bne.n	8008722 <xQueueGenericSend+0x6e>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <xQueueGenericSend+0x70>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <xQueueGenericSend+0x88>
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	623b      	str	r3, [r7, #32]
 800873a:	e7fe      	b.n	800873a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800873c:	f001 fc10 	bl	8009f60 <xTaskGetSchedulerState>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d102      	bne.n	800874c <xQueueGenericSend+0x98>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <xQueueGenericSend+0x9c>
 800874c:	2301      	movs	r3, #1
 800874e:	e000      	b.n	8008752 <xQueueGenericSend+0x9e>
 8008750:	2300      	movs	r3, #0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <xQueueGenericSend+0xb6>
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e7fe      	b.n	8008768 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800876a:	f002 fa97 	bl	800ac9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008776:	429a      	cmp	r2, r3
 8008778:	d302      	bcc.n	8008780 <xQueueGenericSend+0xcc>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d129      	bne.n	80087d4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008780:	683a      	ldr	r2, [r7, #0]
 8008782:	68b9      	ldr	r1, [r7, #8]
 8008784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008786:	f000 fc48 	bl	800901a <prvCopyDataToQueue>
 800878a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d010      	beq.n	80087b6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	3324      	adds	r3, #36	; 0x24
 8008798:	4618      	mov	r0, r3
 800879a:	f001 fa2b 	bl	8009bf4 <xTaskRemoveFromEventList>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d013      	beq.n	80087cc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80087a4:	4b3f      	ldr	r3, [pc, #252]	; (80088a4 <xQueueGenericSend+0x1f0>)
 80087a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	e00a      	b.n	80087cc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80087b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d007      	beq.n	80087cc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80087bc:	4b39      	ldr	r3, [pc, #228]	; (80088a4 <xQueueGenericSend+0x1f0>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80087cc:	f002 fa94 	bl	800acf8 <vPortExitCritical>
				return pdPASS;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e063      	b.n	800889c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d103      	bne.n	80087e2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087da:	f002 fa8d 	bl	800acf8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	e05c      	b.n	800889c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d106      	bne.n	80087f6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	4618      	mov	r0, r3
 80087ee:	f001 fa63 	bl	8009cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087f2:	2301      	movs	r3, #1
 80087f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087f6:	f002 fa7f 	bl	800acf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087fa:	f000 ffcf 	bl	800979c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087fe:	f002 fa4d 	bl	800ac9c <vPortEnterCritical>
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008808:	b25b      	sxtb	r3, r3
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800880e:	d103      	bne.n	8008818 <xQueueGenericSend+0x164>
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800881e:	b25b      	sxtb	r3, r3
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008824:	d103      	bne.n	800882e <xQueueGenericSend+0x17a>
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800882e:	f002 fa63 	bl	800acf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008832:	1d3a      	adds	r2, r7, #4
 8008834:	f107 0314 	add.w	r3, r7, #20
 8008838:	4611      	mov	r1, r2
 800883a:	4618      	mov	r0, r3
 800883c:	f001 fa52 	bl	8009ce4 <xTaskCheckForTimeOut>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d124      	bne.n	8008890 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008846:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008848:	f000 fcdf 	bl	800920a <prvIsQueueFull>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d018      	beq.n	8008884 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	3310      	adds	r3, #16
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	4611      	mov	r1, r2
 800885a:	4618      	mov	r0, r3
 800885c:	f001 f97c 	bl	8009b58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008862:	f000 fc6a 	bl	800913a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008866:	f000 ffa7 	bl	80097b8 <xTaskResumeAll>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	f47f af7c 	bne.w	800876a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8008872:	4b0c      	ldr	r3, [pc, #48]	; (80088a4 <xQueueGenericSend+0x1f0>)
 8008874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	e772      	b.n	800876a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008886:	f000 fc58 	bl	800913a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800888a:	f000 ff95 	bl	80097b8 <xTaskResumeAll>
 800888e:	e76c      	b.n	800876a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008892:	f000 fc52 	bl	800913a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008896:	f000 ff8f 	bl	80097b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800889a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800889c:	4618      	mov	r0, r3
 800889e:	3738      	adds	r7, #56	; 0x38
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	e000ed04 	.word	0xe000ed04

080088a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08e      	sub	sp, #56	; 0x38
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d109      	bne.n	80088d4 <xQueueGenericSendFromISR+0x2c>
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
 80088d2:	e7fe      	b.n	80088d2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d103      	bne.n	80088e2 <xQueueGenericSendFromISR+0x3a>
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <xQueueGenericSendFromISR+0x3e>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <xQueueGenericSendFromISR+0x40>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d109      	bne.n	8008900 <xQueueGenericSendFromISR+0x58>
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	623b      	str	r3, [r7, #32]
 80088fe:	e7fe      	b.n	80088fe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d103      	bne.n	800890e <xQueueGenericSendFromISR+0x66>
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <xQueueGenericSendFromISR+0x6a>
 800890e:	2301      	movs	r3, #1
 8008910:	e000      	b.n	8008914 <xQueueGenericSendFromISR+0x6c>
 8008912:	2300      	movs	r3, #0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d109      	bne.n	800892c <xQueueGenericSendFromISR+0x84>
 8008918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	61fb      	str	r3, [r7, #28]
 800892a:	e7fe      	b.n	800892a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800892c:	f002 fa92 	bl	800ae54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008930:	f3ef 8211 	mrs	r2, BASEPRI
 8008934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008938:	f383 8811 	msr	BASEPRI, r3
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f3bf 8f4f 	dsb	sy
 8008944:	61ba      	str	r2, [r7, #24]
 8008946:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008948:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800894a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008954:	429a      	cmp	r2, r3
 8008956:	d302      	bcc.n	800895e <xQueueGenericSendFromISR+0xb6>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d12c      	bne.n	80089b8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008968:	683a      	ldr	r2, [r7, #0]
 800896a:	68b9      	ldr	r1, [r7, #8]
 800896c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800896e:	f000 fb54 	bl	800901a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008972:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800897a:	d112      	bne.n	80089a2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	2b00      	cmp	r3, #0
 8008982:	d016      	beq.n	80089b2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	3324      	adds	r3, #36	; 0x24
 8008988:	4618      	mov	r0, r3
 800898a:	f001 f933 	bl	8009bf4 <xTaskRemoveFromEventList>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00e      	beq.n	80089b2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00b      	beq.n	80089b2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	e007      	b.n	80089b2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80089a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089a6:	3301      	adds	r3, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	b25a      	sxtb	r2, r3
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80089b2:	2301      	movs	r3, #1
 80089b4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80089b6:	e001      	b.n	80089bc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	637b      	str	r3, [r7, #52]	; 0x34
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3738      	adds	r7, #56	; 0x38
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08e      	sub	sp, #56	; 0x38
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d109      	bne.n	80089f8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	623b      	str	r3, [r7, #32]
 80089f6:	e7fe      	b.n	80089f6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <xQueueGiveFromISR+0x44>
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	61fb      	str	r3, [r7, #28]
 8008a12:	e7fe      	b.n	8008a12 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d103      	bne.n	8008a24 <xQueueGiveFromISR+0x54>
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d101      	bne.n	8008a28 <xQueueGiveFromISR+0x58>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e000      	b.n	8008a2a <xQueueGiveFromISR+0x5a>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <xQueueGiveFromISR+0x72>
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	61bb      	str	r3, [r7, #24]
 8008a40:	e7fe      	b.n	8008a40 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a42:	f002 fa07 	bl	800ae54 <vPortValidateInterruptPriority>
	__asm volatile
 8008a46:	f3ef 8211 	mrs	r2, BASEPRI
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	617a      	str	r2, [r7, #20]
 8008a5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008a5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d22b      	bcs.n	8008aca <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	1c5a      	adds	r2, r3, #1
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a8c:	d112      	bne.n	8008ab4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d016      	beq.n	8008ac4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	3324      	adds	r3, #36	; 0x24
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 f8aa 	bl	8009bf4 <xTaskRemoveFromEventList>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00e      	beq.n	8008ac4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00b      	beq.n	8008ac4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	601a      	str	r2, [r3, #0]
 8008ab2:	e007      	b.n	8008ac4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ab8:	3301      	adds	r3, #1
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	b25a      	sxtb	r2, r3
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ac8:	e001      	b.n	8008ace <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008aca:	2300      	movs	r3, #0
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3738      	adds	r7, #56	; 0x38
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b08c      	sub	sp, #48	; 0x30
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d109      	bne.n	8008b12 <xQueueReceive+0x2e>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	623b      	str	r3, [r7, #32]
 8008b10:	e7fe      	b.n	8008b10 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d103      	bne.n	8008b20 <xQueueReceive+0x3c>
 8008b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <xQueueReceive+0x40>
 8008b20:	2301      	movs	r3, #1
 8008b22:	e000      	b.n	8008b26 <xQueueReceive+0x42>
 8008b24:	2300      	movs	r3, #0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d109      	bne.n	8008b3e <xQueueReceive+0x5a>
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	e7fe      	b.n	8008b3c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b3e:	f001 fa0f 	bl	8009f60 <xTaskGetSchedulerState>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d102      	bne.n	8008b4e <xQueueReceive+0x6a>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <xQueueReceive+0x6e>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e000      	b.n	8008b54 <xQueueReceive+0x70>
 8008b52:	2300      	movs	r3, #0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d109      	bne.n	8008b6c <xQueueReceive+0x88>
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	61bb      	str	r3, [r7, #24]
 8008b6a:	e7fe      	b.n	8008b6a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b6c:	f002 f896 	bl	800ac9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d01f      	beq.n	8008bbc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b80:	f000 fab5 	bl	80090ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	1e5a      	subs	r2, r3, #1
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00f      	beq.n	8008bb4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	3310      	adds	r3, #16
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f001 f82b 	bl	8009bf4 <xTaskRemoveFromEventList>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d007      	beq.n	8008bb4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ba4:	4b3c      	ldr	r3, [pc, #240]	; (8008c98 <xQueueReceive+0x1b4>)
 8008ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008bb4:	f002 f8a0 	bl	800acf8 <vPortExitCritical>
				return pdPASS;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e069      	b.n	8008c90 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bc2:	f002 f899 	bl	800acf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e062      	b.n	8008c90 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d106      	bne.n	8008bde <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bd0:	f107 0310 	add.w	r3, r7, #16
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f001 f86f 	bl	8009cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bde:	f002 f88b 	bl	800acf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008be2:	f000 fddb 	bl	800979c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008be6:	f002 f859 	bl	800ac9c <vPortEnterCritical>
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bf0:	b25b      	sxtb	r3, r3
 8008bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bf6:	d103      	bne.n	8008c00 <xQueueReceive+0x11c>
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c06:	b25b      	sxtb	r3, r3
 8008c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c0c:	d103      	bne.n	8008c16 <xQueueReceive+0x132>
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c16:	f002 f86f 	bl	800acf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c1a:	1d3a      	adds	r2, r7, #4
 8008c1c:	f107 0310 	add.w	r3, r7, #16
 8008c20:	4611      	mov	r1, r2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f001 f85e 	bl	8009ce4 <xTaskCheckForTimeOut>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d123      	bne.n	8008c76 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c30:	f000 fad5 	bl	80091de <prvIsQueueEmpty>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d017      	beq.n	8008c6a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	3324      	adds	r3, #36	; 0x24
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	4611      	mov	r1, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 ff88 	bl	8009b58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4a:	f000 fa76 	bl	800913a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c4e:	f000 fdb3 	bl	80097b8 <xTaskResumeAll>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d189      	bne.n	8008b6c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008c58:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <xQueueReceive+0x1b4>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	e780      	b.n	8008b6c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c6c:	f000 fa65 	bl	800913a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c70:	f000 fda2 	bl	80097b8 <xTaskResumeAll>
 8008c74:	e77a      	b.n	8008b6c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c78:	f000 fa5f 	bl	800913a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c7c:	f000 fd9c 	bl	80097b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c82:	f000 faac 	bl	80091de <prvIsQueueEmpty>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f43f af6f 	beq.w	8008b6c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3730      	adds	r7, #48	; 0x30
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b08e      	sub	sp, #56	; 0x38
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d109      	bne.n	8008ccc <xQueueSemaphoreTake+0x30>
 8008cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	623b      	str	r3, [r7, #32]
 8008cca:	e7fe      	b.n	8008cca <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d009      	beq.n	8008ce8 <xQueueSemaphoreTake+0x4c>
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	61fb      	str	r3, [r7, #28]
 8008ce6:	e7fe      	b.n	8008ce6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ce8:	f001 f93a 	bl	8009f60 <xTaskGetSchedulerState>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <xQueueSemaphoreTake+0x5c>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <xQueueSemaphoreTake+0x60>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e000      	b.n	8008cfe <xQueueSemaphoreTake+0x62>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <xQueueSemaphoreTake+0x7a>
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	61bb      	str	r3, [r7, #24]
 8008d14:	e7fe      	b.n	8008d14 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d16:	f001 ffc1 	bl	800ac9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d024      	beq.n	8008d70 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	1e5a      	subs	r2, r3, #1
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008d36:	f001 facd 	bl	800a2d4 <pvTaskIncrementMutexHeldCount>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00f      	beq.n	8008d68 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4a:	3310      	adds	r3, #16
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 ff51 	bl	8009bf4 <xTaskRemoveFromEventList>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d007      	beq.n	8008d68 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d58:	4b53      	ldr	r3, [pc, #332]	; (8008ea8 <xQueueSemaphoreTake+0x20c>)
 8008d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d68:	f001 ffc6 	bl	800acf8 <vPortExitCritical>
				return pdPASS;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e096      	b.n	8008e9e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d110      	bne.n	8008d98 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d009      	beq.n	8008d90 <xQueueSemaphoreTake+0xf4>
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	e7fe      	b.n	8008d8e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d90:	f001 ffb2 	bl	800acf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d94:	2300      	movs	r3, #0
 8008d96:	e082      	b.n	8008e9e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d9e:	f107 030c 	add.w	r3, r7, #12
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 ff88 	bl	8009cb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008da8:	2301      	movs	r3, #1
 8008daa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dac:	f001 ffa4 	bl	800acf8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008db0:	f000 fcf4 	bl	800979c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008db4:	f001 ff72 	bl	800ac9c <vPortEnterCritical>
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008dbe:	b25b      	sxtb	r3, r3
 8008dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dc4:	d103      	bne.n	8008dce <xQueueSemaphoreTake+0x132>
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dd4:	b25b      	sxtb	r3, r3
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dda:	d103      	bne.n	8008de4 <xQueueSemaphoreTake+0x148>
 8008ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dde:	2200      	movs	r2, #0
 8008de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008de4:	f001 ff88 	bl	800acf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008de8:	463a      	mov	r2, r7
 8008dea:	f107 030c 	add.w	r3, r7, #12
 8008dee:	4611      	mov	r1, r2
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 ff77 	bl	8009ce4 <xTaskCheckForTimeOut>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d132      	bne.n	8008e62 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008dfe:	f000 f9ee 	bl	80091de <prvIsQueueEmpty>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d026      	beq.n	8008e56 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d109      	bne.n	8008e24 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008e10:	f001 ff44 	bl	800ac9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f001 f8bf 	bl	8009f9c <xTaskPriorityInherit>
 8008e1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008e20:	f001 ff6a 	bl	800acf8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e26:	3324      	adds	r3, #36	; 0x24
 8008e28:	683a      	ldr	r2, [r7, #0]
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 fe93 	bl	8009b58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e34:	f000 f981 	bl	800913a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e38:	f000 fcbe 	bl	80097b8 <xTaskResumeAll>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f47f af69 	bne.w	8008d16 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008e44:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <xQueueSemaphoreTake+0x20c>)
 8008e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	e75f      	b.n	8008d16 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008e56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e58:	f000 f96f 	bl	800913a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e5c:	f000 fcac 	bl	80097b8 <xTaskResumeAll>
 8008e60:	e759      	b.n	8008d16 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008e62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e64:	f000 f969 	bl	800913a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e68:	f000 fca6 	bl	80097b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e6e:	f000 f9b6 	bl	80091de <prvIsQueueEmpty>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f43f af4e 	beq.w	8008d16 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00d      	beq.n	8008e9c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008e80:	f001 ff0c 	bl	800ac9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e86:	f000 f8b0 	bl	8008fea <prvGetDisinheritPriorityAfterTimeout>
 8008e8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 f986 	bl	800a1a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e98:	f001 ff2e 	bl	800acf8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3738      	adds	r7, #56	; 0x38
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08e      	sub	sp, #56	; 0x38
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <xQueueReceiveFromISR+0x2a>
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	623b      	str	r3, [r7, #32]
 8008ed4:	e7fe      	b.n	8008ed4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d103      	bne.n	8008ee4 <xQueueReceiveFromISR+0x38>
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <xQueueReceiveFromISR+0x3c>
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e000      	b.n	8008eea <xQueueReceiveFromISR+0x3e>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d109      	bne.n	8008f02 <xQueueReceiveFromISR+0x56>
 8008eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	61fb      	str	r3, [r7, #28]
 8008f00:	e7fe      	b.n	8008f00 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f02:	f001 ffa7 	bl	800ae54 <vPortValidateInterruptPriority>
	__asm volatile
 8008f06:	f3ef 8211 	mrs	r2, BASEPRI
 8008f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	61ba      	str	r2, [r7, #24]
 8008f1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d02f      	beq.n	8008f8e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f38:	68b9      	ldr	r1, [r7, #8]
 8008f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f3c:	f000 f8d7 	bl	80090ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	1e5a      	subs	r2, r3, #1
 8008f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008f48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f50:	d112      	bne.n	8008f78 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d016      	beq.n	8008f88 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	3310      	adds	r3, #16
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fe48 	bl	8009bf4 <xTaskRemoveFromEventList>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00e      	beq.n	8008f88 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	e007      	b.n	8008f88 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	b25a      	sxtb	r2, r3
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8c:	e001      	b.n	8008f92 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34
 8008f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3738      	adds	r7, #56	; 0x38
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b084      	sub	sp, #16
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d109      	bne.n	8008fcc <vQueueDelete+0x26>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	60bb      	str	r3, [r7, #8]
 8008fca:	e7fe      	b.n	8008fca <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f95d 	bl	800928c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d102      	bne.n	8008fe2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f002 f839 	bl	800b054 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008fe2:	bf00      	nop
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d006      	beq.n	8009008 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f1c3 0307 	rsb	r3, r3, #7
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	e001      	b.n	800900c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009008:	2300      	movs	r3, #0
 800900a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800900c:	68fb      	ldr	r3, [r7, #12]
	}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b086      	sub	sp, #24
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10d      	bne.n	8009054 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d14d      	bne.n	80090dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	4618      	mov	r0, r3
 8009046:	f001 f829 	bl	800a09c <xTaskPriorityDisinherit>
 800904a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2200      	movs	r2, #0
 8009050:	609a      	str	r2, [r3, #8]
 8009052:	e043      	b.n	80090dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d119      	bne.n	800908e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6858      	ldr	r0, [r3, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	461a      	mov	r2, r3
 8009064:	68b9      	ldr	r1, [r7, #8]
 8009066:	f002 f92d 	bl	800b2c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	685a      	ldr	r2, [r3, #4]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	441a      	add	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	429a      	cmp	r2, r3
 8009082:	d32b      	bcc.n	80090dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	605a      	str	r2, [r3, #4]
 800908c:	e026      	b.n	80090dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	68d8      	ldr	r0, [r3, #12]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009096:	461a      	mov	r2, r3
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	f002 f913 	bl	800b2c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	425b      	negs	r3, r3
 80090a8:	441a      	add	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	68da      	ldr	r2, [r3, #12]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d207      	bcs.n	80090ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c2:	425b      	negs	r3, r3
 80090c4:	441a      	add	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d105      	bne.n	80090dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	3b01      	subs	r3, #1
 80090da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	1c5a      	adds	r2, r3, #1
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80090e4:	697b      	ldr	r3, [r7, #20]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d018      	beq.n	8009132 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68da      	ldr	r2, [r3, #12]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	441a      	add	r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	429a      	cmp	r2, r3
 8009118:	d303      	bcc.n	8009122 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68d9      	ldr	r1, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912a:	461a      	mov	r2, r3
 800912c:	6838      	ldr	r0, [r7, #0]
 800912e:	f002 f8c9 	bl	800b2c4 <memcpy>
	}
}
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009142:	f001 fdab 	bl	800ac9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800914c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800914e:	e011      	b.n	8009174 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	2b00      	cmp	r3, #0
 8009156:	d012      	beq.n	800917e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	3324      	adds	r3, #36	; 0x24
 800915c:	4618      	mov	r0, r3
 800915e:	f000 fd49 	bl	8009bf4 <xTaskRemoveFromEventList>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009168:	f000 fe1c 	bl	8009da4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	3b01      	subs	r3, #1
 8009170:	b2db      	uxtb	r3, r3
 8009172:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009178:	2b00      	cmp	r3, #0
 800917a:	dce9      	bgt.n	8009150 <prvUnlockQueue+0x16>
 800917c:	e000      	b.n	8009180 <prvUnlockQueue+0x46>
					break;
 800917e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	22ff      	movs	r2, #255	; 0xff
 8009184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009188:	f001 fdb6 	bl	800acf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800918c:	f001 fd86 	bl	800ac9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009196:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009198:	e011      	b.n	80091be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d012      	beq.n	80091c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3310      	adds	r3, #16
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fd24 	bl	8009bf4 <xTaskRemoveFromEventList>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80091b2:	f000 fdf7 	bl	8009da4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	3b01      	subs	r3, #1
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80091be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dce9      	bgt.n	800919a <prvUnlockQueue+0x60>
 80091c6:	e000      	b.n	80091ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80091c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	22ff      	movs	r2, #255	; 0xff
 80091ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80091d2:	f001 fd91 	bl	800acf8 <vPortExitCritical>
}
 80091d6:	bf00      	nop
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091e6:	f001 fd59 	bl	800ac9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d102      	bne.n	80091f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091f2:	2301      	movs	r3, #1
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	e001      	b.n	80091fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091f8:	2300      	movs	r3, #0
 80091fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091fc:	f001 fd7c 	bl	800acf8 <vPortExitCritical>

	return xReturn;
 8009200:	68fb      	ldr	r3, [r7, #12]
}
 8009202:	4618      	mov	r0, r3
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b084      	sub	sp, #16
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009212:	f001 fd43 	bl	800ac9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	429a      	cmp	r2, r3
 8009220:	d102      	bne.n	8009228 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009222:	2301      	movs	r3, #1
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e001      	b.n	800922c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800922c:	f001 fd64 	bl	800acf8 <vPortExitCritical>

	return xReturn;
 8009230:	68fb      	ldr	r3, [r7, #12]
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009246:	2300      	movs	r3, #0
 8009248:	60fb      	str	r3, [r7, #12]
 800924a:	e014      	b.n	8009276 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800924c:	4a0e      	ldr	r2, [pc, #56]	; (8009288 <vQueueAddToRegistry+0x4c>)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10b      	bne.n	8009270 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009258:	490b      	ldr	r1, [pc, #44]	; (8009288 <vQueueAddToRegistry+0x4c>)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009262:	4a09      	ldr	r2, [pc, #36]	; (8009288 <vQueueAddToRegistry+0x4c>)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	4413      	add	r3, r2
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800926e:	e005      	b.n	800927c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	3301      	adds	r3, #1
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b07      	cmp	r3, #7
 800927a:	d9e7      	bls.n	800924c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800927c:	bf00      	nop
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	200052b0 	.word	0x200052b0

0800928c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]
 8009298:	e016      	b.n	80092c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800929a:	4a10      	ldr	r2, [pc, #64]	; (80092dc <vQueueUnregisterQueue+0x50>)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4413      	add	r3, r2
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d10b      	bne.n	80092c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80092aa:	4a0c      	ldr	r2, [pc, #48]	; (80092dc <vQueueUnregisterQueue+0x50>)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2100      	movs	r1, #0
 80092b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80092b4:	4a09      	ldr	r2, [pc, #36]	; (80092dc <vQueueUnregisterQueue+0x50>)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	00db      	lsls	r3, r3, #3
 80092ba:	4413      	add	r3, r2
 80092bc:	2200      	movs	r2, #0
 80092be:	605a      	str	r2, [r3, #4]
				break;
 80092c0:	e005      	b.n	80092ce <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b07      	cmp	r3, #7
 80092cc:	d9e5      	bls.n	800929a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80092ce:	bf00      	nop
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	200052b0 	.word	0x200052b0

080092e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80092f0:	f001 fcd4 	bl	800ac9c <vPortEnterCritical>
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092fa:	b25b      	sxtb	r3, r3
 80092fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009300:	d103      	bne.n	800930a <vQueueWaitForMessageRestricted+0x2a>
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009310:	b25b      	sxtb	r3, r3
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009316:	d103      	bne.n	8009320 <vQueueWaitForMessageRestricted+0x40>
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009320:	f001 fcea 	bl	800acf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009328:	2b00      	cmp	r3, #0
 800932a:	d106      	bne.n	800933a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	3324      	adds	r3, #36	; 0x24
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	68b9      	ldr	r1, [r7, #8]
 8009334:	4618      	mov	r0, r3
 8009336:	f000 fc33 	bl	8009ba0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800933a:	6978      	ldr	r0, [r7, #20]
 800933c:	f7ff fefd 	bl	800913a <prvUnlockQueue>
	}
 8009340:	bf00      	nop
 8009342:	3718      	adds	r7, #24
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08e      	sub	sp, #56	; 0x38
 800934c:	af04      	add	r7, sp, #16
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009358:	2b00      	cmp	r3, #0
 800935a:	d109      	bne.n	8009370 <xTaskCreateStatic+0x28>
 800935c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	623b      	str	r3, [r7, #32]
 800936e:	e7fe      	b.n	800936e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	2b00      	cmp	r3, #0
 8009374:	d109      	bne.n	800938a <xTaskCreateStatic+0x42>
 8009376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	61fb      	str	r3, [r7, #28]
 8009388:	e7fe      	b.n	8009388 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800938a:	2358      	movs	r3, #88	; 0x58
 800938c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	2b58      	cmp	r3, #88	; 0x58
 8009392:	d009      	beq.n	80093a8 <xTaskCreateStatic+0x60>
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	61bb      	str	r3, [r7, #24]
 80093a6:	e7fe      	b.n	80093a6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80093a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01e      	beq.n	80093ee <xTaskCreateStatic+0xa6>
 80093b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01b      	beq.n	80093ee <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093be:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	2202      	movs	r2, #2
 80093c4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093c8:	2300      	movs	r3, #0
 80093ca:	9303      	str	r3, [sp, #12]
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	9302      	str	r3, [sp, #8]
 80093d0:	f107 0314 	add.w	r3, r7, #20
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f850 	bl	8009486 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093e8:	f000 f8d6 	bl	8009598 <prvAddNewTaskToReadyList>
 80093ec:	e001      	b.n	80093f2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093f2:	697b      	ldr	r3, [r7, #20]
	}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3728      	adds	r7, #40	; 0x28
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08c      	sub	sp, #48	; 0x30
 8009400:	af04      	add	r7, sp, #16
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	4613      	mov	r3, r2
 800940a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800940c:	88fb      	ldrh	r3, [r7, #6]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4618      	mov	r0, r3
 8009412:	f001 fd5d 	bl	800aed0 <pvPortMalloc>
 8009416:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00e      	beq.n	800943c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800941e:	2058      	movs	r0, #88	; 0x58
 8009420:	f001 fd56 	bl	800aed0 <pvPortMalloc>
 8009424:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	631a      	str	r2, [r3, #48]	; 0x30
 8009432:	e005      	b.n	8009440 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009434:	6978      	ldr	r0, [r7, #20]
 8009436:	f001 fe0d 	bl	800b054 <vPortFree>
 800943a:	e001      	b.n	8009440 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800943c:	2300      	movs	r3, #0
 800943e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d017      	beq.n	8009476 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800944e:	88fa      	ldrh	r2, [r7, #6]
 8009450:	2300      	movs	r3, #0
 8009452:	9303      	str	r3, [sp, #12]
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	9302      	str	r3, [sp, #8]
 8009458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	68b9      	ldr	r1, [r7, #8]
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f000 f80e 	bl	8009486 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800946a:	69f8      	ldr	r0, [r7, #28]
 800946c:	f000 f894 	bl	8009598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009470:	2301      	movs	r3, #1
 8009472:	61bb      	str	r3, [r7, #24]
 8009474:	e002      	b.n	800947c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009476:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800947a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800947c:	69bb      	ldr	r3, [r7, #24]
	}
 800947e:	4618      	mov	r0, r3
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b088      	sub	sp, #32
 800948a:	af00      	add	r7, sp, #0
 800948c:	60f8      	str	r0, [r7, #12]
 800948e:	60b9      	str	r1, [r7, #8]
 8009490:	607a      	str	r2, [r7, #4]
 8009492:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800949e:	3b01      	subs	r3, #1
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	f023 0307 	bic.w	r3, r3, #7
 80094ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d009      	beq.n	80094cc <prvInitialiseNewTask+0x46>
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e7fe      	b.n	80094ca <prvInitialiseNewTask+0x44>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80094cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d01f      	beq.n	8009518 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094d8:	2300      	movs	r3, #0
 80094da:	61fb      	str	r3, [r7, #28]
 80094dc:	e012      	b.n	8009504 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	4413      	add	r3, r2
 80094e4:	7819      	ldrb	r1, [r3, #0]
 80094e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	4413      	add	r3, r2
 80094ec:	3334      	adds	r3, #52	; 0x34
 80094ee:	460a      	mov	r2, r1
 80094f0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	4413      	add	r3, r2
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d006      	beq.n	800950c <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	3301      	adds	r3, #1
 8009502:	61fb      	str	r3, [r7, #28]
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	2b0f      	cmp	r3, #15
 8009508:	d9e9      	bls.n	80094de <prvInitialiseNewTask+0x58>
 800950a:	e000      	b.n	800950e <prvInitialiseNewTask+0x88>
			{
				break;
 800950c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009516:	e003      	b.n	8009520 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	2b06      	cmp	r3, #6
 8009524:	d901      	bls.n	800952a <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009526:	2306      	movs	r3, #6
 8009528:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800952e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009534:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8009536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009538:	2200      	movs	r2, #0
 800953a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	3304      	adds	r3, #4
 8009540:	4618      	mov	r0, r3
 8009542:	f7fe fee9 	bl	8008318 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009548:	3318      	adds	r3, #24
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fee4 	bl	8008318 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009554:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	f1c3 0207 	rsb	r2, r3, #7
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009564:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009568:	2200      	movs	r2, #0
 800956a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	68f9      	ldr	r1, [r7, #12]
 8009578:	69b8      	ldr	r0, [r7, #24]
 800957a:	f001 fa6b 	bl	800aa54 <pxPortInitialiseStack>
 800957e:	4602      	mov	r2, r0
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800958a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009590:	bf00      	nop
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095a0:	f001 fb7c 	bl	800ac9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095a4:	4b2a      	ldr	r3, [pc, #168]	; (8009650 <prvAddNewTaskToReadyList+0xb8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3301      	adds	r3, #1
 80095aa:	4a29      	ldr	r2, [pc, #164]	; (8009650 <prvAddNewTaskToReadyList+0xb8>)
 80095ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095ae:	4b29      	ldr	r3, [pc, #164]	; (8009654 <prvAddNewTaskToReadyList+0xbc>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d109      	bne.n	80095ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095b6:	4a27      	ldr	r2, [pc, #156]	; (8009654 <prvAddNewTaskToReadyList+0xbc>)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095bc:	4b24      	ldr	r3, [pc, #144]	; (8009650 <prvAddNewTaskToReadyList+0xb8>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d110      	bne.n	80095e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095c4:	f000 fc12 	bl	8009dec <prvInitialiseTaskLists>
 80095c8:	e00d      	b.n	80095e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095ca:	4b23      	ldr	r3, [pc, #140]	; (8009658 <prvAddNewTaskToReadyList+0xc0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d109      	bne.n	80095e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095d2:	4b20      	ldr	r3, [pc, #128]	; (8009654 <prvAddNewTaskToReadyList+0xbc>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	429a      	cmp	r2, r3
 80095de:	d802      	bhi.n	80095e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095e0:	4a1c      	ldr	r2, [pc, #112]	; (8009654 <prvAddNewTaskToReadyList+0xbc>)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095e6:	4b1d      	ldr	r3, [pc, #116]	; (800965c <prvAddNewTaskToReadyList+0xc4>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3301      	adds	r3, #1
 80095ec:	4a1b      	ldr	r2, [pc, #108]	; (800965c <prvAddNewTaskToReadyList+0xc4>)
 80095ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	2201      	movs	r2, #1
 80095f6:	409a      	lsls	r2, r3
 80095f8:	4b19      	ldr	r3, [pc, #100]	; (8009660 <prvAddNewTaskToReadyList+0xc8>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	4a18      	ldr	r2, [pc, #96]	; (8009660 <prvAddNewTaskToReadyList+0xc8>)
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009606:	4613      	mov	r3, r2
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4a15      	ldr	r2, [pc, #84]	; (8009664 <prvAddNewTaskToReadyList+0xcc>)
 8009610:	441a      	add	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3304      	adds	r3, #4
 8009616:	4619      	mov	r1, r3
 8009618:	4610      	mov	r0, r2
 800961a:	f7fe fe8a 	bl	8008332 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800961e:	f001 fb6b 	bl	800acf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009622:	4b0d      	ldr	r3, [pc, #52]	; (8009658 <prvAddNewTaskToReadyList+0xc0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00e      	beq.n	8009648 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800962a:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <prvAddNewTaskToReadyList+0xbc>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009634:	429a      	cmp	r2, r3
 8009636:	d207      	bcs.n	8009648 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009638:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <prvAddNewTaskToReadyList+0xd0>)
 800963a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963e:	601a      	str	r2, [r3, #0]
 8009640:	f3bf 8f4f 	dsb	sy
 8009644:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009648:	bf00      	nop
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	200008a8 	.word	0x200008a8
 8009654:	200007a8 	.word	0x200007a8
 8009658:	200008b4 	.word	0x200008b4
 800965c:	200008c4 	.word	0x200008c4
 8009660:	200008b0 	.word	0x200008b0
 8009664:	200007ac 	.word	0x200007ac
 8009668:	e000ed04 	.word	0xe000ed04

0800966c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009674:	2300      	movs	r3, #0
 8009676:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d016      	beq.n	80096ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <vTaskDelay+0x60>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d009      	beq.n	800969a <vTaskDelay+0x2e>
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	60bb      	str	r3, [r7, #8]
 8009698:	e7fe      	b.n	8009698 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800969a:	f000 f87f 	bl	800979c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800969e:	2100      	movs	r1, #0
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fe2b 	bl	800a2fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096a6:	f000 f887 	bl	80097b8 <xTaskResumeAll>
 80096aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d107      	bne.n	80096c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <vTaskDelay+0x64>)
 80096b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b8:	601a      	str	r2, [r3, #0]
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096c2:	bf00      	nop
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	200008d0 	.word	0x200008d0
 80096d0:	e000ed04 	.word	0xe000ed04

080096d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08a      	sub	sp, #40	; 0x28
 80096d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096da:	2300      	movs	r3, #0
 80096dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096e2:	463a      	mov	r2, r7
 80096e4:	1d39      	adds	r1, r7, #4
 80096e6:	f107 0308 	add.w	r3, r7, #8
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f6 fe5e 	bl	80003ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	9202      	str	r2, [sp, #8]
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	2300      	movs	r3, #0
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	2300      	movs	r3, #0
 8009700:	460a      	mov	r2, r1
 8009702:	4920      	ldr	r1, [pc, #128]	; (8009784 <vTaskStartScheduler+0xb0>)
 8009704:	4820      	ldr	r0, [pc, #128]	; (8009788 <vTaskStartScheduler+0xb4>)
 8009706:	f7ff fe1f 	bl	8009348 <xTaskCreateStatic>
 800970a:	4602      	mov	r2, r0
 800970c:	4b1f      	ldr	r3, [pc, #124]	; (800978c <vTaskStartScheduler+0xb8>)
 800970e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009710:	4b1e      	ldr	r3, [pc, #120]	; (800978c <vTaskStartScheduler+0xb8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d002      	beq.n	800971e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009718:	2301      	movs	r3, #1
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	e001      	b.n	8009722 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800971e:	2300      	movs	r3, #0
 8009720:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d102      	bne.n	800972e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009728:	f000 fe4e 	bl	800a3c8 <xTimerCreateTimerTask>
 800972c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d115      	bne.n	8009760 <vTaskStartScheduler+0x8c>
 8009734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009746:	4b12      	ldr	r3, [pc, #72]	; (8009790 <vTaskStartScheduler+0xbc>)
 8009748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800974c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800974e:	4b11      	ldr	r3, [pc, #68]	; (8009794 <vTaskStartScheduler+0xc0>)
 8009750:	2201      	movs	r2, #1
 8009752:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009754:	4b10      	ldr	r3, [pc, #64]	; (8009798 <vTaskStartScheduler+0xc4>)
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800975a:	f001 fa01 	bl	800ab60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800975e:	e00d      	b.n	800977c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009766:	d109      	bne.n	800977c <vTaskStartScheduler+0xa8>
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	60fb      	str	r3, [r7, #12]
 800977a:	e7fe      	b.n	800977a <vTaskStartScheduler+0xa6>
}
 800977c:	bf00      	nop
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	0800b3a0 	.word	0x0800b3a0
 8009788:	08009dbd 	.word	0x08009dbd
 800978c:	200008cc 	.word	0x200008cc
 8009790:	200008c8 	.word	0x200008c8
 8009794:	200008b4 	.word	0x200008b4
 8009798:	200008ac 	.word	0x200008ac

0800979c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097a0:	4b04      	ldr	r3, [pc, #16]	; (80097b4 <vTaskSuspendAll+0x18>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	4a03      	ldr	r2, [pc, #12]	; (80097b4 <vTaskSuspendAll+0x18>)
 80097a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80097aa:	bf00      	nop
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	200008d0 	.word	0x200008d0

080097b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097c6:	4b41      	ldr	r3, [pc, #260]	; (80098cc <xTaskResumeAll+0x114>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <xTaskResumeAll+0x2a>
 80097ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d2:	f383 8811 	msr	BASEPRI, r3
 80097d6:	f3bf 8f6f 	isb	sy
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	e7fe      	b.n	80097e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097e2:	f001 fa5b 	bl	800ac9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097e6:	4b39      	ldr	r3, [pc, #228]	; (80098cc <xTaskResumeAll+0x114>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	4a37      	ldr	r2, [pc, #220]	; (80098cc <xTaskResumeAll+0x114>)
 80097ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097f0:	4b36      	ldr	r3, [pc, #216]	; (80098cc <xTaskResumeAll+0x114>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d161      	bne.n	80098bc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097f8:	4b35      	ldr	r3, [pc, #212]	; (80098d0 <xTaskResumeAll+0x118>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d05d      	beq.n	80098bc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009800:	e02e      	b.n	8009860 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009802:	4b34      	ldr	r3, [pc, #208]	; (80098d4 <xTaskResumeAll+0x11c>)
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3318      	adds	r3, #24
 800980e:	4618      	mov	r0, r3
 8009810:	f7fe fdec 	bl	80083ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3304      	adds	r3, #4
 8009818:	4618      	mov	r0, r3
 800981a:	f7fe fde7 	bl	80083ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009822:	2201      	movs	r2, #1
 8009824:	409a      	lsls	r2, r3
 8009826:	4b2c      	ldr	r3, [pc, #176]	; (80098d8 <xTaskResumeAll+0x120>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4313      	orrs	r3, r2
 800982c:	4a2a      	ldr	r2, [pc, #168]	; (80098d8 <xTaskResumeAll+0x120>)
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4a27      	ldr	r2, [pc, #156]	; (80098dc <xTaskResumeAll+0x124>)
 800983e:	441a      	add	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3304      	adds	r3, #4
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f7fe fd73 	bl	8008332 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009850:	4b23      	ldr	r3, [pc, #140]	; (80098e0 <xTaskResumeAll+0x128>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009856:	429a      	cmp	r2, r3
 8009858:	d302      	bcc.n	8009860 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800985a:	4b22      	ldr	r3, [pc, #136]	; (80098e4 <xTaskResumeAll+0x12c>)
 800985c:	2201      	movs	r2, #1
 800985e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009860:	4b1c      	ldr	r3, [pc, #112]	; (80098d4 <xTaskResumeAll+0x11c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1cc      	bne.n	8009802 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800986e:	f000 fb57 	bl	8009f20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009872:	4b1d      	ldr	r3, [pc, #116]	; (80098e8 <xTaskResumeAll+0x130>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d010      	beq.n	80098a0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800987e:	f000 f859 	bl	8009934 <xTaskIncrementTick>
 8009882:	4603      	mov	r3, r0
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009888:	4b16      	ldr	r3, [pc, #88]	; (80098e4 <xTaskResumeAll+0x12c>)
 800988a:	2201      	movs	r2, #1
 800988c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3b01      	subs	r3, #1
 8009892:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1f1      	bne.n	800987e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800989a:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <xTaskResumeAll+0x130>)
 800989c:	2200      	movs	r2, #0
 800989e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098a0:	4b10      	ldr	r3, [pc, #64]	; (80098e4 <xTaskResumeAll+0x12c>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d009      	beq.n	80098bc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098a8:	2301      	movs	r3, #1
 80098aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098ac:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <xTaskResumeAll+0x134>)
 80098ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098bc:	f001 fa1c 	bl	800acf8 <vPortExitCritical>

	return xAlreadyYielded;
 80098c0:	68bb      	ldr	r3, [r7, #8]
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	200008d0 	.word	0x200008d0
 80098d0:	200008a8 	.word	0x200008a8
 80098d4:	20000868 	.word	0x20000868
 80098d8:	200008b0 	.word	0x200008b0
 80098dc:	200007ac 	.word	0x200007ac
 80098e0:	200007a8 	.word	0x200007a8
 80098e4:	200008bc 	.word	0x200008bc
 80098e8:	200008b8 	.word	0x200008b8
 80098ec:	e000ed04 	.word	0xe000ed04

080098f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098f6:	4b05      	ldr	r3, [pc, #20]	; (800990c <xTaskGetTickCount+0x1c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098fc:	687b      	ldr	r3, [r7, #4]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	200008ac 	.word	0x200008ac

08009910 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009916:	f001 fa9d 	bl	800ae54 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800991a:	2300      	movs	r3, #0
 800991c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800991e:	4b04      	ldr	r3, [pc, #16]	; (8009930 <xTaskGetTickCountFromISR+0x20>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009924:	683b      	ldr	r3, [r7, #0]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	200008ac 	.word	0x200008ac

08009934 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800993a:	2300      	movs	r3, #0
 800993c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800993e:	4b4e      	ldr	r3, [pc, #312]	; (8009a78 <xTaskIncrementTick+0x144>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f040 8087 	bne.w	8009a56 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009948:	4b4c      	ldr	r3, [pc, #304]	; (8009a7c <xTaskIncrementTick+0x148>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3301      	adds	r3, #1
 800994e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009950:	4a4a      	ldr	r2, [pc, #296]	; (8009a7c <xTaskIncrementTick+0x148>)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d11f      	bne.n	800999c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800995c:	4b48      	ldr	r3, [pc, #288]	; (8009a80 <xTaskIncrementTick+0x14c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d009      	beq.n	800997a <xTaskIncrementTick+0x46>
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	603b      	str	r3, [r7, #0]
 8009978:	e7fe      	b.n	8009978 <xTaskIncrementTick+0x44>
 800997a:	4b41      	ldr	r3, [pc, #260]	; (8009a80 <xTaskIncrementTick+0x14c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	4b40      	ldr	r3, [pc, #256]	; (8009a84 <xTaskIncrementTick+0x150>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a3e      	ldr	r2, [pc, #248]	; (8009a80 <xTaskIncrementTick+0x14c>)
 8009986:	6013      	str	r3, [r2, #0]
 8009988:	4a3e      	ldr	r2, [pc, #248]	; (8009a84 <xTaskIncrementTick+0x150>)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	4b3e      	ldr	r3, [pc, #248]	; (8009a88 <xTaskIncrementTick+0x154>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3301      	adds	r3, #1
 8009994:	4a3c      	ldr	r2, [pc, #240]	; (8009a88 <xTaskIncrementTick+0x154>)
 8009996:	6013      	str	r3, [r2, #0]
 8009998:	f000 fac2 	bl	8009f20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800999c:	4b3b      	ldr	r3, [pc, #236]	; (8009a8c <xTaskIncrementTick+0x158>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d348      	bcc.n	8009a38 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099a6:	4b36      	ldr	r3, [pc, #216]	; (8009a80 <xTaskIncrementTick+0x14c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d104      	bne.n	80099ba <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b0:	4b36      	ldr	r3, [pc, #216]	; (8009a8c <xTaskIncrementTick+0x158>)
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b6:	601a      	str	r2, [r3, #0]
					break;
 80099b8:	e03e      	b.n	8009a38 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ba:	4b31      	ldr	r3, [pc, #196]	; (8009a80 <xTaskIncrementTick+0x14c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d203      	bcs.n	80099da <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099d2:	4a2e      	ldr	r2, [pc, #184]	; (8009a8c <xTaskIncrementTick+0x158>)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099d8:	e02e      	b.n	8009a38 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	3304      	adds	r3, #4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fd04 	bl	80083ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	3318      	adds	r3, #24
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe fcfb 	bl	80083ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fa:	2201      	movs	r2, #1
 80099fc:	409a      	lsls	r2, r3
 80099fe:	4b24      	ldr	r3, [pc, #144]	; (8009a90 <xTaskIncrementTick+0x15c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	4a22      	ldr	r2, [pc, #136]	; (8009a90 <xTaskIncrementTick+0x15c>)
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <xTaskIncrementTick+0x160>)
 8009a16:	441a      	add	r2, r3
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7fe fc87 	bl	8008332 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a28:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <xTaskIncrementTick+0x164>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d3b9      	bcc.n	80099a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009a32:	2301      	movs	r3, #1
 8009a34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a36:	e7b6      	b.n	80099a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a38:	4b17      	ldr	r3, [pc, #92]	; (8009a98 <xTaskIncrementTick+0x164>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3e:	4915      	ldr	r1, [pc, #84]	; (8009a94 <xTaskIncrementTick+0x160>)
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d907      	bls.n	8009a60 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009a50:	2301      	movs	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e004      	b.n	8009a60 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a56:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <xTaskIncrementTick+0x168>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	4a0f      	ldr	r2, [pc, #60]	; (8009a9c <xTaskIncrementTick+0x168>)
 8009a5e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a60:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <xTaskIncrementTick+0x16c>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a6c:	697b      	ldr	r3, [r7, #20]
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3718      	adds	r7, #24
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	200008d0 	.word	0x200008d0
 8009a7c:	200008ac 	.word	0x200008ac
 8009a80:	20000860 	.word	0x20000860
 8009a84:	20000864 	.word	0x20000864
 8009a88:	200008c0 	.word	0x200008c0
 8009a8c:	200008c8 	.word	0x200008c8
 8009a90:	200008b0 	.word	0x200008b0
 8009a94:	200007ac 	.word	0x200007ac
 8009a98:	200007a8 	.word	0x200007a8
 8009a9c:	200008b8 	.word	0x200008b8
 8009aa0:	200008bc 	.word	0x200008bc

08009aa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b087      	sub	sp, #28
 8009aa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009aaa:	4b26      	ldr	r3, [pc, #152]	; (8009b44 <vTaskSwitchContext+0xa0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ab2:	4b25      	ldr	r3, [pc, #148]	; (8009b48 <vTaskSwitchContext+0xa4>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ab8:	e03e      	b.n	8009b38 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009aba:	4b23      	ldr	r3, [pc, #140]	; (8009b48 <vTaskSwitchContext+0xa4>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ac0:	4b22      	ldr	r3, [pc, #136]	; (8009b4c <vTaskSwitchContext+0xa8>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	fab3 f383 	clz	r3, r3
 8009acc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009ace:	7afb      	ldrb	r3, [r7, #11]
 8009ad0:	f1c3 031f 	rsb	r3, r3, #31
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	491e      	ldr	r1, [pc, #120]	; (8009b50 <vTaskSwitchContext+0xac>)
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	4613      	mov	r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	4413      	add	r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	440b      	add	r3, r1
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d109      	bne.n	8009afe <vTaskSwitchContext+0x5a>
	__asm volatile
 8009aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aee:	f383 8811 	msr	BASEPRI, r3
 8009af2:	f3bf 8f6f 	isb	sy
 8009af6:	f3bf 8f4f 	dsb	sy
 8009afa:	607b      	str	r3, [r7, #4]
 8009afc:	e7fe      	b.n	8009afc <vTaskSwitchContext+0x58>
 8009afe:	697a      	ldr	r2, [r7, #20]
 8009b00:	4613      	mov	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4a11      	ldr	r2, [pc, #68]	; (8009b50 <vTaskSwitchContext+0xac>)
 8009b0a:	4413      	add	r3, r2
 8009b0c:	613b      	str	r3, [r7, #16]
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	605a      	str	r2, [r3, #4]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	3308      	adds	r3, #8
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d104      	bne.n	8009b2e <vTaskSwitchContext+0x8a>
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	605a      	str	r2, [r3, #4]
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	4a07      	ldr	r2, [pc, #28]	; (8009b54 <vTaskSwitchContext+0xb0>)
 8009b36:	6013      	str	r3, [r2, #0]
}
 8009b38:	bf00      	nop
 8009b3a:	371c      	adds	r7, #28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	200008d0 	.word	0x200008d0
 8009b48:	200008bc 	.word	0x200008bc
 8009b4c:	200008b0 	.word	0x200008b0
 8009b50:	200007ac 	.word	0x200007ac
 8009b54:	200007a8 	.word	0x200007a8

08009b58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d109      	bne.n	8009b7c <vTaskPlaceOnEventList+0x24>
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	e7fe      	b.n	8009b7a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b7c:	4b07      	ldr	r3, [pc, #28]	; (8009b9c <vTaskPlaceOnEventList+0x44>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3318      	adds	r3, #24
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7fe fbf8 	bl	800837a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	6838      	ldr	r0, [r7, #0]
 8009b8e:	f000 fbb5 	bl	800a2fc <prvAddCurrentTaskToDelayedList>
}
 8009b92:	bf00      	nop
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200007a8 	.word	0x200007a8

08009ba0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d109      	bne.n	8009bc6 <vTaskPlaceOnEventListRestricted+0x26>
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	e7fe      	b.n	8009bc4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bc6:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <vTaskPlaceOnEventListRestricted+0x50>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3318      	adds	r3, #24
 8009bcc:	4619      	mov	r1, r3
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7fe fbaf 	bl	8008332 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d002      	beq.n	8009be0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bde:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009be0:	6879      	ldr	r1, [r7, #4]
 8009be2:	68b8      	ldr	r0, [r7, #8]
 8009be4:	f000 fb8a 	bl	800a2fc <prvAddCurrentTaskToDelayedList>
	}
 8009be8:	bf00      	nop
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	200007a8 	.word	0x200007a8

08009bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	68db      	ldr	r3, [r3, #12]
 8009c02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d109      	bne.n	8009c1e <xTaskRemoveFromEventList+0x2a>
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	e7fe      	b.n	8009c1c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	3318      	adds	r3, #24
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fe fbe2 	bl	80083ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c28:	4b1d      	ldr	r3, [pc, #116]	; (8009ca0 <xTaskRemoveFromEventList+0xac>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d11c      	bne.n	8009c6a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	3304      	adds	r3, #4
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7fe fbd9 	bl	80083ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	2201      	movs	r2, #1
 8009c40:	409a      	lsls	r2, r3
 8009c42:	4b18      	ldr	r3, [pc, #96]	; (8009ca4 <xTaskRemoveFromEventList+0xb0>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	4a16      	ldr	r2, [pc, #88]	; (8009ca4 <xTaskRemoveFromEventList+0xb0>)
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4a13      	ldr	r2, [pc, #76]	; (8009ca8 <xTaskRemoveFromEventList+0xb4>)
 8009c5a:	441a      	add	r2, r3
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f7fe fb65 	bl	8008332 <vListInsertEnd>
 8009c68:	e005      	b.n	8009c76 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	3318      	adds	r3, #24
 8009c6e:	4619      	mov	r1, r3
 8009c70:	480e      	ldr	r0, [pc, #56]	; (8009cac <xTaskRemoveFromEventList+0xb8>)
 8009c72:	f7fe fb5e 	bl	8008332 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c7a:	4b0d      	ldr	r3, [pc, #52]	; (8009cb0 <xTaskRemoveFromEventList+0xbc>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d905      	bls.n	8009c90 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c84:	2301      	movs	r3, #1
 8009c86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c88:	4b0a      	ldr	r3, [pc, #40]	; (8009cb4 <xTaskRemoveFromEventList+0xc0>)
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	e001      	b.n	8009c94 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c94:	697b      	ldr	r3, [r7, #20]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	200008d0 	.word	0x200008d0
 8009ca4:	200008b0 	.word	0x200008b0
 8009ca8:	200007ac 	.word	0x200007ac
 8009cac:	20000868 	.word	0x20000868
 8009cb0:	200007a8 	.word	0x200007a8
 8009cb4:	200008bc 	.word	0x200008bc

08009cb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009cc0:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <vTaskInternalSetTimeOutState+0x24>)
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009cc8:	4b05      	ldr	r3, [pc, #20]	; (8009ce0 <vTaskInternalSetTimeOutState+0x28>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	605a      	str	r2, [r3, #4]
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	200008c0 	.word	0x200008c0
 8009ce0:	200008ac 	.word	0x200008ac

08009ce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b088      	sub	sp, #32
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d109      	bne.n	8009d08 <xTaskCheckForTimeOut+0x24>
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	613b      	str	r3, [r7, #16]
 8009d06:	e7fe      	b.n	8009d06 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d109      	bne.n	8009d22 <xTaskCheckForTimeOut+0x3e>
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	e7fe      	b.n	8009d20 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009d22:	f000 ffbb 	bl	800ac9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009d26:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <xTaskCheckForTimeOut+0xb8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d3e:	d102      	bne.n	8009d46 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]
 8009d44:	e023      	b.n	8009d8e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <xTaskCheckForTimeOut+0xbc>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d007      	beq.n	8009d62 <xTaskCheckForTimeOut+0x7e>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	69ba      	ldr	r2, [r7, #24]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d302      	bcc.n	8009d62 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	61fb      	str	r3, [r7, #28]
 8009d60:	e015      	b.n	8009d8e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d20b      	bcs.n	8009d84 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	1ad2      	subs	r2, r2, r3
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f7ff ff9d 	bl	8009cb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	e004      	b.n	8009d8e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2200      	movs	r2, #0
 8009d88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d8e:	f000 ffb3 	bl	800acf8 <vPortExitCritical>

	return xReturn;
 8009d92:	69fb      	ldr	r3, [r7, #28]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3720      	adds	r7, #32
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	200008ac 	.word	0x200008ac
 8009da0:	200008c0 	.word	0x200008c0

08009da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009da4:	b480      	push	{r7}
 8009da6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009da8:	4b03      	ldr	r3, [pc, #12]	; (8009db8 <vTaskMissedYield+0x14>)
 8009daa:	2201      	movs	r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
}
 8009dae:	bf00      	nop
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	200008bc 	.word	0x200008bc

08009dbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009dc4:	f000 f852 	bl	8009e6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009dc8:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <prvIdleTask+0x28>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d9f9      	bls.n	8009dc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009dd0:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <prvIdleTask+0x2c>)
 8009dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd6:	601a      	str	r2, [r3, #0]
 8009dd8:	f3bf 8f4f 	dsb	sy
 8009ddc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009de0:	e7f0      	b.n	8009dc4 <prvIdleTask+0x8>
 8009de2:	bf00      	nop
 8009de4:	200007ac 	.word	0x200007ac
 8009de8:	e000ed04 	.word	0xe000ed04

08009dec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009df2:	2300      	movs	r3, #0
 8009df4:	607b      	str	r3, [r7, #4]
 8009df6:	e00c      	b.n	8009e12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4a12      	ldr	r2, [pc, #72]	; (8009e4c <prvInitialiseTaskLists+0x60>)
 8009e04:	4413      	add	r3, r2
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fe fa66 	bl	80082d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3301      	adds	r3, #1
 8009e10:	607b      	str	r3, [r7, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b06      	cmp	r3, #6
 8009e16:	d9ef      	bls.n	8009df8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e18:	480d      	ldr	r0, [pc, #52]	; (8009e50 <prvInitialiseTaskLists+0x64>)
 8009e1a:	f7fe fa5d 	bl	80082d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e1e:	480d      	ldr	r0, [pc, #52]	; (8009e54 <prvInitialiseTaskLists+0x68>)
 8009e20:	f7fe fa5a 	bl	80082d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009e24:	480c      	ldr	r0, [pc, #48]	; (8009e58 <prvInitialiseTaskLists+0x6c>)
 8009e26:	f7fe fa57 	bl	80082d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009e2a:	480c      	ldr	r0, [pc, #48]	; (8009e5c <prvInitialiseTaskLists+0x70>)
 8009e2c:	f7fe fa54 	bl	80082d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009e30:	480b      	ldr	r0, [pc, #44]	; (8009e60 <prvInitialiseTaskLists+0x74>)
 8009e32:	f7fe fa51 	bl	80082d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009e36:	4b0b      	ldr	r3, [pc, #44]	; (8009e64 <prvInitialiseTaskLists+0x78>)
 8009e38:	4a05      	ldr	r2, [pc, #20]	; (8009e50 <prvInitialiseTaskLists+0x64>)
 8009e3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009e3c:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <prvInitialiseTaskLists+0x7c>)
 8009e3e:	4a05      	ldr	r2, [pc, #20]	; (8009e54 <prvInitialiseTaskLists+0x68>)
 8009e40:	601a      	str	r2, [r3, #0]
}
 8009e42:	bf00      	nop
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	200007ac 	.word	0x200007ac
 8009e50:	20000838 	.word	0x20000838
 8009e54:	2000084c 	.word	0x2000084c
 8009e58:	20000868 	.word	0x20000868
 8009e5c:	2000087c 	.word	0x2000087c
 8009e60:	20000894 	.word	0x20000894
 8009e64:	20000860 	.word	0x20000860
 8009e68:	20000864 	.word	0x20000864

08009e6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e72:	e019      	b.n	8009ea8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e74:	f000 ff12 	bl	800ac9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e78:	4b0f      	ldr	r3, [pc, #60]	; (8009eb8 <prvCheckTasksWaitingTermination+0x4c>)
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3304      	adds	r3, #4
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fe fab1 	bl	80083ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e8a:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <prvCheckTasksWaitingTermination+0x50>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	4a0a      	ldr	r2, [pc, #40]	; (8009ebc <prvCheckTasksWaitingTermination+0x50>)
 8009e92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <prvCheckTasksWaitingTermination+0x54>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	4a09      	ldr	r2, [pc, #36]	; (8009ec0 <prvCheckTasksWaitingTermination+0x54>)
 8009e9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e9e:	f000 ff2b 	bl	800acf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f80e 	bl	8009ec4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ea8:	4b05      	ldr	r3, [pc, #20]	; (8009ec0 <prvCheckTasksWaitingTermination+0x54>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e1      	bne.n	8009e74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009eb0:	bf00      	nop
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	2000087c 	.word	0x2000087c
 8009ebc:	200008a8 	.word	0x200008a8
 8009ec0:	20000890 	.word	0x20000890

08009ec4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d108      	bne.n	8009ee8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 f8ba 	bl	800b054 <vPortFree>
				vPortFree( pxTCB );
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f001 f8b7 	bl	800b054 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ee6:	e017      	b.n	8009f18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d103      	bne.n	8009efa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f001 f8ae 	bl	800b054 <vPortFree>
	}
 8009ef8:	e00e      	b.n	8009f18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d009      	beq.n	8009f18 <prvDeleteTCB+0x54>
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	e7fe      	b.n	8009f16 <prvDeleteTCB+0x52>
	}
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f26:	4b0c      	ldr	r3, [pc, #48]	; (8009f58 <prvResetNextTaskUnblockTime+0x38>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d104      	bne.n	8009f3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f30:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <prvResetNextTaskUnblockTime+0x3c>)
 8009f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f38:	e008      	b.n	8009f4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f3a:	4b07      	ldr	r3, [pc, #28]	; (8009f58 <prvResetNextTaskUnblockTime+0x38>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	4a04      	ldr	r2, [pc, #16]	; (8009f5c <prvResetNextTaskUnblockTime+0x3c>)
 8009f4a:	6013      	str	r3, [r2, #0]
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	20000860 	.word	0x20000860
 8009f5c:	200008c8 	.word	0x200008c8

08009f60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f66:	4b0b      	ldr	r3, [pc, #44]	; (8009f94 <xTaskGetSchedulerState+0x34>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d102      	bne.n	8009f74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	607b      	str	r3, [r7, #4]
 8009f72:	e008      	b.n	8009f86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f74:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <xTaskGetSchedulerState+0x38>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d102      	bne.n	8009f82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f7c:	2302      	movs	r3, #2
 8009f7e:	607b      	str	r3, [r7, #4]
 8009f80:	e001      	b.n	8009f86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f82:	2300      	movs	r3, #0
 8009f84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f86:	687b      	ldr	r3, [r7, #4]
	}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	200008b4 	.word	0x200008b4
 8009f98:	200008d0 	.word	0x200008d0

08009f9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d069      	beq.n	800a086 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb6:	4b36      	ldr	r3, [pc, #216]	; (800a090 <xTaskPriorityInherit+0xf4>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d259      	bcs.n	800a074 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	699b      	ldr	r3, [r3, #24]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	db06      	blt.n	8009fd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc8:	4b31      	ldr	r3, [pc, #196]	; (800a090 <xTaskPriorityInherit+0xf4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	f1c3 0207 	rsb	r2, r3, #7
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	6959      	ldr	r1, [r3, #20]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4a2b      	ldr	r2, [pc, #172]	; (800a094 <xTaskPriorityInherit+0xf8>)
 8009fe8:	4413      	add	r3, r2
 8009fea:	4299      	cmp	r1, r3
 8009fec:	d13a      	bne.n	800a064 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe f9fa 	bl	80083ec <uxListRemove>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d115      	bne.n	800a02a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a002:	4924      	ldr	r1, [pc, #144]	; (800a094 <xTaskPriorityInherit+0xf8>)
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	440b      	add	r3, r1
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <xTaskPriorityInherit+0x8e>
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	2201      	movs	r2, #1
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	43da      	mvns	r2, r3
 800a020:	4b1d      	ldr	r3, [pc, #116]	; (800a098 <xTaskPriorityInherit+0xfc>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4013      	ands	r3, r2
 800a026:	4a1c      	ldr	r2, [pc, #112]	; (800a098 <xTaskPriorityInherit+0xfc>)
 800a028:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a02a:	4b19      	ldr	r3, [pc, #100]	; (800a090 <xTaskPriorityInherit+0xf4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	2201      	movs	r2, #1
 800a03a:	409a      	lsls	r2, r3
 800a03c:	4b16      	ldr	r3, [pc, #88]	; (800a098 <xTaskPriorityInherit+0xfc>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4313      	orrs	r3, r2
 800a042:	4a15      	ldr	r2, [pc, #84]	; (800a098 <xTaskPriorityInherit+0xfc>)
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04a:	4613      	mov	r3, r2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4a10      	ldr	r2, [pc, #64]	; (800a094 <xTaskPriorityInherit+0xf8>)
 800a054:	441a      	add	r2, r3
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	3304      	adds	r3, #4
 800a05a:	4619      	mov	r1, r3
 800a05c:	4610      	mov	r0, r2
 800a05e:	f7fe f968 	bl	8008332 <vListInsertEnd>
 800a062:	e004      	b.n	800a06e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a064:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <xTaskPriorityInherit+0xf4>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a06e:	2301      	movs	r3, #1
 800a070:	60fb      	str	r3, [r7, #12]
 800a072:	e008      	b.n	800a086 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a078:	4b05      	ldr	r3, [pc, #20]	; (800a090 <xTaskPriorityInherit+0xf4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07e:	429a      	cmp	r2, r3
 800a080:	d201      	bcs.n	800a086 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a082:	2301      	movs	r3, #1
 800a084:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a086:	68fb      	ldr	r3, [r7, #12]
	}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	200007a8 	.word	0x200007a8
 800a094:	200007ac 	.word	0x200007ac
 800a098:	200008b0 	.word	0x200008b0

0800a09c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d06c      	beq.n	800a18c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0b2:	4b39      	ldr	r3, [pc, #228]	; (800a198 <xTaskPriorityDisinherit+0xfc>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d009      	beq.n	800a0d0 <xTaskPriorityDisinherit+0x34>
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	e7fe      	b.n	800a0ce <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d109      	bne.n	800a0ec <xTaskPriorityDisinherit+0x50>
 800a0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	60bb      	str	r3, [r7, #8]
 800a0ea:	e7fe      	b.n	800a0ea <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f0:	1e5a      	subs	r2, r3, #1
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d044      	beq.n	800a18c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a106:	2b00      	cmp	r3, #0
 800a108:	d140      	bne.n	800a18c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	3304      	adds	r3, #4
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fe f96c 	bl	80083ec <uxListRemove>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d115      	bne.n	800a146 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11e:	491f      	ldr	r1, [pc, #124]	; (800a19c <xTaskPriorityDisinherit+0x100>)
 800a120:	4613      	mov	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	440b      	add	r3, r1
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10a      	bne.n	800a146 <xTaskPriorityDisinherit+0xaa>
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	2201      	movs	r2, #1
 800a136:	fa02 f303 	lsl.w	r3, r2, r3
 800a13a:	43da      	mvns	r2, r3
 800a13c:	4b18      	ldr	r3, [pc, #96]	; (800a1a0 <xTaskPriorityDisinherit+0x104>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4013      	ands	r3, r2
 800a142:	4a17      	ldr	r2, [pc, #92]	; (800a1a0 <xTaskPriorityDisinherit+0x104>)
 800a144:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a152:	f1c3 0207 	rsb	r2, r3, #7
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15e:	2201      	movs	r2, #1
 800a160:	409a      	lsls	r2, r3
 800a162:	4b0f      	ldr	r3, [pc, #60]	; (800a1a0 <xTaskPriorityDisinherit+0x104>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4313      	orrs	r3, r2
 800a168:	4a0d      	ldr	r2, [pc, #52]	; (800a1a0 <xTaskPriorityDisinherit+0x104>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a08      	ldr	r2, [pc, #32]	; (800a19c <xTaskPriorityDisinherit+0x100>)
 800a17a:	441a      	add	r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe f8d5 	bl	8008332 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a188:	2301      	movs	r3, #1
 800a18a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a18c:	697b      	ldr	r3, [r7, #20]
	}
 800a18e:	4618      	mov	r0, r3
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	200007a8 	.word	0x200007a8
 800a19c:	200007ac 	.word	0x200007ac
 800a1a0:	200008b0 	.word	0x200008b0

0800a1a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8081 	beq.w	800a2c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d109      	bne.n	800a1da <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	e7fe      	b.n	800a1d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d902      	bls.n	800a1ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	61fb      	str	r3, [r7, #28]
 800a1e8:	e002      	b.n	800a1f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f4:	69fa      	ldr	r2, [r7, #28]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d062      	beq.n	800a2c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	429a      	cmp	r2, r3
 800a202:	d15d      	bne.n	800a2c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a204:	4b30      	ldr	r3, [pc, #192]	; (800a2c8 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	69ba      	ldr	r2, [r7, #24]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d109      	bne.n	800a222 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	60bb      	str	r3, [r7, #8]
 800a220:	e7fe      	b.n	800a220 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a226:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	69fa      	ldr	r2, [r7, #28]
 800a22c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	2b00      	cmp	r3, #0
 800a234:	db04      	blt.n	800a240 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f1c3 0207 	rsb	r2, r3, #7
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	6959      	ldr	r1, [r3, #20]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	4613      	mov	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4a1f      	ldr	r2, [pc, #124]	; (800a2cc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a250:	4413      	add	r3, r2
 800a252:	4299      	cmp	r1, r3
 800a254:	d134      	bne.n	800a2c0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	3304      	adds	r3, #4
 800a25a:	4618      	mov	r0, r3
 800a25c:	f7fe f8c6 	bl	80083ec <uxListRemove>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d115      	bne.n	800a292 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26a:	4918      	ldr	r1, [pc, #96]	; (800a2cc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a26c:	4613      	mov	r3, r2
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	4413      	add	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	440b      	add	r3, r1
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	2201      	movs	r2, #1
 800a282:	fa02 f303 	lsl.w	r3, r2, r3
 800a286:	43da      	mvns	r2, r3
 800a288:	4b11      	ldr	r3, [pc, #68]	; (800a2d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4013      	ands	r3, r2
 800a28e:	4a10      	ldr	r2, [pc, #64]	; (800a2d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a290:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a296:	2201      	movs	r2, #1
 800a298:	409a      	lsls	r2, r3
 800a29a:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	4a0b      	ldr	r2, [pc, #44]	; (800a2d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a2a2:	6013      	str	r3, [r2, #0]
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4a06      	ldr	r2, [pc, #24]	; (800a2cc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a2b2:	441a      	add	r2, r3
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	f7fe f839 	bl	8008332 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2c0:	bf00      	nop
 800a2c2:	3720      	adds	r7, #32
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	200007a8 	.word	0x200007a8
 800a2cc:	200007ac 	.word	0x200007ac
 800a2d0:	200008b0 	.word	0x200008b0

0800a2d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a2d8:	4b07      	ldr	r3, [pc, #28]	; (800a2f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d004      	beq.n	800a2ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a2e0:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2e6:	3201      	adds	r2, #1
 800a2e8:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800a2ea:	4b03      	ldr	r3, [pc, #12]	; (800a2f8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
	}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	200007a8 	.word	0x200007a8

0800a2fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a306:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <prvAddCurrentTaskToDelayedList+0xb0>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a30c:	4b28      	ldr	r3, [pc, #160]	; (800a3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3304      	adds	r3, #4
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe f86a 	bl	80083ec <uxListRemove>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10b      	bne.n	800a336 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a31e:	4b24      	ldr	r3, [pc, #144]	; (800a3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	2201      	movs	r2, #1
 800a326:	fa02 f303 	lsl.w	r3, r2, r3
 800a32a:	43da      	mvns	r2, r3
 800a32c:	4b21      	ldr	r3, [pc, #132]	; (800a3b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4013      	ands	r3, r2
 800a332:	4a20      	ldr	r2, [pc, #128]	; (800a3b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a334:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a33c:	d10a      	bne.n	800a354 <prvAddCurrentTaskToDelayedList+0x58>
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d007      	beq.n	800a354 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a344:	4b1a      	ldr	r3, [pc, #104]	; (800a3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3304      	adds	r3, #4
 800a34a:	4619      	mov	r1, r3
 800a34c:	481a      	ldr	r0, [pc, #104]	; (800a3b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a34e:	f7fd fff0 	bl	8008332 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a352:	e026      	b.n	800a3a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4413      	add	r3, r2
 800a35a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a35c:	4b14      	ldr	r3, [pc, #80]	; (800a3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d209      	bcs.n	800a380 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a36c:	4b13      	ldr	r3, [pc, #76]	; (800a3bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	4b0f      	ldr	r3, [pc, #60]	; (800a3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3304      	adds	r3, #4
 800a376:	4619      	mov	r1, r3
 800a378:	4610      	mov	r0, r2
 800a37a:	f7fd fffe 	bl	800837a <vListInsert>
}
 800a37e:	e010      	b.n	800a3a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a380:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	4b0a      	ldr	r3, [pc, #40]	; (800a3b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3304      	adds	r3, #4
 800a38a:	4619      	mov	r1, r3
 800a38c:	4610      	mov	r0, r2
 800a38e:	f7fd fff4 	bl	800837a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a392:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d202      	bcs.n	800a3a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a39c:	4a09      	ldr	r2, [pc, #36]	; (800a3c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	6013      	str	r3, [r2, #0]
}
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	200008ac 	.word	0x200008ac
 800a3b0:	200007a8 	.word	0x200007a8
 800a3b4:	200008b0 	.word	0x200008b0
 800a3b8:	20000894 	.word	0x20000894
 800a3bc:	20000864 	.word	0x20000864
 800a3c0:	20000860 	.word	0x20000860
 800a3c4:	200008c8 	.word	0x200008c8

0800a3c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08a      	sub	sp, #40	; 0x28
 800a3cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a3d2:	f000 faff 	bl	800a9d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a3d6:	4b1c      	ldr	r3, [pc, #112]	; (800a448 <xTimerCreateTimerTask+0x80>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d021      	beq.n	800a422 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a3e6:	1d3a      	adds	r2, r7, #4
 800a3e8:	f107 0108 	add.w	r1, r7, #8
 800a3ec:	f107 030c 	add.w	r3, r7, #12
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7f5 fff5 	bl	80003e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	9202      	str	r2, [sp, #8]
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	2302      	movs	r3, #2
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	2300      	movs	r3, #0
 800a406:	460a      	mov	r2, r1
 800a408:	4910      	ldr	r1, [pc, #64]	; (800a44c <xTimerCreateTimerTask+0x84>)
 800a40a:	4811      	ldr	r0, [pc, #68]	; (800a450 <xTimerCreateTimerTask+0x88>)
 800a40c:	f7fe ff9c 	bl	8009348 <xTaskCreateStatic>
 800a410:	4602      	mov	r2, r0
 800a412:	4b10      	ldr	r3, [pc, #64]	; (800a454 <xTimerCreateTimerTask+0x8c>)
 800a414:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a416:	4b0f      	ldr	r3, [pc, #60]	; (800a454 <xTimerCreateTimerTask+0x8c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a41e:	2301      	movs	r3, #1
 800a420:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d109      	bne.n	800a43c <xTimerCreateTimerTask+0x74>
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	613b      	str	r3, [r7, #16]
 800a43a:	e7fe      	b.n	800a43a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a43c:	697b      	ldr	r3, [r7, #20]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20000904 	.word	0x20000904
 800a44c:	0800b3a8 	.word	0x0800b3a8
 800a450:	0800a589 	.word	0x0800a589
 800a454:	20000908 	.word	0x20000908

0800a458 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b08a      	sub	sp, #40	; 0x28
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	60f8      	str	r0, [r7, #12]
 800a460:	60b9      	str	r1, [r7, #8]
 800a462:	607a      	str	r2, [r7, #4]
 800a464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a466:	2300      	movs	r3, #0
 800a468:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d109      	bne.n	800a484 <xTimerGenericCommand+0x2c>
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	623b      	str	r3, [r7, #32]
 800a482:	e7fe      	b.n	800a482 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a484:	4b19      	ldr	r3, [pc, #100]	; (800a4ec <xTimerGenericCommand+0x94>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d02a      	beq.n	800a4e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b05      	cmp	r3, #5
 800a49c:	dc18      	bgt.n	800a4d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a49e:	f7ff fd5f 	bl	8009f60 <xTaskGetSchedulerState>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d109      	bne.n	800a4bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a4a8:	4b10      	ldr	r3, [pc, #64]	; (800a4ec <xTimerGenericCommand+0x94>)
 800a4aa:	6818      	ldr	r0, [r3, #0]
 800a4ac:	f107 0110 	add.w	r1, r7, #16
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b4:	f7fe f8fe 	bl	80086b4 <xQueueGenericSend>
 800a4b8:	6278      	str	r0, [r7, #36]	; 0x24
 800a4ba:	e012      	b.n	800a4e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a4bc:	4b0b      	ldr	r3, [pc, #44]	; (800a4ec <xTimerGenericCommand+0x94>)
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	f107 0110 	add.w	r1, r7, #16
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f7fe f8f4 	bl	80086b4 <xQueueGenericSend>
 800a4cc:	6278      	str	r0, [r7, #36]	; 0x24
 800a4ce:	e008      	b.n	800a4e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a4d0:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <xTimerGenericCommand+0x94>)
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	f107 0110 	add.w	r1, r7, #16
 800a4d8:	2300      	movs	r3, #0
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	f7fe f9e4 	bl	80088a8 <xQueueGenericSendFromISR>
 800a4e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3728      	adds	r7, #40	; 0x28
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	20000904 	.word	0x20000904

0800a4f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b088      	sub	sp, #32
 800a4f4:	af02      	add	r7, sp, #8
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4fa:	4b22      	ldr	r3, [pc, #136]	; (800a584 <prvProcessExpiredTimer+0x94>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	68db      	ldr	r3, [r3, #12]
 800a502:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	3304      	adds	r3, #4
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fd ff6f 	bl	80083ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d021      	beq.n	800a560 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	699a      	ldr	r2, [r3, #24]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	18d1      	adds	r1, r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	683a      	ldr	r2, [r7, #0]
 800a528:	6978      	ldr	r0, [r7, #20]
 800a52a:	f000 f8d1 	bl	800a6d0 <prvInsertTimerInActiveList>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01e      	beq.n	800a572 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a534:	2300      	movs	r3, #0
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	2300      	movs	r3, #0
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	2100      	movs	r1, #0
 800a53e:	6978      	ldr	r0, [r7, #20]
 800a540:	f7ff ff8a 	bl	800a458 <xTimerGenericCommand>
 800a544:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d112      	bne.n	800a572 <prvProcessExpiredTimer+0x82>
 800a54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	e7fe      	b.n	800a55e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a566:	f023 0301 	bic.w	r3, r3, #1
 800a56a:	b2da      	uxtb	r2, r3
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	6978      	ldr	r0, [r7, #20]
 800a578:	4798      	blx	r3
}
 800a57a:	bf00      	nop
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	200008fc 	.word	0x200008fc

0800a588 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a590:	f107 0308 	add.w	r3, r7, #8
 800a594:	4618      	mov	r0, r3
 800a596:	f000 f857 	bl	800a648 <prvGetNextExpireTime>
 800a59a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 f803 	bl	800a5ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a5a6:	f000 f8d5 	bl	800a754 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a5aa:	e7f1      	b.n	800a590 <prvTimerTask+0x8>

0800a5ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a5b6:	f7ff f8f1 	bl	800979c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 f866 	bl	800a690 <prvSampleTimeNow>
 800a5c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d130      	bne.n	800a62e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <prvProcessTimerOrBlockTask+0x3c>
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d806      	bhi.n	800a5e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a5da:	f7ff f8ed 	bl	80097b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a5de:	68f9      	ldr	r1, [r7, #12]
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f7ff ff85 	bl	800a4f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a5e6:	e024      	b.n	800a632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d008      	beq.n	800a600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a5ee:	4b13      	ldr	r3, [pc, #76]	; (800a63c <prvProcessTimerOrBlockTask+0x90>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <prvProcessTimerOrBlockTask+0x50>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <prvProcessTimerOrBlockTask+0x52>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a600:	4b0f      	ldr	r3, [pc, #60]	; (800a640 <prvProcessTimerOrBlockTask+0x94>)
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	4619      	mov	r1, r3
 800a60e:	f7fe fe67 	bl	80092e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a612:	f7ff f8d1 	bl	80097b8 <xTaskResumeAll>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a61c:	4b09      	ldr	r3, [pc, #36]	; (800a644 <prvProcessTimerOrBlockTask+0x98>)
 800a61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a622:	601a      	str	r2, [r3, #0]
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	f3bf 8f6f 	isb	sy
}
 800a62c:	e001      	b.n	800a632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a62e:	f7ff f8c3 	bl	80097b8 <xTaskResumeAll>
}
 800a632:	bf00      	nop
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	20000900 	.word	0x20000900
 800a640:	20000904 	.word	0x20000904
 800a644:	e000ed04 	.word	0xe000ed04

0800a648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a650:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <prvGetNextExpireTime+0x44>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <prvGetNextExpireTime+0x16>
 800a65a:	2201      	movs	r2, #1
 800a65c:	e000      	b.n	800a660 <prvGetNextExpireTime+0x18>
 800a65e:	2200      	movs	r2, #0
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d105      	bne.n	800a678 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a66c:	4b07      	ldr	r3, [pc, #28]	; (800a68c <prvGetNextExpireTime+0x44>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	e001      	b.n	800a67c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a678:	2300      	movs	r3, #0
 800a67a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a67c:	68fb      	ldr	r3, [r7, #12]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	200008fc 	.word	0x200008fc

0800a690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a698:	f7ff f92a 	bl	80098f0 <xTaskGetTickCount>
 800a69c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a69e:	4b0b      	ldr	r3, [pc, #44]	; (800a6cc <prvSampleTimeNow+0x3c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d205      	bcs.n	800a6b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a6a8:	f000 f930 	bl	800a90c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	601a      	str	r2, [r3, #0]
 800a6b2:	e002      	b.n	800a6ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a6ba:	4a04      	ldr	r2, [pc, #16]	; (800a6cc <prvSampleTimeNow+0x3c>)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	2000090c 	.word	0x2000090c

0800a6d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
 800a6dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d812      	bhi.n	800a71c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	1ad2      	subs	r2, r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	429a      	cmp	r2, r3
 800a702:	d302      	bcc.n	800a70a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a704:	2301      	movs	r3, #1
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	e01b      	b.n	800a742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a70a:	4b10      	ldr	r3, [pc, #64]	; (800a74c <prvInsertTimerInActiveList+0x7c>)
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3304      	adds	r3, #4
 800a712:	4619      	mov	r1, r3
 800a714:	4610      	mov	r0, r2
 800a716:	f7fd fe30 	bl	800837a <vListInsert>
 800a71a:	e012      	b.n	800a742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	429a      	cmp	r2, r3
 800a722:	d206      	bcs.n	800a732 <prvInsertTimerInActiveList+0x62>
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d302      	bcc.n	800a732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a72c:	2301      	movs	r3, #1
 800a72e:	617b      	str	r3, [r7, #20]
 800a730:	e007      	b.n	800a742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a732:	4b07      	ldr	r3, [pc, #28]	; (800a750 <prvInsertTimerInActiveList+0x80>)
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3304      	adds	r3, #4
 800a73a:	4619      	mov	r1, r3
 800a73c:	4610      	mov	r0, r2
 800a73e:	f7fd fe1c 	bl	800837a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a742:	697b      	ldr	r3, [r7, #20]
}
 800a744:	4618      	mov	r0, r3
 800a746:	3718      	adds	r7, #24
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20000900 	.word	0x20000900
 800a750:	200008fc 	.word	0x200008fc

0800a754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b08e      	sub	sp, #56	; 0x38
 800a758:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a75a:	e0c6      	b.n	800a8ea <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	da17      	bge.n	800a792 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a762:	1d3b      	adds	r3, r7, #4
 800a764:	3304      	adds	r3, #4
 800a766:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d109      	bne.n	800a782 <prvProcessReceivedCommands+0x2e>
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	61fb      	str	r3, [r7, #28]
 800a780:	e7fe      	b.n	800a780 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a788:	6850      	ldr	r0, [r2, #4]
 800a78a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a78c:	6892      	ldr	r2, [r2, #8]
 800a78e:	4611      	mov	r1, r2
 800a790:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	f2c0 80a7 	blt.w	800a8e8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a0:	695b      	ldr	r3, [r3, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d004      	beq.n	800a7b0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fd fe1e 	bl	80083ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7b0:	463b      	mov	r3, r7
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7ff ff6c 	bl	800a690 <prvSampleTimeNow>
 800a7b8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b09      	cmp	r3, #9
 800a7be:	f200 8094 	bhi.w	800a8ea <prvProcessReceivedCommands+0x196>
 800a7c2:	a201      	add	r2, pc, #4	; (adr r2, 800a7c8 <prvProcessReceivedCommands+0x74>)
 800a7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c8:	0800a7f1 	.word	0x0800a7f1
 800a7cc:	0800a7f1 	.word	0x0800a7f1
 800a7d0:	0800a7f1 	.word	0x0800a7f1
 800a7d4:	0800a863 	.word	0x0800a863
 800a7d8:	0800a877 	.word	0x0800a877
 800a7dc:	0800a8bf 	.word	0x0800a8bf
 800a7e0:	0800a7f1 	.word	0x0800a7f1
 800a7e4:	0800a7f1 	.word	0x0800a7f1
 800a7e8:	0800a863 	.word	0x0800a863
 800a7ec:	0800a877 	.word	0x0800a877
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a7f6:	f043 0301 	orr.w	r3, r3, #1
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	18d1      	adds	r1, r2, r3
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a810:	f7ff ff5e 	bl	800a6d0 <prvInsertTimerInActiveList>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d067      	beq.n	800a8ea <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d05c      	beq.n	800a8ea <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	441a      	add	r2, r3
 800a838:	2300      	movs	r3, #0
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	2300      	movs	r3, #0
 800a83e:	2100      	movs	r1, #0
 800a840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a842:	f7ff fe09 	bl	800a458 <xTimerGenericCommand>
 800a846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d14d      	bne.n	800a8ea <prvProcessReceivedCommands+0x196>
 800a84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	61bb      	str	r3, [r7, #24]
 800a860:	e7fe      	b.n	800a860 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a868:	f023 0301 	bic.w	r3, r3, #1
 800a86c:	b2da      	uxtb	r2, r3
 800a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a874:	e039      	b.n	800a8ea <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a87c:	f043 0301 	orr.w	r3, r3, #1
 800a880:	b2da      	uxtb	r2, r3
 800a882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d109      	bne.n	800a8aa <prvProcessReceivedCommands+0x156>
 800a896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	e7fe      	b.n	800a8a8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ac:	699a      	ldr	r2, [r3, #24]
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	18d1      	adds	r1, r2, r3
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8b8:	f7ff ff0a 	bl	800a6d0 <prvInsertTimerInActiveList>
					break;
 800a8bc:	e015      	b.n	800a8ea <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8c4:	f003 0302 	and.w	r3, r3, #2
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d103      	bne.n	800a8d4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a8cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8ce:	f000 fbc1 	bl	800b054 <vPortFree>
 800a8d2:	e00a      	b.n	800a8ea <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8da:	f023 0301 	bic.w	r3, r3, #1
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a8e6:	e000      	b.n	800a8ea <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a8e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8ea:	4b07      	ldr	r3, [pc, #28]	; (800a908 <prvProcessReceivedCommands+0x1b4>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	1d39      	adds	r1, r7, #4
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe f8f6 	bl	8008ae4 <xQueueReceive>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	f47f af2e 	bne.w	800a75c <prvProcessReceivedCommands+0x8>
	}
}
 800a900:	bf00      	nop
 800a902:	3730      	adds	r7, #48	; 0x30
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	20000904 	.word	0x20000904

0800a90c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b088      	sub	sp, #32
 800a910:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a912:	e047      	b.n	800a9a4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a914:	4b2d      	ldr	r3, [pc, #180]	; (800a9cc <prvSwitchTimerLists+0xc0>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a91e:	4b2b      	ldr	r3, [pc, #172]	; (800a9cc <prvSwitchTimerLists+0xc0>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	3304      	adds	r3, #4
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fd fd5d 	bl	80083ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a940:	f003 0304 	and.w	r3, r3, #4
 800a944:	2b00      	cmp	r3, #0
 800a946:	d02d      	beq.n	800a9a4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	4413      	add	r3, r2
 800a950:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a952:	68ba      	ldr	r2, [r7, #8]
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	429a      	cmp	r2, r3
 800a958:	d90e      	bls.n	800a978 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a966:	4b19      	ldr	r3, [pc, #100]	; (800a9cc <prvSwitchTimerLists+0xc0>)
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3304      	adds	r3, #4
 800a96e:	4619      	mov	r1, r3
 800a970:	4610      	mov	r0, r2
 800a972:	f7fd fd02 	bl	800837a <vListInsert>
 800a976:	e015      	b.n	800a9a4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a978:	2300      	movs	r3, #0
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	2300      	movs	r3, #0
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	2100      	movs	r1, #0
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff fd68 	bl	800a458 <xTimerGenericCommand>
 800a988:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d109      	bne.n	800a9a4 <prvSwitchTimerLists+0x98>
 800a990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	603b      	str	r3, [r7, #0]
 800a9a2:	e7fe      	b.n	800a9a2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9a4:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <prvSwitchTimerLists+0xc0>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1b2      	bne.n	800a914 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a9ae:	4b07      	ldr	r3, [pc, #28]	; (800a9cc <prvSwitchTimerLists+0xc0>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a9b4:	4b06      	ldr	r3, [pc, #24]	; (800a9d0 <prvSwitchTimerLists+0xc4>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a04      	ldr	r2, [pc, #16]	; (800a9cc <prvSwitchTimerLists+0xc0>)
 800a9ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a9bc:	4a04      	ldr	r2, [pc, #16]	; (800a9d0 <prvSwitchTimerLists+0xc4>)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	6013      	str	r3, [r2, #0]
}
 800a9c2:	bf00      	nop
 800a9c4:	3718      	adds	r7, #24
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	200008fc 	.word	0x200008fc
 800a9d0:	20000900 	.word	0x20000900

0800a9d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a9da:	f000 f95f 	bl	800ac9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a9de:	4b15      	ldr	r3, [pc, #84]	; (800aa34 <prvCheckForValidListAndQueue+0x60>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d120      	bne.n	800aa28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a9e6:	4814      	ldr	r0, [pc, #80]	; (800aa38 <prvCheckForValidListAndQueue+0x64>)
 800a9e8:	f7fd fc76 	bl	80082d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a9ec:	4813      	ldr	r0, [pc, #76]	; (800aa3c <prvCheckForValidListAndQueue+0x68>)
 800a9ee:	f7fd fc73 	bl	80082d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a9f2:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <prvCheckForValidListAndQueue+0x6c>)
 800a9f4:	4a10      	ldr	r2, [pc, #64]	; (800aa38 <prvCheckForValidListAndQueue+0x64>)
 800a9f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a9f8:	4b12      	ldr	r3, [pc, #72]	; (800aa44 <prvCheckForValidListAndQueue+0x70>)
 800a9fa:	4a10      	ldr	r2, [pc, #64]	; (800aa3c <prvCheckForValidListAndQueue+0x68>)
 800a9fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a9fe:	2300      	movs	r3, #0
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	4b11      	ldr	r3, [pc, #68]	; (800aa48 <prvCheckForValidListAndQueue+0x74>)
 800aa04:	4a11      	ldr	r2, [pc, #68]	; (800aa4c <prvCheckForValidListAndQueue+0x78>)
 800aa06:	2110      	movs	r1, #16
 800aa08:	200a      	movs	r0, #10
 800aa0a:	f7fd fd81 	bl	8008510 <xQueueGenericCreateStatic>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	4b08      	ldr	r3, [pc, #32]	; (800aa34 <prvCheckForValidListAndQueue+0x60>)
 800aa12:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa14:	4b07      	ldr	r3, [pc, #28]	; (800aa34 <prvCheckForValidListAndQueue+0x60>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa1c:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <prvCheckForValidListAndQueue+0x60>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	490b      	ldr	r1, [pc, #44]	; (800aa50 <prvCheckForValidListAndQueue+0x7c>)
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fc0a 	bl	800923c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa28:	f000 f966 	bl	800acf8 <vPortExitCritical>
}
 800aa2c:	bf00      	nop
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20000904 	.word	0x20000904
 800aa38:	200008d4 	.word	0x200008d4
 800aa3c:	200008e8 	.word	0x200008e8
 800aa40:	200008fc 	.word	0x200008fc
 800aa44:	20000900 	.word	0x20000900
 800aa48:	200009b0 	.word	0x200009b0
 800aa4c:	20000910 	.word	0x20000910
 800aa50:	0800b3b0 	.word	0x0800b3b0

0800aa54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	3b04      	subs	r3, #4
 800aa64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aa6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3b04      	subs	r3, #4
 800aa72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	f023 0201 	bic.w	r2, r3, #1
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	3b04      	subs	r3, #4
 800aa82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aa84:	4a0c      	ldr	r2, [pc, #48]	; (800aab8 <pxPortInitialiseStack+0x64>)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3b14      	subs	r3, #20
 800aa8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3b04      	subs	r3, #4
 800aa9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f06f 0202 	mvn.w	r2, #2
 800aaa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3b20      	subs	r3, #32
 800aaa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	0800aabd 	.word	0x0800aabd

0800aabc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aac6:	4b11      	ldr	r3, [pc, #68]	; (800ab0c <prvTaskExitError+0x50>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aace:	d009      	beq.n	800aae4 <prvTaskExitError+0x28>
 800aad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	e7fe      	b.n	800aae2 <prvTaskExitError+0x26>
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aaf6:	bf00      	nop
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0fc      	beq.n	800aaf8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aafe:	bf00      	nop
 800ab00:	3714      	adds	r7, #20
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	20000010 	.word	0x20000010

0800ab10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab10:	4b07      	ldr	r3, [pc, #28]	; (800ab30 <pxCurrentTCBConst2>)
 800ab12:	6819      	ldr	r1, [r3, #0]
 800ab14:	6808      	ldr	r0, [r1, #0]
 800ab16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1a:	f380 8809 	msr	PSP, r0
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f04f 0000 	mov.w	r0, #0
 800ab26:	f380 8811 	msr	BASEPRI, r0
 800ab2a:	4770      	bx	lr
 800ab2c:	f3af 8000 	nop.w

0800ab30 <pxCurrentTCBConst2>:
 800ab30:	200007a8 	.word	0x200007a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ab34:	bf00      	nop
 800ab36:	bf00      	nop

0800ab38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ab38:	4808      	ldr	r0, [pc, #32]	; (800ab5c <prvPortStartFirstTask+0x24>)
 800ab3a:	6800      	ldr	r0, [r0, #0]
 800ab3c:	6800      	ldr	r0, [r0, #0]
 800ab3e:	f380 8808 	msr	MSP, r0
 800ab42:	f04f 0000 	mov.w	r0, #0
 800ab46:	f380 8814 	msr	CONTROL, r0
 800ab4a:	b662      	cpsie	i
 800ab4c:	b661      	cpsie	f
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	df00      	svc	0
 800ab58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ab5a:	bf00      	nop
 800ab5c:	e000ed08 	.word	0xe000ed08

0800ab60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ab66:	4b44      	ldr	r3, [pc, #272]	; (800ac78 <xPortStartScheduler+0x118>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a44      	ldr	r2, [pc, #272]	; (800ac7c <xPortStartScheduler+0x11c>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d109      	bne.n	800ab84 <xPortStartScheduler+0x24>
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	613b      	str	r3, [r7, #16]
 800ab82:	e7fe      	b.n	800ab82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ab84:	4b3c      	ldr	r3, [pc, #240]	; (800ac78 <xPortStartScheduler+0x118>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a3d      	ldr	r2, [pc, #244]	; (800ac80 <xPortStartScheduler+0x120>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d109      	bne.n	800aba2 <xPortStartScheduler+0x42>
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	60fb      	str	r3, [r7, #12]
 800aba0:	e7fe      	b.n	800aba0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aba2:	4b38      	ldr	r3, [pc, #224]	; (800ac84 <xPortStartScheduler+0x124>)
 800aba4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	22ff      	movs	r2, #255	; 0xff
 800abb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800abbc:	78fb      	ldrb	r3, [r7, #3]
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800abc4:	b2da      	uxtb	r2, r3
 800abc6:	4b30      	ldr	r3, [pc, #192]	; (800ac88 <xPortStartScheduler+0x128>)
 800abc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800abca:	4b30      	ldr	r3, [pc, #192]	; (800ac8c <xPortStartScheduler+0x12c>)
 800abcc:	2207      	movs	r2, #7
 800abce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abd0:	e009      	b.n	800abe6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800abd2:	4b2e      	ldr	r3, [pc, #184]	; (800ac8c <xPortStartScheduler+0x12c>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	4a2c      	ldr	r2, [pc, #176]	; (800ac8c <xPortStartScheduler+0x12c>)
 800abda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	005b      	lsls	r3, r3, #1
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800abe6:	78fb      	ldrb	r3, [r7, #3]
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abee:	2b80      	cmp	r3, #128	; 0x80
 800abf0:	d0ef      	beq.n	800abd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800abf2:	4b26      	ldr	r3, [pc, #152]	; (800ac8c <xPortStartScheduler+0x12c>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f1c3 0307 	rsb	r3, r3, #7
 800abfa:	2b04      	cmp	r3, #4
 800abfc:	d009      	beq.n	800ac12 <xPortStartScheduler+0xb2>
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	60bb      	str	r3, [r7, #8]
 800ac10:	e7fe      	b.n	800ac10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac12:	4b1e      	ldr	r3, [pc, #120]	; (800ac8c <xPortStartScheduler+0x12c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	021b      	lsls	r3, r3, #8
 800ac18:	4a1c      	ldr	r2, [pc, #112]	; (800ac8c <xPortStartScheduler+0x12c>)
 800ac1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac1c:	4b1b      	ldr	r3, [pc, #108]	; (800ac8c <xPortStartScheduler+0x12c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac24:	4a19      	ldr	r2, [pc, #100]	; (800ac8c <xPortStartScheduler+0x12c>)
 800ac26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	b2da      	uxtb	r2, r3
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ac30:	4b17      	ldr	r3, [pc, #92]	; (800ac90 <xPortStartScheduler+0x130>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a16      	ldr	r2, [pc, #88]	; (800ac90 <xPortStartScheduler+0x130>)
 800ac36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ac3c:	4b14      	ldr	r3, [pc, #80]	; (800ac90 <xPortStartScheduler+0x130>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a13      	ldr	r2, [pc, #76]	; (800ac90 <xPortStartScheduler+0x130>)
 800ac42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ac46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac48:	f000 f8d6 	bl	800adf8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac4c:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <xPortStartScheduler+0x134>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ac52:	f000 f8f5 	bl	800ae40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ac56:	4b10      	ldr	r3, [pc, #64]	; (800ac98 <xPortStartScheduler+0x138>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	4a0f      	ldr	r2, [pc, #60]	; (800ac98 <xPortStartScheduler+0x138>)
 800ac5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ac60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ac62:	f7ff ff69 	bl	800ab38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac66:	f7fe ff1d 	bl	8009aa4 <vTaskSwitchContext>
	prvTaskExitError();
 800ac6a:	f7ff ff27 	bl	800aabc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	e000ed00 	.word	0xe000ed00
 800ac7c:	410fc271 	.word	0x410fc271
 800ac80:	410fc270 	.word	0x410fc270
 800ac84:	e000e400 	.word	0xe000e400
 800ac88:	200009f8 	.word	0x200009f8
 800ac8c:	200009fc 	.word	0x200009fc
 800ac90:	e000ed20 	.word	0xe000ed20
 800ac94:	20000010 	.word	0x20000010
 800ac98:	e000ef34 	.word	0xe000ef34

0800ac9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800acb4:	4b0e      	ldr	r3, [pc, #56]	; (800acf0 <vPortEnterCritical+0x54>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3301      	adds	r3, #1
 800acba:	4a0d      	ldr	r2, [pc, #52]	; (800acf0 <vPortEnterCritical+0x54>)
 800acbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800acbe:	4b0c      	ldr	r3, [pc, #48]	; (800acf0 <vPortEnterCritical+0x54>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d10e      	bne.n	800ace4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800acc6:	4b0b      	ldr	r3, [pc, #44]	; (800acf4 <vPortEnterCritical+0x58>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b00      	cmp	r3, #0
 800acce:	d009      	beq.n	800ace4 <vPortEnterCritical+0x48>
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	603b      	str	r3, [r7, #0]
 800ace2:	e7fe      	b.n	800ace2 <vPortEnterCritical+0x46>
	}
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	20000010 	.word	0x20000010
 800acf4:	e000ed04 	.word	0xe000ed04

0800acf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800acfe:	4b11      	ldr	r3, [pc, #68]	; (800ad44 <vPortExitCritical+0x4c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d109      	bne.n	800ad1a <vPortExitCritical+0x22>
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	607b      	str	r3, [r7, #4]
 800ad18:	e7fe      	b.n	800ad18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ad1a:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <vPortExitCritical+0x4c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	3b01      	subs	r3, #1
 800ad20:	4a08      	ldr	r2, [pc, #32]	; (800ad44 <vPortExitCritical+0x4c>)
 800ad22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ad24:	4b07      	ldr	r3, [pc, #28]	; (800ad44 <vPortExitCritical+0x4c>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d104      	bne.n	800ad36 <vPortExitCritical+0x3e>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ad36:	bf00      	nop
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	20000010 	.word	0x20000010
	...

0800ad50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ad50:	f3ef 8009 	mrs	r0, PSP
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	4b15      	ldr	r3, [pc, #84]	; (800adb0 <pxCurrentTCBConst>)
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	f01e 0f10 	tst.w	lr, #16
 800ad60:	bf08      	it	eq
 800ad62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ad66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	6010      	str	r0, [r2, #0]
 800ad6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ad70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ad74:	f380 8811 	msr	BASEPRI, r0
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f7fe fe90 	bl	8009aa4 <vTaskSwitchContext>
 800ad84:	f04f 0000 	mov.w	r0, #0
 800ad88:	f380 8811 	msr	BASEPRI, r0
 800ad8c:	bc09      	pop	{r0, r3}
 800ad8e:	6819      	ldr	r1, [r3, #0]
 800ad90:	6808      	ldr	r0, [r1, #0]
 800ad92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad96:	f01e 0f10 	tst.w	lr, #16
 800ad9a:	bf08      	it	eq
 800ad9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ada0:	f380 8809 	msr	PSP, r0
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	f3af 8000 	nop.w

0800adb0 <pxCurrentTCBConst>:
 800adb0:	200007a8 	.word	0x200007a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop

0800adb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800add0:	f7fe fdb0 	bl	8009934 <xTaskIncrementTick>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800adda:	4b06      	ldr	r3, [pc, #24]	; (800adf4 <SysTick_Handler+0x3c>)
 800addc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	2300      	movs	r3, #0
 800ade4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	e000ed04 	.word	0xe000ed04

0800adf8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800adf8:	b480      	push	{r7}
 800adfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800adfc:	4b0b      	ldr	r3, [pc, #44]	; (800ae2c <vPortSetupTimerInterrupt+0x34>)
 800adfe:	2200      	movs	r2, #0
 800ae00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae02:	4b0b      	ldr	r3, [pc, #44]	; (800ae30 <vPortSetupTimerInterrupt+0x38>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae08:	4b0a      	ldr	r3, [pc, #40]	; (800ae34 <vPortSetupTimerInterrupt+0x3c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4a0a      	ldr	r2, [pc, #40]	; (800ae38 <vPortSetupTimerInterrupt+0x40>)
 800ae0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae12:	099b      	lsrs	r3, r3, #6
 800ae14:	4a09      	ldr	r2, [pc, #36]	; (800ae3c <vPortSetupTimerInterrupt+0x44>)
 800ae16:	3b01      	subs	r3, #1
 800ae18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae1a:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <vPortSetupTimerInterrupt+0x34>)
 800ae1c:	2207      	movs	r2, #7
 800ae1e:	601a      	str	r2, [r3, #0]
}
 800ae20:	bf00      	nop
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	e000e010 	.word	0xe000e010
 800ae30:	e000e018 	.word	0xe000e018
 800ae34:	20000000 	.word	0x20000000
 800ae38:	10624dd3 	.word	0x10624dd3
 800ae3c:	e000e014 	.word	0xe000e014

0800ae40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ae40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ae50 <vPortEnableVFP+0x10>
 800ae44:	6801      	ldr	r1, [r0, #0]
 800ae46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ae4a:	6001      	str	r1, [r0, #0]
 800ae4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ae4e:	bf00      	nop
 800ae50:	e000ed88 	.word	0xe000ed88

0800ae54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ae5a:	f3ef 8305 	mrs	r3, IPSR
 800ae5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2b0f      	cmp	r3, #15
 800ae64:	d913      	bls.n	800ae8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ae66:	4a16      	ldr	r2, [pc, #88]	; (800aec0 <vPortValidateInterruptPriority+0x6c>)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ae70:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <vPortValidateInterruptPriority+0x70>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	7afa      	ldrb	r2, [r7, #11]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d209      	bcs.n	800ae8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800ae7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7e:	f383 8811 	msr	BASEPRI, r3
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	f3bf 8f4f 	dsb	sy
 800ae8a:	607b      	str	r3, [r7, #4]
 800ae8c:	e7fe      	b.n	800ae8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ae8e:	4b0e      	ldr	r3, [pc, #56]	; (800aec8 <vPortValidateInterruptPriority+0x74>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ae96:	4b0d      	ldr	r3, [pc, #52]	; (800aecc <vPortValidateInterruptPriority+0x78>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d909      	bls.n	800aeb2 <vPortValidateInterruptPriority+0x5e>
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	603b      	str	r3, [r7, #0]
 800aeb0:	e7fe      	b.n	800aeb0 <vPortValidateInterruptPriority+0x5c>
	}
 800aeb2:	bf00      	nop
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	e000e3f0 	.word	0xe000e3f0
 800aec4:	200009f8 	.word	0x200009f8
 800aec8:	e000ed0c 	.word	0xe000ed0c
 800aecc:	200009fc 	.word	0x200009fc

0800aed0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b08a      	sub	sp, #40	; 0x28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aed8:	2300      	movs	r3, #0
 800aeda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aedc:	f7fe fc5e 	bl	800979c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aee0:	4b57      	ldr	r3, [pc, #348]	; (800b040 <pvPortMalloc+0x170>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d101      	bne.n	800aeec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aee8:	f000 f90c 	bl	800b104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aeec:	4b55      	ldr	r3, [pc, #340]	; (800b044 <pvPortMalloc+0x174>)
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4013      	ands	r3, r2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f040 808c 	bne.w	800b012 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d01c      	beq.n	800af3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800af00:	2208      	movs	r2, #8
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4413      	add	r3, r2
 800af06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f003 0307 	and.w	r3, r3, #7
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d013      	beq.n	800af3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f023 0307 	bic.w	r3, r3, #7
 800af18:	3308      	adds	r3, #8
 800af1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f003 0307 	and.w	r3, r3, #7
 800af22:	2b00      	cmp	r3, #0
 800af24:	d009      	beq.n	800af3a <pvPortMalloc+0x6a>
 800af26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2a:	f383 8811 	msr	BASEPRI, r3
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	e7fe      	b.n	800af38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d068      	beq.n	800b012 <pvPortMalloc+0x142>
 800af40:	4b41      	ldr	r3, [pc, #260]	; (800b048 <pvPortMalloc+0x178>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	429a      	cmp	r2, r3
 800af48:	d863      	bhi.n	800b012 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800af4a:	4b40      	ldr	r3, [pc, #256]	; (800b04c <pvPortMalloc+0x17c>)
 800af4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800af4e:	4b3f      	ldr	r3, [pc, #252]	; (800b04c <pvPortMalloc+0x17c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af54:	e004      	b.n	800af60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800af56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800af60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	429a      	cmp	r2, r3
 800af68:	d903      	bls.n	800af72 <pvPortMalloc+0xa2>
 800af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f1      	bne.n	800af56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800af72:	4b33      	ldr	r3, [pc, #204]	; (800b040 <pvPortMalloc+0x170>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af78:	429a      	cmp	r2, r3
 800af7a:	d04a      	beq.n	800b012 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2208      	movs	r2, #8
 800af82:	4413      	add	r3, r2
 800af84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800af86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800af8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	1ad2      	subs	r2, r2, r3
 800af96:	2308      	movs	r3, #8
 800af98:	005b      	lsls	r3, r3, #1
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d91e      	bls.n	800afdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800af9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4413      	add	r3, r2
 800afa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	f003 0307 	and.w	r3, r3, #7
 800afac:	2b00      	cmp	r3, #0
 800afae:	d009      	beq.n	800afc4 <pvPortMalloc+0xf4>
 800afb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	613b      	str	r3, [r7, #16]
 800afc2:	e7fe      	b.n	800afc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	1ad2      	subs	r2, r2, r3
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800afd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800afd6:	69b8      	ldr	r0, [r7, #24]
 800afd8:	f000 f8f6 	bl	800b1c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800afdc:	4b1a      	ldr	r3, [pc, #104]	; (800b048 <pvPortMalloc+0x178>)
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	4a18      	ldr	r2, [pc, #96]	; (800b048 <pvPortMalloc+0x178>)
 800afe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800afea:	4b17      	ldr	r3, [pc, #92]	; (800b048 <pvPortMalloc+0x178>)
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	4b18      	ldr	r3, [pc, #96]	; (800b050 <pvPortMalloc+0x180>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d203      	bcs.n	800affe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aff6:	4b14      	ldr	r3, [pc, #80]	; (800b048 <pvPortMalloc+0x178>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a15      	ldr	r2, [pc, #84]	; (800b050 <pvPortMalloc+0x180>)
 800affc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	685a      	ldr	r2, [r3, #4]
 800b002:	4b10      	ldr	r3, [pc, #64]	; (800b044 <pvPortMalloc+0x174>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	431a      	orrs	r2, r3
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b012:	f7fe fbd1 	bl	80097b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	f003 0307 	and.w	r3, r3, #7
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d009      	beq.n	800b034 <pvPortMalloc+0x164>
 800b020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	60fb      	str	r3, [r7, #12]
 800b032:	e7fe      	b.n	800b032 <pvPortMalloc+0x162>
	return pvReturn;
 800b034:	69fb      	ldr	r3, [r7, #28]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3728      	adds	r7, #40	; 0x28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	20003118 	.word	0x20003118
 800b044:	20003124 	.word	0x20003124
 800b048:	2000311c 	.word	0x2000311c
 800b04c:	20003110 	.word	0x20003110
 800b050:	20003120 	.word	0x20003120

0800b054 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d046      	beq.n	800b0f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b066:	2308      	movs	r3, #8
 800b068:	425b      	negs	r3, r3
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	4413      	add	r3, r2
 800b06e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	685a      	ldr	r2, [r3, #4]
 800b078:	4b20      	ldr	r3, [pc, #128]	; (800b0fc <vPortFree+0xa8>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4013      	ands	r3, r2
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d109      	bne.n	800b096 <vPortFree+0x42>
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e7fe      	b.n	800b094 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <vPortFree+0x5e>
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	60bb      	str	r3, [r7, #8]
 800b0b0:	e7fe      	b.n	800b0b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	4b11      	ldr	r3, [pc, #68]	; (800b0fc <vPortFree+0xa8>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d019      	beq.n	800b0f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d115      	bne.n	800b0f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <vPortFree+0xa8>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	43db      	mvns	r3, r3
 800b0d2:	401a      	ands	r2, r3
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b0d8:	f7fe fb60 	bl	800979c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	685a      	ldr	r2, [r3, #4]
 800b0e0:	4b07      	ldr	r3, [pc, #28]	; (800b100 <vPortFree+0xac>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	4a06      	ldr	r2, [pc, #24]	; (800b100 <vPortFree+0xac>)
 800b0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b0ea:	6938      	ldr	r0, [r7, #16]
 800b0ec:	f000 f86c 	bl	800b1c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b0f0:	f7fe fb62 	bl	80097b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b0f4:	bf00      	nop
 800b0f6:	3718      	adds	r7, #24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	20003124 	.word	0x20003124
 800b100:	2000311c 	.word	0x2000311c

0800b104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b10a:	f242 7310 	movw	r3, #10000	; 0x2710
 800b10e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b110:	4b27      	ldr	r3, [pc, #156]	; (800b1b0 <prvHeapInit+0xac>)
 800b112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00c      	beq.n	800b138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	3307      	adds	r3, #7
 800b122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f023 0307 	bic.w	r3, r3, #7
 800b12a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	4a1f      	ldr	r2, [pc, #124]	; (800b1b0 <prvHeapInit+0xac>)
 800b134:	4413      	add	r3, r2
 800b136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b13c:	4a1d      	ldr	r2, [pc, #116]	; (800b1b4 <prvHeapInit+0xb0>)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b142:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <prvHeapInit+0xb0>)
 800b144:	2200      	movs	r2, #0
 800b146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	4413      	add	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b150:	2208      	movs	r2, #8
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	1a9b      	subs	r3, r3, r2
 800b156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f023 0307 	bic.w	r3, r3, #7
 800b15e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	4a15      	ldr	r2, [pc, #84]	; (800b1b8 <prvHeapInit+0xb4>)
 800b164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b166:	4b14      	ldr	r3, [pc, #80]	; (800b1b8 <prvHeapInit+0xb4>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2200      	movs	r2, #0
 800b16c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b16e:	4b12      	ldr	r3, [pc, #72]	; (800b1b8 <prvHeapInit+0xb4>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2200      	movs	r2, #0
 800b174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	1ad2      	subs	r2, r2, r3
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b184:	4b0c      	ldr	r3, [pc, #48]	; (800b1b8 <prvHeapInit+0xb4>)
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	4a0a      	ldr	r2, [pc, #40]	; (800b1bc <prvHeapInit+0xb8>)
 800b192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	4a09      	ldr	r2, [pc, #36]	; (800b1c0 <prvHeapInit+0xbc>)
 800b19a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b19c:	4b09      	ldr	r3, [pc, #36]	; (800b1c4 <prvHeapInit+0xc0>)
 800b19e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b1a2:	601a      	str	r2, [r3, #0]
}
 800b1a4:	bf00      	nop
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	20000a00 	.word	0x20000a00
 800b1b4:	20003110 	.word	0x20003110
 800b1b8:	20003118 	.word	0x20003118
 800b1bc:	20003120 	.word	0x20003120
 800b1c0:	2000311c 	.word	0x2000311c
 800b1c4:	20003124 	.word	0x20003124

0800b1c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b1d0:	4b28      	ldr	r3, [pc, #160]	; (800b274 <prvInsertBlockIntoFreeList+0xac>)
 800b1d2:	60fb      	str	r3, [r7, #12]
 800b1d4:	e002      	b.n	800b1dc <prvInsertBlockIntoFreeList+0x14>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	60fb      	str	r3, [r7, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d8f7      	bhi.n	800b1d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d108      	bne.n	800b20a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	441a      	add	r2, r3
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	441a      	add	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d118      	bne.n	800b250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	4b15      	ldr	r3, [pc, #84]	; (800b278 <prvInsertBlockIntoFreeList+0xb0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	429a      	cmp	r2, r3
 800b228:	d00d      	beq.n	800b246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	441a      	add	r2, r3
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	601a      	str	r2, [r3, #0]
 800b244:	e008      	b.n	800b258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b246:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <prvInsertBlockIntoFreeList+0xb0>)
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	e003      	b.n	800b258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d002      	beq.n	800b266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b266:	bf00      	nop
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	20003110 	.word	0x20003110
 800b278:	20003118 	.word	0x20003118

0800b27c <__libc_init_array>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	4e0d      	ldr	r6, [pc, #52]	; (800b2b4 <__libc_init_array+0x38>)
 800b280:	4c0d      	ldr	r4, [pc, #52]	; (800b2b8 <__libc_init_array+0x3c>)
 800b282:	1ba4      	subs	r4, r4, r6
 800b284:	10a4      	asrs	r4, r4, #2
 800b286:	2500      	movs	r5, #0
 800b288:	42a5      	cmp	r5, r4
 800b28a:	d109      	bne.n	800b2a0 <__libc_init_array+0x24>
 800b28c:	4e0b      	ldr	r6, [pc, #44]	; (800b2bc <__libc_init_array+0x40>)
 800b28e:	4c0c      	ldr	r4, [pc, #48]	; (800b2c0 <__libc_init_array+0x44>)
 800b290:	f000 f82c 	bl	800b2ec <_init>
 800b294:	1ba4      	subs	r4, r4, r6
 800b296:	10a4      	asrs	r4, r4, #2
 800b298:	2500      	movs	r5, #0
 800b29a:	42a5      	cmp	r5, r4
 800b29c:	d105      	bne.n	800b2aa <__libc_init_array+0x2e>
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
 800b2a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2a4:	4798      	blx	r3
 800b2a6:	3501      	adds	r5, #1
 800b2a8:	e7ee      	b.n	800b288 <__libc_init_array+0xc>
 800b2aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b2ae:	4798      	blx	r3
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	e7f2      	b.n	800b29a <__libc_init_array+0x1e>
 800b2b4:	0800b494 	.word	0x0800b494
 800b2b8:	0800b494 	.word	0x0800b494
 800b2bc:	0800b494 	.word	0x0800b494
 800b2c0:	0800b498 	.word	0x0800b498

0800b2c4 <memcpy>:
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	1e43      	subs	r3, r0, #1
 800b2c8:	440a      	add	r2, r1
 800b2ca:	4291      	cmp	r1, r2
 800b2cc:	d100      	bne.n	800b2d0 <memcpy+0xc>
 800b2ce:	bd10      	pop	{r4, pc}
 800b2d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2d8:	e7f7      	b.n	800b2ca <memcpy+0x6>

0800b2da <memset>:
 800b2da:	4402      	add	r2, r0
 800b2dc:	4603      	mov	r3, r0
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d100      	bne.n	800b2e4 <memset+0xa>
 800b2e2:	4770      	bx	lr
 800b2e4:	f803 1b01 	strb.w	r1, [r3], #1
 800b2e8:	e7f9      	b.n	800b2de <memset+0x4>
	...

0800b2ec <_init>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr

0800b2f8 <_fini>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	bf00      	nop
 800b2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2fe:	bc08      	pop	{r3}
 800b300:	469e      	mov	lr, r3
 800b302:	4770      	bx	lr
