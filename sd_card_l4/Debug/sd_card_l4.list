
sd_card_l4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b520  0800b520  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800b520  0800b520  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b520  0800b520  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b520  0800b520  0001b520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b524  0800b524  0001b524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800b528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052dc  20000014  0800b53c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052f0  0800b53c  000252f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a61  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048ae  00000000  00000000  00042aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ac8  00000000  00000000  00047358  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001880  00000000  00000000  00048e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002be20  00000000  00000000  0004a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018609  00000000  00000000  000764c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe6c8  00000000  00000000  0008eac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d191  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c1c  00000000  00000000  0018d20c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b36c 	.word	0x0800b36c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800b36c 	.word	0x0800b36c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <BSP_SD_Init>:
/**
 * @brief  Initializes the SD card device.
 * @retval SD status
 */
  uint8_t BSP_SD_Init(void)
{
 80001e0:	b508      	push	{r3, lr}
	uint8_t sd_state = MSD_OK;
	/* Check if the SD card is plugged in the slot */
	if (BSP_SD_IsDetected() != SD_PRESENT)
 80001e2:	f005 f905 	bl	80053f0 <BSP_SD_IsDetected>
 80001e6:	2801      	cmp	r0, #1
 80001e8:	d001      	beq.n	80001ee <BSP_SD_Init+0xe>
	{
		return MSD_ERROR_SD_NOT_PRESENT;
 80001ea:	2002      	movs	r0, #2
			sd_state = MSD_ERROR;
		}
	}

	return sd_state;
}
 80001ec:	bd08      	pop	{r3, pc}
	sd_state = HAL_SD_Init(&hsd1);
 80001ee:	4807      	ldr	r0, [pc, #28]	; (800020c <BSP_SD_Init+0x2c>)
 80001f0:	f002 fe16 	bl	8002e20 <HAL_SD_Init>
	if (sd_state == MSD_OK)
 80001f4:	2800      	cmp	r0, #0
 80001f6:	d1f9      	bne.n	80001ec <BSP_SD_Init+0xc>
		if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80001f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <BSP_SD_Init+0x2c>)
 80001fe:	f003 fbb1 	bl	8003964 <HAL_SD_ConfigWideBusOperation>
		return MSD_ERROR_SD_NOT_PRESENT;
 8000202:	3000      	adds	r0, #0
 8000204:	bf18      	it	ne
 8000206:	2001      	movne	r0, #1
}
 8000208:	bd08      	pop	{r3, pc}
 800020a:	bf00      	nop
 800020c:	20003130 	.word	0x20003130

08000210 <BSP_SD_ReadBlocks_DMA>:
 * @param  ReadAddr: Address from where data is to be read
 * @param  NumOfBlocks: Number of SD blocks to read
 * @retval SD status
 */
  uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8000210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t sd_state = MSD_OK;

	/* Invalidate the dma tx handle*/
	hsd1.hdmatx = NULL;
 8000212:	4c0b      	ldr	r4, [pc, #44]	; (8000240 <BSP_SD_ReadBlocks_DMA+0x30>)
{
 8000214:	4605      	mov	r5, r0
	hsd1.hdmatx = NULL;
 8000216:	2300      	movs	r3, #0

	/* Prepare the dma channel for a read operation */
	sd_state = SD_DMAConfigRx(&hsd1);
 8000218:	4620      	mov	r0, r4
{
 800021a:	460e      	mov	r6, r1
 800021c:	4617      	mov	r7, r2
	hsd1.hdmatx = NULL;
 800021e:	63e3      	str	r3, [r4, #60]	; 0x3c
	sd_state = SD_DMAConfigRx(&hsd1);
 8000220:	f000 f848 	bl	80002b4 <SD_DMAConfigRx>

	if(sd_state == HAL_OK)
 8000224:	b108      	cbz	r0, 800022a <BSP_SD_ReadBlocks_DMA+0x1a>
	{
		return MSD_OK;
	}
	else
	{
		return MSD_ERROR;
 8000226:	2001      	movs	r0, #1
	}

}
 8000228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sd_state = HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 800022a:	463b      	mov	r3, r7
 800022c:	4632      	mov	r2, r6
 800022e:	4629      	mov	r1, r5
 8000230:	4620      	mov	r0, r4
 8000232:	f002 feb3 	bl	8002f9c <HAL_SD_ReadBlocks_DMA>
		return MSD_OK;
 8000236:	3000      	adds	r0, #0
 8000238:	bf18      	it	ne
 800023a:	2001      	movne	r0, #1
}
 800023c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800023e:	bf00      	nop
 8000240:	20003130 	.word	0x20003130

08000244 <BSP_SD_WriteBlocks_DMA>:
 * @param  WriteAddr: Address from where data is to be written
 * @param  NumOfBlocks: Number of SD blocks to write
 * @retval SD status
 */
  uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8000244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t sd_state = MSD_OK;

	/* Invalidate the dma rx handle*/
	hsd1.hdmarx = NULL;
 8000246:	4c0b      	ldr	r4, [pc, #44]	; (8000274 <BSP_SD_WriteBlocks_DMA+0x30>)
{
 8000248:	4605      	mov	r5, r0
	hsd1.hdmarx = NULL;
 800024a:	2300      	movs	r3, #0

	/* Prepare the dma channel for a read operation */
	sd_state = SD_DMAConfigTx(&hsd1);
 800024c:	4620      	mov	r0, r4
{
 800024e:	460e      	mov	r6, r1
 8000250:	4617      	mov	r7, r2
	hsd1.hdmarx = NULL;
 8000252:	6423      	str	r3, [r4, #64]	; 0x40
	sd_state = SD_DMAConfigTx(&hsd1);
 8000254:	f000 f85c 	bl	8000310 <SD_DMAConfigTx>

	if(sd_state == HAL_OK)
 8000258:	b108      	cbz	r0, 800025e <BSP_SD_WriteBlocks_DMA+0x1a>
	{
		return MSD_OK;
	}
	else
	{
		return MSD_ERROR;
 800025a:	2001      	movs	r0, #1
	}
}
 800025c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sd_state = HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 800025e:	463b      	mov	r3, r7
 8000260:	4632      	mov	r2, r6
 8000262:	4629      	mov	r1, r5
 8000264:	4620      	mov	r0, r4
 8000266:	f002 ff61 	bl	800312c <HAL_SD_WriteBlocks_DMA>
		return MSD_OK;
 800026a:	3000      	adds	r0, #0
 800026c:	bf18      	it	ne
 800026e:	2001      	movne	r0, #1
}
 8000270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000272:	bf00      	nop
 8000274:	20003130 	.word	0x20003130

08000278 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hsd1.hdmatx);
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 800027a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800027c:	f000 bfff 	b.w	800127e <HAL_DMA_IRQHandler>
 8000280:	20003130 	.word	0x20003130

08000284 <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hsd1.hdmarx);
 8000284:	4b01      	ldr	r3, [pc, #4]	; (800028c <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 8000286:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000288:	f000 bff9 	b.w	800127e <HAL_DMA_IRQHandler>
 800028c:	20003130 	.word	0x20003130

08000290 <BSP_SD_GetCardState>:
 *          This value can be one of the following values:
 *            @arg  SD_TRANSFER_OK: No data transfer is acting
 *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 */
  uint8_t BSP_SD_GetCardState(void)
{
 8000290:	b508      	push	{r3, lr}
	return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <BSP_SD_GetCardState+0x10>)
 8000294:	f003 fbfc 	bl	8003a90 <HAL_SD_GetCardState>
}
 8000298:	3804      	subs	r0, #4
 800029a:	bf18      	it	ne
 800029c:	2001      	movne	r0, #1
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	20003130 	.word	0x20003130

080002a4 <BSP_SD_GetCardInfo>:
 * @retval None
 */
  void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
	/* Get SD card Information */
	HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80002a4:	4601      	mov	r1, r0
 80002a6:	4801      	ldr	r0, [pc, #4]	; (80002ac <BSP_SD_GetCardInfo+0x8>)
 80002a8:	f003 bb30 	b.w	800390c <HAL_SD_GetCardInfo>
 80002ac:	20003130 	.word	0x20003130

080002b0 <BSP_SD_AbortCallback>:
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
  void BSP_SD_AbortCallback(void)
{

}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop

080002b4 <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 80002b4:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80002b6:	4c14      	ldr	r4, [pc, #80]	; (8000308 <SD_DMAConfigRx+0x54>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80002b8:	6404      	str	r4, [r0, #64]	; 0x40
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80002ba:	2307      	movs	r3, #7
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002bc:	f44f 7500 	mov.w	r5, #512	; 0x200
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80002c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80002c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80002c8:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80002ca:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002cc:	6165      	str	r5, [r4, #20]
  hdma_rx.Instance = DMA2_Channel4;
 80002ce:	4b0f      	ldr	r3, [pc, #60]	; (800030c <SD_DMAConfigRx+0x58>)
 80002d0:	6023      	str	r3, [r4, #0]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80002d2:	2500      	movs	r5, #0
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80002d4:	2680      	movs	r6, #128	; 0x80

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 80002d6:	4620      	mov	r0, r4
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80002d8:	61a1      	str	r1, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80002da:	6222      	str	r2, [r4, #32]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80002dc:	6126      	str	r6, [r4, #16]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80002de:	e9c4 5502 	strd	r5, r5, [r4, #8]
  HAL_DMA_Abort(&hdma_rx);
 80002e2:	f000 ff4d 	bl	8001180 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 80002e6:	4620      	mov	r0, r4
 80002e8:	f000 fe58 	bl	8000f9c <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 80002ec:	4620      	mov	r0, r4
 80002ee:	f000 fd9d 	bl	8000e2c <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 80002f2:	462a      	mov	r2, r5
  status = HAL_DMA_Init(&hdma_rx);
 80002f4:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 80002f6:	2106      	movs	r1, #6
 80002f8:	203b      	movs	r0, #59	; 0x3b
 80002fa:	f000 fd6d 	bl	8000dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80002fe:	203b      	movs	r0, #59	; 0x3b
 8000300:	f000 fd86 	bl	8000e10 <HAL_NVIC_EnableIRQ>

  return (status);
}
 8000304:	4620      	mov	r0, r4
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	20000030 	.word	0x20000030
 800030c:	40020444 	.word	0x40020444

08000310 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 8000310:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8000312:	4c15      	ldr	r4, [pc, #84]	; (8000368 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8000314:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8000316:	2207      	movs	r2, #7
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000318:	2310      	movs	r3, #16
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800031a:	f44f 7500 	mov.w	r5, #512	; 0x200
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800031e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 8000322:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 8000324:	6062      	str	r2, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000326:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8000328:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  hdma_tx.Instance = DMA2_Channel4;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <SD_DMAConfigTx+0x5c>)
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800032e:	6165      	str	r5, [r4, #20]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000330:	2680      	movs	r6, #128	; 0x80
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000332:	2500      	movs	r5, #0

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 8000334:	4620      	mov	r0, r4
  hdma_tx.Instance = DMA2_Channel4;
 8000336:	6023      	str	r3, [r4, #0]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000338:	61a1      	str	r1, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800033a:	6222      	str	r2, [r4, #32]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800033c:	6126      	str	r6, [r4, #16]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800033e:	60e5      	str	r5, [r4, #12]
  HAL_DMA_Abort(&hdma_tx);
 8000340:	f000 ff1e 	bl	8001180 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 8000344:	4620      	mov	r0, r4
 8000346:	f000 fe29 	bl	8000f9c <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 800034a:	4620      	mov	r0, r4
 800034c:	f000 fd6e 	bl	8000e2c <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 8000350:	462a      	mov	r2, r5
  status = HAL_DMA_Init(&hdma_tx);
 8000352:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 8000354:	2106      	movs	r1, #6
 8000356:	203b      	movs	r0, #59	; 0x3b
 8000358:	f000 fd3e 	bl	8000dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800035c:	203b      	movs	r0, #59	; 0x3b
 800035e:	f000 fd57 	bl	8000e10 <HAL_NVIC_EnableIRQ>

  return (status);
}
 8000362:	4620      	mov	r0, r4
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	bf00      	nop
 8000368:	20000078 	.word	0x20000078
 800036c:	40020444 	.word	0x40020444

08000370 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000376:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_DMA_Init+0x38>)
 8000378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800037a:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <MX_DMA_Init+0x38>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	6493      	str	r3, [r2, #72]	; 0x48
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_DMA_Init+0x38>)
 8000384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000386:	f003 0302 	and.w	r3, r3, #2
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 5, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2105      	movs	r1, #5
 8000392:	203b      	movs	r0, #59	; 0x3b
 8000394:	f000 fd20 	bl	8000dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000398:	203b      	movs	r0, #59	; 0x3b
 800039a:	f000 fd39 	bl	8000e10 <HAL_NVIC_EnableIRQ>

}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	40021000 	.word	0x40021000

080003ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80003bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	4a06      	ldr	r2, [pc, #24]	; (80003dc <vApplicationGetIdleTaskMemory+0x30>)
 80003c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2280      	movs	r2, #128	; 0x80
 80003c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	200000c0 	.word	0x200000c0
 80003dc:	20000118 	.word	0x20000118

080003e0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	4a07      	ldr	r2, [pc, #28]	; (800040c <vApplicationGetTimerTaskMemory+0x2c>)
 80003f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	4a06      	ldr	r2, [pc, #24]	; (8000410 <vApplicationGetTimerTaskMemory+0x30>)
 80003f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003fe:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	20000318 	.word	0x20000318
 8000410:	20000370 	.word	0x20000370

08000414 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000414:	b5b0      	push	{r4, r5, r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <MX_FREERTOS_Init+0x30>)
 800041c:	1d3c      	adds	r4, r7, #4
 800041e:	461d      	mov	r5, r3
 8000420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000424:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f007 fd87 	bl	8007f44 <osThreadCreate>
 8000436:	4602      	mov	r2, r0
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <MX_FREERTOS_Init+0x34>)
 800043a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bdb0      	pop	{r4, r5, r7, pc}
 8000444:	0800b390 	.word	0x0800b390
 8000448:	20003128 	.word	0x20003128

0800044c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800044c:	b5b0      	push	{r4, r5, r7, lr}
 800044e:	b08e      	sub	sp, #56	; 0x38
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint8_t filename1[12];
  uint8_t filename2[12];
	uint8_t SD_Data[18];
  uint8_t sd_data2[4];
	sprintf(filename1, "TEST.csv");
 8000454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000458:	4a48      	ldr	r2, [pc, #288]	; (800057c <StartDefaultTask+0x130>)
 800045a:	ca07      	ldmia	r2, {r0, r1, r2}
 800045c:	c303      	stmia	r3!, {r0, r1}
 800045e:	701a      	strb	r2, [r3, #0]
  sprintf(filename2, "test2.csv");
 8000460:	f107 0320 	add.w	r3, r7, #32
 8000464:	4a46      	ldr	r2, [pc, #280]	; (8000580 <StartDefaultTask+0x134>)
 8000466:	ca07      	ldmia	r2, {r0, r1, r2}
 8000468:	c303      	stmia	r3!, {r0, r1}
 800046a:	801a      	strh	r2, [r3, #0]

	sprintf(SD_Data, "x,y,z,arsnr,mse\n");
 800046c:	f107 030c 	add.w	r3, r7, #12
 8000470:	4a44      	ldr	r2, [pc, #272]	; (8000584 <StartDefaultTask+0x138>)
 8000472:	461c      	mov	r4, r3
 8000474:	4615      	mov	r5, r2
 8000476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800047a:	682b      	ldr	r3, [r5, #0]
 800047c:	7023      	strb	r3, [r4, #0]
  sprintf(sd_data2, "x,\n");
 800047e:	4b42      	ldr	r3, [pc, #264]	; (8000588 <StartDefaultTask+0x13c>)
 8000480:	60bb      	str	r3, [r7, #8]
	if (f_mount(&SDFatFS, SDPath, 0) == FR_OK)
 8000482:	2200      	movs	r2, #0
 8000484:	4941      	ldr	r1, [pc, #260]	; (800058c <StartDefaultTask+0x140>)
 8000486:	4842      	ldr	r0, [pc, #264]	; (8000590 <StartDefaultTask+0x144>)
 8000488:	f006 ffb6 	bl	80073f8 <f_mount>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d16a      	bne.n	8000568 <StartDefaultTask+0x11c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8000492:	2201      	movs	r2, #1
 8000494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000498:	483e      	ldr	r0, [pc, #248]	; (8000594 <StartDefaultTask+0x148>)
 800049a:	f001 f98f 	bl	80017bc <HAL_GPIO_WritePin>
		if ((f_open(&SDFile, (const TCHAR*)filename1 , FA_CREATE_ALWAYS | FA_WRITE)) == FR_OK)
 800049e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80004a2:	220a      	movs	r2, #10
 80004a4:	4619      	mov	r1, r3
 80004a6:	483c      	ldr	r0, [pc, #240]	; (8000598 <StartDefaultTask+0x14c>)
 80004a8:	f007 f80a 	bl	80074c0 <f_open>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d127      	bne.n	8000502 <StartDefaultTask+0xb6>
    {
          
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004b8:	4836      	ldr	r0, [pc, #216]	; (8000594 <StartDefaultTask+0x148>)
 80004ba:	f001 f97f 	bl	80017bc <HAL_GPIO_WritePin>
					if (f_write(&SDFile, SD_Data , strlen(SD_Data) , (void *)&byteswritten) == FR_OK)
 80004be:	f107 030c 	add.w	r3, r7, #12
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff fe84 	bl	80001d0 <strlen>
 80004c8:	4602      	mov	r2, r0
 80004ca:	f107 010c 	add.w	r1, r7, #12
 80004ce:	4b33      	ldr	r3, [pc, #204]	; (800059c <StartDefaultTask+0x150>)
 80004d0:	4831      	ldr	r0, [pc, #196]	; (8000598 <StartDefaultTask+0x14c>)
 80004d2:	f007 f9c8 	bl	8007866 <f_write>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d112      	bne.n	8000502 <StartDefaultTask+0xb6>
					{
						if (byteswritten == strlen(SD_Data))
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff fe75 	bl	80001d0 <strlen>
 80004e6:	4602      	mov	r2, r0
 80004e8:	4b2c      	ldr	r3, [pc, #176]	; (800059c <StartDefaultTask+0x150>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d108      	bne.n	8000502 <StartDefaultTask+0xb6>
						{
							HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f6:	4827      	ldr	r0, [pc, #156]	; (8000594 <StartDefaultTask+0x148>)
 80004f8:	f001 f960 	bl	80017bc <HAL_GPIO_WritePin>
							f_close(&SDFile);
 80004fc:	4826      	ldr	r0, [pc, #152]	; (8000598 <StartDefaultTask+0x14c>)
 80004fe:	f007 fbfe 	bl	8007cfe <f_close>

					}

				}

    if ((f_open(&SDFile, (const TCHAR*)filename2, FA_CREATE_ALWAYS | FA_WRITE)) == FR_OK)
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	220a      	movs	r2, #10
 8000508:	4619      	mov	r1, r3
 800050a:	4823      	ldr	r0, [pc, #140]	; (8000598 <StartDefaultTask+0x14c>)
 800050c:	f006 ffd8 	bl	80074c0 <f_open>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d12e      	bne.n	8000574 <StartDefaultTask+0x128>
    {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 8000516:	2201      	movs	r2, #1
 8000518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051c:	481d      	ldr	r0, [pc, #116]	; (8000594 <StartDefaultTask+0x148>)
 800051e:	f001 f94d 	bl	80017bc <HAL_GPIO_WritePin>
          if (f_write(&SDFile, sd_data2 , strlen(sd_data2) , (void *)&byteswritten) == FR_OK)
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe52 	bl	80001d0 <strlen>
 800052c:	4602      	mov	r2, r0
 800052e:	f107 0108 	add.w	r1, r7, #8
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <StartDefaultTask+0x150>)
 8000534:	4818      	ldr	r0, [pc, #96]	; (8000598 <StartDefaultTask+0x14c>)
 8000536:	f007 f996 	bl	8007866 <f_write>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d119      	bne.n	8000574 <StartDefaultTask+0x128>
          {
            if (byteswritten == strlen(sd_data2))
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff fe43 	bl	80001d0 <strlen>
 800054a:	4602      	mov	r2, r0
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <StartDefaultTask+0x150>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d10f      	bne.n	8000574 <StartDefaultTask+0x128>
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800055a:	480e      	ldr	r0, [pc, #56]	; (8000594 <StartDefaultTask+0x148>)
 800055c:	f001 f92e 	bl	80017bc <HAL_GPIO_WritePin>
              f_close(&SDFile);
 8000560:	480d      	ldr	r0, [pc, #52]	; (8000598 <StartDefaultTask+0x14c>)
 8000562:	f007 fbcc 	bl	8007cfe <f_close>
 8000566:	e005      	b.n	8000574 <StartDefaultTask+0x128>
          }

        }

	}
	else HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800056e:	4809      	ldr	r0, [pc, #36]	; (8000594 <StartDefaultTask+0x148>)
 8000570:	f001 f924 	bl	80017bc <HAL_GPIO_WritePin>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f007 fd31 	bl	8007fdc <osDelay>
 800057a:	e7fb      	b.n	8000574 <StartDefaultTask+0x128>
 800057c:	0800b3ac 	.word	0x0800b3ac
 8000580:	0800b3b8 	.word	0x0800b3b8
 8000584:	0800b3c4 	.word	0x0800b3c4
 8000588:	000a2c78 	.word	0x000a2c78
 800058c:	20003244 	.word	0x20003244
 8000590:	20004278 	.word	0x20004278
 8000594:	48000c00 	.word	0x48000c00
 8000598:	20003248 	.word	0x20003248
 800059c:	2000312c 	.word	0x2000312c

080005a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b6:	4b25      	ldr	r3, [pc, #148]	; (800064c <MX_GPIO_Init+0xac>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	4a24      	ldr	r2, [pc, #144]	; (800064c <MX_GPIO_Init+0xac>)
 80005bc:	f043 0308 	orr.w	r3, r3, #8
 80005c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <MX_GPIO_Init+0xac>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	f003 0308 	and.w	r3, r3, #8
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_GPIO_Init+0xac>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4a1e      	ldr	r2, [pc, #120]	; (800064c <MX_GPIO_Init+0xac>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_GPIO_Init+0xac>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_GPIO_Init+0xac>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <MX_GPIO_Init+0xac>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_GPIO_Init+0xac>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000604:	4812      	ldr	r0, [pc, #72]	; (8000650 <MX_GPIO_Init+0xb0>)
 8000606:	f001 f8d9 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800060a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000610:	2300      	movs	r3, #0
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_GPIO_Init+0xb0>)
 8000620:	f000 ff0c 	bl	800143c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000624:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_GPIO_Init+0xb0>)
 800063e:	f000 fefd 	bl	800143c <HAL_GPIO_Init>

}
 8000642:	bf00      	nop
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	48000c00 	.word	0x48000c00

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 faad 	bl	8000bb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f80d 	bl	800067a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ff9e 	bl	80005a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000664:	f7ff fe84 	bl	8000370 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000668:	f000 f8aa 	bl	80007c0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800066c:	f004 fe88 	bl	8005380 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000670:	f7ff fed0 	bl	8000414 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000674:	f007 fc43 	bl	8007efe <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	e7fe      	b.n	8000678 <main+0x24>

0800067a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b0b8      	sub	sp, #224	; 0xe0
 800067e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000680:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000684:	2244      	movs	r2, #68	; 0x44
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f00a fe66 	bl	800b35a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2288      	movs	r2, #136	; 0x88
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f00a fe58 	bl	800b35a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006aa:	2310      	movs	r3, #16
 80006ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c8:	2301      	movs	r3, #1
 80006ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006d4:	2328      	movs	r3, #40	; 0x28
 80006d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006da:	2307      	movs	r3, #7
 80006dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f8df 	bl	80018b4 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006fc:	f000 f858 	bl	80007b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000722:	2104      	movs	r1, #4
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fcab 	bl	8002080 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000730:	f000 f83e 	bl	80007b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000734:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000738:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800073a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800073e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000740:	2301      	movs	r3, #1
 8000742:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000748:	2310      	movs	r3, #16
 800074a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800074c:	2307      	movs	r3, #7
 800074e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000758:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800075c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fead 	bl	80024c0 <HAL_RCCEx_PeriphCLKConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800076c:	f000 f820 	bl	80007b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000770:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000774:	f001 f848 	bl	8001808 <HAL_PWREx_ControlVoltageScaling>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800077e:	f000 f817 	bl	80007b0 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	37e0      	adds	r7, #224	; 0xe0
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d101      	bne.n	80007a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800079e:	f000 fa23 	bl	8000be8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40012c00 	.word	0x40012c00

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_SDMMC1_SD_Init+0x3c>)
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <MX_SDMMC1_SD_Init+0x40>)
 80007c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SDMMC1_SD_Init+0x3c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SDMMC1_SD_Init+0x3c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SDMMC1_SD_Init+0x3c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SDMMC1_SD_Init+0x3c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SDMMC1_SD_Init+0x3c>)
 80007e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e8:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 6;
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <MX_SDMMC1_SD_Init+0x3c>)
 80007ec:	2206      	movs	r2, #6
 80007ee:	619a      	str	r2, [r3, #24]

}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20003130 	.word	0x20003130
 8000800:	40012800 	.word	0x40012800

08000804 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a4b      	ldr	r2, [pc, #300]	; (8000950 <HAL_SD_MspInit+0x14c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	f040 8090 	bne.w	8000948 <HAL_SD_MspInit+0x144>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000828:	4b4a      	ldr	r3, [pc, #296]	; (8000954 <HAL_SD_MspInit+0x150>)
 800082a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082c:	4a49      	ldr	r2, [pc, #292]	; (8000954 <HAL_SD_MspInit+0x150>)
 800082e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000832:	6613      	str	r3, [r2, #96]	; 0x60
 8000834:	4b47      	ldr	r3, [pc, #284]	; (8000954 <HAL_SD_MspInit+0x150>)
 8000836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000840:	4b44      	ldr	r3, [pc, #272]	; (8000954 <HAL_SD_MspInit+0x150>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000844:	4a43      	ldr	r2, [pc, #268]	; (8000954 <HAL_SD_MspInit+0x150>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084c:	4b41      	ldr	r3, [pc, #260]	; (8000954 <HAL_SD_MspInit+0x150>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	f003 0304 	and.w	r3, r3, #4
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000858:	4b3e      	ldr	r3, [pc, #248]	; (8000954 <HAL_SD_MspInit+0x150>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085c:	4a3d      	ldr	r2, [pc, #244]	; (8000954 <HAL_SD_MspInit+0x150>)
 800085e:	f043 0308 	orr.w	r3, r3, #8
 8000862:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000864:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <HAL_SD_MspInit+0x150>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000870:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000882:	230c      	movs	r3, #12
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000886:	f107 0314 	add.w	r3, r7, #20
 800088a:	4619      	mov	r1, r3
 800088c:	4832      	ldr	r0, [pc, #200]	; (8000958 <HAL_SD_MspInit+0x154>)
 800088e:	f000 fdd5 	bl	800143c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008a4:	230c      	movs	r3, #12
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	482a      	ldr	r0, [pc, #168]	; (8000958 <HAL_SD_MspInit+0x154>)
 80008b0:	f000 fdc4 	bl	800143c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b4:	2304      	movs	r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c0:	2303      	movs	r3, #3
 80008c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80008c4:	230c      	movs	r3, #12
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4823      	ldr	r0, [pc, #140]	; (800095c <HAL_SD_MspInit+0x158>)
 80008d0:	f000 fdb4 	bl	800143c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <HAL_SD_MspInit+0x15c>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <HAL_SD_MspInit+0x160>)
 80008d8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <HAL_SD_MspInit+0x15c>)
 80008dc:	2207      	movs	r2, #7
 80008de:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_SD_MspInit+0x15c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_SD_MspInit+0x15c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_SD_MspInit+0x15c>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008f2:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_SD_MspInit+0x15c>)
 80008f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_SD_MspInit+0x15c>)
 80008fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000900:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_SD_MspInit+0x15c>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_SD_MspInit+0x15c>)
 800090a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800090e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8000910:	4813      	ldr	r0, [pc, #76]	; (8000960 <HAL_SD_MspInit+0x15c>)
 8000912:	f000 fa8b 	bl	8000e2c <HAL_DMA_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <HAL_SD_MspInit+0x11c>
    {
      Error_Handler();
 800091c:	f7ff ff48 	bl	80007b0 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_SD_MspInit+0x15c>)
 8000924:	641a      	str	r2, [r3, #64]	; 0x40
 8000926:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <HAL_SD_MspInit+0x15c>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a0c      	ldr	r2, [pc, #48]	; (8000960 <HAL_SD_MspInit+0x15c>)
 8000930:	63da      	str	r2, [r3, #60]	; 0x3c
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_SD_MspInit+0x15c>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2105      	movs	r1, #5
 800093c:	2031      	movs	r0, #49	; 0x31
 800093e:	f000 fa4b 	bl	8000dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000942:	2031      	movs	r0, #49	; 0x31
 8000944:	f000 fa64 	bl	8000e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	; 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40012800 	.word	0x40012800
 8000954:	40021000 	.word	0x40021000
 8000958:	48000800 	.word	0x48000800
 800095c:	48000c00 	.word	0x48000c00
 8000960:	200031b4 	.word	0x200031b4
 8000964:	40020444 	.word	0x40020444

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_MspInit+0x4c>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6613      	str	r3, [r2, #96]	; 0x60
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <HAL_MspInit+0x4c>)
 800097c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <HAL_MspInit+0x4c>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <HAL_MspInit+0x4c>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000990:	6593      	str	r3, [r2, #88]	; 0x58
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	210f      	movs	r1, #15
 80009a2:	f06f 0001 	mvn.w	r0, #1
 80009a6:	f000 fa17 	bl	8000dd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	2019      	movs	r0, #25
 80009ce:	f000 fa03 	bl	8000dd8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 80009d2:	2019      	movs	r0, #25
 80009d4:	f000 fa1c 	bl	8000e10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009d8:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <HAL_InitTick+0x9c>)
 80009da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <HAL_InitTick+0x9c>)
 80009de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009e2:	6613      	str	r3, [r2, #96]	; 0x60
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_InitTick+0x9c>)
 80009e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f0:	f107 0210 	add.w	r2, r7, #16
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 fcce 	bl	800239c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a00:	f001 fcb6 	bl	8002370 <HAL_RCC_GetPCLK2Freq>
 8000a04:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <HAL_InitTick+0xa0>)
 8000a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a0e:	0c9b      	lsrs	r3, r3, #18
 8000a10:	3b01      	subs	r3, #1
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_InitTick+0xa4>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <HAL_InitTick+0xa8>)
 8000a18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_InitTick+0xa4>)
 8000a1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_InitTick+0xa4>)
 8000a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_InitTick+0xa4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <HAL_InitTick+0xa4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <HAL_InitTick+0xa4>)
 8000a36:	f003 fcdd 	bl	80043f4 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d104      	bne.n	8000a4a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <HAL_InitTick+0xa4>)
 8000a42:	f003 fd0d 	bl	8004460 <HAL_TIM_Base_Start_IT>
 8000a46:	4603      	mov	r3, r0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3730      	adds	r7, #48	; 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	431bde83 	.word	0x431bde83
 8000a5c:	200031fc 	.word	0x200031fc
 8000a60:	40012c00 	.word	0x40012c00

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a9c:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a9e:	f003 fd09 	bl	80044b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200031fc 	.word	0x200031fc

08000aac <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <SDMMC1_IRQHandler+0x10>)
 8000ab2:	f002 fc07 	bl	80032c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20003130 	.word	0x20003130

08000ac0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <DMA2_Channel4_IRQHandler+0x34>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	2b81      	cmp	r3, #129	; 0x81
 8000aca:	d003      	beq.n	8000ad4 <DMA2_Channel4_IRQHandler+0x14>
      (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK)))
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <DMA2_Channel4_IRQHandler+0x34>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 8000ad0:	2b82      	cmp	r3, #130	; 0x82
 8000ad2:	d102      	bne.n	8000ada <DMA2_Channel4_IRQHandler+0x1a>
  {
    BSP_SD_DMA_Rx_IRQHandler();
 8000ad4:	f7ff fbd6 	bl	8000284 <BSP_SD_DMA_Rx_IRQHandler>
 8000ad8:	e009      	b.n	8000aee <DMA2_Channel4_IRQHandler+0x2e>
  }
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <DMA2_Channel4_IRQHandler+0x34>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	2b90      	cmp	r3, #144	; 0x90
 8000ae0:	d003      	beq.n	8000aea <DMA2_Channel4_IRQHandler+0x2a>
      (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK)))
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <DMA2_Channel4_IRQHandler+0x34>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 8000ae6:	2ba0      	cmp	r3, #160	; 0xa0
 8000ae8:	d102      	bne.n	8000af0 <DMA2_Channel4_IRQHandler+0x30>
  {
    BSP_SD_DMA_Tx_IRQHandler();
 8000aea:	f7ff fbc5 	bl	8000278 <BSP_SD_DMA_Tx_IRQHandler>
  }
  return; 
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20003130 	.word	0x20003130

08000af8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <SystemInit+0x64>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <SystemInit+0x64>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <SystemInit+0x68>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <SystemInit+0x68>)
 8000b12:	f043 0301 	orr.w	r3, r3, #1
 8000b16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <SystemInit+0x68>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <SystemInit+0x68>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <SystemInit+0x68>)
 8000b24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <SystemInit+0x68>)
 8000b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <SystemInit+0x68>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <SystemInit+0x68>)
 8000b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <SystemInit+0x68>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SystemInit+0x64>)
 8000b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00
 8000b60:	40021000 	.word	0x40021000

08000b64 <Reset_Handler>:
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopForever+0x2>
 8000b68:	2100      	movs	r1, #0
 8000b6a:	e003      	b.n	8000b74 <LoopCopyDataInit>

08000b6c <CopyDataInit>:
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <LoopForever+0x6>)
 8000b6e:	585b      	ldr	r3, [r3, r1]
 8000b70:	5043      	str	r3, [r0, r1]
 8000b72:	3104      	adds	r1, #4

08000b74 <LoopCopyDataInit>:
 8000b74:	480b      	ldr	r0, [pc, #44]	; (8000ba4 <LoopForever+0xa>)
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <LoopForever+0xe>)
 8000b78:	1842      	adds	r2, r0, r1
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3f6      	bcc.n	8000b6c <CopyDataInit>
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <LoopForever+0x12>)
 8000b80:	e002      	b.n	8000b88 <LoopFillZerobss>

08000b82 <FillZerobss>:
 8000b82:	2300      	movs	r3, #0
 8000b84:	f842 3b04 	str.w	r3, [r2], #4

08000b88 <LoopFillZerobss>:
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <LoopForever+0x16>)
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d3f9      	bcc.n	8000b82 <FillZerobss>
 8000b8e:	f7ff ffb3 	bl	8000af8 <SystemInit>
 8000b92:	f00a fbb3 	bl	800b2fc <__libc_init_array>
 8000b96:	f7ff fd5d 	bl	8000654 <main>

08000b9a <LoopForever>:
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
 8000b9c:	20018000 	.word	0x20018000
 8000ba0:	0800b528 	.word	0x0800b528
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000014 	.word	0x20000014
 8000bac:	20000014 	.word	0x20000014
 8000bb0:	200052f0 	.word	0x200052f0

08000bb4 <ADC1_2_IRQHandler>:
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>

08000bb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f000 f8fe 	bl	8000dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fef6 	bl	80009b8 <HAL_InitTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d002      	beq.n	8000bd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	71fb      	strb	r3, [r7, #7]
 8000bd6:	e001      	b.n	8000bdc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd8:	f7ff fec6 	bl	8000968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_IncTick+0x1c>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_IncTick+0x20>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a03      	ldr	r2, [pc, #12]	; (8000c04 <HAL_IncTick+0x1c>)
 8000bf8:	6013      	str	r3, [r2, #0]
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	2000323c 	.word	0x2000323c
 8000c08:	20000008 	.word	0x20000008

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2000323c 	.word	0x2000323c

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c3c:	d004      	beq.n	8000c48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_Delay+0x40>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4413      	add	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c48:	bf00      	nop
 8000c4a:	f7ff ffdf 	bl	8000c0c <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d8f7      	bhi.n	8000c4a <HAL_Delay+0x26>
  {
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000008 	.word	0x20000008

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff4c 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dea:	f7ff ff61 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000dee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	6978      	ldr	r0, [r7, #20]
 8000df6:	f7ff ffb1 	bl	8000d5c <NVIC_EncodePriority>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff80 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff54 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e098      	b.n	8000f70 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b4d      	ldr	r3, [pc, #308]	; (8000f7c <HAL_DMA_Init+0x150>)
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d80f      	bhi.n	8000e6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b4b      	ldr	r3, [pc, #300]	; (8000f80 <HAL_DMA_Init+0x154>)
 8000e52:	4413      	add	r3, r2
 8000e54:	4a4b      	ldr	r2, [pc, #300]	; (8000f84 <HAL_DMA_Init+0x158>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	009a      	lsls	r2, r3, #2
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a48      	ldr	r2, [pc, #288]	; (8000f88 <HAL_DMA_Init+0x15c>)
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
 8000e68:	e00e      	b.n	8000e88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b46      	ldr	r3, [pc, #280]	; (8000f8c <HAL_DMA_Init+0x160>)
 8000e72:	4413      	add	r3, r2
 8000e74:	4a43      	ldr	r2, [pc, #268]	; (8000f84 <HAL_DMA_Init+0x158>)
 8000e76:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7a:	091b      	lsrs	r3, r3, #4
 8000e7c:	009a      	lsls	r2, r3, #2
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a42      	ldr	r2, [pc, #264]	; (8000f90 <HAL_DMA_Init+0x164>)
 8000e86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ea2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ee2:	d039      	beq.n	8000f58 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	4a27      	ldr	r2, [pc, #156]	; (8000f88 <HAL_DMA_Init+0x15c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d11a      	bne.n	8000f24 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000eee:	4b29      	ldr	r3, [pc, #164]	; (8000f94 <HAL_DMA_Init+0x168>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f003 031c 	and.w	r3, r3, #28
 8000efa:	210f      	movs	r1, #15
 8000efc:	fa01 f303 	lsl.w	r3, r1, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	4924      	ldr	r1, [pc, #144]	; (8000f94 <HAL_DMA_Init+0x168>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_DMA_Init+0x168>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6859      	ldr	r1, [r3, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f14:	f003 031c 	and.w	r3, r3, #28
 8000f18:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1c:	491d      	ldr	r1, [pc, #116]	; (8000f94 <HAL_DMA_Init+0x168>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
 8000f22:	e019      	b.n	8000f58 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <HAL_DMA_Init+0x16c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2c:	f003 031c 	and.w	r3, r3, #28
 8000f30:	210f      	movs	r1, #15
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	4917      	ldr	r1, [pc, #92]	; (8000f98 <HAL_DMA_Init+0x16c>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_DMA_Init+0x16c>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6859      	ldr	r1, [r3, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f003 031c 	and.w	r3, r3, #28
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	4911      	ldr	r1, [pc, #68]	; (8000f98 <HAL_DMA_Init+0x16c>)
 8000f54:	4313      	orrs	r3, r2
 8000f56:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40020407 	.word	0x40020407
 8000f80:	bffdfff8 	.word	0xbffdfff8
 8000f84:	cccccccd 	.word	0xcccccccd
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	bffdfbf8 	.word	0xbffdfbf8
 8000f90:	40020400 	.word	0x40020400
 8000f94:	400200a8 	.word	0x400200a8
 8000f98:	400204a8 	.word	0x400204a8

08000f9c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e072      	b.n	8001094 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <HAL_DMA_DeInit+0x104>)
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d80f      	bhi.n	8000fea <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <HAL_DMA_DeInit+0x108>)
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a34      	ldr	r2, [pc, #208]	; (80010a8 <HAL_DMA_DeInit+0x10c>)
 8000fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	009a      	lsls	r2, r3, #2
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a31      	ldr	r2, [pc, #196]	; (80010ac <HAL_DMA_DeInit+0x110>)
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
 8000fe8:	e00e      	b.n	8001008 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <HAL_DMA_DeInit+0x114>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <HAL_DMA_DeInit+0x10c>)
 8000ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	009a      	lsls	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <HAL_DMA_DeInit+0x118>)
 8001006:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	f003 021c 	and.w	r2, r3, #28
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	2101      	movs	r1, #1
 800101e:	fa01 f202 	lsl.w	r2, r1, r2
 8001022:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	4a20      	ldr	r2, [pc, #128]	; (80010ac <HAL_DMA_DeInit+0x110>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d10d      	bne.n	800104a <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_DMA_DeInit+0x11c>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f003 031c 	and.w	r3, r3, #28
 800103a:	210f      	movs	r1, #15
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	491d      	ldr	r1, [pc, #116]	; (80010b8 <HAL_DMA_DeInit+0x11c>)
 8001044:	4013      	ands	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
 8001048:	e00c      	b.n	8001064 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_DMA_DeInit+0x120>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f003 031c 	and.w	r3, r3, #28
 8001056:	210f      	movs	r1, #15
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	4917      	ldr	r1, [pc, #92]	; (80010bc <HAL_DMA_DeInit+0x120>)
 8001060:	4013      	ands	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40020407 	.word	0x40020407
 80010a4:	bffdfff8 	.word	0xbffdfff8
 80010a8:	cccccccd 	.word	0xcccccccd
 80010ac:	40020000 	.word	0x40020000
 80010b0:	bffdfbf8 	.word	0xbffdfbf8
 80010b4:	40020400 	.word	0x40020400
 80010b8:	400200a8 	.word	0x400200a8
 80010bc:	400204a8 	.word	0x400204a8

080010c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_DMA_Start_IT+0x20>
 80010dc:	2302      	movs	r3, #2
 80010de:	e04b      	b.n	8001178 <HAL_DMA_Start_IT+0xb8>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d13a      	bne.n	800116a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2202      	movs	r2, #2
 80010f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0201 	bic.w	r2, r2, #1
 8001110:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	68b9      	ldr	r1, [r7, #8]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	f000 f95f 	bl	80013dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	2b00      	cmp	r3, #0
 8001124:	d008      	beq.n	8001138 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 020e 	orr.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	e00f      	b.n	8001158 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 020a 	orr.w	r2, r2, #10
 8001156:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e005      	b.n	8001176 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001172:	2302      	movs	r3, #2
 8001174:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001176:	7dfb      	ldrb	r3, [r7, #23]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d008      	beq.n	80011aa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2204      	movs	r2, #4
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e022      	b.n	80011f0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 020e 	bic.w	r2, r2, #14
 80011b8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f003 021c 	and.w	r2, r3, #28
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f202 	lsl.w	r2, r1, r2
 80011dc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d005      	beq.n	8001220 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2204      	movs	r2, #4
 8001218:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	e029      	b.n	8001274 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 020e 	bic.w	r2, r2, #14
 800122e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0201 	bic.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001244:	f003 021c 	and.w	r2, r3, #28
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	2101      	movs	r1, #1
 800124e:	fa01 f202 	lsl.w	r2, r1, r2
 8001252:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	4798      	blx	r3
    }
  }
  return status;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f003 031c 	and.w	r3, r3, #28
 800129e:	2204      	movs	r2, #4
 80012a0:	409a      	lsls	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d026      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x7a>
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d021      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0320 	and.w	r3, r3, #32
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d107      	bne.n	80012d2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0204 	bic.w	r2, r2, #4
 80012d0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f003 021c 	and.w	r2, r3, #28
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	2104      	movs	r1, #4
 80012e0:	fa01 f202 	lsl.w	r2, r1, r2
 80012e4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d071      	beq.n	80013d2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80012f6:	e06c      	b.n	80013d2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f003 031c 	and.w	r3, r3, #28
 8001300:	2202      	movs	r2, #2
 8001302:	409a      	lsls	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d02e      	beq.n	800136a <HAL_DMA_IRQHandler+0xec>
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d029      	beq.n	800136a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0320 	and.w	r3, r3, #32
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10b      	bne.n	800133c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 020a 	bic.w	r2, r2, #10
 8001332:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	f003 021c 	and.w	r2, r3, #28
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2102      	movs	r1, #2
 800134a:	fa01 f202 	lsl.w	r2, r1, r2
 800134e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	2b00      	cmp	r3, #0
 800135e:	d038      	beq.n	80013d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001368:	e033      	b.n	80013d2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f003 031c 	and.w	r3, r3, #28
 8001372:	2208      	movs	r2, #8
 8001374:	409a      	lsls	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d02a      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x156>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d025      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 020e 	bic.w	r2, r2, #14
 8001396:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	f003 021c 	and.w	r2, r3, #28
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2201      	movs	r2, #1
 80013b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
}
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f003 021c 	and.w	r2, r3, #28
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d108      	bne.n	8001420 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800141e:	e007      	b.n	8001430 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	e17f      	b.n	800174c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	4013      	ands	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8171 	beq.w	8001746 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d00b      	beq.n	8001484 <HAL_GPIO_Init+0x48>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d007      	beq.n	8001484 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001478:	2b11      	cmp	r3, #17
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b12      	cmp	r3, #18
 8001482:	d130      	bne.n	80014e6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ba:	2201      	movs	r2, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 0201 	and.w	r2, r3, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d118      	bne.n	8001524 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014f8:	2201      	movs	r2, #1
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	f003 0201 	and.w	r2, r3, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	2203      	movs	r2, #3
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b02      	cmp	r3, #2
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x128>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b12      	cmp	r3, #18
 8001562:	d123      	bne.n	80015ac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	08da      	lsrs	r2, r3, #3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3208      	adds	r2, #8
 800156c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	220f      	movs	r2, #15
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	08da      	lsrs	r2, r3, #3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3208      	adds	r2, #8
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 80ac 	beq.w	8001746 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	4b5e      	ldr	r3, [pc, #376]	; (8001768 <HAL_GPIO_Init+0x32c>)
 80015f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015f2:	4a5d      	ldr	r2, [pc, #372]	; (8001768 <HAL_GPIO_Init+0x32c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6613      	str	r3, [r2, #96]	; 0x60
 80015fa:	4b5b      	ldr	r3, [pc, #364]	; (8001768 <HAL_GPIO_Init+0x32c>)
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001606:	4a59      	ldr	r2, [pc, #356]	; (800176c <HAL_GPIO_Init+0x330>)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001630:	d025      	beq.n	800167e <HAL_GPIO_Init+0x242>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_GPIO_Init+0x334>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d01f      	beq.n	800167a <HAL_GPIO_Init+0x23e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4d      	ldr	r2, [pc, #308]	; (8001774 <HAL_GPIO_Init+0x338>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d019      	beq.n	8001676 <HAL_GPIO_Init+0x23a>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <HAL_GPIO_Init+0x33c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d013      	beq.n	8001672 <HAL_GPIO_Init+0x236>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a4b      	ldr	r2, [pc, #300]	; (800177c <HAL_GPIO_Init+0x340>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d00d      	beq.n	800166e <HAL_GPIO_Init+0x232>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a4a      	ldr	r2, [pc, #296]	; (8001780 <HAL_GPIO_Init+0x344>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d007      	beq.n	800166a <HAL_GPIO_Init+0x22e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a49      	ldr	r2, [pc, #292]	; (8001784 <HAL_GPIO_Init+0x348>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d101      	bne.n	8001666 <HAL_GPIO_Init+0x22a>
 8001662:	2306      	movs	r3, #6
 8001664:	e00c      	b.n	8001680 <HAL_GPIO_Init+0x244>
 8001666:	2307      	movs	r3, #7
 8001668:	e00a      	b.n	8001680 <HAL_GPIO_Init+0x244>
 800166a:	2305      	movs	r3, #5
 800166c:	e008      	b.n	8001680 <HAL_GPIO_Init+0x244>
 800166e:	2304      	movs	r3, #4
 8001670:	e006      	b.n	8001680 <HAL_GPIO_Init+0x244>
 8001672:	2303      	movs	r3, #3
 8001674:	e004      	b.n	8001680 <HAL_GPIO_Init+0x244>
 8001676:	2302      	movs	r3, #2
 8001678:	e002      	b.n	8001680 <HAL_GPIO_Init+0x244>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x244>
 800167e:	2300      	movs	r3, #0
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	f002 0203 	and.w	r2, r2, #3
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	4093      	lsls	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001690:	4936      	ldr	r1, [pc, #216]	; (800176c <HAL_GPIO_Init+0x330>)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	3302      	adds	r3, #2
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800169e:	4b3a      	ldr	r3, [pc, #232]	; (8001788 <HAL_GPIO_Init+0x34c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016c2:	4a31      	ldr	r2, [pc, #196]	; (8001788 <HAL_GPIO_Init+0x34c>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80016c8:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_GPIO_Init+0x34c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ec:	4a26      	ldr	r2, [pc, #152]	; (8001788 <HAL_GPIO_Init+0x34c>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_GPIO_Init+0x34c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001716:	4a1c      	ldr	r2, [pc, #112]	; (8001788 <HAL_GPIO_Init+0x34c>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <HAL_GPIO_Init+0x34c>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001740:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_GPIO_Init+0x34c>)
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	2b00      	cmp	r3, #0
 8001758:	f47f ae78 	bne.w	800144c <HAL_GPIO_Init+0x10>
  }
}
 800175c:	bf00      	nop
 800175e:	371c      	adds	r7, #28
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	40021000 	.word	0x40021000
 800176c:	40010000 	.word	0x40010000
 8001770:	48000400 	.word	0x48000400
 8001774:	48000800 	.word	0x48000800
 8001778:	48000c00 	.word	0x48000c00
 800177c:	48001000 	.word	0x48001000
 8001780:	48001400 	.word	0x48001400
 8001784:	48001800 	.word	0x48001800
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <HAL_PWREx_GetVoltageRange+0x18>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40007000 	.word	0x40007000

08001808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001816:	d130      	bne.n	800187a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001824:	d038      	beq.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2232      	movs	r2, #50	; 0x32
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0c9b      	lsrs	r3, r3, #18
 8001848:	3301      	adds	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184c:	e002      	b.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3b01      	subs	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001860:	d102      	bne.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f2      	bne.n	800184e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001874:	d110      	bne.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e00f      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d007      	beq.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001890:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001896:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000
 80018ac:	20000000 	.word	0x20000000
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e3d4      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c6:	4ba1      	ldr	r3, [pc, #644]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d0:	4b9e      	ldr	r3, [pc, #632]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80e4 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_RCC_OscConfig+0x4a>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	f040 808b 	bne.w	8001a0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f040 8087 	bne.w	8001a0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018fe:	4b93      	ldr	r3, [pc, #588]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x62>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e3ac      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <HAL_RCC_OscConfig+0x7c>
 8001926:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800192e:	e005      	b.n	800193c <HAL_RCC_OscConfig+0x88>
 8001930:	4b86      	ldr	r3, [pc, #536]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800193c:	4293      	cmp	r3, r2
 800193e:	d223      	bcs.n	8001988 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fd5b 	bl	8002400 <RCC_SetFlashLatencyFromMSIRange>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e38d      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001954:	4b7d      	ldr	r3, [pc, #500]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7c      	ldr	r2, [pc, #496]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4977      	ldr	r1, [pc, #476]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001972:	4b76      	ldr	r3, [pc, #472]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	4972      	ldr	r1, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
 8001986:	e025      	b.n	80019d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001988:	4b70      	ldr	r3, [pc, #448]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6f      	ldr	r2, [pc, #444]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	496a      	ldr	r1, [pc, #424]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a6:	4b69      	ldr	r3, [pc, #420]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	4965      	ldr	r1, [pc, #404]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fd1b 	bl	8002400 <RCC_SetFlashLatencyFromMSIRange>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e34d      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d4:	f000 fc36 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80019d8:	4601      	mov	r1, r0
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	4a5a      	ldr	r2, [pc, #360]	; (8001b50 <HAL_RCC_OscConfig+0x29c>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	fa21 f303 	lsr.w	r3, r1, r3
 80019f0:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <HAL_RCC_OscConfig+0x2a0>)
 80019f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <HAL_RCC_OscConfig+0x2a4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe ffdd 	bl	80009b8 <HAL_InitTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d052      	beq.n	8001aae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	e331      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d032      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a20:	f7ff f8f4 	bl	8000c0c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a28:	f7ff f8f0 	bl	8000c0c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e31a      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a40      	ldr	r2, [pc, #256]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	493b      	ldr	r1, [pc, #236]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a64:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	4936      	ldr	r1, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e01a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a33      	ldr	r2, [pc, #204]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a86:	f7ff f8c1 	bl	8000c0c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f8bd 	bl	8000c0c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e2e7      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x1da>
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d074      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x21a>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d10b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d064      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d160      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e2c4      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x24a>
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e01d      	b.n	8001b3a <HAL_RCC_OscConfig+0x286>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x26e>
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0x286>
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d01c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff f863 	bl	8000c0c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b48:	e011      	b.n	8001b6e <HAL_RCC_OscConfig+0x2ba>
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	0800b444 	.word	0x0800b444
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f856 	bl	8000c0c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e280      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6e:	4baf      	ldr	r3, [pc, #700]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2a8>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f846 	bl	8000c0c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff f842 	bl	8000c0c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e26c      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b96:	4ba5      	ldr	r3, [pc, #660]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2d0>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d060      	beq.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x310>
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d119      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d116      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc4:	4b99      	ldr	r3, [pc, #612]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_OscConfig+0x328>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e249      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b93      	ldr	r3, [pc, #588]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	4990      	ldr	r1, [pc, #576]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf0:	e040      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d023      	beq.n	8001c42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfa:	4b8c      	ldr	r3, [pc, #560]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a8b      	ldr	r2, [pc, #556]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff f801 	bl	8000c0c <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7fe fffd 	bl	8000c0c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e227      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c20:	4b82      	ldr	r3, [pc, #520]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	497c      	ldr	r1, [pc, #496]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	e018      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b7a      	ldr	r3, [pc, #488]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a79      	ldr	r2, [pc, #484]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7fe ffdd 	bl	8000c0c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c56:	f7fe ffd9 	bl	8000c0c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e203      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c68:	4b70      	ldr	r3, [pc, #448]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d03c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c88:	4b68      	ldr	r3, [pc, #416]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	4a67      	ldr	r2, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7fe ffb8 	bl	8000c0c <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7fe ffb4 	bl	8000c0c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1de      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ef      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x3ec>
 8001cc0:	e01b      	b.n	8001cfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc2:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7fe ff9b 	bl	8000c0c <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cda:	f7fe ff97 	bl	8000c0c <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e1c1      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ef      	bne.n	8001cda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80a6 	beq.w	8001e54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	4a43      	ldr	r2, [pc, #268]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6593      	str	r3, [r2, #88]	; 0x58
 8001d24:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d30:	2301      	movs	r3, #1
 8001d32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <HAL_RCC_OscConfig+0x57c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d118      	bne.n	8001d72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d40:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <HAL_RCC_OscConfig+0x57c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <HAL_RCC_OscConfig+0x57c>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4c:	f7fe ff5e 	bl	8000c0c <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d54:	f7fe ff5a 	bl	8000c0c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e184      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <HAL_RCC_OscConfig+0x57c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d108      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4d8>
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d80:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d8a:	e024      	b.n	8001dd6 <HAL_RCC_OscConfig+0x522>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d110      	bne.n	8001db6 <HAL_RCC_OscConfig+0x502>
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9a:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001daa:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db4:	e00f      	b.n	8001dd6 <HAL_RCC_OscConfig+0x522>
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dce:	f023 0304 	bic.w	r3, r3, #4
 8001dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d016      	beq.n	8001e0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7fe ff15 	bl	8000c0c <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7fe ff11 	bl	8000c0c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e139      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0ed      	beq.n	8001de6 <HAL_RCC_OscConfig+0x532>
 8001e0a:	e01a      	b.n	8001e42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7fe fefe 	bl	8000c0c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7fe fefa 	bl	8000c0c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d906      	bls.n	8001e34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e122      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e34:	4b90      	ldr	r3, [pc, #576]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1e8      	bne.n	8001e14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b8b      	ldr	r3, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a8a      	ldr	r2, [pc, #552]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8108 	beq.w	800206e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	f040 80d0 	bne.w	8002008 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e68:	4b83      	ldr	r3, [pc, #524]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d130      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	3b01      	subs	r3, #1
 8001e88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d127      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d11f      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ea8:	2a07      	cmp	r2, #7
 8001eaa:	bf14      	ite	ne
 8001eac:	2201      	movne	r2, #1
 8001eae:	2200      	moveq	r2, #0
 8001eb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d113      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d109      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d06e      	beq.n	8001fbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	d069      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ee4:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ef0:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b7      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f00:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5c      	ldr	r2, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f0c:	f7fe fe7e 	bl	8000c0c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe fe7a 	bl	8000c0c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0a4      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f26:	4b54      	ldr	r3, [pc, #336]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f32:	4b51      	ldr	r3, [pc, #324]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b51      	ldr	r3, [pc, #324]	; (800207c <HAL_RCC_OscConfig+0x7c8>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f42:	3a01      	subs	r2, #1
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	4311      	orrs	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f4c:	0212      	lsls	r2, r2, #8
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f54:	0852      	lsrs	r2, r2, #1
 8001f56:	3a01      	subs	r2, #1
 8001f58:	0552      	lsls	r2, r2, #21
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f60:	0852      	lsrs	r2, r2, #1
 8001f62:	3a01      	subs	r2, #1
 8001f64:	0652      	lsls	r2, r2, #25
 8001f66:	4311      	orrs	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f6c:	0912      	lsrs	r2, r2, #4
 8001f6e:	0452      	lsls	r2, r2, #17
 8001f70:	430a      	orrs	r2, r1
 8001f72:	4941      	ldr	r1, [pc, #260]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f78:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a3e      	ldr	r2, [pc, #248]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f90:	f7fe fe3c 	bl	8000c0c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fe38 	bl	8000c0c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e062      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb6:	e05a      	b.n	800206e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e059      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d152      	bne.n	800206e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a27      	ldr	r2, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fe0:	f7fe fe14 	bl	8000c0c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7fe fe10 	bl	8000c0c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e03a      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x734>
 8002006:	e032      	b.n	800206e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d02d      	beq.n	800206a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002018:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 800202c:	f023 0303 	bic.w	r3, r3, #3
 8002030:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002038:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800203c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002040:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7fe fde3 	bl	8000c0c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe fddf 	bl	8000c0c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e009      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x796>
 8002068:	e001      	b.n	800206e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	f99d808c 	.word	0xf99d808c

08002080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0c8      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b66      	ldr	r3, [pc, #408]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d910      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	4961      	ldr	r1, [pc, #388]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b0      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d04c      	beq.n	800216a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d8:	4b56      	ldr	r3, [pc, #344]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d121      	bne.n	8002128 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e09e      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f0:	4b50      	ldr	r3, [pc, #320]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d115      	bne.n	8002128 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e092      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e086      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002118:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e07e      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002128:	4b42      	ldr	r3, [pc, #264]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 0203 	bic.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	493f      	ldr	r1, [pc, #252]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800213a:	f7fe fd67 	bl	8000c0c <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	e00a      	b.n	8002158 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002142:	f7fe fd63 	bl	8000c0c <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e066      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 020c 	and.w	r2, r3, #12
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	429a      	cmp	r2, r3
 8002168:	d1eb      	bne.n	8002142 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	492c      	ldr	r1, [pc, #176]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d210      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4924      	ldr	r1, [pc, #144]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e036      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4918      	ldr	r1, [pc, #96]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4910      	ldr	r1, [pc, #64]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021f6:	f000 f825 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80021fa:	4601      	mov	r1, r0
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	fa21 f303 	lsr.w	r3, r1, r3
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fbcc 	bl	80009b8 <HAL_InitTick>
 8002220:	4603      	mov	r3, r0
 8002222:	72fb      	strb	r3, [r7, #11]

  return status;
 8002224:	7afb      	ldrb	r3, [r7, #11]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40022000 	.word	0x40022000
 8002234:	40021000 	.word	0x40021000
 8002238:	0800b444 	.word	0x0800b444
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225c:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x34>
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d121      	bne.n	80022b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d11e      	bne.n	80022b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002278:	4b33      	ldr	r3, [pc, #204]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002284:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 8002286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e005      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022a0:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10d      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d102      	bne.n	80022c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	e004      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022c8:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d133      	bne.n	800233a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0xa4>
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0xaa>
 80022e6:	e005      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ea:	617b      	str	r3, [r7, #20]
      break;
 80022ec:	e005      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_GetSysClockFreq+0x110>)
 80022f0:	617b      	str	r3, [r7, #20]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	617b      	str	r3, [r7, #20]
      break;
 80022f8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	3301      	adds	r3, #1
 8002306:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	fb02 f203 	mul.w	r2, r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0e5b      	lsrs	r3, r3, #25
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	3301      	adds	r3, #1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800233a:	69bb      	ldr	r3, [r7, #24]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3724      	adds	r7, #36	; 0x24
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40021000 	.word	0x40021000
 800234c:	0800b45c 	.word	0x0800b45c
 8002350:	00f42400 	.word	0x00f42400
 8002354:	007a1200 	.word	0x007a1200

08002358 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_RCC_GetHCLKFreq+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000

08002370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002374:	f7ff fff0 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 8002378:	4601      	mov	r1, r0
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0adb      	lsrs	r3, r3, #11
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	0800b454 	.word	0x0800b454

0800239c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	220f      	movs	r2, #15
 80023aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_RCC_GetClockConfig+0x5c>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0203 	and.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_RCC_GetClockConfig+0x5c>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <HAL_RCC_GetClockConfig+0x5c>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_GetClockConfig+0x5c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	08db      	lsrs	r3, r3, #3
 80023d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_RCC_GetClockConfig+0x60>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0207 	and.w	r2, r3, #7
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40022000 	.word	0x40022000

08002400 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002408:	2300      	movs	r3, #0
 800240a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002418:	f7ff f9e8 	bl	80017ec <HAL_PWREx_GetVoltageRange>
 800241c:	6178      	str	r0, [r7, #20]
 800241e:	e014      	b.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	4a24      	ldr	r2, [pc, #144]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242a:	6593      	str	r3, [r2, #88]	; 0x58
 800242c:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002438:	f7ff f9d8 	bl	80017ec <HAL_PWREx_GetVoltageRange>
 800243c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800243e:	4b1e      	ldr	r3, [pc, #120]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4a1d      	ldr	r2, [pc, #116]	; (80024b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002450:	d10b      	bne.n	800246a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b80      	cmp	r3, #128	; 0x80
 8002456:	d919      	bls.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2ba0      	cmp	r3, #160	; 0xa0
 800245c:	d902      	bls.n	8002464 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800245e:	2302      	movs	r3, #2
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	e013      	b.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002464:	2301      	movs	r3, #1
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	e010      	b.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b80      	cmp	r3, #128	; 0x80
 800246e:	d902      	bls.n	8002476 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002470:	2303      	movs	r3, #3
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	e00a      	b.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d102      	bne.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
 8002480:	e004      	b.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b70      	cmp	r3, #112	; 0x70
 8002486:	d101      	bne.n	800248c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002488:	2301      	movs	r3, #1
 800248a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 0207 	bic.w	r2, r3, #7
 8002494:	4909      	ldr	r1, [pc, #36]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40022000 	.word	0x40022000

080024c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024c8:	2300      	movs	r3, #0
 80024ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024cc:	2300      	movs	r3, #0
 80024ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d03f      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e4:	d01c      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ea:	d802      	bhi.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00e      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80024f0:	e01f      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80024f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024f6:	d003      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024fc:	d01c      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80024fe:	e018      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002500:	4b85      	ldr	r3, [pc, #532]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a84      	ldr	r2, [pc, #528]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800250c:	e015      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3304      	adds	r3, #4
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fab9 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 800251a:	4603      	mov	r3, r0
 800251c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800251e:	e00c      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3320      	adds	r3, #32
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fba0 	bl	8002c6c <RCCEx_PLLSAI2_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002530:	e003      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	74fb      	strb	r3, [r7, #19]
      break;
 8002536:	e000      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002538:	bf00      	nop
    }

    if(ret == HAL_OK)
 800253a:	7cfb      	ldrb	r3, [r7, #19]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10b      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002540:	4b75      	ldr	r3, [pc, #468]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800254e:	4972      	ldr	r1, [pc, #456]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002556:	e001      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d03f      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800256c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002570:	d01c      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002572:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002576:	d802      	bhi.n	800257e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00e      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800257c:	e01f      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800257e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002582:	d003      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002584:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002588:	d01c      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800258a:	e018      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800258c:	4b62      	ldr	r3, [pc, #392]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	4a61      	ldr	r2, [pc, #388]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002596:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002598:	e015      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3304      	adds	r3, #4
 800259e:	2100      	movs	r1, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fa73 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 80025a6:	4603      	mov	r3, r0
 80025a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025aa:	e00c      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	3320      	adds	r3, #32
 80025b0:	2100      	movs	r1, #0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fb5a 	bl	8002c6c <RCCEx_PLLSAI2_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025bc:	e003      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	74fb      	strb	r3, [r7, #19]
      break;
 80025c2:	e000      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80025c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025cc:	4b52      	ldr	r3, [pc, #328]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025da:	494f      	ldr	r1, [pc, #316]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025e2:	e001      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a0 	beq.w	8002736 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025fa:	4b47      	ldr	r3, [pc, #284]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800260a:	2300      	movs	r3, #0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4a40      	ldr	r2, [pc, #256]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261a:	6593      	str	r3, [r2, #88]	; 0x58
 800261c:	4b3e      	ldr	r3, [pc, #248]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002628:	2301      	movs	r3, #1
 800262a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800262c:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a3a      	ldr	r2, [pc, #232]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002638:	f7fe fae8 	bl	8000c0c <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800263e:	e009      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002640:	f7fe fae4 	bl	8000c0c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d902      	bls.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	74fb      	strb	r3, [r7, #19]
        break;
 8002652:	e005      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002654:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ef      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d15c      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002666:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002670:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01f      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	429a      	cmp	r2, r3
 8002682:	d019      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	4a20      	ldr	r2, [pc, #128]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026b0:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d016      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe faa3 	bl	8000c0c <HAL_GetTick>
 80026c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c8:	e00b      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7fe fa9f 	bl	8000c0c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d902      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	74fb      	strb	r3, [r7, #19]
            break;
 80026e0:	e006      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ec      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10c      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002706:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800270e:	e009      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	74bb      	strb	r3, [r7, #18]
 8002714:	e006      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002724:	7c7b      	ldrb	r3, [r7, #17]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d105      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272a:	4b9e      	ldr	r3, [pc, #632]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	4a9d      	ldr	r2, [pc, #628]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002734:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002742:	4b98      	ldr	r3, [pc, #608]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f023 0203 	bic.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	4994      	ldr	r1, [pc, #592]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002764:	4b8f      	ldr	r3, [pc, #572]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 020c 	bic.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	498c      	ldr	r1, [pc, #560]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002786:	4b87      	ldr	r3, [pc, #540]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	4983      	ldr	r1, [pc, #524]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a8:	4b7e      	ldr	r3, [pc, #504]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	497b      	ldr	r1, [pc, #492]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027ca:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d8:	4972      	ldr	r1, [pc, #456]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027ec:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	496a      	ldr	r1, [pc, #424]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800280e:	4b65      	ldr	r3, [pc, #404]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	4961      	ldr	r1, [pc, #388]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002830:	4b5c      	ldr	r3, [pc, #368]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	4959      	ldr	r1, [pc, #356]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002852:	4b54      	ldr	r3, [pc, #336]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002860:	4950      	ldr	r1, [pc, #320]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002874:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	4948      	ldr	r1, [pc, #288]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002896:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	493f      	ldr	r1, [pc, #252]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d028      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b8:	4b3a      	ldr	r3, [pc, #232]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c6:	4937      	ldr	r1, [pc, #220]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d6:	d106      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a31      	ldr	r2, [pc, #196]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
 80028e4:	e011      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028ee:	d10c      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	2101      	movs	r1, #1
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 f8c8 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 80028fc:	4603      	mov	r3, r0
 80028fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d028      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002916:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	491f      	ldr	r1, [pc, #124]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002934:	d106      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4a1a      	ldr	r2, [pc, #104]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800293c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002940:	60d3      	str	r3, [r2, #12]
 8002942:	e011      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800294c:	d10c      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f899 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d02b      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	4908      	ldr	r1, [pc, #32]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002992:	d109      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4a02      	ldr	r2, [pc, #8]	; (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800299e:	60d3      	str	r3, [r2, #12]
 80029a0:	e014      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80029a2:	bf00      	nop
 80029a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2101      	movs	r1, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 f867 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c2:	7cfb      	ldrb	r3, [r7, #19]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d02f      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e6:	4928      	ldr	r1, [pc, #160]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029f6:	d10d      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3304      	adds	r3, #4
 80029fc:	2102      	movs	r1, #2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f844 	bl	8002a8c <RCCEx_PLLSAI1_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d014      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	74bb      	strb	r3, [r7, #18]
 8002a12:	e011      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3320      	adds	r3, #32
 8002a22:	2102      	movs	r1, #2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 f921 	bl	8002c6c <RCCEx_PLLSAI2_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a52:	490d      	ldr	r1, [pc, #52]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a66:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a76:	4904      	ldr	r1, [pc, #16]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000

08002a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a9a:	4b73      	ldr	r3, [pc, #460]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d018      	beq.n	8002ad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aa6:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f003 0203 	and.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d10d      	bne.n	8002ad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002abe:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	091b      	lsrs	r3, r3, #4
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
       ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d044      	beq.n	8002b5c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	e041      	b.n	8002b5c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d00c      	beq.n	8002afa <RCCEx_PLLSAI1_Config+0x6e>
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d013      	beq.n	8002b0c <RCCEx_PLLSAI1_Config+0x80>
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d120      	bne.n	8002b2a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ae8:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d11d      	bne.n	8002b30 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af8:	e01a      	b.n	8002b30 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002afa:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0a:	e013      	b.n	8002b34 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b0c:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10f      	bne.n	8002b38 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b28:	e006      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2e:	e004      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b30:	bf00      	nop
 8002b32:	e002      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b34:	bf00      	nop
 8002b36:	e000      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b38:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b40:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	430b      	orrs	r3, r1
 8002b56:	4944      	ldr	r1, [pc, #272]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d17d      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b62:	4b41      	ldr	r3, [pc, #260]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6e:	f7fe f84d 	bl	8000c0c <HAL_GetTick>
 8002b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b74:	e009      	b.n	8002b8a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b76:	f7fe f849 	bl	8000c0c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d902      	bls.n	8002b8a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	73fb      	strb	r3, [r7, #15]
        break;
 8002b88:	e005      	b.n	8002b96 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b8a:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ef      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d160      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d111      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba2:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6892      	ldr	r2, [r2, #8]
 8002bb2:	0211      	lsls	r1, r2, #8
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	68d2      	ldr	r2, [r2, #12]
 8002bb8:	0912      	lsrs	r2, r2, #4
 8002bba:	0452      	lsls	r2, r2, #17
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	492a      	ldr	r1, [pc, #168]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	610b      	str	r3, [r1, #16]
 8002bc4:	e027      	b.n	8002c16 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d112      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bcc:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6892      	ldr	r2, [r2, #8]
 8002bdc:	0211      	lsls	r1, r2, #8
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6912      	ldr	r2, [r2, #16]
 8002be2:	0852      	lsrs	r2, r2, #1
 8002be4:	3a01      	subs	r2, #1
 8002be6:	0552      	lsls	r2, r2, #21
 8002be8:	430a      	orrs	r2, r1
 8002bea:	491f      	ldr	r1, [pc, #124]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	610b      	str	r3, [r1, #16]
 8002bf0:	e011      	b.n	8002c16 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6892      	ldr	r2, [r2, #8]
 8002c02:	0211      	lsls	r1, r2, #8
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6952      	ldr	r2, [r2, #20]
 8002c08:	0852      	lsrs	r2, r2, #1
 8002c0a:	3a01      	subs	r2, #1
 8002c0c:	0652      	lsls	r2, r2, #25
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	4915      	ldr	r1, [pc, #84]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fd fff3 	bl	8000c0c <HAL_GetTick>
 8002c26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c28:	e009      	b.n	8002c3e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c2a:	f7fd ffef 	bl	8000c0c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d902      	bls.n	8002c3e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	73fb      	strb	r3, [r7, #15]
          break;
 8002c3c:	e005      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ef      	beq.n	8002c2a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d106      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4903      	ldr	r1, [pc, #12]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021000 	.word	0x40021000

08002c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c7a:	4b68      	ldr	r3, [pc, #416]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c86:	4b65      	ldr	r3, [pc, #404]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0203 	and.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d10d      	bne.n	8002cb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
       ||
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c9e:	4b5f      	ldr	r3, [pc, #380]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
       ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d044      	beq.n	8002d3c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e041      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d00c      	beq.n	8002cda <RCCEx_PLLSAI2_Config+0x6e>
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d013      	beq.n	8002cec <RCCEx_PLLSAI2_Config+0x80>
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d120      	bne.n	8002d0a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cc8:	4b54      	ldr	r3, [pc, #336]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11d      	bne.n	8002d10 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd8:	e01a      	b.n	8002d10 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cda:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cea:	e013      	b.n	8002d14 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10f      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cf8:	4b48      	ldr	r3, [pc, #288]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d109      	bne.n	8002d18 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d08:	e006      	b.n	8002d18 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0e:	e004      	b.n	8002d1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d10:	bf00      	nop
 8002d12:	e002      	b.n	8002d1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d18:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10d      	bne.n	8002d3c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d20:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	430b      	orrs	r3, r1
 8002d36:	4939      	ldr	r1, [pc, #228]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d167      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a35      	ldr	r2, [pc, #212]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4e:	f7fd ff5d 	bl	8000c0c <HAL_GetTick>
 8002d52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d54:	e009      	b.n	8002d6a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d56:	f7fd ff59 	bl	8000c0c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d902      	bls.n	8002d6a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	73fb      	strb	r3, [r7, #15]
        break;
 8002d68:	e005      	b.n	8002d76 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d6a:	4b2c      	ldr	r3, [pc, #176]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ef      	bne.n	8002d56 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d14a      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d111      	bne.n	8002da6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6892      	ldr	r2, [r2, #8]
 8002d92:	0211      	lsls	r1, r2, #8
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68d2      	ldr	r2, [r2, #12]
 8002d98:	0912      	lsrs	r2, r2, #4
 8002d9a:	0452      	lsls	r2, r2, #17
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	491f      	ldr	r1, [pc, #124]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	614b      	str	r3, [r1, #20]
 8002da4:	e011      	b.n	8002dca <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da6:	4b1d      	ldr	r3, [pc, #116]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002dae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6892      	ldr	r2, [r2, #8]
 8002db6:	0211      	lsls	r1, r2, #8
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6912      	ldr	r2, [r2, #16]
 8002dbc:	0852      	lsrs	r2, r2, #1
 8002dbe:	3a01      	subs	r2, #1
 8002dc0:	0652      	lsls	r2, r2, #25
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	4915      	ldr	r1, [pc, #84]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dca:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7fd ff19 	bl	8000c0c <HAL_GetTick>
 8002dda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ddc:	e009      	b.n	8002df2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dde:	f7fd ff15 	bl	8000c0c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d902      	bls.n	8002df2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	73fb      	strb	r3, [r7, #15]
          break;
 8002df0:	e005      	b.n	8002dfe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002df2:	4b0a      	ldr	r3, [pc, #40]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0ef      	beq.n	8002dde <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d106      	bne.n	8002e12 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	4903      	ldr	r1, [pc, #12]	; (8002e1c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40021000 	.word	0x40021000

08002e20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e022      	b.n	8002e78 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d105      	bne.n	8002e4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fd fcdd 	bl	8000804 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f814 	bl	8002e80 <HAL_SD_InitCard>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00a      	b.n	8002e78 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b08e      	sub	sp, #56	; 0x38
 8002e84:	af04      	add	r7, sp, #16
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002e9c:	2376      	movs	r3, #118	; 0x76
 8002e9e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681d      	ldr	r5, [r3, #0]
 8002ea4:	466c      	mov	r4, sp
 8002ea6:	f107 0314 	add.w	r3, r7, #20
 8002eaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f001 fcfb 	bl	80048b4 <SDMMC_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e05f      	b.n	8002f90 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ede:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 fd30 	bl	800494a <SDMMC_PowerState_ON>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e049      	b.n	8002f90 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685a      	ldr	r2, [r3, #4]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f0a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 ffb5 	bl	8003e7c <SD_PowerON>
 8002f12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e02e      	b.n	8002f90 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fed4 	bl	8003ce0 <SD_InitCard>
 8002f38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00b      	beq.n	8002f58 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e01b      	b.n	8002f90 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f60:	4618      	mov	r0, r3
 8002f62:	f001 fd85 	bl	8004a70 <SDMMC_CmdBlockLength>
 8002f66:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00f      	beq.n	8002f8e <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_SD_InitCard+0x118>)
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bdb0      	pop	{r4, r5, r7, pc}
 8002f98:	004005ff 	.word	0x004005ff

08002f9c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08c      	sub	sp, #48	; 0x30
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0a9      	b.n	8003118 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	f040 80a2 	bne.w	8003116 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	441a      	add	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d907      	bls.n	8002ff6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e090      	b.n	8003118 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	4a45      	ldr	r2, [pc, #276]	; (8003120 <HAL_SD_ReadBlocks_DMA+0x184>)
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a44      	ldr	r2, [pc, #272]	; (8003124 <HAL_SD_ReadBlocks_DMA+0x188>)
 8003014:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	2200      	movs	r2, #0
 800301c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	3380      	adds	r3, #128	; 0x80
 8003028:	4619      	mov	r1, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	025b      	lsls	r3, r3, #9
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	f7fe f845 	bl	80010c0 <HAL_DMA_Start_IT>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00f      	beq.n	800305c <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a39      	ldr	r2, [pc, #228]	; (8003128 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e05d      	b.n	8003118 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	2b01      	cmp	r3, #1
 8003072:	d002      	beq.n	800307a <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	025b      	lsls	r3, r3, #9
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800307e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	025b      	lsls	r3, r3, #9
 8003084:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003086:	2390      	movs	r3, #144	; 0x90
 8003088:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800308a:	2302      	movs	r3, #2
 800308c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800308e:	2300      	movs	r3, #0
 8003090:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003092:	2301      	movs	r3, #1
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f107 0210 	add.w	r2, r7, #16
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f001 fcb9 	bl	8004a18 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d90a      	bls.n	80030c2 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2282      	movs	r2, #130	; 0x82
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 fd1d 	bl	8004af8 <SDMMC_CmdReadMultiBlock>
 80030be:	62f8      	str	r0, [r7, #44]	; 0x2c
 80030c0:	e009      	b.n	80030d6 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2281      	movs	r2, #129	; 0x81
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ce:	4618      	mov	r0, r3
 80030d0:	f001 fcf0 	bl	8004ab4 <SDMMC_CmdReadSingleBlock>
 80030d4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a11      	ldr	r2, [pc, #68]	; (8003128 <HAL_SD_ReadBlocks_DMA+0x18c>)
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e00a      	b.n	8003118 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8003110:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e000      	b.n	8003118 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8003116:	2302      	movs	r3, #2
  }
}
 8003118:	4618      	mov	r0, r3
 800311a:	3730      	adds	r7, #48	; 0x30
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	08003afb 	.word	0x08003afb
 8003124:	08003b6d 	.word	0x08003b6d
 8003128:	004005ff 	.word	0x004005ff

0800312c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08c      	sub	sp, #48	; 0x30
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d107      	bne.n	8003154 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0ac      	b.n	80032ae <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	f040 80a5 	bne.w	80032ac <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	441a      	add	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003172:	429a      	cmp	r2, r3
 8003174:	d907      	bls.n	8003186 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e093      	b.n	80032ae <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2203      	movs	r2, #3
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319a:	4a47      	ldr	r2, [pc, #284]	; (80032b8 <HAL_SD_WriteBlocks_DMA+0x18c>)
 800319c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	4a46      	ldr	r2, [pc, #280]	; (80032bc <HAL_SD_WriteBlocks_DMA+0x190>)
 80031a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031aa:	2200      	movs	r2, #0
 80031ac:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d002      	beq.n	80031bc <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	025b      	lsls	r3, r3, #9
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d90a      	bls.n	80031d8 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	22a0      	movs	r2, #160	; 0xa0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ce:	4618      	mov	r0, r3
 80031d0:	f001 fcd6 	bl	8004b80 <SDMMC_CmdWriteMultiBlock>
 80031d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80031d6:	e009      	b.n	80031ec <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2290      	movs	r2, #144	; 0x90
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 fca9 	bl	8004b3c <SDMMC_CmdWriteSingleBlock>
 80031ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80031ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d012      	beq.n	8003218 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a32      	ldr	r2, [pc, #200]	; (80032c0 <HAL_SD_WriteBlocks_DMA+0x194>)
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	431a      	orrs	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e04a      	b.n	80032ae <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3380      	adds	r3, #128	; 0x80
 8003234:	461a      	mov	r2, r3
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	025b      	lsls	r3, r3, #9
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	f7fd ff40 	bl	80010c0 <HAL_DMA_Start_IT>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <HAL_SD_WriteBlocks_DMA+0x194>)
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e020      	b.n	80032ae <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800326c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003270:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	025b      	lsls	r3, r3, #9
 8003276:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003278:	2390      	movs	r3, #144	; 0x90
 800327a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003284:	2301      	movs	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f107 0210 	add.w	r2, r7, #16
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f001 fbc0 	bl	8004a18 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 021a 	orr.w	r2, r2, #26
 80032a6:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3730      	adds	r7, #48	; 0x30
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	08003ad1 	.word	0x08003ad1
 80032bc:	08003b6d 	.word	0x08003b6d
 80032c0:	004005ff 	.word	0x004005ff

080032c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_SD_IRQHandler+0x2e>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 ffdc 	bl	80042a8 <SD_Read_IT>
 80032f0:	e155      	b.n	800359e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 808f 	beq.w	8003420 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800330a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800331a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800331e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0201 	bic.w	r2, r2, #1
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d039      	beq.n	80033ae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_SD_IRQHandler+0x8a>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d011      	beq.n	8003372 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f001 fc36 	bl	8004bc4 <SDMMC_CmdStopTransfer>
 8003358:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 f91f 	bl	80035b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f240 523a 	movw	r2, #1338	; 0x53a
 800337a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_SD_IRQHandler+0xda>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f002 f81c 	bl	80053dc <HAL_SD_RxCpltCallback>
 80033a4:	e0fb      	b.n	800359e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f002 f80e 	bl	80053c8 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80033ac:	e0f7      	b.n	800359e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80f2 	beq.w	800359e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d011      	beq.n	80033e8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fbfb 	bl	8004bc4 <SDMMC_CmdStopTransfer>
 80033ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f8e4 	bl	80035b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f040 80d5 	bne.w	800359e <HAL_SD_IRQHandler+0x2da>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 80cf 	bne.w	800359e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0208 	bic.w	r2, r2, #8
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f001 ffd5 	bl	80053c8 <HAL_SD_TxCpltCallback>
}
 800341e:	e0be      	b.n	800359e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_SD_IRQHandler+0x17c>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 ff86 	bl	800434a <SD_Write_IT>
 800343e:	e0ae      	b.n	800359e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80a7 	beq.w	800359e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	f043 0202 	orr.w	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347c:	f043 0208 	orr.w	r2, r3, #8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	f043 0220 	orr.w	r2, r3, #32
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b0:	f043 0210 	orr.w	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 fb74 	bl	8004bc4 <SDMMC_CmdStopTransfer>
 80034dc:	4602      	mov	r2, r0
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f855 	bl	80035b0 <HAL_SD_ErrorCallback>
}
 8003506:	e04a      	b.n	800359e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d045      	beq.n	800359e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d104      	bne.n	8003526 <HAL_SD_IRQHandler+0x262>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d011      	beq.n	800354a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <HAL_SD_IRQHandler+0x2e4>)
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fe62 	bl	80011fc <HAL_DMA_Abort_IT>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d02f      	beq.n	800359e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fb5e 	bl	8003c04 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003548:	e029      	b.n	800359e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d104      	bne.n	800355e <HAL_SD_IRQHandler+0x29a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d011      	beq.n	8003582 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4a12      	ldr	r2, [pc, #72]	; (80035ac <HAL_SD_IRQHandler+0x2e8>)
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd fe46 	bl	80011fc <HAL_DMA_Abort_IT>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d013      	beq.n	800359e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fb79 	bl	8003c72 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003580:	e00d      	b.n	800359e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f001 ff0c 	bl	80053b4 <HAL_SD_AbortCallback>
}
 800359c:	e7ff      	b.n	800359e <HAL_SD_IRQHandler+0x2da>
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	08003c05 	.word	0x08003c05
 80035ac:	08003c73 	.word	0x08003c73

080035b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d2:	0f9b      	lsrs	r3, r3, #30
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035de:	0e9b      	lsrs	r3, r3, #26
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f0:	0e1b      	lsrs	r3, r3, #24
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003602:	0c1b      	lsrs	r3, r3, #16
 8003604:	b2da      	uxtb	r2, r3
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	b2da      	uxtb	r2, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800361a:	b2da      	uxtb	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003624:	0d1b      	lsrs	r3, r3, #20
 8003626:	b29a      	uxth	r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	b2da      	uxtb	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003642:	0bdb      	lsrs	r3, r3, #15
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	b2da      	uxtb	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003654:	0b9b      	lsrs	r3, r3, #14
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	b2da      	uxtb	r2, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003678:	0b1b      	lsrs	r3, r3, #12
 800367a:	b2db      	uxtb	r3, r3
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	b2da      	uxtb	r2, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	2b00      	cmp	r3, #0
 8003692:	d163      	bne.n	800375c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003698:	009a      	lsls	r2, r3, #2
 800369a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800369e:	4013      	ands	r3, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80036a4:	0f92      	lsrs	r2, r2, #30
 80036a6:	431a      	orrs	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036b0:	0edb      	lsrs	r3, r3, #27
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c2:	0e1b      	lsrs	r3, r3, #24
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d4:	0d5b      	lsrs	r3, r3, #21
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e6:	0c9b      	lsrs	r3, r3, #18
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	0bdb      	lsrs	r3, r3, #15
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	b2da      	uxtb	r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	7e1b      	ldrb	r3, [r3, #24]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	3302      	adds	r3, #2
 800371c:	2201      	movs	r2, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003726:	fb02 f203 	mul.w	r2, r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	7a1b      	ldrb	r3, [r3, #8]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	2201      	movs	r2, #1
 800373a:	409a      	lsls	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003748:	0a52      	lsrs	r2, r2, #9
 800374a:	fb02 f203 	mul.w	r2, r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003758:	661a      	str	r2, [r3, #96]	; 0x60
 800375a:	e031      	b.n	80037c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	2b01      	cmp	r3, #1
 8003762:	d11d      	bne.n	80037a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003768:	041b      	lsls	r3, r3, #16
 800376a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	3301      	adds	r3, #1
 8003780:	029a      	lsls	r2, r3, #10
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003794:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	661a      	str	r2, [r3, #96]	; 0x60
 800379e:	e00f      	b.n	80037c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_SD_GetCardCSD+0x344>)
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e09d      	b.n	80038fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c4:	0b9b      	lsrs	r3, r3, #14
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d6:	09db      	lsrs	r3, r3, #7
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	0fdb      	lsrs	r3, r3, #31
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	0f5b      	lsrs	r3, r3, #29
 8003806:	b2db      	uxtb	r3, r3
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	b2da      	uxtb	r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	0e9b      	lsrs	r3, r3, #26
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	b2da      	uxtb	r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	0d9b      	lsrs	r3, r3, #22
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	b2da      	uxtb	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	0d5b      	lsrs	r3, r3, #21
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	b2da      	uxtb	r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	b2da      	uxtb	r2, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	0bdb      	lsrs	r3, r3, #15
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387e:	0b9b      	lsrs	r3, r3, #14
 8003880:	b2db      	uxtb	r3, r3
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	b2da      	uxtb	r2, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	0b5b      	lsrs	r3, r3, #13
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	b2da      	uxtb	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	0b1b      	lsrs	r3, r3, #12
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	004005ff 	.word	0x004005ff

0800390c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003964:	b5b0      	push	{r4, r5, r7, lr}
 8003966:	b08e      	sub	sp, #56	; 0x38
 8003968:	af04      	add	r7, sp, #16
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2203      	movs	r2, #3
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003980:	2b03      	cmp	r3, #3
 8003982:	d02e      	beq.n	80039e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398a:	d106      	bne.n	800399a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
 8003998:	e029      	b.n	80039ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a0:	d10a      	bne.n	80039b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fb20 	bl	8003fe8 <SD_WideBus_Enable>
 80039a8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38
 80039b6:	e01a      	b.n	80039ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fb5d 	bl	800407e <SD_WideBus_Disable>
 80039c4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	639a      	str	r2, [r3, #56]	; 0x38
 80039d2:	e00c      	b.n	80039ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	639a      	str	r2, [r3, #56]	; 0x38
 80039e0:	e005      	b.n	80039ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a24      	ldr	r2, [pc, #144]	; (8003a8c <HAL_SD_ConfigWideBusOperation+0x128>)
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003a04:	e01f      	b.n	8003a46 <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681d      	ldr	r5, [r3, #0]
 8003a2c:	466c      	mov	r4, sp
 8003a2e:	f107 0314 	add.w	r3, r7, #20
 8003a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a3a:	f107 0308 	add.w	r3, r7, #8
 8003a3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 ff37 	bl	80048b4 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f80e 	bl	8004a70 <SDMMC_CmdBlockLength>
 8003a54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00c      	beq.n	8003a76 <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <HAL_SD_ConfigWideBusOperation+0x128>)
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3728      	adds	r7, #40	; 0x28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	004005ff 	.word	0x004005ff

08003a90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa78 	bl	8003f98 <SD_SendStatus>
 8003aa8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003ac6:	693b      	ldr	r3, [r7, #16]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	2b82      	cmp	r3, #130	; 0x82
 8003b0e:	d111      	bne.n	8003b34 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 f855 	bl	8004bc4 <SDMMC_CmdStopTransfer>
 8003b1a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff fd3e 	bl	80035b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0208 	bic.w	r2, r2, #8
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f001 fc3d 	bl	80053dc <HAL_SD_RxCpltCallback>
#endif
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d002      	beq.n	8003b96 <SD_DMAError+0x2a>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d12d      	bne.n	8003bf2 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <SD_DMAError+0x94>)
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003bac:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 8003bba:	6978      	ldr	r0, [r7, #20]
 8003bbc:	f7ff ff68 	bl	8003a90 <HAL_SD_GetCardState>
 8003bc0:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d002      	beq.n	8003bce <SD_DMAError+0x62>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d10a      	bne.n	8003be4 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fff6 	bl	8004bc4 <SDMMC_CmdStopTransfer>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	431a      	orrs	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff fcdc 	bl	80035b0 <HAL_SD_ErrorCallback>
#endif
}
 8003bf8:	bf00      	nop
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	004005ff 	.word	0x004005ff

08003c04 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff ff37 	bl	8003a90 <HAL_SD_GetCardState>
 8003c22:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d002      	beq.n	8003c3e <SD_DMATxAbort+0x3a>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d10a      	bne.n	8003c54 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 ffbe 	bl	8004bc4 <SDMMC_CmdStopTransfer>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f001 fba9 	bl	80053b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003c62:	e002      	b.n	8003c6a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7ff fca3 	bl	80035b0 <HAL_SD_ErrorCallback>
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff ff00 	bl	8003a90 <HAL_SD_GetCardState>
 8003c90:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b06      	cmp	r3, #6
 8003ca4:	d002      	beq.n	8003cac <SD_DMARxAbort+0x3a>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d10a      	bne.n	8003cc2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 ff87 	bl	8004bc4 <SDMMC_CmdStopTransfer>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d103      	bne.n	8003cd2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f001 fb72 	bl	80053b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003cd0:	e002      	b.n	8003cd8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f7ff fc6c 	bl	80035b0 <HAL_SD_ErrorCallback>
}
 8003cd8:	bf00      	nop
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ce0:	b5b0      	push	{r4, r5, r7, lr}
 8003ce2:	b094      	sub	sp, #80	; 0x50
 8003ce4:	af04      	add	r7, sp, #16
 8003ce6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fe39 	bl	8004968 <SDMMC_GetPowerState>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003cfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d00:	e0b7      	b.n	8003e72 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d02f      	beq.n	8003d6a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 f862 	bl	8004dd8 <SDMMC_CmdSendCID>
 8003d14:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <SD_InitCard+0x40>
    {
      return errorstate;
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1e:	e0a8      	b.n	8003e72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2100      	movs	r1, #0
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fe63 	bl	80049f2 <SDMMC_GetResponse>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2104      	movs	r1, #4
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fe5a 	bl	80049f2 <SDMMC_GetResponse>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2108      	movs	r1, #8
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fe51 	bl	80049f2 <SDMMC_GetResponse>
 8003d50:	4602      	mov	r2, r0
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	210c      	movs	r1, #12
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fe48 	bl	80049f2 <SDMMC_GetResponse>
 8003d62:	4602      	mov	r2, r0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d00d      	beq.n	8003d8e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f107 020e 	add.w	r2, r7, #14
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 f868 	bl	8004e52 <SDMMC_CmdSetRelAdd>
 8003d82:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <SD_InitCard+0xae>
    {
      return errorstate;
 8003d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8c:	e071      	b.n	8003e72 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d036      	beq.n	8003e04 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003d96:	89fb      	ldrh	r3, [r7, #14]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f001 f832 	bl	8004e14 <SDMMC_CmdSendCSD>
 8003db0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <SD_InitCard+0xdc>
    {
      return errorstate;
 8003db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dba:	e05a      	b.n	8003e72 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fe15 	bl	80049f2 <SDMMC_GetResponse>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2104      	movs	r1, #4
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fe0c 	bl	80049f2 <SDMMC_GetResponse>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2108      	movs	r1, #8
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fe03 	bl	80049f2 <SDMMC_GetResponse>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	210c      	movs	r1, #12
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fdfa 	bl	80049f2 <SDMMC_GetResponse>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2104      	movs	r1, #4
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fdf1 	bl	80049f2 <SDMMC_GetResponse>
 8003e10:	4603      	mov	r3, r0
 8003e12:	0d1a      	lsrs	r2, r3, #20
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003e18:	f107 0310 	add.w	r3, r7, #16
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fbd0 	bl	80035c4 <HAL_SD_GetCardCSD>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e2e:	e020      	b.n	8003e72 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	f04f 0400 	mov.w	r4, #0
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4623      	mov	r3, r4
 8003e42:	4608      	mov	r0, r1
 8003e44:	f000 fee0 	bl	8004c08 <SDMMC_CmdSelDesel>
 8003e48:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <SD_InitCard+0x174>
  {
    return errorstate;
 8003e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e52:	e00e      	b.n	8003e72 <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681d      	ldr	r5, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	466c      	mov	r4, sp
 8003e5c:	f103 0210 	add.w	r2, r3, #16
 8003e60:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e66:	3304      	adds	r3, #4
 8003e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e6a:	4628      	mov	r0, r5
 8003e6c:	f000 fd22 	bl	80048b4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3740      	adds	r7, #64	; 0x40
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e7c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 feda 	bl	8004c4e <SDMMC_CmdGoIdleState>
 8003e9a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	e072      	b.n	8003f8c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 feed 	bl	8004c8a <SDMMC_CmdOperCond>
 8003eb0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00d      	beq.n	8003ed4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fec3 	bl	8004c4e <SDMMC_CmdGoIdleState>
 8003ec8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <SD_PowerON+0x5e>
    {
      return errorstate;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	e05b      	b.n	8003f8c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d137      	bne.n	8003f52 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 feed 	bl	8004cc8 <SDMMC_CmdAppCommand>
 8003eee:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d02d      	beq.n	8003f52 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ef6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003efa:	e047      	b.n	8003f8c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fee0 	bl	8004cc8 <SDMMC_CmdAppCommand>
 8003f08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <SD_PowerON+0x98>
    {
      return errorstate;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	e03b      	b.n	8003f8c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	491e      	ldr	r1, [pc, #120]	; (8003f94 <SD_PowerON+0x118>)
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fef6 	bl	8004d0c <SDMMC_CmdAppOperCommand>
 8003f20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f2c:	e02e      	b.n	8003f8c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fd5c 	bl	80049f2 <SDMMC_GetResponse>
 8003f3a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	0fdb      	lsrs	r3, r3, #31
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <SD_PowerON+0xcc>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <SD_PowerON+0xce>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]

    count++;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d802      	bhi.n	8003f62 <SD_PowerON+0xe6>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0cc      	beq.n	8003efc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d902      	bls.n	8003f72 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f70:	e00c      	b.n	8003f8c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
 8003f82:	e002      	b.n	8003f8a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	c1100000 	.word	0xc1100000

08003f98 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d102      	bne.n	8003fae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003fa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fac:	e018      	b.n	8003fe0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	041b      	lsls	r3, r3, #16
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f000 ff6a 	bl	8004e94 <SDMMC_CmdSendStatus>
 8003fc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <SD_SendStatus+0x34>
  {
    return errorstate;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	e009      	b.n	8003fe0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fd0d 	bl	80049f2 <SDMMC_GetResponse>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fcf7 	bl	80049f2 <SDMMC_GetResponse>
 8004004:	4603      	mov	r3, r0
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800400e:	d102      	bne.n	8004016 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004014:	e02f      	b.n	8004076 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004016:	f107 030c 	add.w	r3, r7, #12
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 f879 	bl	8004114 <SD_FindSCR>
 8004022:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	e023      	b.n	8004076 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01c      	beq.n	8004072 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f000 fe3f 	bl	8004cc8 <SDMMC_CmdAppCommand>
 800404a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	e00f      	b.n	8004076 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2102      	movs	r1, #2
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fe78 	bl	8004d52 <SDMMC_CmdBusWidth>
 8004062:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	e003      	b.n	8004076 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800406e:	2300      	movs	r3, #0
 8004070:	e001      	b.n	8004076 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004072:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b086      	sub	sp, #24
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	2300      	movs	r3, #0
 800408c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fcac 	bl	80049f2 <SDMMC_GetResponse>
 800409a:	4603      	mov	r3, r0
 800409c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040a4:	d102      	bne.n	80040ac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80040a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040aa:	e02f      	b.n	800410c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80040ac:	f107 030c 	add.w	r3, r7, #12
 80040b0:	4619      	mov	r1, r3
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f82e 	bl	8004114 <SD_FindSCR>
 80040b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	e023      	b.n	800410c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01c      	beq.n	8004108 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	4619      	mov	r1, r3
 80040da:	4610      	mov	r0, r2
 80040dc:	f000 fdf4 	bl	8004cc8 <SDMMC_CmdAppCommand>
 80040e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	e00f      	b.n	800410c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fe2d 	bl	8004d52 <SDMMC_CmdBusWidth>
 80040f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	e003      	b.n	800410c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004104:	2300      	movs	r3, #0
 8004106:	e001      	b.n	800410c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004108:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b08f      	sub	sp, #60	; 0x3c
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800411e:	f7fc fd75 	bl	8000c0c <HAL_GetTick>
 8004122:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004128:	2300      	movs	r3, #0
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2108      	movs	r1, #8
 800413a:	4618      	mov	r0, r3
 800413c:	f000 fc98 	bl	8004a70 <SDMMC_CmdBlockLength>
 8004140:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	e0a9      	b.n	80042a0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	041b      	lsls	r3, r3, #16
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f000 fdb5 	bl	8004cc8 <SDMMC_CmdAppCommand>
 800415e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	e09a      	b.n	80042a0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800416e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004170:	2308      	movs	r3, #8
 8004172:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004174:	2330      	movs	r3, #48	; 0x30
 8004176:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004178:	2302      	movs	r3, #2
 800417a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800417c:	2300      	movs	r3, #0
 800417e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004180:	2301      	movs	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f107 0210 	add.w	r2, r7, #16
 800418c:	4611      	mov	r1, r2
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fc42 	bl	8004a18 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fdfc 	bl	8004d96 <SDMMC_CmdSendSCR>
 800419e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d022      	beq.n	80041ec <SD_FindSCR+0xd8>
  {
    return errorstate;
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	e07a      	b.n	80042a0 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00e      	beq.n	80041d6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6819      	ldr	r1, [r3, #0]
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f107 0208 	add.w	r2, r7, #8
 80041c4:	18d4      	adds	r4, r2, r3
 80041c6:	4608      	mov	r0, r1
 80041c8:	f000 fba1 	bl	800490e <SDMMC_ReadFIFO>
 80041cc:	4603      	mov	r3, r0
 80041ce:	6023      	str	r3, [r4, #0]
      index++;
 80041d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d2:	3301      	adds	r3, #1
 80041d4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80041d6:	f7fc fd19 	bl	8000c0c <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041e4:	d102      	bne.n	80041ec <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80041e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041ea:	e059      	b.n	80042a0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f2:	f240 432a 	movw	r3, #1066	; 0x42a
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0d6      	beq.n	80041aa <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2208      	movs	r2, #8
 8004210:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004212:	2308      	movs	r3, #8
 8004214:	e044      	b.n	80042a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2202      	movs	r2, #2
 800422a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800422c:	2302      	movs	r3, #2
 800422e:	e037      	b.n	80042a0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2220      	movs	r2, #32
 8004244:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004246:	2320      	movs	r3, #32
 8004248:	e02a      	b.n	80042a0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004252:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	061a      	lsls	r2, r3, #24
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004260:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800426a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	0e1b      	lsrs	r3, r3, #24
 8004270:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004274:	601a      	str	r2, [r3, #0]
    scr++;
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	3304      	adds	r3, #4
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	061a      	lsls	r2, r3, #24
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	021b      	lsls	r3, r3, #8
 8004284:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004288:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004292:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	0e1b      	lsrs	r3, r3, #24
 8004298:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	373c      	adds	r7, #60	; 0x3c
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd90      	pop	{r4, r7, pc}

080042a8 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d03f      	beq.n	8004342 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e033      	b.n	8004330 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fb1e 	bl	800490e <SDMMC_ReadFIFO>
 80042d2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3301      	adds	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3301      	adds	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3301      	adds	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3b01      	subs	r3, #1
 8004312:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	0e1b      	lsrs	r3, r3, #24
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3301      	adds	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	3b01      	subs	r3, #1
 8004328:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b07      	cmp	r3, #7
 8004334:	d9c8      	bls.n	80042c8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004342:	bf00      	nop
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d043      	beq.n	80043ec <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e037      	b.n	80043da <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3301      	adds	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3b01      	subs	r3, #1
 800437a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	021a      	lsls	r2, r3, #8
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4313      	orrs	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	3b01      	subs	r3, #1
 8004392:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	041a      	lsls	r2, r3, #16
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4313      	orrs	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3301      	adds	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	061a      	lsls	r2, r3, #24
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f107 0208 	add.w	r2, r7, #8
 80043cc:	4611      	mov	r1, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 faaa 	bl	8004928 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	3301      	adds	r3, #1
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b07      	cmp	r3, #7
 80043de:	d9c4      	bls.n	800436a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80043ec:	bf00      	nop
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e01d      	b.n	8004442 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d106      	bne.n	8004420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f815 	bl	800444a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f000 f986 	bl	8004744 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
	...

08004460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <HAL_TIM_Base_Start_IT+0x50>)
 8004480:	4013      	ands	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b06      	cmp	r3, #6
 8004488:	d00b      	beq.n	80044a2 <HAL_TIM_Base_Start_IT+0x42>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d007      	beq.n	80044a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0201 	orr.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	00010007 	.word	0x00010007

080044b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d122      	bne.n	8004510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d11b      	bne.n	8004510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0202 	mvn.w	r2, #2
 80044e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f905 	bl	8004706 <HAL_TIM_IC_CaptureCallback>
 80044fc:	e005      	b.n	800450a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8f7 	bl	80046f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f908 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b04      	cmp	r3, #4
 800451c:	d122      	bne.n	8004564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d11b      	bne.n	8004564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0204 	mvn.w	r2, #4
 8004534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f8db 	bl	8004706 <HAL_TIM_IC_CaptureCallback>
 8004550:	e005      	b.n	800455e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8cd 	bl	80046f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8de 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b08      	cmp	r3, #8
 8004570:	d122      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b08      	cmp	r3, #8
 800457e:	d11b      	bne.n	80045b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0208 	mvn.w	r2, #8
 8004588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2204      	movs	r2, #4
 800458e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f8b1 	bl	8004706 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8a3 	bl	80046f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f8b4 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d122      	bne.n	800460c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 0310 	and.w	r3, r3, #16
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d11b      	bne.n	800460c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0210 	mvn.w	r2, #16
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2208      	movs	r2, #8
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f887 	bl	8004706 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f879 	bl	80046f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f88a 	bl	800471a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b01      	cmp	r3, #1
 8004618:	d10e      	bne.n	8004638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d107      	bne.n	8004638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0201 	mvn.w	r2, #1
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc f8aa 	bl	800078c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004642:	2b80      	cmp	r3, #128	; 0x80
 8004644:	d10e      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d107      	bne.n	8004664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800465c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f914 	bl	800488c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004672:	d10e      	bne.n	8004692 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467e:	2b80      	cmp	r3, #128	; 0x80
 8004680:	d107      	bne.n	8004692 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800468a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f907 	bl	80048a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b40      	cmp	r3, #64	; 0x40
 800469e:	d10e      	bne.n	80046be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f838 	bl	800472e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d107      	bne.n	80046ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f06f 0220 	mvn.w	r2, #32
 80046e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f8c7 	bl	8004878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ea:	bf00      	nop
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a40      	ldr	r2, [pc, #256]	; (8004858 <TIM_Base_SetConfig+0x114>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004762:	d00f      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3d      	ldr	r2, [pc, #244]	; (800485c <TIM_Base_SetConfig+0x118>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a3c      	ldr	r2, [pc, #240]	; (8004860 <TIM_Base_SetConfig+0x11c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3b      	ldr	r2, [pc, #236]	; (8004864 <TIM_Base_SetConfig+0x120>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3a      	ldr	r2, [pc, #232]	; (8004868 <TIM_Base_SetConfig+0x124>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d108      	bne.n	8004796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2f      	ldr	r2, [pc, #188]	; (8004858 <TIM_Base_SetConfig+0x114>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01f      	beq.n	80047de <TIM_Base_SetConfig+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a4:	d01b      	beq.n	80047de <TIM_Base_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2c      	ldr	r2, [pc, #176]	; (800485c <TIM_Base_SetConfig+0x118>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d017      	beq.n	80047de <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <TIM_Base_SetConfig+0x11c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <TIM_Base_SetConfig+0x9a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <TIM_Base_SetConfig+0x120>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00f      	beq.n	80047de <TIM_Base_SetConfig+0x9a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a29      	ldr	r2, [pc, #164]	; (8004868 <TIM_Base_SetConfig+0x124>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00b      	beq.n	80047de <TIM_Base_SetConfig+0x9a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a28      	ldr	r2, [pc, #160]	; (800486c <TIM_Base_SetConfig+0x128>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <TIM_Base_SetConfig+0x9a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a27      	ldr	r2, [pc, #156]	; (8004870 <TIM_Base_SetConfig+0x12c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_Base_SetConfig+0x9a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a26      	ldr	r2, [pc, #152]	; (8004874 <TIM_Base_SetConfig+0x130>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d108      	bne.n	80047f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a10      	ldr	r2, [pc, #64]	; (8004858 <TIM_Base_SetConfig+0x114>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00f      	beq.n	800483c <TIM_Base_SetConfig+0xf8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a12      	ldr	r2, [pc, #72]	; (8004868 <TIM_Base_SetConfig+0x124>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00b      	beq.n	800483c <TIM_Base_SetConfig+0xf8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a11      	ldr	r2, [pc, #68]	; (800486c <TIM_Base_SetConfig+0x128>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d007      	beq.n	800483c <TIM_Base_SetConfig+0xf8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a10      	ldr	r2, [pc, #64]	; (8004870 <TIM_Base_SetConfig+0x12c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_Base_SetConfig+0xf8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a0f      	ldr	r2, [pc, #60]	; (8004874 <TIM_Base_SetConfig+0x130>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d103      	bne.n	8004844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	615a      	str	r2, [r3, #20]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800
 8004864:	40000c00 	.word	0x40000c00
 8004868:	40013400 	.word	0x40013400
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800

08004878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80048b4:	b084      	sub	sp, #16
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	f107 001c 	add.w	r0, r7, #28
 80048c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80048ca:	6a3b      	ldr	r3, [r7, #32]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80048d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 80048d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80048da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80048de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80048e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80048f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	b004      	add	sp, #16
 800490c:	4770      	bx	lr

0800490e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b082      	sub	sp, #8
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2203      	movs	r2, #3
 8004956:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004958:	2002      	movs	r0, #2
 800495a:	f7fc f963 	bl	8000c24 <HAL_Delay>

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0303 	and.w	r3, r3, #3
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80049a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80049ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80049be:	f023 030f 	bic.w	r3, r3, #15
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	b2db      	uxtb	r3, r3
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3314      	adds	r3, #20
 8004a00:	461a      	mov	r2, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	4413      	add	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a3e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004a44:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004a4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	431a      	orrs	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0

}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004a7e:	2310      	movs	r3, #16
 8004a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a82:	2340      	movs	r3, #64	; 0x40
 8004a84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a90:	f107 0308 	add.w	r3, r7, #8
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7ff ff74 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	2110      	movs	r1, #16
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa40 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004aa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004ac2:	2311      	movs	r3, #17
 8004ac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ac6:	2340      	movs	r3, #64	; 0x40
 8004ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ad4:	f107 0308 	add.w	r3, r7, #8
 8004ad8:	4619      	mov	r1, r3
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff ff52 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae4:	2111      	movs	r1, #17
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa1e 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aee:	69fb      	ldr	r3, [r7, #28]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004b06:	2312      	movs	r3, #18
 8004b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b0a:	2340      	movs	r3, #64	; 0x40
 8004b0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b18:	f107 0308 	add.w	r3, r7, #8
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff ff30 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b28:	2112      	movs	r1, #18
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f9fc 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b32:	69fb      	ldr	r3, [r7, #28]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004b4a:	2318      	movs	r3, #24
 8004b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b4e:	2340      	movs	r3, #64	; 0x40
 8004b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b5c:	f107 0308 	add.w	r3, r7, #8
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7ff ff0e 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	2118      	movs	r1, #24
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f9da 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004b74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b76:	69fb      	ldr	r3, [r7, #28]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004b8e:	2319      	movs	r3, #25
 8004b90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b92:	2340      	movs	r3, #64	; 0x40
 8004b94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ba0:	f107 0308 	add.w	r3, r7, #8
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff feec 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	2119      	movs	r1, #25
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9b8 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004bb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bba:	69fb      	ldr	r3, [r7, #28]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3720      	adds	r7, #32
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bd4:	2340      	movs	r3, #64	; 0x40
 8004bd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004be0:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fecb 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <SDMMC_CmdStopTransfer+0x40>)
 8004bf0:	210c      	movs	r1, #12
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f998 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004bf8:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3720      	adds	r7, #32
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	05f5e100 	.word	0x05f5e100

08004c08 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08a      	sub	sp, #40	; 0x28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004c18:	2307      	movs	r3, #7
 8004c1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c1c:	2340      	movs	r3, #64	; 0x40
 8004c1e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c28:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c2a:	f107 0310 	add.w	r3, r7, #16
 8004c2e:	4619      	mov	r1, r3
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f7ff fea7 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	2107      	movs	r1, #7
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f973 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004c42:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3728      	adds	r7, #40	; 0x28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b088      	sub	sp, #32
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c6c:	f107 0308 	add.w	r3, r7, #8
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff fe86 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f92d 	bl	8004ed8 <SDMMC_GetCmdError>
 8004c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c80:	69fb      	ldr	r3, [r7, #28]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b088      	sub	sp, #32
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004c92:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004c96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004c98:	2308      	movs	r3, #8
 8004c9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004caa:	f107 0308 	add.w	r3, r7, #8
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7ff fe67 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fb16 	bl	80052e8 <SDMMC_GetCmdResp7>
 8004cbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004cd6:	2337      	movs	r3, #55	; 0x37
 8004cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004cda:	2340      	movs	r3, #64	; 0x40
 8004cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ce8:	f107 0308 	add.w	r3, r7, #8
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fe48 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf8:	2137      	movs	r1, #55	; 0x37
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f914 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004d00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d02:	69fb      	ldr	r3, [r7, #28]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d20:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004d22:	2329      	movs	r3, #41	; 0x29
 8004d24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d26:	2340      	movs	r3, #64	; 0x40
 8004d28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d34:	f107 0308 	add.w	r3, r7, #8
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fe22 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fa23 	bl	800518c <SDMMC_GetCmdResp3>
 8004d46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d48:	69fb      	ldr	r3, [r7, #28]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b088      	sub	sp, #32
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004d60:	2306      	movs	r3, #6
 8004d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d64:	2340      	movs	r3, #64	; 0x40
 8004d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4619      	mov	r1, r3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff fe03 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d82:	2106      	movs	r1, #6
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f8cf 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004d8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b088      	sub	sp, #32
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004da2:	2333      	movs	r3, #51	; 0x33
 8004da4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004da6:	2340      	movs	r3, #64	; 0x40
 8004da8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004db4:	f107 0308 	add.w	r3, r7, #8
 8004db8:	4619      	mov	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff fde2 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc4:	2133      	movs	r1, #51	; 0x33
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8ae 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004dcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dce:	69fb      	ldr	r3, [r7, #28]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004de4:	2302      	movs	r3, #2
 8004de6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004de8:	23c0      	movs	r3, #192	; 0xc0
 8004dea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004df0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff fdc1 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f97c 	bl	8005100 <SDMMC_GetCmdResp2>
 8004e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e0a:	69fb      	ldr	r3, [r7, #28]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004e22:	2309      	movs	r3, #9
 8004e24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004e26:	23c0      	movs	r3, #192	; 0xc0
 8004e28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e34:	f107 0308 	add.w	r3, r7, #8
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fda2 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f95d 	bl	8005100 <SDMMC_GetCmdResp2>
 8004e46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e48:	69fb      	ldr	r3, [r7, #28]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b088      	sub	sp, #32
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004e60:	2303      	movs	r3, #3
 8004e62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e64:	2340      	movs	r3, #64	; 0x40
 8004e66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e72:	f107 0308 	add.w	r3, r7, #8
 8004e76:	4619      	mov	r1, r3
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff fd83 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	2103      	movs	r1, #3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f9bc 	bl	8005200 <SDMMC_GetCmdResp6>
 8004e88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e8a:	69fb      	ldr	r3, [r7, #28]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004ea2:	230d      	movs	r3, #13
 8004ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ea6:	2340      	movs	r3, #64	; 0x40
 8004ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004eb4:	f107 0308 	add.w	r3, r7, #8
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fd62 	bl	8004984 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec4:	210d      	movs	r1, #13
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f82e 	bl	8004f28 <SDMMC_GetCmdResp1>
 8004ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ece:	69fb      	ldr	r3, [r7, #28]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004ed8:	b490      	push	{r4, r7}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ee0:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <SDMMC_GetCmdError+0x48>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <SDMMC_GetCmdError+0x4c>)
 8004ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eea:	0a5b      	lsrs	r3, r3, #9
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004ef4:	4623      	mov	r3, r4
 8004ef6:	1e5c      	subs	r4, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d102      	bne.n	8004f02 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004efc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f00:	e009      	b.n	8004f16 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f2      	beq.n	8004ef4 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	22c5      	movs	r2, #197	; 0xc5
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc90      	pop	{r4, r7}
 8004f1e:	4770      	bx	lr
 8004f20:	20000000 	.word	0x20000000
 8004f24:	10624dd3 	.word	0x10624dd3

08004f28 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	460b      	mov	r3, r1
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004f36:	4b6f      	ldr	r3, [pc, #444]	; (80050f4 <SDMMC_GetCmdResp1+0x1cc>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a6f      	ldr	r2, [pc, #444]	; (80050f8 <SDMMC_GetCmdResp1+0x1d0>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	0a5b      	lsrs	r3, r3, #9
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004f48:	4623      	mov	r3, r4
 8004f4a:	1e5c      	subs	r4, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f54:	e0c9      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5a:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <SDMMC_GetCmdResp1+0x20>
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1eb      	bne.n	8004f48 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2204      	movs	r2, #4
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f82:	2304      	movs	r3, #4
 8004f84:	e0b1      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0a6      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	22c5      	movs	r2, #197	; 0xc5
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff fd18 	bl	80049d8 <SDMMC_GetCommandResponse>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	7afb      	ldrb	r3, [r7, #11]
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d001      	beq.n	8004fb6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e099      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff fd1a 	bl	80049f2 <SDMMC_GetResponse>
 8004fbe:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	4b4e      	ldr	r3, [pc, #312]	; (80050fc <SDMMC_GetCmdResp1+0x1d4>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e08d      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	da02      	bge.n	8004fda <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004fd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd8:	e087      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	e080      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	e079      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005004:	e071      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005014:	e069      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005024:	e061      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005034:	e059      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005044:	e051      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005054:	e049      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005060:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005064:	e041      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005074:	e039      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005084:	e031      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005090:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005094:	e029      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80050a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050a4:	e021      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80050b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80050b4:	e019      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80050c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80050c4:	e011      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80050d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80050d4:	e009      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80050e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80050e4:	e001      	b.n	80050ea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80050e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd90      	pop	{r4, r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000000 	.word	0x20000000
 80050f8:	10624dd3 	.word	0x10624dd3
 80050fc:	fdffe008 	.word	0xfdffe008

08005100 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005100:	b490      	push	{r4, r7}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005108:	4b1e      	ldr	r3, [pc, #120]	; (8005184 <SDMMC_GetCmdResp2+0x84>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a1e      	ldr	r2, [pc, #120]	; (8005188 <SDMMC_GetCmdResp2+0x88>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	0a5b      	lsrs	r3, r3, #9
 8005114:	f241 3288 	movw	r2, #5000	; 0x1388
 8005118:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 800511c:	4623      	mov	r3, r4
 800511e:	1e5c      	subs	r4, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d102      	bne.n	800512a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005124:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005128:	e026      	b.n	8005178 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <SDMMC_GetCmdResp2+0x1c>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1eb      	bne.n	800511c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2204      	movs	r2, #4
 8005154:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005156:	2304      	movs	r3, #4
 8005158:	e00e      	b.n	8005178 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d004      	beq.n	8005170 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800516c:	2301      	movs	r3, #1
 800516e:	e003      	b.n	8005178 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	22c5      	movs	r2, #197	; 0xc5
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bc90      	pop	{r4, r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000000 	.word	0x20000000
 8005188:	10624dd3 	.word	0x10624dd3

0800518c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800518c:	b490      	push	{r4, r7}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005194:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <SDMMC_GetCmdResp3+0x6c>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a18      	ldr	r2, [pc, #96]	; (80051fc <SDMMC_GetCmdResp3+0x70>)
 800519a:	fba2 2303 	umull	r2, r3, r2, r3
 800519e:	0a5b      	lsrs	r3, r3, #9
 80051a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 80051a8:	4623      	mov	r3, r4
 80051aa:	1e5c      	subs	r4, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d102      	bne.n	80051b6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051b4:	e01b      	b.n	80051ee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d0f0      	beq.n	80051a8 <SDMMC_GetCmdResp3+0x1c>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1eb      	bne.n	80051a8 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d004      	beq.n	80051e6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2204      	movs	r2, #4
 80051e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80051e2:	2304      	movs	r3, #4
 80051e4:	e003      	b.n	80051ee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	22c5      	movs	r2, #197	; 0xc5
 80051ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc90      	pop	{r4, r7}
 80051f6:	4770      	bx	lr
 80051f8:	20000000 	.word	0x20000000
 80051fc:	10624dd3 	.word	0x10624dd3

08005200 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	460b      	mov	r3, r1
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800520e:	4b34      	ldr	r3, [pc, #208]	; (80052e0 <SDMMC_GetCmdResp6+0xe0>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a34      	ldr	r2, [pc, #208]	; (80052e4 <SDMMC_GetCmdResp6+0xe4>)
 8005214:	fba2 2303 	umull	r2, r3, r2, r3
 8005218:	0a5b      	lsrs	r3, r3, #9
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8005222:	4623      	mov	r3, r4
 8005224:	1e5c      	subs	r4, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d102      	bne.n	8005230 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800522a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800522e:	e052      	b.n	80052d6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f0      	beq.n	8005222 <SDMMC_GetCmdResp6+0x22>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1eb      	bne.n	8005222 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	f003 0304 	and.w	r3, r3, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2204      	movs	r2, #4
 800525a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800525c:	2304      	movs	r3, #4
 800525e:	e03a      	b.n	80052d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005272:	2301      	movs	r3, #1
 8005274:	e02f      	b.n	80052d6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff fbae 	bl	80049d8 <SDMMC_GetCommandResponse>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	7afb      	ldrb	r3, [r7, #11]
 8005282:	4293      	cmp	r3, r2
 8005284:	d001      	beq.n	800528a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005286:	2301      	movs	r3, #1
 8005288:	e025      	b.n	80052d6 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	22c5      	movs	r2, #197	; 0xc5
 800528e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005290:	2100      	movs	r1, #0
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f7ff fbad 	bl	80049f2 <SDMMC_GetResponse>
 8005298:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	0c1b      	lsrs	r3, r3, #16
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e011      	b.n	80052d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80052bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052c0:	e009      	b.n	80052d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80052cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052d0:	e001      	b.n	80052d6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80052d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd90      	pop	{r4, r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000000 	.word	0x20000000
 80052e4:	10624dd3 	.word	0x10624dd3

080052e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80052e8:	b490      	push	{r4, r7}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052f0:	4b21      	ldr	r3, [pc, #132]	; (8005378 <SDMMC_GetCmdResp7+0x90>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a21      	ldr	r2, [pc, #132]	; (800537c <SDMMC_GetCmdResp7+0x94>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	0a5b      	lsrs	r3, r3, #9
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8005304:	4623      	mov	r3, r4
 8005306:	1e5c      	subs	r4, r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800530c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005310:	e02c      	b.n	800536c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <SDMMC_GetCmdResp7+0x1c>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1eb      	bne.n	8005304 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d004      	beq.n	8005342 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2204      	movs	r2, #4
 800533c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800533e:	2304      	movs	r3, #4
 8005340:	e014      	b.n	800536c <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005354:	2301      	movs	r3, #1
 8005356:	e009      	b.n	800536c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2240      	movs	r2, #64	; 0x40
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800536a:	2300      	movs	r3, #0

}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bc90      	pop	{r4, r7}
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20000000 	.word	0x20000000
 800537c:	10624dd3 	.word	0x10624dd3

08005380 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005384:	4904      	ldr	r1, [pc, #16]	; (8005398 <MX_FATFS_Init+0x18>)
 8005386:	4805      	ldr	r0, [pc, #20]	; (800539c <MX_FATFS_Init+0x1c>)
 8005388:	f002 fd34 	bl	8007df4 <FATFS_LinkDriver>
 800538c:	4603      	mov	r3, r0
 800538e:	461a      	mov	r2, r3
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <MX_FATFS_Init+0x20>)
 8005392:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005394:	bf00      	nop
 8005396:	bd80      	pop	{r7, pc}
 8005398:	20003244 	.word	0x20003244
 800539c:	0800b48c 	.word	0x0800b48c
 80053a0:	20003240 	.word	0x20003240

080053a4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80053a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80053bc:	f7fa ff78 	bl	80002b0 <BSP_SD_AbortCallback>
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80053d0:	f000 f9bc 	bl	800574c <BSP_SD_WriteCpltCallback>
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80053e4:	f000 f9c0 	bl	8005768 <BSP_SD_ReadCpltCallback>
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80053f6:	2301      	movs	r3, #1
 80053f8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80053fa:	f000 f80b 	bl	8005414 <BSP_PlatformIsDetected>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005404:	2300      	movs	r3, #0
 8005406:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	b2db      	uxtb	r3, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800541a:	2301      	movs	r3, #1
 800541c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800541e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005422:	4806      	ldr	r0, [pc, #24]	; (800543c <BSP_PlatformIsDetected+0x28>)
 8005424:	f7fc f9b2 	bl	800178c <HAL_GPIO_ReadPin>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800542e:	2300      	movs	r3, #0
 8005430:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8005432:	79fb      	ldrb	r3, [r7, #7]
}  
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	48000c00 	.word	0x48000c00

08005440 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8005448:	f002 fd6c 	bl	8007f24 <osKernelSysTick>
 800544c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800544e:	e006      	b.n	800545e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005450:	f7fa ff1e 	bl	8000290 <BSP_SD_GetCardState>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800545a:	2300      	movs	r3, #0
 800545c:	e009      	b.n	8005472 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800545e:	f002 fd61 	bl	8007f24 <osKernelSysTick>
 8005462:	4602      	mov	r2, r0
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	d8f0      	bhi.n	8005450 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800546e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <SD_CheckStatus+0x38>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800548c:	f7fa ff00 	bl	8000290 <BSP_SD_GetCardState>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d107      	bne.n	80054a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <SD_CheckStatus+0x38>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <SD_CheckStatus+0x38>)
 80054a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80054a6:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <SD_CheckStatus+0x38>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	b2db      	uxtb	r3, r3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	2000000c 	.word	0x2000000c

080054b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80054b8:	b590      	push	{r4, r7, lr}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 80054c2:	4b20      	ldr	r3, [pc, #128]	; (8005544 <SD_initialize+0x8c>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80054c8:	f002 fd20 	bl	8007f0c <osKernelRunning>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d030      	beq.n	8005534 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80054d2:	f7fa fe85 	bl	80001e0 <BSP_SD_Init>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff ffcc 	bl	800547c <SD_CheckStatus>
 80054e4:	4603      	mov	r3, r0
 80054e6:	461a      	mov	r2, r3
 80054e8:	4b16      	ldr	r3, [pc, #88]	; (8005544 <SD_initialize+0x8c>)
 80054ea:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80054ec:	4b15      	ldr	r3, [pc, #84]	; (8005544 <SD_initialize+0x8c>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d01e      	beq.n	8005534 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80054f6:	4b14      	ldr	r3, [pc, #80]	; (8005548 <SD_initialize+0x90>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10e      	bne.n	800551c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <SD_initialize+0x94>)
 8005500:	f107 0408 	add.w	r4, r7, #8
 8005504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005506:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800550a:	f107 0308 	add.w	r3, r7, #8
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f002 fe42 	bl	800819a <osMessageCreate>
 8005516:	4602      	mov	r2, r0
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <SD_initialize+0x90>)
 800551a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800551c:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <SD_initialize+0x90>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8005524:	4b07      	ldr	r3, [pc, #28]	; (8005544 <SD_initialize+0x8c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	b2da      	uxtb	r2, r3
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <SD_initialize+0x8c>)
 8005532:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8005534:	4b03      	ldr	r3, [pc, #12]	; (8005544 <SD_initialize+0x8c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	b2db      	uxtb	r3, r3
}
 800553a:	4618      	mov	r0, r3
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	bd90      	pop	{r4, r7, pc}
 8005542:	bf00      	nop
 8005544:	2000000c 	.word	0x2000000c
 8005548:	20000770 	.word	0x20000770
 800554c:	0800b3d8 	.word	0x0800b3d8

08005550 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ff8d 	bl	800547c <SD_CheckStatus>
 8005562:	4603      	mov	r3, r0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3708      	adds	r7, #8
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005582:	f247 5030 	movw	r0, #30000	; 0x7530
 8005586:	f7ff ff5b 	bl	8005440 <SD_CheckStatusWithTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	da02      	bge.n	8005596 <SD_read+0x2a>
  {
    return res;
 8005590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005594:	e032      	b.n	80055fc <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	68b8      	ldr	r0, [r7, #8]
 800559c:	f7fa fe38 	bl	8000210 <BSP_SD_ReadBlocks_DMA>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80055a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d124      	bne.n	80055f8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80055ae:	4b15      	ldr	r3, [pc, #84]	; (8005604 <SD_read+0x98>)
 80055b0:	6819      	ldr	r1, [r3, #0]
 80055b2:	f107 0314 	add.w	r3, r7, #20
 80055b6:	f247 5230 	movw	r2, #30000	; 0x7530
 80055ba:	4618      	mov	r0, r3
 80055bc:	f002 fe56 	bl	800826c <osMessageGet>

    if (event.status == osEventMessage)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b10      	cmp	r3, #16
 80055c4:	d118      	bne.n	80055f8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d115      	bne.n	80055f8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80055cc:	f002 fcaa 	bl	8007f24 <osKernelSysTick>
 80055d0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80055d2:	e008      	b.n	80055e6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80055d4:	f7fa fe5c 	bl	8000290 <BSP_SD_GetCardState>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <SD_read+0x7a>
              {
                res = RES_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80055e4:	e008      	b.n	80055f8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80055e6:	f002 fc9d 	bl	8007f24 <osKernelSysTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d9ed      	bls.n	80055d4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80055f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3728      	adds	r7, #40	; 0x28
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000770 	.word	0x20000770

08005608 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60b9      	str	r1, [r7, #8]
 8005610:	607a      	str	r2, [r7, #4]
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800561e:	f247 5030 	movw	r0, #30000	; 0x7530
 8005622:	f7ff ff0d 	bl	8005440 <SD_CheckStatusWithTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	da02      	bge.n	8005632 <SD_write+0x2a>
  {
    return res;
 800562c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005630:	e02e      	b.n	8005690 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	68b8      	ldr	r0, [r7, #8]
 8005638:	f7fa fe04 	bl	8000244 <BSP_SD_WriteBlocks_DMA>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d124      	bne.n	800568c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8005642:	4b15      	ldr	r3, [pc, #84]	; (8005698 <SD_write+0x90>)
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	f247 5230 	movw	r2, #30000	; 0x7530
 800564e:	4618      	mov	r0, r3
 8005650:	f002 fe0c 	bl	800826c <osMessageGet>

    if (event.status == osEventMessage)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b10      	cmp	r3, #16
 8005658:	d118      	bne.n	800568c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d115      	bne.n	800568c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8005660:	f002 fc60 	bl	8007f24 <osKernelSysTick>
 8005664:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8005666:	e008      	b.n	800567a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8005668:	f7fa fe12 	bl	8000290 <BSP_SD_GetCardState>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <SD_write+0x72>
          {
            res = RES_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8005678:	e008      	b.n	800568c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800567a:	f002 fc53 	bl	8007f24 <osKernelSysTick>
 800567e:	4602      	mov	r2, r0
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f247 522f 	movw	r2, #29999	; 0x752f
 8005688:	4293      	cmp	r3, r2
 800568a:	d9ed      	bls.n	8005668 <SD_write+0x60>
    }

  }
#endif

  return res;
 800568c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005690:	4618      	mov	r0, r3
 8005692:	3728      	adds	r7, #40	; 0x28
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000770 	.word	0x20000770

0800569c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08c      	sub	sp, #48	; 0x30
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	603a      	str	r2, [r7, #0]
 80056a6:	71fb      	strb	r3, [r7, #7]
 80056a8:	460b      	mov	r3, r1
 80056aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80056b2:	4b25      	ldr	r3, [pc, #148]	; (8005748 <SD_ioctl+0xac>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <SD_ioctl+0x28>
 80056c0:	2303      	movs	r3, #3
 80056c2:	e03c      	b.n	800573e <SD_ioctl+0xa2>

  switch (cmd)
 80056c4:	79bb      	ldrb	r3, [r7, #6]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d834      	bhi.n	8005734 <SD_ioctl+0x98>
 80056ca:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <SD_ioctl+0x34>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	080056e1 	.word	0x080056e1
 80056d4:	080056e9 	.word	0x080056e9
 80056d8:	08005701 	.word	0x08005701
 80056dc:	0800571b 	.word	0x0800571b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056e6:	e028      	b.n	800573a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80056e8:	f107 030c 	add.w	r3, r7, #12
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fa fdd9 	bl	80002a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80056f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80056fe:	e01c      	b.n	800573a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005700:	f107 030c 	add.w	r3, r7, #12
 8005704:	4618      	mov	r0, r3
 8005706:	f7fa fdcd 	bl	80002a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	b29a      	uxth	r2, r3
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005718:	e00f      	b.n	800573a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800571a:	f107 030c 	add.w	r3, r7, #12
 800571e:	4618      	mov	r0, r3
 8005720:	f7fa fdc0 	bl	80002a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	0a5a      	lsrs	r2, r3, #9
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005732:	e002      	b.n	800573a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005734:	2304      	movs	r3, #4
 8005736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800573a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800573e:	4618      	mov	r0, r3
 8005740:	3730      	adds	r7, #48	; 0x30
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	2000000c 	.word	0x2000000c

0800574c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8005750:	4b04      	ldr	r3, [pc, #16]	; (8005764 <BSP_SD_WriteCpltCallback+0x18>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	2102      	movs	r1, #2
 8005758:	4618      	mov	r0, r3
 800575a:	f002 fd47 	bl	80081ec <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000770 	.word	0x20000770

08005768 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <BSP_SD_ReadCpltCallback+0x18>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2200      	movs	r2, #0
 8005772:	2101      	movs	r1, #1
 8005774:	4618      	mov	r0, r3
 8005776:	f002 fd39 	bl	80081ec <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800577a:	bf00      	nop
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000770 	.word	0x20000770

08005784 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800578e:	79fb      	ldrb	r3, [r7, #7]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <disk_status+0x30>)
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	79fa      	ldrb	r2, [r7, #7]
 800579c:	4905      	ldr	r1, [pc, #20]	; (80057b4 <disk_status+0x30>)
 800579e:	440a      	add	r2, r1
 80057a0:	7a12      	ldrb	r2, [r2, #8]
 80057a2:	4610      	mov	r0, r2
 80057a4:	4798      	blx	r3
 80057a6:	4603      	mov	r3, r0
 80057a8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	2000079c 	.word	0x2000079c

080057b8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	4a0d      	ldr	r2, [pc, #52]	; (8005800 <disk_initialize+0x48>)
 80057ca:	5cd3      	ldrb	r3, [r2, r3]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d111      	bne.n	80057f4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80057d0:	79fb      	ldrb	r3, [r7, #7]
 80057d2:	4a0b      	ldr	r2, [pc, #44]	; (8005800 <disk_initialize+0x48>)
 80057d4:	2101      	movs	r1, #1
 80057d6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	4a09      	ldr	r2, [pc, #36]	; (8005800 <disk_initialize+0x48>)
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	79fa      	ldrb	r2, [r7, #7]
 80057e6:	4906      	ldr	r1, [pc, #24]	; (8005800 <disk_initialize+0x48>)
 80057e8:	440a      	add	r2, r1
 80057ea:	7a12      	ldrb	r2, [r2, #8]
 80057ec:	4610      	mov	r0, r2
 80057ee:	4798      	blx	r3
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	2000079c 	.word	0x2000079c

08005804 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	4a0a      	ldr	r2, [pc, #40]	; (8005840 <disk_read+0x3c>)
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	689c      	ldr	r4, [r3, #8]
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	4a07      	ldr	r2, [pc, #28]	; (8005840 <disk_read+0x3c>)
 8005824:	4413      	add	r3, r2
 8005826:	7a18      	ldrb	r0, [r3, #8]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	47a0      	blx	r4
 8005830:	4603      	mov	r3, r0
 8005832:	75fb      	strb	r3, [r7, #23]
  return res;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd90      	pop	{r4, r7, pc}
 800583e:	bf00      	nop
 8005840:	2000079c 	.word	0x2000079c

08005844 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005844:	b590      	push	{r4, r7, lr}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	4603      	mov	r3, r0
 8005852:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <disk_write+0x3c>)
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	68dc      	ldr	r4, [r3, #12]
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	4a07      	ldr	r2, [pc, #28]	; (8005880 <disk_write+0x3c>)
 8005864:	4413      	add	r3, r2
 8005866:	7a18      	ldrb	r0, [r3, #8]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	47a0      	blx	r4
 8005870:	4603      	mov	r3, r0
 8005872:	75fb      	strb	r3, [r7, #23]
  return res;
 8005874:	7dfb      	ldrb	r3, [r7, #23]
}
 8005876:	4618      	mov	r0, r3
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd90      	pop	{r4, r7, pc}
 800587e:	bf00      	nop
 8005880:	2000079c 	.word	0x2000079c

08005884 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	603a      	str	r2, [r7, #0]
 800588e:	71fb      	strb	r3, [r7, #7]
 8005890:	460b      	mov	r3, r1
 8005892:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005894:	79fb      	ldrb	r3, [r7, #7]
 8005896:	4a09      	ldr	r2, [pc, #36]	; (80058bc <disk_ioctl+0x38>)
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	79fa      	ldrb	r2, [r7, #7]
 80058a2:	4906      	ldr	r1, [pc, #24]	; (80058bc <disk_ioctl+0x38>)
 80058a4:	440a      	add	r2, r1
 80058a6:	7a10      	ldrb	r0, [r2, #8]
 80058a8:	79b9      	ldrb	r1, [r7, #6]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	4798      	blx	r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	2000079c 	.word	0x2000079c

080058c0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3301      	adds	r3, #1
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	b21a      	sxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	b21b      	sxth	r3, r3
 80058dc:	4313      	orrs	r3, r2
 80058de:	b21b      	sxth	r3, r3
 80058e0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80058e2:	89fb      	ldrh	r3, [r7, #14]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3303      	adds	r3, #3
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	3202      	adds	r2, #2
 8005908:	7812      	ldrb	r2, [r2, #0]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	3201      	adds	r2, #1
 8005916:	7812      	ldrb	r2, [r2, #0]
 8005918:	4313      	orrs	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	7812      	ldrb	r2, [r2, #0]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
	return rv;
 8005928:	68fb      	ldr	r3, [r7, #12]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	887a      	ldrh	r2, [r7, #2]
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	701a      	strb	r2, [r3, #0]
 800594e:	887b      	ldrh	r3, [r7, #2]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	887a      	ldrh	r2, [r7, #2]
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	607a      	str	r2, [r7, #4]
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	0a1b      	lsrs	r3, r3, #8
 8005998:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	0a1b      	lsrs	r3, r3, #8
 80059aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	1c53      	adds	r3, r2, #1
 80059e2:	613b      	str	r3, [r7, #16]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	1c59      	adds	r1, r3, #1
 80059e8:	6179      	str	r1, [r7, #20]
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	607b      	str	r3, [r7, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f1      	bne.n	80059de <mem_cpy+0x1a>
	}
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a06:	b480      	push	{r7}
 8005a08:	b087      	sub	sp, #28
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	617a      	str	r2, [r7, #20]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f3      	bne.n	8005a16 <mem_set+0x10>
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005a3a:	b480      	push	{r7}
 8005a3c:	b089      	sub	sp, #36	; 0x24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	61fa      	str	r2, [r7, #28]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	61ba      	str	r2, [r7, #24]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	1acb      	subs	r3, r1, r3
 8005a66:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <mem_cmp+0x40>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0eb      	beq.n	8005a52 <mem_cmp+0x18>

	return r;
 8005a7a:	697b      	ldr	r3, [r7, #20]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3724      	adds	r7, #36	; 0x24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005a92:	e002      	b.n	8005a9a <chk_chr+0x12>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3301      	adds	r3, #1
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <chk_chr+0x26>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d1f2      	bne.n	8005a94 <chk_chr+0xc>
	return *str;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d009      	beq.n	8005ae0 <lock_fs+0x22>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f002 f9ca 	bl	8007e6a <ff_req_grant>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <lock_fs+0x22>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <lock_fs+0x24>
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	460b      	mov	r3, r1
 8005af4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00d      	beq.n	8005b18 <unlock_fs+0x2e>
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	2b0c      	cmp	r3, #12
 8005b00:	d00a      	beq.n	8005b18 <unlock_fs+0x2e>
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	2b0b      	cmp	r3, #11
 8005b06:	d007      	beq.n	8005b18 <unlock_fs+0x2e>
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	2b0f      	cmp	r3, #15
 8005b0c:	d004      	beq.n	8005b18 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f002 f9be 	bl	8007e94 <ff_rel_grant>
	}
}
 8005b18:	bf00      	nop
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e029      	b.n	8005b88 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b34:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <chk_lock+0xb4>)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	4413      	add	r3, r2
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01d      	beq.n	8005b7e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b42:	4a24      	ldr	r2, [pc, #144]	; (8005bd4 <chk_lock+0xb4>)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	4413      	add	r3, r2
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d116      	bne.n	8005b82 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b54:	4a1f      	ldr	r2, [pc, #124]	; (8005bd4 <chk_lock+0xb4>)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d10c      	bne.n	8005b82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b68:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <chk_lock+0xb4>)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	4413      	add	r3, r2
 8005b70:	3308      	adds	r3, #8
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d102      	bne.n	8005b82 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b7c:	e007      	b.n	8005b8e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d9d2      	bls.n	8005b34 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d109      	bne.n	8005ba8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d102      	bne.n	8005ba0 <chk_lock+0x80>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d101      	bne.n	8005ba4 <chk_lock+0x84>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e010      	b.n	8005bc6 <chk_lock+0xa6>
 8005ba4:	2312      	movs	r3, #18
 8005ba6:	e00e      	b.n	8005bc6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d108      	bne.n	8005bc0 <chk_lock+0xa0>
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <chk_lock+0xb4>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	4413      	add	r3, r2
 8005bb6:	330c      	adds	r3, #12
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bbe:	d101      	bne.n	8005bc4 <chk_lock+0xa4>
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	e000      	b.n	8005bc6 <chk_lock+0xa6>
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	2000077c 	.word	0x2000077c

08005bd8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bde:	2300      	movs	r3, #0
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	e002      	b.n	8005bea <enq_lock+0x12>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3301      	adds	r3, #1
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d806      	bhi.n	8005bfe <enq_lock+0x26>
 8005bf0:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <enq_lock+0x40>)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	4413      	add	r3, r2
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1f2      	bne.n	8005be4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	bf14      	ite	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	2300      	moveq	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	2000077c 	.word	0x2000077c

08005c1c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e01f      	b.n	8005c6c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c2c:	4a41      	ldr	r2, [pc, #260]	; (8005d34 <inc_lock+0x118>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	4413      	add	r3, r2
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d113      	bne.n	8005c66 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c3e:	4a3d      	ldr	r2, [pc, #244]	; (8005d34 <inc_lock+0x118>)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	4413      	add	r3, r2
 8005c46:	3304      	adds	r3, #4
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d109      	bne.n	8005c66 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c52:	4a38      	ldr	r2, [pc, #224]	; (8005d34 <inc_lock+0x118>)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	4413      	add	r3, r2
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d006      	beq.n	8005c74 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d9dc      	bls.n	8005c2c <inc_lock+0x10>
 8005c72:	e000      	b.n	8005c76 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c74:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d132      	bne.n	8005ce2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e002      	b.n	8005c88 <inc_lock+0x6c>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d806      	bhi.n	8005c9c <inc_lock+0x80>
 8005c8e:	4a29      	ldr	r2, [pc, #164]	; (8005d34 <inc_lock+0x118>)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	4413      	add	r3, r2
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f2      	bne.n	8005c82 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d101      	bne.n	8005ca6 <inc_lock+0x8a>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e040      	b.n	8005d28 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4922      	ldr	r1, [pc, #136]	; (8005d34 <inc_lock+0x118>)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	440b      	add	r3, r1
 8005cb2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	491e      	ldr	r1, [pc, #120]	; (8005d34 <inc_lock+0x118>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	011b      	lsls	r3, r3, #4
 8005cbe:	440b      	add	r3, r1
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	491a      	ldr	r1, [pc, #104]	; (8005d34 <inc_lock+0x118>)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	440b      	add	r3, r1
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005cd4:	4a17      	ldr	r2, [pc, #92]	; (8005d34 <inc_lock+0x118>)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	011b      	lsls	r3, r3, #4
 8005cda:	4413      	add	r3, r2
 8005cdc:	330c      	adds	r3, #12
 8005cde:	2200      	movs	r2, #0
 8005ce0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <inc_lock+0xe0>
 8005ce8:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <inc_lock+0x118>)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	011b      	lsls	r3, r3, #4
 8005cee:	4413      	add	r3, r2
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <inc_lock+0xe0>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e015      	b.n	8005d28 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d108      	bne.n	8005d14 <inc_lock+0xf8>
 8005d02:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <inc_lock+0x118>)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	4413      	add	r3, r2
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	e001      	b.n	8005d18 <inc_lock+0xfc>
 8005d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d18:	4906      	ldr	r1, [pc, #24]	; (8005d34 <inc_lock+0x118>)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	440b      	add	r3, r1
 8005d20:	330c      	adds	r3, #12
 8005d22:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3301      	adds	r3, #1
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	2000077c 	.word	0x2000077c

08005d38 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	607b      	str	r3, [r7, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d825      	bhi.n	8005d98 <dec_lock+0x60>
		n = Files[i].ctr;
 8005d4c:	4a17      	ldr	r2, [pc, #92]	; (8005dac <dec_lock+0x74>)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	4413      	add	r3, r2
 8005d54:	330c      	adds	r3, #12
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d5a:	89fb      	ldrh	r3, [r7, #14]
 8005d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d60:	d101      	bne.n	8005d66 <dec_lock+0x2e>
 8005d62:	2300      	movs	r3, #0
 8005d64:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d66:	89fb      	ldrh	r3, [r7, #14]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <dec_lock+0x3a>
 8005d6c:	89fb      	ldrh	r3, [r7, #14]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005d72:	4a0e      	ldr	r2, [pc, #56]	; (8005dac <dec_lock+0x74>)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	4413      	add	r3, r2
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	89fa      	ldrh	r2, [r7, #14]
 8005d7e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d80:	89fb      	ldrh	r3, [r7, #14]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <dec_lock+0x5a>
 8005d86:	4a09      	ldr	r2, [pc, #36]	; (8005dac <dec_lock+0x74>)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	4413      	add	r3, r2
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	737b      	strb	r3, [r7, #13]
 8005d96:	e001      	b.n	8005d9c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d98:	2302      	movs	r3, #2
 8005d9a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d9c:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3714      	adds	r7, #20
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	2000077c 	.word	0x2000077c

08005db0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e010      	b.n	8005de0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005dbe:	4a0d      	ldr	r2, [pc, #52]	; (8005df4 <clear_lock+0x44>)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	4413      	add	r3, r2
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d105      	bne.n	8005dda <clear_lock+0x2a>
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <clear_lock+0x44>)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	4413      	add	r3, r2
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d9eb      	bls.n	8005dbe <clear_lock+0xe>
	}
}
 8005de6:	bf00      	nop
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	2000077c 	.word	0x2000077c

08005df8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005e00:	2300      	movs	r3, #0
 8005e02:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	78db      	ldrb	r3, [r3, #3]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d034      	beq.n	8005e76 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e10:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	7858      	ldrb	r0, [r3, #1]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	f7ff fd10 	bl	8005844 <disk_write>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
 8005e2e:	e022      	b.n	8005e76 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	1ad2      	subs	r2, r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d217      	bcs.n	8005e76 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	789b      	ldrb	r3, [r3, #2]
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	e010      	b.n	8005e70 <sync_window+0x78>
					wsect += fs->fsize;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4413      	add	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	7858      	ldrb	r0, [r3, #1]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e62:	2301      	movs	r3, #1
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	f7ff fced 	bl	8005844 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d8eb      	bhi.n	8005e4e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e92:	683a      	ldr	r2, [r7, #0]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d01b      	beq.n	8005ed0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff ffad 	bl	8005df8 <sync_window>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d113      	bne.n	8005ed0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	7858      	ldrb	r0, [r3, #1]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	f7ff fca5 	bl	8005804 <disk_read>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ec4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ff87 	bl	8005df8 <sync_window>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d159      	bne.n	8005fa8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d149      	bne.n	8005f90 <sync_fs+0xb4>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	791b      	ldrb	r3, [r3, #4]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d145      	bne.n	8005f90 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	899b      	ldrh	r3, [r3, #12]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2100      	movs	r1, #0
 8005f12:	f7ff fd78 	bl	8005a06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3338      	adds	r3, #56	; 0x38
 8005f1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f1e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fd07 	bl	8005936 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3338      	adds	r3, #56	; 0x38
 8005f2c:	4921      	ldr	r1, [pc, #132]	; (8005fb4 <sync_fs+0xd8>)
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fd1c 	bl	800596c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3338      	adds	r3, #56	; 0x38
 8005f38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f3c:	491e      	ldr	r1, [pc, #120]	; (8005fb8 <sync_fs+0xdc>)
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7ff fd14 	bl	800596c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3338      	adds	r3, #56	; 0x38
 8005f48:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f7ff fd0a 	bl	800596c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3338      	adds	r3, #56	; 0x38
 8005f5c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	4619      	mov	r1, r3
 8005f66:	4610      	mov	r0, r2
 8005f68:	f7ff fd00 	bl	800596c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	7858      	ldrb	r0, [r3, #1]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f84:	2301      	movs	r3, #1
 8005f86:	f7ff fc5d 	bl	8005844 <disk_write>
			fs->fsi_flag = 0;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2200      	movs	r2, #0
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fc73 	bl	8005884 <disk_ioctl>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <sync_fs+0xcc>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	41615252 	.word	0x41615252
 8005fb8:	61417272 	.word	0x61417272

08005fbc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	3b02      	subs	r3, #2
 8005fca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	3b02      	subs	r3, #2
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d301      	bcc.n	8005fdc <clust2sect+0x20>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e008      	b.n	8005fee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	895b      	ldrh	r3, [r3, #10]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	fb03 f202 	mul.w	r2, r3, r2
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	4413      	add	r3, r2
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d904      	bls.n	800601a <get_fat+0x20>
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	683a      	ldr	r2, [r7, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d302      	bcc.n	8006020 <get_fat+0x26>
		val = 1;	/* Internal error */
 800601a:	2301      	movs	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e0b7      	b.n	8006190 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006024:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d05a      	beq.n	80060e4 <get_fat+0xea>
 800602e:	2b03      	cmp	r3, #3
 8006030:	d07d      	beq.n	800612e <get_fat+0x134>
 8006032:	2b01      	cmp	r3, #1
 8006034:	f040 80a2 	bne.w	800617c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	899b      	ldrh	r3, [r3, #12]
 800604e:	4619      	mov	r1, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	fbb3 f3f1 	udiv	r3, r3, r1
 8006056:	4413      	add	r3, r2
 8006058:	4619      	mov	r1, r3
 800605a:	6938      	ldr	r0, [r7, #16]
 800605c:	f7ff ff10 	bl	8005e80 <move_window>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	f040 808d 	bne.w	8006182 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	60fa      	str	r2, [r7, #12]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	8992      	ldrh	r2, [r2, #12]
 8006072:	fbb3 f1f2 	udiv	r1, r3, r2
 8006076:	fb02 f201 	mul.w	r2, r2, r1
 800607a:	1a9b      	subs	r3, r3, r2
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4413      	add	r3, r2
 8006080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006084:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	899b      	ldrh	r3, [r3, #12]
 800608e:	4619      	mov	r1, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	fbb3 f3f1 	udiv	r3, r3, r1
 8006096:	4413      	add	r3, r2
 8006098:	4619      	mov	r1, r3
 800609a:	6938      	ldr	r0, [r7, #16]
 800609c:	f7ff fef0 	bl	8005e80 <move_window>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d16f      	bne.n	8006186 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	899b      	ldrh	r3, [r3, #12]
 80060aa:	461a      	mov	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80060b2:	fb02 f201 	mul.w	r2, r2, r1
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	461a      	mov	r2, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <get_fat+0xe0>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	091b      	lsrs	r3, r3, #4
 80060d8:	e002      	b.n	80060e0 <get_fat+0xe6>
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060e0:	617b      	str	r3, [r7, #20]
			break;
 80060e2:	e055      	b.n	8006190 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	899b      	ldrh	r3, [r3, #12]
 80060ec:	085b      	lsrs	r3, r3, #1
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	4619      	mov	r1, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80060f8:	4413      	add	r3, r2
 80060fa:	4619      	mov	r1, r3
 80060fc:	6938      	ldr	r0, [r7, #16]
 80060fe:	f7ff febf 	bl	8005e80 <move_window>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d140      	bne.n	800618a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	8992      	ldrh	r2, [r2, #12]
 8006116:	fbb3 f0f2 	udiv	r0, r3, r2
 800611a:	fb02 f200 	mul.w	r2, r2, r0
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	440b      	add	r3, r1
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff fbcc 	bl	80058c0 <ld_word>
 8006128:	4603      	mov	r3, r0
 800612a:	617b      	str	r3, [r7, #20]
			break;
 800612c:	e030      	b.n	8006190 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	899b      	ldrh	r3, [r3, #12]
 8006136:	089b      	lsrs	r3, r3, #2
 8006138:	b29b      	uxth	r3, r3
 800613a:	4619      	mov	r1, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006142:	4413      	add	r3, r2
 8006144:	4619      	mov	r1, r3
 8006146:	6938      	ldr	r0, [r7, #16]
 8006148:	f7ff fe9a 	bl	8005e80 <move_window>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d11d      	bne.n	800618e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	8992      	ldrh	r2, [r2, #12]
 8006160:	fbb3 f0f2 	udiv	r0, r3, r2
 8006164:	fb02 f200 	mul.w	r2, r2, r0
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	440b      	add	r3, r1
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fbbf 	bl	80058f0 <ld_dword>
 8006172:	4603      	mov	r3, r0
 8006174:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006178:	617b      	str	r3, [r7, #20]
			break;
 800617a:	e009      	b.n	8006190 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]
 8006180:	e006      	b.n	8006190 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006182:	bf00      	nop
 8006184:	e004      	b.n	8006190 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006186:	bf00      	nop
 8006188:	e002      	b.n	8006190 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800618e:	bf00      	nop
		}
	}

	return val;
 8006190:	697b      	ldr	r3, [r7, #20]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800619a:	b590      	push	{r4, r7, lr}
 800619c:	b089      	sub	sp, #36	; 0x24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80061a6:	2302      	movs	r3, #2
 80061a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	f240 8106 	bls.w	80063be <put_fat+0x224>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	f080 8100 	bcs.w	80063be <put_fat+0x224>
		switch (fs->fs_type) {
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	f000 8088 	beq.w	80062d8 <put_fat+0x13e>
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	f000 80b0 	beq.w	800632e <put_fat+0x194>
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	f040 80f5 	bne.w	80063be <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	61bb      	str	r3, [r7, #24]
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4413      	add	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	899b      	ldrh	r3, [r3, #12]
 80061ea:	4619      	mov	r1, r3
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80061f2:	4413      	add	r3, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f7ff fe42 	bl	8005e80 <move_window>
 80061fc:	4603      	mov	r3, r0
 80061fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006200:	7ffb      	ldrb	r3, [r7, #31]
 8006202:	2b00      	cmp	r3, #0
 8006204:	f040 80d4 	bne.w	80063b0 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	61ba      	str	r2, [r7, #24]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	8992      	ldrh	r2, [r2, #12]
 8006218:	fbb3 f0f2 	udiv	r0, r3, r2
 800621c:	fb02 f200 	mul.w	r2, r2, r0
 8006220:	1a9b      	subs	r3, r3, r2
 8006222:	440b      	add	r3, r1
 8006224:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00d      	beq.n	800624c <put_fat+0xb2>
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	b25b      	sxtb	r3, r3
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	b25a      	sxtb	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	b2db      	uxtb	r3, r3
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	b25b      	sxtb	r3, r3
 8006244:	4313      	orrs	r3, r2
 8006246:	b25b      	sxtb	r3, r3
 8006248:	b2db      	uxtb	r3, r3
 800624a:	e001      	b.n	8006250 <put_fat+0xb6>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	899b      	ldrh	r3, [r3, #12]
 8006262:	4619      	mov	r1, r3
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	fbb3 f3f1 	udiv	r3, r3, r1
 800626a:	4413      	add	r3, r2
 800626c:	4619      	mov	r1, r3
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff fe06 	bl	8005e80 <move_window>
 8006274:	4603      	mov	r3, r0
 8006276:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006278:	7ffb      	ldrb	r3, [r7, #31]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 809a 	bne.w	80063b4 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	899b      	ldrh	r3, [r3, #12]
 800628a:	461a      	mov	r2, r3
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006292:	fb02 f200 	mul.w	r2, r2, r0
 8006296:	1a9b      	subs	r3, r3, r2
 8006298:	440b      	add	r3, r1
 800629a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <put_fat+0x114>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	e00e      	b.n	80062cc <put_fat+0x132>
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	f023 030f 	bic.w	r3, r3, #15
 80062b8:	b25a      	sxtb	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	0a1b      	lsrs	r3, r3, #8
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	b25b      	sxtb	r3, r3
 80062c6:	4313      	orrs	r3, r2
 80062c8:	b25b      	sxtb	r3, r3
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	70da      	strb	r2, [r3, #3]
			break;
 80062d6:	e072      	b.n	80063be <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	899b      	ldrh	r3, [r3, #12]
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	4619      	mov	r1, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80062ec:	4413      	add	r3, r2
 80062ee:	4619      	mov	r1, r3
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff fdc5 	bl	8005e80 <move_window>
 80062f6:	4603      	mov	r3, r0
 80062f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062fa:	7ffb      	ldrb	r3, [r7, #31]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d15b      	bne.n	80063b8 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	8992      	ldrh	r2, [r2, #12]
 800630e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006312:	fb02 f200 	mul.w	r2, r2, r0
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	440b      	add	r3, r1
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	b292      	uxth	r2, r2
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fb08 	bl	8005936 <st_word>
			fs->wflag = 1;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	70da      	strb	r2, [r3, #3]
			break;
 800632c:	e047      	b.n	80063be <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	899b      	ldrh	r3, [r3, #12]
 8006336:	089b      	lsrs	r3, r3, #2
 8006338:	b29b      	uxth	r3, r3
 800633a:	4619      	mov	r1, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006342:	4413      	add	r3, r2
 8006344:	4619      	mov	r1, r3
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f7ff fd9a 	bl	8005e80 <move_window>
 800634c:	4603      	mov	r3, r0
 800634e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006350:	7ffb      	ldrb	r3, [r7, #31]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d132      	bne.n	80063bc <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	8992      	ldrh	r2, [r2, #12]
 800636a:	fbb3 f0f2 	udiv	r0, r3, r2
 800636e:	fb02 f200 	mul.w	r2, r2, r0
 8006372:	1a9b      	subs	r3, r3, r2
 8006374:	440b      	add	r3, r1
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff faba 	bl	80058f0 <ld_dword>
 800637c:	4603      	mov	r3, r0
 800637e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006382:	4323      	orrs	r3, r4
 8006384:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	8992      	ldrh	r2, [r2, #12]
 8006394:	fbb3 f0f2 	udiv	r0, r3, r2
 8006398:	fb02 f200 	mul.w	r2, r2, r0
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	440b      	add	r3, r1
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fae2 	bl	800596c <st_dword>
			fs->wflag = 1;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	70da      	strb	r2, [r3, #3]
			break;
 80063ae:	e006      	b.n	80063be <put_fat+0x224>
			if (res != FR_OK) break;
 80063b0:	bf00      	nop
 80063b2:	e004      	b.n	80063be <put_fat+0x224>
			if (res != FR_OK) break;
 80063b4:	bf00      	nop
 80063b6:	e002      	b.n	80063be <put_fat+0x224>
			if (res != FR_OK) break;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <put_fat+0x224>
			if (res != FR_OK) break;
 80063bc:	bf00      	nop
		}
	}
	return res;
 80063be:	7ffb      	ldrb	r3, [r7, #31]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3724      	adds	r7, #36	; 0x24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd90      	pop	{r4, r7, pc}

080063c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80063d4:	2300      	movs	r3, #0
 80063d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d904      	bls.n	80063ee <remove_chain+0x26>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d301      	bcc.n	80063f2 <remove_chain+0x2a>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e04b      	b.n	800648a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00c      	beq.n	8006412 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80063f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	69b8      	ldr	r0, [r7, #24]
 8006400:	f7ff fecb 	bl	800619a <put_fat>
 8006404:	4603      	mov	r3, r0
 8006406:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006408:	7ffb      	ldrb	r3, [r7, #31]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <remove_chain+0x4a>
 800640e:	7ffb      	ldrb	r3, [r7, #31]
 8006410:	e03b      	b.n	800648a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f7ff fdf0 	bl	8005ffa <get_fat>
 800641a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d031      	beq.n	8006486 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <remove_chain+0x64>
 8006428:	2302      	movs	r3, #2
 800642a:	e02e      	b.n	800648a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006432:	d101      	bne.n	8006438 <remove_chain+0x70>
 8006434:	2301      	movs	r3, #1
 8006436:	e028      	b.n	800648a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006438:	2200      	movs	r2, #0
 800643a:	68b9      	ldr	r1, [r7, #8]
 800643c:	69b8      	ldr	r0, [r7, #24]
 800643e:	f7ff feac 	bl	800619a <put_fat>
 8006442:	4603      	mov	r3, r0
 8006444:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006446:	7ffb      	ldrb	r3, [r7, #31]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <remove_chain+0x88>
 800644c:	7ffb      	ldrb	r3, [r7, #31]
 800644e:	e01c      	b.n	800648a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	3b02      	subs	r3, #2
 800645a:	429a      	cmp	r2, r3
 800645c:	d20b      	bcs.n	8006476 <remove_chain+0xae>
			fs->free_clst++;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	1c5a      	adds	r2, r3, #1
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	791b      	ldrb	r3, [r3, #4]
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	429a      	cmp	r2, r3
 8006482:	d3c6      	bcc.n	8006412 <remove_chain+0x4a>
 8006484:	e000      	b.n	8006488 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006486:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b088      	sub	sp, #32
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10d      	bne.n	80064c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d004      	beq.n	80064be <create_chain+0x2c>
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d31b      	bcc.n	80064f6 <create_chain+0x64>
 80064be:	2301      	movs	r3, #1
 80064c0:	61bb      	str	r3, [r7, #24]
 80064c2:	e018      	b.n	80064f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff fd97 	bl	8005ffa <get_fat>
 80064cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d801      	bhi.n	80064d8 <create_chain+0x46>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e070      	b.n	80065ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064de:	d101      	bne.n	80064e4 <create_chain+0x52>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	e06a      	b.n	80065ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d201      	bcs.n	80064f2 <create_chain+0x60>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	e063      	b.n	80065ba <create_chain+0x128>
		scl = clst;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	3301      	adds	r3, #1
 80064fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	429a      	cmp	r2, r3
 8006508:	d307      	bcc.n	800651a <create_chain+0x88>
				ncl = 2;
 800650a:	2302      	movs	r3, #2
 800650c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	429a      	cmp	r2, r3
 8006514:	d901      	bls.n	800651a <create_chain+0x88>
 8006516:	2300      	movs	r3, #0
 8006518:	e04f      	b.n	80065ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800651a:	69f9      	ldr	r1, [r7, #28]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff fd6c 	bl	8005ffa <get_fat>
 8006522:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00e      	beq.n	8006548 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d003      	beq.n	8006538 <create_chain+0xa6>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006536:	d101      	bne.n	800653c <create_chain+0xaa>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	e03e      	b.n	80065ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	429a      	cmp	r2, r3
 8006542:	d1da      	bne.n	80064fa <create_chain+0x68>
 8006544:	2300      	movs	r3, #0
 8006546:	e038      	b.n	80065ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006548:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800654a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800654e:	69f9      	ldr	r1, [r7, #28]
 8006550:	6938      	ldr	r0, [r7, #16]
 8006552:	f7ff fe22 	bl	800619a <put_fat>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <create_chain+0xe2>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d006      	beq.n	8006574 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f7ff fe15 	bl	800619a <put_fat>
 8006570:	4603      	mov	r3, r0
 8006572:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d116      	bne.n	80065a8 <create_chain+0x116>
		fs->last_clst = ncl;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	699a      	ldr	r2, [r3, #24]
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	3b02      	subs	r3, #2
 800658a:	429a      	cmp	r2, r3
 800658c:	d804      	bhi.n	8006598 <create_chain+0x106>
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	1e5a      	subs	r2, r3, #1
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	791b      	ldrb	r3, [r3, #4]
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	711a      	strb	r2, [r3, #4]
 80065a6:	e007      	b.n	80065b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d102      	bne.n	80065b4 <create_chain+0x122>
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065b2:	e000      	b.n	80065b6 <create_chain+0x124>
 80065b4:	2301      	movs	r3, #1
 80065b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80065b8:	69fb      	ldr	r3, [r7, #28]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3720      	adds	r7, #32
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b087      	sub	sp, #28
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d6:	3304      	adds	r3, #4
 80065d8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	899b      	ldrh	r3, [r3, #12]
 80065de:	461a      	mov	r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	8952      	ldrh	r2, [r2, #10]
 80065ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1d1a      	adds	r2, r3, #4
 80065f4:	613a      	str	r2, [r7, #16]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <clmt_clust+0x42>
 8006600:	2300      	movs	r3, #0
 8006602:	e010      	b.n	8006626 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	d307      	bcc.n	800661c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	3304      	adds	r3, #4
 8006618:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800661a:	e7e9      	b.n	80065f0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800661c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	4413      	add	r3, r2
}
 8006626:	4618      	mov	r0, r3
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b086      	sub	sp, #24
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006648:	d204      	bcs.n	8006654 <dir_sdi+0x22>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006654:	2302      	movs	r3, #2
 8006656:	e071      	b.n	800673c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d106      	bne.n	8006678 <dir_sdi+0x46>
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d902      	bls.n	8006678 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10c      	bne.n	8006698 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	095b      	lsrs	r3, r3, #5
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	8912      	ldrh	r2, [r2, #8]
 8006686:	4293      	cmp	r3, r2
 8006688:	d301      	bcc.n	800668e <dir_sdi+0x5c>
 800668a:	2302      	movs	r3, #2
 800668c:	e056      	b.n	800673c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	61da      	str	r2, [r3, #28]
 8006696:	e02d      	b.n	80066f4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	895b      	ldrh	r3, [r3, #10]
 800669c:	461a      	mov	r2, r3
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	899b      	ldrh	r3, [r3, #12]
 80066a2:	fb03 f302 	mul.w	r3, r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80066a8:	e019      	b.n	80066de <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6979      	ldr	r1, [r7, #20]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fca3 	bl	8005ffa <get_fat>
 80066b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066bc:	d101      	bne.n	80066c2 <dir_sdi+0x90>
 80066be:	2301      	movs	r3, #1
 80066c0:	e03c      	b.n	800673c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d904      	bls.n	80066d2 <dir_sdi+0xa0>
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d301      	bcc.n	80066d6 <dir_sdi+0xa4>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e032      	b.n	800673c <dir_sdi+0x10a>
			ofs -= csz;
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d2e1      	bcs.n	80066aa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	6938      	ldr	r0, [r7, #16]
 80066ea:	f7ff fc67 	bl	8005fbc <clust2sect>
 80066ee:	4602      	mov	r2, r0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <dir_sdi+0xd4>
 8006702:	2302      	movs	r3, #2
 8006704:	e01a      	b.n	800673c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	899b      	ldrh	r3, [r3, #12]
 800670e:	4619      	mov	r1, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	fbb3 f3f1 	udiv	r3, r3, r1
 8006716:	441a      	add	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	899b      	ldrh	r3, [r3, #12]
 8006726:	461a      	mov	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	fbb3 f0f2 	udiv	r0, r3, r2
 800672e:	fb02 f200 	mul.w	r2, r2, r0
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	18ca      	adds	r2, r1, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	695b      	ldr	r3, [r3, #20]
 8006758:	3320      	adds	r3, #32
 800675a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <dir_next+0x28>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676a:	d301      	bcc.n	8006770 <dir_next+0x2c>
 800676c:	2304      	movs	r3, #4
 800676e:	e0bb      	b.n	80068e8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	899b      	ldrh	r3, [r3, #12]
 8006774:	461a      	mov	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	fbb3 f1f2 	udiv	r1, r3, r2
 800677c:	fb02 f201 	mul.w	r2, r2, r1
 8006780:	1a9b      	subs	r3, r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	f040 809d 	bne.w	80068c2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10b      	bne.n	80067b2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	8912      	ldrh	r2, [r2, #8]
 80067a2:	4293      	cmp	r3, r2
 80067a4:	f0c0 808d 	bcc.w	80068c2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
 80067ae:	2304      	movs	r3, #4
 80067b0:	e09a      	b.n	80068e8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	899b      	ldrh	r3, [r3, #12]
 80067b6:	461a      	mov	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	8952      	ldrh	r2, [r2, #10]
 80067c2:	3a01      	subs	r2, #1
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d17b      	bne.n	80068c2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7ff fc11 	bl	8005ffa <get_fat>
 80067d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d801      	bhi.n	80067e4 <dir_next+0xa0>
 80067e0:	2302      	movs	r3, #2
 80067e2:	e081      	b.n	80068e8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ea:	d101      	bne.n	80067f0 <dir_next+0xac>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e07b      	b.n	80068e8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d359      	bcc.n	80068ae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	61da      	str	r2, [r3, #28]
 8006806:	2304      	movs	r3, #4
 8006808:	e06e      	b.n	80068e8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f7ff fe3d 	bl	8006492 <create_chain>
 8006818:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <dir_next+0xe0>
 8006820:	2307      	movs	r3, #7
 8006822:	e061      	b.n	80068e8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <dir_next+0xea>
 800682a:	2302      	movs	r3, #2
 800682c:	e05c      	b.n	80068e8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006834:	d101      	bne.n	800683a <dir_next+0xf6>
 8006836:	2301      	movs	r3, #1
 8006838:	e056      	b.n	80068e8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff fadc 	bl	8005df8 <sync_window>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <dir_next+0x106>
 8006846:	2301      	movs	r3, #1
 8006848:	e04e      	b.n	80068e8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	899b      	ldrh	r3, [r3, #12]
 8006854:	461a      	mov	r2, r3
 8006856:	2100      	movs	r1, #0
 8006858:	f7ff f8d5 	bl	8005a06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	6979      	ldr	r1, [r7, #20]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff fbaa 	bl	8005fbc <clust2sect>
 8006868:	4602      	mov	r2, r0
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	635a      	str	r2, [r3, #52]	; 0x34
 800686e:	e012      	b.n	8006896 <dir_next+0x152>
						fs->wflag = 1;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2201      	movs	r2, #1
 8006874:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f7ff fabe 	bl	8005df8 <sync_window>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <dir_next+0x142>
 8006882:	2301      	movs	r3, #1
 8006884:	e030      	b.n	80068e8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3301      	adds	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	635a      	str	r2, [r3, #52]	; 0x34
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	895b      	ldrh	r3, [r3, #10]
 800689a:	461a      	mov	r2, r3
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4293      	cmp	r3, r2
 80068a0:	d3e6      	bcc.n	8006870 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80068b4:	6979      	ldr	r1, [r7, #20]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff fb80 	bl	8005fbc <clust2sect>
 80068bc:	4602      	mov	r2, r0
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	899b      	ldrh	r3, [r3, #12]
 80068d2:	461a      	mov	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80068da:	fb02 f200 	mul.w	r2, r2, r0
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	18ca      	adds	r2, r1, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006900:	2100      	movs	r1, #0
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f7ff fe95 	bl	8006632 <dir_sdi>
 8006908:	4603      	mov	r3, r0
 800690a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d12b      	bne.n	800696a <dir_alloc+0x7a>
		n = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	4619      	mov	r1, r3
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f7ff faaf 	bl	8005e80 <move_window>
 8006922:	4603      	mov	r3, r0
 8006924:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d11d      	bne.n	8006968 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2be5      	cmp	r3, #229	; 0xe5
 8006934:	d004      	beq.n	8006940 <dir_alloc+0x50>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	3301      	adds	r3, #1
 8006944:	613b      	str	r3, [r7, #16]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d102      	bne.n	8006954 <dir_alloc+0x64>
 800694e:	e00c      	b.n	800696a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006954:	2101      	movs	r1, #1
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fef4 	bl	8006744 <dir_next>
 800695c:	4603      	mov	r3, r0
 800695e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0d7      	beq.n	8006916 <dir_alloc+0x26>
 8006966:	e000      	b.n	800696a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006968:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	2b04      	cmp	r3, #4
 800696e:	d101      	bne.n	8006974 <dir_alloc+0x84>
 8006970:	2307      	movs	r3, #7
 8006972:	75fb      	strb	r3, [r7, #23]
	return res;
 8006974:	7dfb      	ldrb	r3, [r7, #23]
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	331a      	adds	r3, #26
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe ff97 	bl	80058c0 <ld_word>
 8006992:	4603      	mov	r3, r0
 8006994:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b03      	cmp	r3, #3
 800699c:	d109      	bne.n	80069b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	3314      	adds	r3, #20
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe ff8c 	bl	80058c0 <ld_word>
 80069a8:	4603      	mov	r3, r0
 80069aa:	041b      	lsls	r3, r3, #16
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80069b2:	68fb      	ldr	r3, [r7, #12]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	331a      	adds	r3, #26
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	b292      	uxth	r2, r2
 80069d0:	4611      	mov	r1, r2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fe ffaf 	bl	8005936 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d109      	bne.n	80069f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f103 0214 	add.w	r2, r3, #20
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	f7fe ffa1 	bl	8005936 <st_word>
	}
}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff fe10 	bl	8006632 <dir_sdi>
 8006a12:	4603      	mov	r3, r0
 8006a14:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <dir_find+0x24>
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	e03e      	b.n	8006a9e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	4619      	mov	r1, r3
 8006a26:	6938      	ldr	r0, [r7, #16]
 8006a28:	f7ff fa2a 	bl	8005e80 <move_window>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d12f      	bne.n	8006a96 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006a3e:	7bfb      	ldrb	r3, [r7, #15]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <dir_find+0x4e>
 8006a44:	2304      	movs	r3, #4
 8006a46:	75fb      	strb	r3, [r7, #23]
 8006a48:	e028      	b.n	8006a9c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	330b      	adds	r3, #11
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	330b      	adds	r3, #11
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 0308 	and.w	r3, r3, #8
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <dir_find+0x86>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a18      	ldr	r0, [r3, #32]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3324      	adds	r3, #36	; 0x24
 8006a74:	220b      	movs	r2, #11
 8006a76:	4619      	mov	r1, r3
 8006a78:	f7fe ffdf 	bl	8005a3a <mem_cmp>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006a82:	2100      	movs	r1, #0
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff fe5d 	bl	8006744 <dir_next>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0c5      	beq.n	8006a20 <dir_find+0x24>
 8006a94:	e002      	b.n	8006a9c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006a96:	bf00      	nop
 8006a98:	e000      	b.n	8006a9c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006a9a:	bf00      	nop

	return res;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff ff1a 	bl	80068f0 <dir_alloc>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d11c      	bne.n	8006b00 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	4619      	mov	r1, r3
 8006acc:	68b8      	ldr	r0, [r7, #8]
 8006ace:	f7ff f9d7 	bl	8005e80 <move_window>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d111      	bne.n	8006b00 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe ff8e 	bl	8005a06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a18      	ldr	r0, [r3, #32]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3324      	adds	r3, #36	; 0x24
 8006af2:	220b      	movs	r2, #11
 8006af4:	4619      	mov	r1, r3
 8006af6:	f7fe ff65 	bl	80059c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2201      	movs	r2, #1
 8006afe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3324      	adds	r3, #36	; 0x24
 8006b20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006b22:	220b      	movs	r2, #11
 8006b24:	2120      	movs	r1, #32
 8006b26:	68b8      	ldr	r0, [r7, #8]
 8006b28:	f7fe ff6d 	bl	8005a06 <mem_set>
	si = i = 0; ni = 8;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	2308      	movs	r3, #8
 8006b36:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	617a      	str	r2, [r7, #20]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006b46:	7ffb      	ldrb	r3, [r7, #31]
 8006b48:	2b20      	cmp	r3, #32
 8006b4a:	d94e      	bls.n	8006bea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006b4c:	7ffb      	ldrb	r3, [r7, #31]
 8006b4e:	2b2f      	cmp	r3, #47	; 0x2f
 8006b50:	d006      	beq.n	8006b60 <create_name+0x54>
 8006b52:	7ffb      	ldrb	r3, [r7, #31]
 8006b54:	2b5c      	cmp	r3, #92	; 0x5c
 8006b56:	d110      	bne.n	8006b7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006b58:	e002      	b.n	8006b60 <create_name+0x54>
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	4413      	add	r3, r2
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b2f      	cmp	r3, #47	; 0x2f
 8006b6a:	d0f6      	beq.n	8006b5a <create_name+0x4e>
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	4413      	add	r3, r2
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b5c      	cmp	r3, #92	; 0x5c
 8006b76:	d0f0      	beq.n	8006b5a <create_name+0x4e>
			break;
 8006b78:	e038      	b.n	8006bec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006b7a:	7ffb      	ldrb	r3, [r7, #31]
 8006b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006b7e:	d003      	beq.n	8006b88 <create_name+0x7c>
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d30c      	bcc.n	8006ba2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b0b      	cmp	r3, #11
 8006b8c:	d002      	beq.n	8006b94 <create_name+0x88>
 8006b8e:	7ffb      	ldrb	r3, [r7, #31]
 8006b90:	2b2e      	cmp	r3, #46	; 0x2e
 8006b92:	d001      	beq.n	8006b98 <create_name+0x8c>
 8006b94:	2306      	movs	r3, #6
 8006b96:	e044      	b.n	8006c22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006b98:	2308      	movs	r3, #8
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	230b      	movs	r3, #11
 8006b9e:	61bb      	str	r3, [r7, #24]
			continue;
 8006ba0:	e022      	b.n	8006be8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006ba2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da04      	bge.n	8006bb4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006baa:	7ffb      	ldrb	r3, [r7, #31]
 8006bac:	3b80      	subs	r3, #128	; 0x80
 8006bae:	4a1f      	ldr	r2, [pc, #124]	; (8006c2c <create_name+0x120>)
 8006bb0:	5cd3      	ldrb	r3, [r2, r3]
 8006bb2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006bb4:	7ffb      	ldrb	r3, [r7, #31]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	481d      	ldr	r0, [pc, #116]	; (8006c30 <create_name+0x124>)
 8006bba:	f7fe ff65 	bl	8005a88 <chk_chr>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <create_name+0xbc>
 8006bc4:	2306      	movs	r3, #6
 8006bc6:	e02c      	b.n	8006c22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006bc8:	7ffb      	ldrb	r3, [r7, #31]
 8006bca:	2b60      	cmp	r3, #96	; 0x60
 8006bcc:	d905      	bls.n	8006bda <create_name+0xce>
 8006bce:	7ffb      	ldrb	r3, [r7, #31]
 8006bd0:	2b7a      	cmp	r3, #122	; 0x7a
 8006bd2:	d802      	bhi.n	8006bda <create_name+0xce>
 8006bd4:	7ffb      	ldrb	r3, [r7, #31]
 8006bd6:	3b20      	subs	r3, #32
 8006bd8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1c5a      	adds	r2, r3, #1
 8006bde:	613a      	str	r2, [r7, #16]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	4413      	add	r3, r2
 8006be4:	7ffa      	ldrb	r2, [r7, #31]
 8006be6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006be8:	e7a6      	b.n	8006b38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006bea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	441a      	add	r2, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <create_name+0xf4>
 8006bfc:	2306      	movs	r3, #6
 8006bfe:	e010      	b.n	8006c22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2be5      	cmp	r3, #229	; 0xe5
 8006c06:	d102      	bne.n	8006c0e <create_name+0x102>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2205      	movs	r2, #5
 8006c0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006c0e:	7ffb      	ldrb	r3, [r7, #31]
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d801      	bhi.n	8006c18 <create_name+0x10c>
 8006c14:	2204      	movs	r2, #4
 8006c16:	e000      	b.n	8006c1a <create_name+0x10e>
 8006c18:	2200      	movs	r2, #0
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	330b      	adds	r3, #11
 8006c1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006c20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3720      	adds	r7, #32
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	0800b4a0 	.word	0x0800b4a0
 8006c30:	0800b3e8 	.word	0x0800b3e8

08006c34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006c48:	e002      	b.n	8006c50 <follow_path+0x1c>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b2f      	cmp	r3, #47	; 0x2f
 8006c56:	d0f8      	beq.n	8006c4a <follow_path+0x16>
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006c5e:	d0f4      	beq.n	8006c4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2200      	movs	r2, #0
 8006c64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b1f      	cmp	r3, #31
 8006c6c:	d80a      	bhi.n	8006c84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2280      	movs	r2, #128	; 0x80
 8006c72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006c76:	2100      	movs	r1, #0
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff fcda 	bl	8006632 <dir_sdi>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]
 8006c82:	e048      	b.n	8006d16 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c84:	463b      	mov	r3, r7
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff ff3f 	bl	8006b0c <create_name>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d139      	bne.n	8006d0c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff feaf 	bl	80069fc <dir_find>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006ca8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006caa:	7dfb      	ldrb	r3, [r7, #23]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00a      	beq.n	8006cc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d12c      	bne.n	8006d10 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006cb6:	7afb      	ldrb	r3, [r7, #11]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d127      	bne.n	8006d10 <follow_path+0xdc>
 8006cc0:	2305      	movs	r3, #5
 8006cc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006cc4:	e024      	b.n	8006d10 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006cc6:	7afb      	ldrb	r3, [r7, #11]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d121      	bne.n	8006d14 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	799b      	ldrb	r3, [r3, #6]
 8006cd4:	f003 0310 	and.w	r3, r3, #16
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d102      	bne.n	8006ce2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006cdc:	2305      	movs	r3, #5
 8006cde:	75fb      	strb	r3, [r7, #23]
 8006ce0:	e019      	b.n	8006d16 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	8992      	ldrh	r2, [r2, #12]
 8006cf0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cf4:	fb02 f200 	mul.w	r2, r2, r0
 8006cf8:	1a9b      	subs	r3, r3, r2
 8006cfa:	440b      	add	r3, r1
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f7ff fe3d 	bl	800697e <ld_clust>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d0a:	e7bb      	b.n	8006c84 <follow_path+0x50>
			if (res != FR_OK) break;
 8006d0c:	bf00      	nop
 8006d0e:	e002      	b.n	8006d16 <follow_path+0xe2>
				break;
 8006d10:	bf00      	nop
 8006d12:	e000      	b.n	8006d16 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006d14:	bf00      	nop
			}
		}
	}

	return res;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d031      	beq.n	8006d9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	617b      	str	r3, [r7, #20]
 8006d3c:	e002      	b.n	8006d44 <get_ldnumber+0x24>
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	3301      	adds	r3, #1
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	d903      	bls.n	8006d54 <get_ldnumber+0x34>
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b3a      	cmp	r3, #58	; 0x3a
 8006d52:	d1f4      	bne.n	8006d3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b3a      	cmp	r3, #58	; 0x3a
 8006d5a:	d11c      	bne.n	8006d96 <get_ldnumber+0x76>
			tp = *path;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	60fa      	str	r2, [r7, #12]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	3b30      	subs	r3, #48	; 0x30
 8006d6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b09      	cmp	r3, #9
 8006d72:	d80e      	bhi.n	8006d92 <get_ldnumber+0x72>
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d10a      	bne.n	8006d92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d107      	bne.n	8006d92 <get_ldnumber+0x72>
					vol = (int)i;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	e002      	b.n	8006d9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006d96:	2300      	movs	r3, #0
 8006d98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006d9a:	693b      	ldr	r3, [r7, #16]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	70da      	strb	r2, [r3, #3]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dbe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff f85c 	bl	8005e80 <move_window>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <check_fs+0x2a>
 8006dce:	2304      	movs	r3, #4
 8006dd0:	e038      	b.n	8006e44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3338      	adds	r3, #56	; 0x38
 8006dd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe fd70 	bl	80058c0 <ld_word>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d001      	beq.n	8006df0 <check_fs+0x48>
 8006dec:	2303      	movs	r3, #3
 8006dee:	e029      	b.n	8006e44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006df6:	2be9      	cmp	r3, #233	; 0xe9
 8006df8:	d009      	beq.n	8006e0e <check_fs+0x66>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e00:	2beb      	cmp	r3, #235	; 0xeb
 8006e02:	d11e      	bne.n	8006e42 <check_fs+0x9a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e0a:	2b90      	cmp	r3, #144	; 0x90
 8006e0c:	d119      	bne.n	8006e42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3338      	adds	r3, #56	; 0x38
 8006e12:	3336      	adds	r3, #54	; 0x36
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe fd6b 	bl	80058f0 <ld_dword>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e20:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <check_fs+0xa4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d101      	bne.n	8006e2a <check_fs+0x82>
 8006e26:	2300      	movs	r3, #0
 8006e28:	e00c      	b.n	8006e44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3338      	adds	r3, #56	; 0x38
 8006e2e:	3352      	adds	r3, #82	; 0x52
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe fd5d 	bl	80058f0 <ld_dword>
 8006e36:	4602      	mov	r2, r0
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <check_fs+0xa8>)
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d101      	bne.n	8006e42 <check_fs+0x9a>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e000      	b.n	8006e44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006e42:	2302      	movs	r3, #2
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	00544146 	.word	0x00544146
 8006e50:	33544146 	.word	0x33544146

08006e54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b096      	sub	sp, #88	; 0x58
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff ff59 	bl	8006d20 <get_ldnumber>
 8006e6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da01      	bge.n	8006e7a <find_volume+0x26>
 8006e76:	230b      	movs	r3, #11
 8006e78:	e26c      	b.n	8007354 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006e7a:	4aa4      	ldr	r2, [pc, #656]	; (800710c <find_volume+0x2b8>)
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <find_volume+0x3a>
 8006e8a:	230c      	movs	r3, #12
 8006e8c:	e262      	b.n	8007354 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8006e8e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e90:	f7fe fe15 	bl	8005abe <lock_fs>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <find_volume+0x4a>
 8006e9a:	230f      	movs	r3, #15
 8006e9c:	e25a      	b.n	8007354 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ea2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	f023 0301 	bic.w	r3, r3, #1
 8006eaa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01a      	beq.n	8006eea <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	785b      	ldrb	r3, [r3, #1]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fc63 	bl	8005784 <disk_status>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006ec4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10c      	bne.n	8006eea <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d007      	beq.n	8006ee6 <find_volume+0x92>
 8006ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006ee2:	230a      	movs	r3, #10
 8006ee4:	e236      	b.n	8007354 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	e234      	b.n	8007354 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fe fc5b 	bl	80057b8 <disk_initialize>
 8006f02:	4603      	mov	r3, r0
 8006f04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006f08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006f14:	2303      	movs	r3, #3
 8006f16:	e21d      	b.n	8007354 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <find_volume+0xda>
 8006f1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d001      	beq.n	8006f2e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8006f2a:	230a      	movs	r3, #10
 8006f2c:	e212      	b.n	8007354 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	7858      	ldrb	r0, [r3, #1]
 8006f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f34:	330c      	adds	r3, #12
 8006f36:	461a      	mov	r2, r3
 8006f38:	2102      	movs	r1, #2
 8006f3a:	f7fe fca3 	bl	8005884 <disk_ioctl>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d001      	beq.n	8006f48 <find_volume+0xf4>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e205      	b.n	8007354 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	899b      	ldrh	r3, [r3, #12]
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f50:	d80d      	bhi.n	8006f6e <find_volume+0x11a>
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	899b      	ldrh	r3, [r3, #12]
 8006f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f5a:	d308      	bcc.n	8006f6e <find_volume+0x11a>
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	899b      	ldrh	r3, [r3, #12]
 8006f60:	461a      	mov	r2, r3
 8006f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f64:	899b      	ldrh	r3, [r3, #12]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	4013      	ands	r3, r2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <find_volume+0x11e>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e1f0      	b.n	8007354 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006f76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f7a:	f7ff ff15 	bl	8006da8 <check_fs>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006f84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d14b      	bne.n	8007024 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f90:	e01f      	b.n	8006fd2 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006fa0:	4413      	add	r3, r2
 8006fa2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d006      	beq.n	8006fbc <find_volume+0x168>
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fc9c 	bl	80058f0 <ld_dword>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	e000      	b.n	8006fbe <find_volume+0x16a>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006fc6:	440b      	add	r3, r1
 8006fc8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fce:	3301      	adds	r3, #1
 8006fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d9dc      	bls.n	8006f92 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006fd8:	2300      	movs	r3, #0
 8006fda:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006fdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <find_volume+0x194>
 8006fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ff6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <find_volume+0x1b6>
 8006ffe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007002:	f7ff fed1 	bl	8006da8 <check_fs>
 8007006:	4603      	mov	r3, r0
 8007008:	e000      	b.n	800700c <find_volume+0x1b8>
 800700a:	2303      	movs	r3, #3
 800700c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007014:	2b01      	cmp	r3, #1
 8007016:	d905      	bls.n	8007024 <find_volume+0x1d0>
 8007018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800701a:	3301      	adds	r3, #1
 800701c:	643b      	str	r3, [r7, #64]	; 0x40
 800701e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007020:	2b03      	cmp	r3, #3
 8007022:	d9e1      	bls.n	8006fe8 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007024:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007028:	2b04      	cmp	r3, #4
 800702a:	d101      	bne.n	8007030 <find_volume+0x1dc>
 800702c:	2301      	movs	r3, #1
 800702e:	e191      	b.n	8007354 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007034:	2b01      	cmp	r3, #1
 8007036:	d901      	bls.n	800703c <find_volume+0x1e8>
 8007038:	230d      	movs	r3, #13
 800703a:	e18b      	b.n	8007354 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	3338      	adds	r3, #56	; 0x38
 8007040:	330b      	adds	r3, #11
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe fc3c 	bl	80058c0 <ld_word>
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	899b      	ldrh	r3, [r3, #12]
 8007050:	429a      	cmp	r2, r3
 8007052:	d001      	beq.n	8007058 <find_volume+0x204>
 8007054:	230d      	movs	r3, #13
 8007056:	e17d      	b.n	8007354 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	3338      	adds	r3, #56	; 0x38
 800705c:	3316      	adds	r3, #22
 800705e:	4618      	mov	r0, r3
 8007060:	f7fe fc2e 	bl	80058c0 <ld_word>
 8007064:	4603      	mov	r3, r0
 8007066:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <find_volume+0x228>
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	3338      	adds	r3, #56	; 0x38
 8007072:	3324      	adds	r3, #36	; 0x24
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe fc3b 	bl	80058f0 <ld_dword>
 800707a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007080:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708e:	789b      	ldrb	r3, [r3, #2]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d005      	beq.n	80070a0 <find_volume+0x24c>
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	789b      	ldrb	r3, [r3, #2]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d001      	beq.n	80070a0 <find_volume+0x24c>
 800709c:	230d      	movs	r3, #13
 800709e:	e159      	b.n	8007354 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	789b      	ldrb	r3, [r3, #2]
 80070a4:	461a      	mov	r2, r3
 80070a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a8:	fb02 f303 	mul.w	r3, r2, r3
 80070ac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80070ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	895b      	ldrh	r3, [r3, #10]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d008      	beq.n	80070d4 <find_volume+0x280>
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	895b      	ldrh	r3, [r3, #10]
 80070c6:	461a      	mov	r2, r3
 80070c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ca:	895b      	ldrh	r3, [r3, #10]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	4013      	ands	r3, r2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <find_volume+0x284>
 80070d4:	230d      	movs	r3, #13
 80070d6:	e13d      	b.n	8007354 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	3338      	adds	r3, #56	; 0x38
 80070dc:	3311      	adds	r3, #17
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe fbee 	bl	80058c0 <ld_word>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	891b      	ldrh	r3, [r3, #8]
 80070f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070f2:	8992      	ldrh	r2, [r2, #12]
 80070f4:	0952      	lsrs	r2, r2, #5
 80070f6:	b292      	uxth	r2, r2
 80070f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80070fc:	fb02 f201 	mul.w	r2, r2, r1
 8007100:	1a9b      	subs	r3, r3, r2
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <find_volume+0x2bc>
 8007108:	230d      	movs	r3, #13
 800710a:	e123      	b.n	8007354 <find_volume+0x500>
 800710c:	20000774 	.word	0x20000774

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	3338      	adds	r3, #56	; 0x38
 8007114:	3313      	adds	r3, #19
 8007116:	4618      	mov	r0, r3
 8007118:	f7fe fbd2 	bl	80058c0 <ld_word>
 800711c:	4603      	mov	r3, r0
 800711e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <find_volume+0x2e0>
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	3338      	adds	r3, #56	; 0x38
 800712a:	3320      	adds	r3, #32
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fbdf 	bl	80058f0 <ld_dword>
 8007132:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007136:	3338      	adds	r3, #56	; 0x38
 8007138:	330e      	adds	r3, #14
 800713a:	4618      	mov	r0, r3
 800713c:	f7fe fbc0 	bl	80058c0 <ld_word>
 8007140:	4603      	mov	r3, r0
 8007142:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007144:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <find_volume+0x2fa>
 800714a:	230d      	movs	r3, #13
 800714c:	e102      	b.n	8007354 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800714e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007152:	4413      	add	r3, r2
 8007154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007156:	8911      	ldrh	r1, [r2, #8]
 8007158:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800715a:	8992      	ldrh	r2, [r2, #12]
 800715c:	0952      	lsrs	r2, r2, #5
 800715e:	b292      	uxth	r2, r2
 8007160:	fbb1 f2f2 	udiv	r2, r1, r2
 8007164:	b292      	uxth	r2, r2
 8007166:	4413      	add	r3, r2
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800716a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	429a      	cmp	r2, r3
 8007170:	d201      	bcs.n	8007176 <find_volume+0x322>
 8007172:	230d      	movs	r3, #13
 8007174:	e0ee      	b.n	8007354 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800717e:	8952      	ldrh	r2, [r2, #10]
 8007180:	fbb3 f3f2 	udiv	r3, r3, r2
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <find_volume+0x33c>
 800718c:	230d      	movs	r3, #13
 800718e:	e0e1      	b.n	8007354 <find_volume+0x500>
		fmt = FS_FAT32;
 8007190:	2303      	movs	r3, #3
 8007192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800719c:	4293      	cmp	r3, r2
 800719e:	d802      	bhi.n	80071a6 <find_volume+0x352>
 80071a0:	2302      	movs	r3, #2
 80071a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d802      	bhi.n	80071b6 <find_volume+0x362>
 80071b0:	2301      	movs	r3, #1
 80071b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	1c9a      	adds	r2, r3, #2
 80071ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071bc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80071be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80071c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80071c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071c8:	441a      	add	r2, r3
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80071ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	441a      	add	r2, r3
 80071d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80071d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d11e      	bne.n	800721e <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80071e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e2:	3338      	adds	r3, #56	; 0x38
 80071e4:	332a      	adds	r3, #42	; 0x2a
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fe fb6a 	bl	80058c0 <ld_word>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <find_volume+0x3a2>
 80071f2:	230d      	movs	r3, #13
 80071f4:	e0ae      	b.n	8007354 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	891b      	ldrh	r3, [r3, #8]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <find_volume+0x3ae>
 80071fe:	230d      	movs	r3, #13
 8007200:	e0a8      	b.n	8007354 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	3338      	adds	r3, #56	; 0x38
 8007206:	332c      	adds	r3, #44	; 0x2c
 8007208:	4618      	mov	r0, r3
 800720a:	f7fe fb71 	bl	80058f0 <ld_dword>
 800720e:	4602      	mov	r2, r0
 8007210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007212:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	647b      	str	r3, [r7, #68]	; 0x44
 800721c:	e01f      	b.n	800725e <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	891b      	ldrh	r3, [r3, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d101      	bne.n	800722a <find_volume+0x3d6>
 8007226:	230d      	movs	r3, #13
 8007228:	e094      	b.n	8007354 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800722e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007230:	441a      	add	r2, r3
 8007232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007234:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007236:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800723a:	2b02      	cmp	r3, #2
 800723c:	d103      	bne.n	8007246 <find_volume+0x3f2>
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	e00a      	b.n	800725c <find_volume+0x408>
 8007246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	4613      	mov	r3, r2
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	4413      	add	r3, r2
 8007250:	085a      	lsrs	r2, r3, #1
 8007252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800725c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800725e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007260:	6a1a      	ldr	r2, [r3, #32]
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	899b      	ldrh	r3, [r3, #12]
 8007266:	4619      	mov	r1, r3
 8007268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800726a:	440b      	add	r3, r1
 800726c:	3b01      	subs	r3, #1
 800726e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007270:	8989      	ldrh	r1, [r1, #12]
 8007272:	fbb3 f3f1 	udiv	r3, r3, r1
 8007276:	429a      	cmp	r2, r3
 8007278:	d201      	bcs.n	800727e <find_volume+0x42a>
 800727a:	230d      	movs	r3, #13
 800727c:	e06a      	b.n	8007354 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800727e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007284:	619a      	str	r2, [r3, #24]
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	2280      	movs	r2, #128	; 0x80
 8007292:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007298:	2b03      	cmp	r3, #3
 800729a:	d149      	bne.n	8007330 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	3338      	adds	r3, #56	; 0x38
 80072a0:	3330      	adds	r3, #48	; 0x30
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fb0c 	bl	80058c0 <ld_word>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d140      	bne.n	8007330 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80072ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b0:	3301      	adds	r3, #1
 80072b2:	4619      	mov	r1, r3
 80072b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072b6:	f7fe fde3 	bl	8005e80 <move_window>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d137      	bne.n	8007330 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	2200      	movs	r2, #0
 80072c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	3338      	adds	r3, #56	; 0x38
 80072ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7fe faf6 	bl	80058c0 <ld_word>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80072dc:	429a      	cmp	r2, r3
 80072de:	d127      	bne.n	8007330 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80072e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e2:	3338      	adds	r3, #56	; 0x38
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fb03 	bl	80058f0 <ld_dword>
 80072ea:	4602      	mov	r2, r0
 80072ec:	4b1b      	ldr	r3, [pc, #108]	; (800735c <find_volume+0x508>)
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d11e      	bne.n	8007330 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	3338      	adds	r3, #56	; 0x38
 80072f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fe faf8 	bl	80058f0 <ld_dword>
 8007300:	4602      	mov	r2, r0
 8007302:	4b17      	ldr	r3, [pc, #92]	; (8007360 <find_volume+0x50c>)
 8007304:	429a      	cmp	r2, r3
 8007306:	d113      	bne.n	8007330 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	3338      	adds	r3, #56	; 0x38
 800730c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007310:	4618      	mov	r0, r3
 8007312:	f7fe faed 	bl	80058f0 <ld_dword>
 8007316:	4602      	mov	r2, r0
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800731c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731e:	3338      	adds	r3, #56	; 0x38
 8007320:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007324:	4618      	mov	r0, r3
 8007326:	f7fe fae3 	bl	80058f0 <ld_dword>
 800732a:	4602      	mov	r2, r0
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007332:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007336:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <find_volume+0x510>)
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	4b08      	ldr	r3, [pc, #32]	; (8007364 <find_volume+0x510>)
 8007342:	801a      	strh	r2, [r3, #0]
 8007344:	4b07      	ldr	r3, [pc, #28]	; (8007364 <find_volume+0x510>)
 8007346:	881a      	ldrh	r2, [r3, #0]
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800734c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800734e:	f7fe fd2f 	bl	8005db0 <clear_lock>
#endif
	return FR_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3758      	adds	r7, #88	; 0x58
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	41615252 	.word	0x41615252
 8007360:	61417272 	.word	0x61417272
 8007364:	20000778 	.word	0x20000778

08007368 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007372:	2309      	movs	r3, #9
 8007374:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d02e      	beq.n	80073da <validate+0x72>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d02a      	beq.n	80073da <validate+0x72>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d025      	beq.n	80073da <validate+0x72>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	889a      	ldrh	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	88db      	ldrh	r3, [r3, #6]
 8007398:	429a      	cmp	r2, r3
 800739a:	d11e      	bne.n	80073da <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe fb8c 	bl	8005abe <lock_fs>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d014      	beq.n	80073d6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	785b      	ldrb	r3, [r3, #1]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fe f9e6 	bl	8005784 <disk_status>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <validate+0x60>
				res = FR_OK;
 80073c2:	2300      	movs	r3, #0
 80073c4:	73fb      	strb	r3, [r7, #15]
 80073c6:	e008      	b.n	80073da <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe fb8b 	bl	8005aea <unlock_fs>
 80073d4:	e001      	b.n	80073da <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80073d6:	230f      	movs	r3, #15
 80073d8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <validate+0x7e>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	e000      	b.n	80073e8 <validate+0x80>
 80073e6:	2300      	movs	r3, #0
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	6013      	str	r3, [r2, #0]
	return res;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800740a:	f107 0310 	add.w	r3, r7, #16
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff fc86 	bl	8006d20 <get_ldnumber>
 8007414:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	2b00      	cmp	r3, #0
 800741a:	da01      	bge.n	8007420 <f_mount+0x28>
 800741c:	230b      	movs	r3, #11
 800741e:	e048      	b.n	80074b2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007420:	4a26      	ldr	r2, [pc, #152]	; (80074bc <f_mount+0xc4>)
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007428:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00f      	beq.n	8007450 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007430:	69b8      	ldr	r0, [r7, #24]
 8007432:	f7fe fcbd 	bl	8005db0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fd09 	bl	8007e52 <ff_del_syncobj>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d101      	bne.n	800744a <f_mount+0x52>
 8007446:	2302      	movs	r3, #2
 8007448:	e033      	b.n	80074b2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2200      	movs	r2, #0
 800744e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00f      	beq.n	8007476 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	b2da      	uxtb	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3310      	adds	r3, #16
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f000 fcd3 	bl	8007e12 <ff_cre_syncobj>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <f_mount+0x7e>
 8007472:	2302      	movs	r3, #2
 8007474:	e01d      	b.n	80074b2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4910      	ldr	r1, [pc, #64]	; (80074bc <f_mount+0xc4>)
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <f_mount+0x94>
 8007486:	79fb      	ldrb	r3, [r7, #7]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d001      	beq.n	8007490 <f_mount+0x98>
 800748c:	2300      	movs	r3, #0
 800748e:	e010      	b.n	80074b2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007490:	f107 010c 	add.w	r1, r7, #12
 8007494:	f107 0308 	add.w	r3, r7, #8
 8007498:	2200      	movs	r2, #0
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fcda 	bl	8006e54 <find_volume>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	7dfa      	ldrb	r2, [r7, #23]
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fb1d 	bl	8005aea <unlock_fs>
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3720      	adds	r7, #32
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000774 	.word	0x20000774

080074c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b098      	sub	sp, #96	; 0x60
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	4613      	mov	r3, r2
 80074cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <f_open+0x18>
 80074d4:	2309      	movs	r3, #9
 80074d6:	e1c2      	b.n	800785e <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80074d8:	79fb      	ldrb	r3, [r7, #7]
 80074da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074de:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80074e0:	79fa      	ldrb	r2, [r7, #7]
 80074e2:	f107 0110 	add.w	r1, r7, #16
 80074e6:	f107 0308 	add.w	r3, r7, #8
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fcb2 	bl	8006e54 <find_volume>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80074f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 819f 	bne.w	800783e <f_open+0x37e>
		dj.obj.fs = fs;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	f107 0314 	add.w	r3, r7, #20
 800750a:	4611      	mov	r1, r2
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fb91 	bl	8006c34 <follow_path>
 8007512:	4603      	mov	r3, r0
 8007514:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800751c:	2b00      	cmp	r3, #0
 800751e:	d11a      	bne.n	8007556 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007520:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007524:	b25b      	sxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	da03      	bge.n	8007532 <f_open+0x72>
				res = FR_INVALID_NAME;
 800752a:	2306      	movs	r3, #6
 800752c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007530:	e011      	b.n	8007556 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	f023 0301 	bic.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	bf14      	ite	ne
 800753c:	2301      	movne	r3, #1
 800753e:	2300      	moveq	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	f107 0314 	add.w	r3, r7, #20
 8007548:	4611      	mov	r1, r2
 800754a:	4618      	mov	r0, r3
 800754c:	f7fe fae8 	bl	8005b20 <chk_lock>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	f003 031c 	and.w	r3, r3, #28
 800755c:	2b00      	cmp	r3, #0
 800755e:	d07f      	beq.n	8007660 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007564:	2b00      	cmp	r3, #0
 8007566:	d017      	beq.n	8007598 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800756c:	2b04      	cmp	r3, #4
 800756e:	d10e      	bne.n	800758e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007570:	f7fe fb32 	bl	8005bd8 <enq_lock>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d006      	beq.n	8007588 <f_open+0xc8>
 800757a:	f107 0314 	add.w	r3, r7, #20
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fa91 	bl	8006aa6 <dir_register>
 8007584:	4603      	mov	r3, r0
 8007586:	e000      	b.n	800758a <f_open+0xca>
 8007588:	2312      	movs	r3, #18
 800758a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	f043 0308 	orr.w	r3, r3, #8
 8007594:	71fb      	strb	r3, [r7, #7]
 8007596:	e010      	b.n	80075ba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007598:	7ebb      	ldrb	r3, [r7, #26]
 800759a:	f003 0311 	and.w	r3, r3, #17
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <f_open+0xea>
					res = FR_DENIED;
 80075a2:	2307      	movs	r3, #7
 80075a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80075a8:	e007      	b.n	80075ba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80075aa:	79fb      	ldrb	r3, [r7, #7]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <f_open+0xfa>
 80075b4:	2308      	movs	r3, #8
 80075b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80075ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d168      	bne.n	8007694 <f_open+0x1d4>
 80075c2:	79fb      	ldrb	r3, [r7, #7]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d063      	beq.n	8007694 <f_open+0x1d4>
				dw = GET_FATTIME();
 80075cc:	f7fd feea 	bl	80053a4 <get_fattime>
 80075d0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	330e      	adds	r3, #14
 80075d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe f9c7 	bl	800596c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	3316      	adds	r3, #22
 80075e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe f9c1 	bl	800596c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80075ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ec:	330b      	adds	r3, #11
 80075ee:	2220      	movs	r2, #32
 80075f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff f9c0 	bl	800697e <ld_clust>
 80075fe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007604:	2200      	movs	r2, #0
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff f9d8 	bl	80069bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800760c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800760e:	331c      	adds	r3, #28
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f7fe f9aa 	bl	800596c <st_dword>
					fs->wflag = 1;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	2201      	movs	r2, #1
 800761c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800761e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d037      	beq.n	8007694 <f_open+0x1d4>
						dw = fs->winsect;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007628:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800762a:	f107 0314 	add.w	r3, r7, #20
 800762e:	2200      	movs	r2, #0
 8007630:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fec8 	bl	80063c8 <remove_chain>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800763e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007642:	2b00      	cmp	r3, #0
 8007644:	d126      	bne.n	8007694 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800764a:	4618      	mov	r0, r3
 800764c:	f7fe fc18 	bl	8005e80 <move_window>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800765a:	3a01      	subs	r2, #1
 800765c:	615a      	str	r2, [r3, #20]
 800765e:	e019      	b.n	8007694 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007664:	2b00      	cmp	r3, #0
 8007666:	d115      	bne.n	8007694 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007668:	7ebb      	ldrb	r3, [r7, #26]
 800766a:	f003 0310 	and.w	r3, r3, #16
 800766e:	2b00      	cmp	r3, #0
 8007670:	d003      	beq.n	800767a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007672:	2304      	movs	r3, #4
 8007674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007678:	e00c      	b.n	8007694 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d007      	beq.n	8007694 <f_open+0x1d4>
 8007684:	7ebb      	ldrb	r3, [r7, #26]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <f_open+0x1d4>
						res = FR_DENIED;
 800768e:	2307      	movs	r3, #7
 8007690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007698:	2b00      	cmp	r3, #0
 800769a:	d128      	bne.n	80076ee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800769c:	79fb      	ldrb	r3, [r7, #7]
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80076b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	f023 0301 	bic.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bf14      	ite	ne
 80076c6:	2301      	movne	r3, #1
 80076c8:	2300      	moveq	r3, #0
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	461a      	mov	r2, r3
 80076ce:	f107 0314 	add.w	r3, r7, #20
 80076d2:	4611      	mov	r1, r2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fe faa1 	bl	8005c1c <inc_lock>
 80076da:	4602      	mov	r2, r0
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d102      	bne.n	80076ee <f_open+0x22e>
 80076e8:	2302      	movs	r3, #2
 80076ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80076ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f040 80a3 	bne.w	800783e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076fc:	4611      	mov	r1, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff f93d 	bl	800697e <ld_clust>
 8007704:	4602      	mov	r2, r0
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	331c      	adds	r3, #28
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe f8ee 	bl	80058f0 <ld_dword>
 8007714:	4602      	mov	r2, r0
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	88da      	ldrh	r2, [r3, #6]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	79fa      	ldrb	r2, [r7, #7]
 8007732:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	3330      	adds	r3, #48	; 0x30
 800774a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800774e:	2100      	movs	r1, #0
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe f958 	bl	8005a06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	d06e      	beq.n	800783e <f_open+0x37e>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d06a      	beq.n	800783e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	895b      	ldrh	r3, [r3, #10]
 8007774:	461a      	mov	r2, r3
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	899b      	ldrh	r3, [r3, #12]
 800777a:	fb03 f302 	mul.w	r3, r3, r2
 800777e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	657b      	str	r3, [r7, #84]	; 0x54
 800778c:	e016      	b.n	80077bc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fc31 	bl	8005ffa <get_fat>
 8007798:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800779a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800779c:	2b01      	cmp	r3, #1
 800779e:	d802      	bhi.n	80077a6 <f_open+0x2e6>
 80077a0:	2302      	movs	r3, #2
 80077a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80077a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ac:	d102      	bne.n	80077b4 <f_open+0x2f4>
 80077ae:	2301      	movs	r3, #1
 80077b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80077b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	657b      	str	r3, [r7, #84]	; 0x54
 80077bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <f_open+0x30c>
 80077c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80077c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d8e0      	bhi.n	800778e <f_open+0x2ce>
				}
				fp->clust = clst;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80077d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d131      	bne.n	800783e <f_open+0x37e>
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	899b      	ldrh	r3, [r3, #12]
 80077de:	461a      	mov	r2, r3
 80077e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80077e6:	fb02 f201 	mul.w	r2, r2, r1
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d026      	beq.n	800783e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fe fbe1 	bl	8005fbc <clust2sect>
 80077fa:	6478      	str	r0, [r7, #68]	; 0x44
 80077fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d103      	bne.n	800780a <f_open+0x34a>
						res = FR_INT_ERR;
 8007802:	2302      	movs	r3, #2
 8007804:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007808:	e019      	b.n	800783e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	899b      	ldrh	r3, [r3, #12]
 800780e:	461a      	mov	r2, r3
 8007810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007812:	fbb3 f2f2 	udiv	r2, r3, r2
 8007816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007818:	441a      	add	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	7858      	ldrb	r0, [r3, #1]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6a1a      	ldr	r2, [r3, #32]
 800782c:	2301      	movs	r3, #1
 800782e:	f7fd ffe9 	bl	8005804 <disk_read>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <f_open+0x37e>
 8007838:	2301      	movs	r3, #1
 800783a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800783e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <f_open+0x38c>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe f948 	bl	8005aea <unlock_fs>
 800785a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800785e:	4618      	mov	r0, r3
 8007860:	3760      	adds	r7, #96	; 0x60
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b08c      	sub	sp, #48	; 0x30
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f107 0210 	add.w	r2, r7, #16
 8007884:	4611      	mov	r1, r2
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff fd6e 	bl	8007368 <validate>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007896:	2b00      	cmp	r3, #0
 8007898:	d107      	bne.n	80078aa <f_write+0x44>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	7d5b      	ldrb	r3, [r3, #21]
 800789e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80078a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <f_write+0x58>
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe f919 	bl	8005aea <unlock_fs>
 80078b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80078bc:	e192      	b.n	8007be4 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	7d1b      	ldrb	r3, [r3, #20]
 80078c2:	f003 0302 	and.w	r3, r3, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <f_write+0x72>
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2107      	movs	r1, #7
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe f90b 	bl	8005aea <unlock_fs>
 80078d4:	2307      	movs	r3, #7
 80078d6:	e185      	b.n	8007be4 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	699a      	ldr	r2, [r3, #24]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	441a      	add	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	f080 816a 	bcs.w	8007bbe <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	43db      	mvns	r3, r3
 80078f0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80078f2:	e164      	b.n	8007bbe <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	8992      	ldrh	r2, [r2, #12]
 80078fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007900:	fb02 f201 	mul.w	r2, r2, r1
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 810f 	bne.w	8007b2a <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	8992      	ldrh	r2, [r2, #12]
 8007914:	fbb3 f3f2 	udiv	r3, r3, r2
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	8952      	ldrh	r2, [r2, #10]
 800791c:	3a01      	subs	r2, #1
 800791e:	4013      	ands	r3, r2
 8007920:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d14d      	bne.n	80079c4 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10c      	bne.n	800794a <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11a      	bne.n	8007972 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f7fe fda6 	bl	8006492 <create_chain>
 8007946:	62b8      	str	r0, [r7, #40]	; 0x28
 8007948:	e013      	b.n	8007972 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	4619      	mov	r1, r3
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f7fe fe32 	bl	80065c2 <clmt_clust>
 800795e:	62b8      	str	r0, [r7, #40]	; 0x28
 8007960:	e007      	b.n	8007972 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	69db      	ldr	r3, [r3, #28]
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fe fd91 	bl	8006492 <create_chain>
 8007970:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 8127 	beq.w	8007bc8 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800797a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797c:	2b01      	cmp	r3, #1
 800797e:	d109      	bne.n	8007994 <f_write+0x12e>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2202      	movs	r2, #2
 8007984:	755a      	strb	r2, [r3, #21]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	2102      	movs	r1, #2
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe f8ad 	bl	8005aea <unlock_fs>
 8007990:	2302      	movs	r3, #2
 8007992:	e127      	b.n	8007be4 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800799a:	d109      	bne.n	80079b0 <f_write+0x14a>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	755a      	strb	r2, [r3, #21]
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2101      	movs	r1, #1
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe f89f 	bl	8005aea <unlock_fs>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e119      	b.n	8007be4 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079b4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d102      	bne.n	80079c4 <f_write+0x15e>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079c2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	7d1b      	ldrb	r3, [r3, #20]
 80079c8:	b25b      	sxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	da1d      	bge.n	8007a0a <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	7858      	ldrb	r0, [r3, #1]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a1a      	ldr	r2, [r3, #32]
 80079dc:	2301      	movs	r3, #1
 80079de:	f7fd ff31 	bl	8005844 <disk_write>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <f_write+0x196>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	755a      	strb	r2, [r3, #21]
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	2101      	movs	r1, #1
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fe f879 	bl	8005aea <unlock_fs>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0f3      	b.n	8007be4 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	7d1b      	ldrb	r3, [r3, #20]
 8007a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	4619      	mov	r1, r3
 8007a12:	4610      	mov	r0, r2
 8007a14:	f7fe fad2 	bl	8005fbc <clust2sect>
 8007a18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d109      	bne.n	8007a34 <f_write+0x1ce>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2202      	movs	r2, #2
 8007a24:	755a      	strb	r2, [r3, #21]
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	2102      	movs	r1, #2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fe f85d 	bl	8005aea <unlock_fs>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e0d7      	b.n	8007be4 <f_write+0x37e>
			sect += csect;
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	4413      	add	r3, r2
 8007a3a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	899b      	ldrh	r3, [r3, #12]
 8007a40:	461a      	mov	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a48:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d048      	beq.n	8007ae2 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	4413      	add	r3, r2
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	8952      	ldrh	r2, [r2, #10]
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d905      	bls.n	8007a6a <f_write+0x204>
					cc = fs->csize - csect;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	895b      	ldrh	r3, [r3, #10]
 8007a62:	461a      	mov	r2, r3
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	7858      	ldrb	r0, [r3, #1]
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	69f9      	ldr	r1, [r7, #28]
 8007a74:	f7fd fee6 	bl	8005844 <disk_write>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <f_write+0x22c>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	755a      	strb	r2, [r3, #21]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fe f82e 	bl	8005aea <unlock_fs>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e0a8      	b.n	8007be4 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1a      	ldr	r2, [r3, #32]
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	6a3a      	ldr	r2, [r7, #32]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d918      	bls.n	8007ad2 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6a1a      	ldr	r2, [r3, #32]
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	8992      	ldrh	r2, [r2, #12]
 8007ab2:	fb02 f303 	mul.w	r3, r2, r3
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	18d1      	adds	r1, r2, r3
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	899b      	ldrh	r3, [r3, #12]
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f7fd ff80 	bl	80059c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	7d1b      	ldrb	r3, [r3, #20]
 8007ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	899b      	ldrh	r3, [r3, #12]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	fb02 f303 	mul.w	r3, r2, r3
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007ae0:	e050      	b.n	8007b84 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d01b      	beq.n	8007b24 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	699a      	ldr	r2, [r3, #24]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d215      	bcs.n	8007b24 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	7858      	ldrb	r0, [r3, #1]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b02:	2301      	movs	r3, #1
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	f7fd fe7d 	bl	8005804 <disk_read>
 8007b0a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d009      	beq.n	8007b24 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2201      	movs	r2, #1
 8007b14:	755a      	strb	r2, [r3, #21]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	2101      	movs	r1, #1
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fd ffe5 	bl	8005aea <unlock_fs>
 8007b20:	2301      	movs	r3, #1
 8007b22:	e05f      	b.n	8007be4 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	899b      	ldrh	r3, [r3, #12]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	8992      	ldrh	r2, [r2, #12]
 8007b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b3c:	fb02 f201 	mul.w	r2, r2, r1
 8007b40:	1a9b      	subs	r3, r3, r2
 8007b42:	1ac3      	subs	r3, r0, r3
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d901      	bls.n	8007b52 <f_write+0x2ec>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	8992      	ldrh	r2, [r2, #12]
 8007b60:	fbb3 f0f2 	udiv	r0, r3, r2
 8007b64:	fb02 f200 	mul.w	r2, r2, r0
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	440b      	add	r3, r1
 8007b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b6e:	69f9      	ldr	r1, [r7, #28]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fd ff27 	bl	80059c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	7d1b      	ldrb	r3, [r3, #20]
 8007b7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	4413      	add	r3, r2
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	699a      	ldr	r2, [r3, #24]
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	441a      	add	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	619a      	str	r2, [r3, #24]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	bf38      	it	cc
 8007ba4:	461a      	movcc	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	60da      	str	r2, [r3, #12]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb0:	441a      	add	r2, r3
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f47f ae97 	bne.w	80078f4 <f_write+0x8e>
 8007bc6:	e000      	b.n	8007bca <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007bc8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	7d1b      	ldrb	r3, [r3, #20]
 8007bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd2:	b2da      	uxtb	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fd ff84 	bl	8005aea <unlock_fs>
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3730      	adds	r7, #48	; 0x30
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f107 0208 	add.w	r2, r7, #8
 8007bfa:	4611      	mov	r1, r2
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7ff fbb3 	bl	8007368 <validate>
 8007c02:	4603      	mov	r3, r0
 8007c04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d16d      	bne.n	8007ce8 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7d1b      	ldrb	r3, [r3, #20]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d067      	beq.n	8007ce8 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	7d1b      	ldrb	r3, [r3, #20]
 8007c1c:	b25b      	sxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da1a      	bge.n	8007c58 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	7858      	ldrb	r0, [r3, #1]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1a      	ldr	r2, [r3, #32]
 8007c30:	2301      	movs	r3, #1
 8007c32:	f7fd fe07 	bl	8005844 <disk_write>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d006      	beq.n	8007c4a <f_sync+0x5e>
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2101      	movs	r1, #1
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fd ff52 	bl	8005aea <unlock_fs>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e055      	b.n	8007cf6 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7d1b      	ldrb	r3, [r3, #20]
 8007c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c58:	f7fd fba4 	bl	80053a4 <get_fattime>
 8007c5c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7fe f90a 	bl	8005e80 <move_window>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c70:	7dfb      	ldrb	r3, [r7, #23]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d138      	bne.n	8007ce8 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	330b      	adds	r3, #11
 8007c80:	781a      	ldrb	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	330b      	adds	r3, #11
 8007c86:	f042 0220 	orr.w	r2, r2, #32
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	461a      	mov	r2, r3
 8007c98:	68f9      	ldr	r1, [r7, #12]
 8007c9a:	f7fe fe8f 	bl	80069bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f103 021c 	add.w	r2, r3, #28
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	4619      	mov	r1, r3
 8007caa:	4610      	mov	r0, r2
 8007cac:	f7fd fe5e 	bl	800596c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3316      	adds	r3, #22
 8007cb4:	6939      	ldr	r1, [r7, #16]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fd fe58 	bl	800596c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3312      	adds	r3, #18
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fd fe37 	bl	8005936 <st_word>
					fs->wflag = 1;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe f903 	bl	8005edc <sync_fs>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7d1b      	ldrb	r3, [r3, #20]
 8007cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	7dfa      	ldrb	r2, [r7, #23]
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fd fefb 	bl	8005aea <unlock_fs>
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7ff ff70 	bl	8007bec <f_sync>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d11d      	bne.n	8007d52 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f107 0208 	add.w	r2, r7, #8
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7ff fb22 	bl	8007368 <validate>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d111      	bne.n	8007d52 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe f800 	bl	8005d38 <dec_lock>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd fecc 	bl	8005aea <unlock_fs>
#endif
		}
	}
	return res;
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d72:	4b1f      	ldr	r3, [pc, #124]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d74:	7a5b      	ldrb	r3, [r3, #9]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d131      	bne.n	8007de0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d7c:	4b1c      	ldr	r3, [pc, #112]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d7e:	7a5b      	ldrb	r3, [r3, #9]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d86:	2100      	movs	r1, #0
 8007d88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007d8a:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d8c:	7a5b      	ldrb	r3, [r3, #9]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4a17      	ldr	r2, [pc, #92]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d9a:	4b15      	ldr	r3, [pc, #84]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007d9c:	7a5b      	ldrb	r3, [r3, #9]
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007da4:	4413      	add	r3, r2
 8007da6:	79fa      	ldrb	r2, [r7, #7]
 8007da8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007daa:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007dac:	7a5b      	ldrb	r3, [r3, #9]
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	1c5a      	adds	r2, r3, #1
 8007db2:	b2d1      	uxtb	r1, r2
 8007db4:	4a0e      	ldr	r2, [pc, #56]	; (8007df0 <FATFS_LinkDriverEx+0x94>)
 8007db6:	7251      	strb	r1, [r2, #9]
 8007db8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007dba:	7dbb      	ldrb	r3, [r7, #22]
 8007dbc:	3330      	adds	r3, #48	; 0x30
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	223a      	movs	r2, #58	; 0x3a
 8007dca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	3302      	adds	r3, #2
 8007dd0:	222f      	movs	r2, #47	; 0x2f
 8007dd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	3303      	adds	r3, #3
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	2000079c 	.word	0x2000079c

08007df4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007dfe:	2200      	movs	r2, #0
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7ff ffaa 	bl	8007d5c <FATFS_LinkDriverEx>
 8007e08:	4603      	mov	r3, r0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b086      	sub	sp, #24
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	4603      	mov	r3, r0
 8007e1a:	6039      	str	r1, [r7, #0]
 8007e1c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	2300      	movs	r3, #0
 8007e24:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007e26:	f107 030c 	add.w	r3, r7, #12
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 f8e9 	bl	8008004 <osSemaphoreCreate>
 8007e32:	4602      	mov	r2, r0
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	bf14      	ite	ne
 8007e40:	2301      	movne	r3, #1
 8007e42:	2300      	moveq	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	617b      	str	r3, [r7, #20]

    return ret;
 8007e48:	697b      	ldr	r3, [r7, #20]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b082      	sub	sp, #8
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f98a 	bl	8008174 <osSemaphoreDelete>
#endif
    return 1;
 8007e60:	2301      	movs	r3, #1
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8007e76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f8f6 	bl	800806c <osSemaphoreWait>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8007e86:	2301      	movs	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f933 	bl	8008108 <osSemaphoreRelease>
#endif
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b085      	sub	sp, #20
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ebc:	2b84      	cmp	r3, #132	; 0x84
 8007ebe:	d005      	beq.n	8007ecc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007ec0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	3303      	adds	r3, #3
 8007eca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007eda:	b480      	push	{r7}
 8007edc:	b083      	sub	sp, #12
 8007ede:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ee0:	f3ef 8305 	mrs	r3, IPSR
 8007ee4:	607b      	str	r3, [r7, #4]
  return(result);
 8007ee6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	bf14      	ite	ne
 8007eec:	2301      	movne	r3, #1
 8007eee:	2300      	moveq	r3, #0
 8007ef0:	b2db      	uxtb	r3, r3
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007f02:	f001 fc25 	bl	8009750 <vTaskStartScheduler>
  
  return osOK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8007f10:	f002 f864 	bl	8009fdc <xTaskGetSchedulerState>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <osKernelRunning+0x12>
    return 0;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	e000      	b.n	8007f20 <osKernelRunning+0x14>
  else
    return 1;
 8007f1e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007f28:	f7ff ffd7 	bl	8007eda <inHandlerMode>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007f32:	f001 fd2b 	bl	800998c <xTaskGetTickCountFromISR>
 8007f36:	4603      	mov	r3, r0
 8007f38:	e002      	b.n	8007f40 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007f3a:	f001 fd17 	bl	800996c <xTaskGetTickCount>
 8007f3e:	4603      	mov	r3, r0
  }
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f46:	b089      	sub	sp, #36	; 0x24
 8007f48:	af04      	add	r7, sp, #16
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d020      	beq.n	8007f98 <osThreadCreate+0x54>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d01c      	beq.n	8007f98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685c      	ldr	r4, [r3, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681d      	ldr	r5, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	691e      	ldr	r6, [r3, #16]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff ff9a 	bl	8007eaa <makeFreeRtosPriority>
 8007f76:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f80:	9202      	str	r2, [sp, #8]
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	9100      	str	r1, [sp, #0]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	4632      	mov	r2, r6
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f001 fa19 	bl	80093c4 <xTaskCreateStatic>
 8007f92:	4603      	mov	r3, r0
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	e01c      	b.n	8007fd2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685c      	ldr	r4, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fa4:	b29e      	uxth	r6, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7ff ff7c 	bl	8007eaa <makeFreeRtosPriority>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	f107 030c 	add.w	r3, r7, #12
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	9200      	str	r2, [sp, #0]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f001 fa58 	bl	8009478 <xTaskCreate>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d001      	beq.n	8007fd2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	e000      	b.n	8007fd4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fdc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <osDelay+0x16>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	e000      	b.n	8007ff4 <osDelay+0x18>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 fb77 	bl	80096e8 <vTaskDelay>
  
  return osOK;
 8007ffa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af02      	add	r7, sp, #8
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d010      	beq.n	8008038 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d10b      	bne.n	8008034 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	2303      	movs	r3, #3
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	4613      	mov	r3, r2
 8008026:	2200      	movs	r2, #0
 8008028:	2100      	movs	r1, #0
 800802a:	2001      	movs	r0, #1
 800802c:	f000 faae 	bl	800858c <xQueueGenericCreateStatic>
 8008030:	4603      	mov	r3, r0
 8008032:	e016      	b.n	8008062 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008034:	2300      	movs	r3, #0
 8008036:	e014      	b.n	8008062 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d110      	bne.n	8008060 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800803e:	2203      	movs	r2, #3
 8008040:	2100      	movs	r1, #0
 8008042:	2001      	movs	r0, #1
 8008044:	f000 fb15 	bl	8008672 <xQueueGenericCreate>
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <osSemaphoreCreate+0x58>
 8008050:	2300      	movs	r3, #0
 8008052:	2200      	movs	r2, #0
 8008054:	2100      	movs	r1, #0
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 fb6a 	bl	8008730 <xQueueGenericSend>
      return sema;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	e000      	b.n	8008062 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008060:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008076:	2300      	movs	r3, #0
 8008078:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008080:	2380      	movs	r3, #128	; 0x80
 8008082:	e03a      	b.n	80080fa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800808e:	d103      	bne.n	8008098 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e009      	b.n	80080ac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <osSemaphoreWait+0x40>
      ticks = 1;
 80080a8:	2301      	movs	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80080ac:	f7ff ff15 	bl	8007eda <inHandlerMode>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d017      	beq.n	80080e6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80080b6:	f107 0308 	add.w	r3, r7, #8
 80080ba:	461a      	mov	r2, r3
 80080bc:	2100      	movs	r1, #0
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 ff32 	bl	8008f28 <xQueueReceiveFromISR>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d001      	beq.n	80080ce <osSemaphoreWait+0x62>
      return osErrorOS;
 80080ca:	23ff      	movs	r3, #255	; 0xff
 80080cc:	e015      	b.n	80080fa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d011      	beq.n	80080f8 <osSemaphoreWait+0x8c>
 80080d4:	4b0b      	ldr	r3, [pc, #44]	; (8008104 <osSemaphoreWait+0x98>)
 80080d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	e008      	b.n	80080f8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80080e6:	68f9      	ldr	r1, [r7, #12]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 fe15 	bl	8008d18 <xQueueSemaphoreTake>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d001      	beq.n	80080f8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80080f4:	23ff      	movs	r3, #255	; 0xff
 80080f6:	e000      	b.n	80080fa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80080f8:	2300      	movs	r3, #0
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	e000ed04 	.word	0xe000ed04

08008108 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008110:	2300      	movs	r3, #0
 8008112:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008114:	2300      	movs	r3, #0
 8008116:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008118:	f7ff fedf 	bl	8007eda <inHandlerMode>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d016      	beq.n	8008150 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008122:	f107 0308 	add.w	r3, r7, #8
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fc8f 	bl	8008a4c <xQueueGiveFromISR>
 800812e:	4603      	mov	r3, r0
 8008130:	2b01      	cmp	r3, #1
 8008132:	d001      	beq.n	8008138 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008134:	23ff      	movs	r3, #255	; 0xff
 8008136:	e017      	b.n	8008168 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d013      	beq.n	8008166 <osSemaphoreRelease+0x5e>
 800813e:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <osSemaphoreRelease+0x68>)
 8008140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	f3bf 8f4f 	dsb	sy
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	e00a      	b.n	8008166 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008150:	2300      	movs	r3, #0
 8008152:	2200      	movs	r2, #0
 8008154:	2100      	movs	r1, #0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 faea 	bl	8008730 <xQueueGenericSend>
 800815c:	4603      	mov	r3, r0
 800815e:	2b01      	cmp	r3, #1
 8008160:	d001      	beq.n	8008166 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008162:	23ff      	movs	r3, #255	; 0xff
 8008164:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008166:	68fb      	ldr	r3, [r7, #12]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	e000ed04 	.word	0xe000ed04

08008174 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800817c:	f7ff fead 	bl	8007eda <inHandlerMode>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008186:	2382      	movs	r3, #130	; 0x82
 8008188:	e003      	b.n	8008192 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 ff49 	bl	8009022 <vQueueDelete>

  return osOK; 
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800819a:	b590      	push	{r4, r7, lr}
 800819c:	b085      	sub	sp, #20
 800819e:	af02      	add	r7, sp, #8
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d012      	beq.n	80081d2 <osMessageCreate+0x38>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00e      	beq.n	80081d2 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6818      	ldr	r0, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6859      	ldr	r1, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68dc      	ldr	r4, [r3, #12]
 80081c4:	2300      	movs	r3, #0
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	4623      	mov	r3, r4
 80081ca:	f000 f9df 	bl	800858c <xQueueGenericCreateStatic>
 80081ce:	4603      	mov	r3, r0
 80081d0:	e008      	b.n	80081e4 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	4619      	mov	r1, r3
 80081de:	f000 fa48 	bl	8008672 <xQueueGenericCreate>
 80081e2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd90      	pop	{r4, r7, pc}

080081ec <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b086      	sub	sp, #24
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80081f8:	2300      	movs	r3, #0
 80081fa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <osMessagePut+0x1e>
    ticks = 1;
 8008206:	2301      	movs	r3, #1
 8008208:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800820a:	f7ff fe66 	bl	8007eda <inHandlerMode>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d018      	beq.n	8008246 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008214:	f107 0210 	add.w	r2, r7, #16
 8008218:	f107 0108 	add.w	r1, r7, #8
 800821c:	2300      	movs	r3, #0
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fb80 	bl	8008924 <xQueueGenericSendFromISR>
 8008224:	4603      	mov	r3, r0
 8008226:	2b01      	cmp	r3, #1
 8008228:	d001      	beq.n	800822e <osMessagePut+0x42>
      return osErrorOS;
 800822a:	23ff      	movs	r3, #255	; 0xff
 800822c:	e018      	b.n	8008260 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d014      	beq.n	800825e <osMessagePut+0x72>
 8008234:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <osMessagePut+0x7c>)
 8008236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	e00b      	b.n	800825e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008246:	f107 0108 	add.w	r1, r7, #8
 800824a:	2300      	movs	r3, #0
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fa6e 	bl	8008730 <xQueueGenericSend>
 8008254:	4603      	mov	r3, r0
 8008256:	2b01      	cmp	r3, #1
 8008258:	d001      	beq.n	800825e <osMessagePut+0x72>
      return osErrorOS;
 800825a:	23ff      	movs	r3, #255	; 0xff
 800825c:	e000      	b.n	8008260 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800826c:	b590      	push	{r4, r7, lr}
 800826e:	b08b      	sub	sp, #44	; 0x2c
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008286:	2380      	movs	r3, #128	; 0x80
 8008288:	617b      	str	r3, [r7, #20]
    return event;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	461c      	mov	r4, r3
 800828e:	f107 0314 	add.w	r3, r7, #20
 8008292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800829a:	e054      	b.n	8008346 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800829c:	2300      	movs	r3, #0
 800829e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082aa:	d103      	bne.n	80082b4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80082ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
 80082b2:	e009      	b.n	80082c8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d006      	beq.n	80082c8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <osMessageGet+0x5c>
      ticks = 1;
 80082c4:	2301      	movs	r3, #1
 80082c6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80082c8:	f7ff fe07 	bl	8007eda <inHandlerMode>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d01c      	beq.n	800830c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80082d2:	f107 0220 	add.w	r2, r7, #32
 80082d6:	f107 0314 	add.w	r3, r7, #20
 80082da:	3304      	adds	r3, #4
 80082dc:	4619      	mov	r1, r3
 80082de:	68b8      	ldr	r0, [r7, #8]
 80082e0:	f000 fe22 	bl	8008f28 <xQueueReceiveFromISR>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d102      	bne.n	80082f0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80082ea:	2310      	movs	r3, #16
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	e001      	b.n	80082f4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d01d      	beq.n	8008336 <osMessageGet+0xca>
 80082fa:	4b15      	ldr	r3, [pc, #84]	; (8008350 <osMessageGet+0xe4>)
 80082fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	e014      	b.n	8008336 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800830c:	f107 0314 	add.w	r3, r7, #20
 8008310:	3304      	adds	r3, #4
 8008312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008314:	4619      	mov	r1, r3
 8008316:	68b8      	ldr	r0, [r7, #8]
 8008318:	f000 fc22 	bl	8008b60 <xQueueReceive>
 800831c:	4603      	mov	r3, r0
 800831e:	2b01      	cmp	r3, #1
 8008320:	d102      	bne.n	8008328 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008322:	2310      	movs	r3, #16
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	e006      	b.n	8008336 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <osMessageGet+0xc6>
 800832e:	2300      	movs	r3, #0
 8008330:	e000      	b.n	8008334 <osMessageGet+0xc8>
 8008332:	2340      	movs	r3, #64	; 0x40
 8008334:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	461c      	mov	r4, r3
 800833a:	f107 0314 	add.w	r3, r7, #20
 800833e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	372c      	adds	r7, #44	; 0x2c
 800834a:	46bd      	mov	sp, r7
 800834c:	bd90      	pop	{r4, r7, pc}
 800834e:	bf00      	nop
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f103 0208 	add.w	r2, r3, #8
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800836c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f103 0208 	add.w	r2, r3, #8
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f103 0208 	add.w	r2, r3, #8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	601a      	str	r2, [r3, #0]
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083f6:	b480      	push	{r7}
 80083f8:	b085      	sub	sp, #20
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800840c:	d103      	bne.n	8008416 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	60fb      	str	r3, [r7, #12]
 8008414:	e00c      	b.n	8008430 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3308      	adds	r3, #8
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	e002      	b.n	8008424 <vListInsert+0x2e>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	429a      	cmp	r2, r3
 800842e:	d2f6      	bcs.n	800841e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]
}
 800845c:	bf00      	nop
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6892      	ldr	r2, [r2, #8]
 800847e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6852      	ldr	r2, [r2, #4]
 8008488:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	429a      	cmp	r2, r3
 8008492:	d103      	bne.n	800849c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	1e5a      	subs	r2, r3, #1
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d109      	bne.n	80084e4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	60bb      	str	r3, [r7, #8]
 80084e2:	e7fe      	b.n	80084e2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80084e4:	f002 fc1a 	bl	800ad1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f0:	68f9      	ldr	r1, [r7, #12]
 80084f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084f4:	fb01 f303 	mul.w	r3, r1, r3
 80084f8:	441a      	add	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008514:	3b01      	subs	r3, #1
 8008516:	68f9      	ldr	r1, [r7, #12]
 8008518:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800851a:	fb01 f303 	mul.w	r3, r1, r3
 800851e:	441a      	add	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	22ff      	movs	r2, #255	; 0xff
 8008528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	22ff      	movs	r2, #255	; 0xff
 8008530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d114      	bne.n	8008564 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d01a      	beq.n	8008578 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3310      	adds	r3, #16
 8008546:	4618      	mov	r0, r3
 8008548:	f001 fb92 	bl	8009c70 <xTaskRemoveFromEventList>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d012      	beq.n	8008578 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <xQueueGenericReset+0xcc>)
 8008554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	e009      	b.n	8008578 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3310      	adds	r3, #16
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff fef3 	bl	8008354 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3324      	adds	r3, #36	; 0x24
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff feee 	bl	8008354 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008578:	f002 fbfe 	bl	800ad78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800857c:	2301      	movs	r3, #1
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08e      	sub	sp, #56	; 0x38
 8008590:	af02      	add	r7, sp, #8
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d109      	bne.n	80085b4 <xQueueGenericCreateStatic+0x28>
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085b2:	e7fe      	b.n	80085b2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <xQueueGenericCreateStatic+0x42>
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
 80085cc:	e7fe      	b.n	80085cc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <xQueueGenericCreateStatic+0x4e>
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <xQueueGenericCreateStatic+0x52>
 80085da:	2301      	movs	r3, #1
 80085dc:	e000      	b.n	80085e0 <xQueueGenericCreateStatic+0x54>
 80085de:	2300      	movs	r3, #0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d109      	bne.n	80085f8 <xQueueGenericCreateStatic+0x6c>
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	623b      	str	r3, [r7, #32]
 80085f6:	e7fe      	b.n	80085f6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d102      	bne.n	8008604 <xQueueGenericCreateStatic+0x78>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <xQueueGenericCreateStatic+0x7c>
 8008604:	2301      	movs	r3, #1
 8008606:	e000      	b.n	800860a <xQueueGenericCreateStatic+0x7e>
 8008608:	2300      	movs	r3, #0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <xQueueGenericCreateStatic+0x96>
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	e7fe      	b.n	8008620 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008622:	2348      	movs	r3, #72	; 0x48
 8008624:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b48      	cmp	r3, #72	; 0x48
 800862a:	d009      	beq.n	8008640 <xQueueGenericCreateStatic+0xb4>
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	61bb      	str	r3, [r7, #24]
 800863e:	e7fe      	b.n	800863e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008640:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00d      	beq.n	8008668 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008654:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	4613      	mov	r3, r2
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 f844 	bl	80086f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800866a:	4618      	mov	r0, r3
 800866c:	3730      	adds	r7, #48	; 0x30
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008672:	b580      	push	{r7, lr}
 8008674:	b08a      	sub	sp, #40	; 0x28
 8008676:	af02      	add	r7, sp, #8
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	4613      	mov	r3, r2
 800867e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d109      	bne.n	800869a <xQueueGenericCreate+0x28>
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	613b      	str	r3, [r7, #16]
 8008698:	e7fe      	b.n	8008698 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d102      	bne.n	80086a6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80086a0:	2300      	movs	r3, #0
 80086a2:	61fb      	str	r3, [r7, #28]
 80086a4:	e004      	b.n	80086b0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	fb02 f303 	mul.w	r3, r2, r3
 80086ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	3348      	adds	r3, #72	; 0x48
 80086b4:	4618      	mov	r0, r3
 80086b6:	f002 fc4b 	bl	800af50 <pvPortMalloc>
 80086ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d011      	beq.n	80086e6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	3348      	adds	r3, #72	; 0x48
 80086ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086d4:	79fa      	ldrb	r2, [r7, #7]
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	4613      	mov	r3, r2
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	68b9      	ldr	r1, [r7, #8]
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 f805 	bl	80086f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80086e6:	69bb      	ldr	r3, [r7, #24]
	}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3720      	adds	r7, #32
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d103      	bne.n	800870c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	e002      	b.n	8008712 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800871e:	2101      	movs	r1, #1
 8008720:	69b8      	ldr	r0, [r7, #24]
 8008722:	f7ff fecb 	bl	80084bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008726:	bf00      	nop
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
	...

08008730 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08e      	sub	sp, #56	; 0x38
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800873e:	2300      	movs	r3, #0
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	2b00      	cmp	r3, #0
 800874a:	d109      	bne.n	8008760 <xQueueGenericSend+0x30>
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	62bb      	str	r3, [r7, #40]	; 0x28
 800875e:	e7fe      	b.n	800875e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d103      	bne.n	800876e <xQueueGenericSend+0x3e>
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <xQueueGenericSend+0x42>
 800876e:	2301      	movs	r3, #1
 8008770:	e000      	b.n	8008774 <xQueueGenericSend+0x44>
 8008772:	2300      	movs	r3, #0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d109      	bne.n	800878c <xQueueGenericSend+0x5c>
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
 800878a:	e7fe      	b.n	800878a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d103      	bne.n	800879a <xQueueGenericSend+0x6a>
 8008792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008796:	2b01      	cmp	r3, #1
 8008798:	d101      	bne.n	800879e <xQueueGenericSend+0x6e>
 800879a:	2301      	movs	r3, #1
 800879c:	e000      	b.n	80087a0 <xQueueGenericSend+0x70>
 800879e:	2300      	movs	r3, #0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d109      	bne.n	80087b8 <xQueueGenericSend+0x88>
 80087a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	623b      	str	r3, [r7, #32]
 80087b6:	e7fe      	b.n	80087b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087b8:	f001 fc10 	bl	8009fdc <xTaskGetSchedulerState>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d102      	bne.n	80087c8 <xQueueGenericSend+0x98>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <xQueueGenericSend+0x9c>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <xQueueGenericSend+0x9e>
 80087cc:	2300      	movs	r3, #0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <xQueueGenericSend+0xb6>
 80087d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d6:	f383 8811 	msr	BASEPRI, r3
 80087da:	f3bf 8f6f 	isb	sy
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	61fb      	str	r3, [r7, #28]
 80087e4:	e7fe      	b.n	80087e4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087e6:	f002 fa99 	bl	800ad1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d302      	bcc.n	80087fc <xQueueGenericSend+0xcc>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d129      	bne.n	8008850 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008802:	f000 fc48 	bl	8009096 <prvCopyDataToQueue>
 8008806:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	d010      	beq.n	8008832 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	3324      	adds	r3, #36	; 0x24
 8008814:	4618      	mov	r0, r3
 8008816:	f001 fa2b 	bl	8009c70 <xTaskRemoveFromEventList>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d013      	beq.n	8008848 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008820:	4b3f      	ldr	r3, [pc, #252]	; (8008920 <xQueueGenericSend+0x1f0>)
 8008822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008826:	601a      	str	r2, [r3, #0]
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	f3bf 8f6f 	isb	sy
 8008830:	e00a      	b.n	8008848 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008838:	4b39      	ldr	r3, [pc, #228]	; (8008920 <xQueueGenericSend+0x1f0>)
 800883a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008848:	f002 fa96 	bl	800ad78 <vPortExitCritical>
				return pdPASS;
 800884c:	2301      	movs	r3, #1
 800884e:	e063      	b.n	8008918 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008856:	f002 fa8f 	bl	800ad78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800885a:	2300      	movs	r3, #0
 800885c:	e05c      	b.n	8008918 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008864:	f107 0314 	add.w	r3, r7, #20
 8008868:	4618      	mov	r0, r3
 800886a:	f001 fa63 	bl	8009d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800886e:	2301      	movs	r3, #1
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008872:	f002 fa81 	bl	800ad78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008876:	f000 ffcf 	bl	8009818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800887a:	f002 fa4f 	bl	800ad1c <vPortEnterCritical>
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008884:	b25b      	sxtb	r3, r3
 8008886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800888a:	d103      	bne.n	8008894 <xQueueGenericSend+0x164>
 800888c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800889a:	b25b      	sxtb	r3, r3
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088a0:	d103      	bne.n	80088aa <xQueueGenericSend+0x17a>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088aa:	f002 fa65 	bl	800ad78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ae:	1d3a      	adds	r2, r7, #4
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	4611      	mov	r1, r2
 80088b6:	4618      	mov	r0, r3
 80088b8:	f001 fa52 	bl	8009d60 <xTaskCheckForTimeOut>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d124      	bne.n	800890c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088c4:	f000 fcdf 	bl	8009286 <prvIsQueueFull>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d018      	beq.n	8008900 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	3310      	adds	r3, #16
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f001 f97c 	bl	8009bd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088de:	f000 fc6a 	bl	80091b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088e2:	f000 ffa7 	bl	8009834 <xTaskResumeAll>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f47f af7c 	bne.w	80087e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <xQueueGenericSend+0x1f0>)
 80088f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	e772      	b.n	80087e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008902:	f000 fc58 	bl	80091b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008906:	f000 ff95 	bl	8009834 <xTaskResumeAll>
 800890a:	e76c      	b.n	80087e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800890c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890e:	f000 fc52 	bl	80091b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008912:	f000 ff8f 	bl	8009834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008918:	4618      	mov	r0, r3
 800891a:	3738      	adds	r7, #56	; 0x38
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	; 0x38
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	2b00      	cmp	r3, #0
 800893a:	d109      	bne.n	8008950 <xQueueGenericSendFromISR+0x2c>
 800893c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008940:	f383 8811 	msr	BASEPRI, r3
 8008944:	f3bf 8f6f 	isb	sy
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	627b      	str	r3, [r7, #36]	; 0x24
 800894e:	e7fe      	b.n	800894e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <xQueueGenericSendFromISR+0x3a>
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <xQueueGenericSendFromISR+0x3e>
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <xQueueGenericSendFromISR+0x40>
 8008962:	2300      	movs	r3, #0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d109      	bne.n	800897c <xQueueGenericSendFromISR+0x58>
 8008968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	623b      	str	r3, [r7, #32]
 800897a:	e7fe      	b.n	800897a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b02      	cmp	r3, #2
 8008980:	d103      	bne.n	800898a <xQueueGenericSendFromISR+0x66>
 8008982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008986:	2b01      	cmp	r3, #1
 8008988:	d101      	bne.n	800898e <xQueueGenericSendFromISR+0x6a>
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <xQueueGenericSendFromISR+0x6c>
 800898e:	2300      	movs	r3, #0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d109      	bne.n	80089a8 <xQueueGenericSendFromISR+0x84>
 8008994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008998:	f383 8811 	msr	BASEPRI, r3
 800899c:	f3bf 8f6f 	isb	sy
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	61fb      	str	r3, [r7, #28]
 80089a6:	e7fe      	b.n	80089a6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089a8:	f002 fa94 	bl	800aed4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089ac:	f3ef 8211 	mrs	r2, BASEPRI
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	61ba      	str	r2, [r7, #24]
 80089c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d302      	bcc.n	80089da <xQueueGenericSendFromISR+0xb6>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d12c      	bne.n	8008a34 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ea:	f000 fb54 	bl	8009096 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80089f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089f6:	d112      	bne.n	8008a1e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d016      	beq.n	8008a2e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	3324      	adds	r3, #36	; 0x24
 8008a04:	4618      	mov	r0, r3
 8008a06:	f001 f933 	bl	8009c70 <xTaskRemoveFromEventList>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00e      	beq.n	8008a2e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00b      	beq.n	8008a2e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	e007      	b.n	8008a2e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a22:	3301      	adds	r3, #1
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	b25a      	sxtb	r2, r3
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008a32:	e001      	b.n	8008a38 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a34:	2300      	movs	r3, #0
 8008a36:	637b      	str	r3, [r7, #52]	; 0x34
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3738      	adds	r7, #56	; 0x38
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b08e      	sub	sp, #56	; 0x38
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d109      	bne.n	8008a74 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	623b      	str	r3, [r7, #32]
 8008a72:	e7fe      	b.n	8008a72 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d009      	beq.n	8008a90 <xQueueGiveFromISR+0x44>
 8008a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	61fb      	str	r3, [r7, #28]
 8008a8e:	e7fe      	b.n	8008a8e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d103      	bne.n	8008aa0 <xQueueGiveFromISR+0x54>
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <xQueueGiveFromISR+0x58>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e000      	b.n	8008aa6 <xQueueGiveFromISR+0x5a>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <xQueueGiveFromISR+0x72>
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	61bb      	str	r3, [r7, #24]
 8008abc:	e7fe      	b.n	8008abc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008abe:	f002 fa09 	bl	800aed4 <vPortValidateInterruptPriority>
	__asm volatile
 8008ac2:	f3ef 8211 	mrs	r2, BASEPRI
 8008ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	617a      	str	r2, [r7, #20]
 8008ad8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008ada:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008adc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d22b      	bcs.n	8008b46 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	1c5a      	adds	r2, r3, #1
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b08:	d112      	bne.n	8008b30 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d016      	beq.n	8008b40 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b14:	3324      	adds	r3, #36	; 0x24
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 f8aa 	bl	8009c70 <xTaskRemoveFromEventList>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00e      	beq.n	8008b40 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	e007      	b.n	8008b40 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b34:	3301      	adds	r3, #1
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	b25a      	sxtb	r2, r3
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b40:	2301      	movs	r3, #1
 8008b42:	637b      	str	r3, [r7, #52]	; 0x34
 8008b44:	e001      	b.n	8008b4a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	637b      	str	r3, [r7, #52]	; 0x34
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3738      	adds	r7, #56	; 0x38
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08c      	sub	sp, #48	; 0x30
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d109      	bne.n	8008b8e <xQueueReceive+0x2e>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	623b      	str	r3, [r7, #32]
 8008b8c:	e7fe      	b.n	8008b8c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d103      	bne.n	8008b9c <xQueueReceive+0x3c>
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d101      	bne.n	8008ba0 <xQueueReceive+0x40>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e000      	b.n	8008ba2 <xQueueReceive+0x42>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d109      	bne.n	8008bba <xQueueReceive+0x5a>
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	61fb      	str	r3, [r7, #28]
 8008bb8:	e7fe      	b.n	8008bb8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bba:	f001 fa0f 	bl	8009fdc <xTaskGetSchedulerState>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d102      	bne.n	8008bca <xQueueReceive+0x6a>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <xQueueReceive+0x6e>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e000      	b.n	8008bd0 <xQueueReceive+0x70>
 8008bce:	2300      	movs	r3, #0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d109      	bne.n	8008be8 <xQueueReceive+0x88>
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	61bb      	str	r3, [r7, #24]
 8008be6:	e7fe      	b.n	8008be6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008be8:	f002 f898 	bl	800ad1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01f      	beq.n	8008c38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfc:	f000 fab5 	bl	800916a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	1e5a      	subs	r2, r3, #1
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00f      	beq.n	8008c30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	3310      	adds	r3, #16
 8008c14:	4618      	mov	r0, r3
 8008c16:	f001 f82b 	bl	8009c70 <xTaskRemoveFromEventList>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d007      	beq.n	8008c30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c20:	4b3c      	ldr	r3, [pc, #240]	; (8008d14 <xQueueReceive+0x1b4>)
 8008c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c30:	f002 f8a2 	bl	800ad78 <vPortExitCritical>
				return pdPASS;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e069      	b.n	8008d0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d103      	bne.n	8008c46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c3e:	f002 f89b 	bl	800ad78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c42:	2300      	movs	r3, #0
 8008c44:	e062      	b.n	8008d0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c4c:	f107 0310 	add.w	r3, r7, #16
 8008c50:	4618      	mov	r0, r3
 8008c52:	f001 f86f 	bl	8009d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c56:	2301      	movs	r3, #1
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c5a:	f002 f88d 	bl	800ad78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c5e:	f000 fddb 	bl	8009818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c62:	f002 f85b 	bl	800ad1c <vPortEnterCritical>
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c6c:	b25b      	sxtb	r3, r3
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c72:	d103      	bne.n	8008c7c <xQueueReceive+0x11c>
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c82:	b25b      	sxtb	r3, r3
 8008c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c88:	d103      	bne.n	8008c92 <xQueueReceive+0x132>
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c92:	f002 f871 	bl	800ad78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c96:	1d3a      	adds	r2, r7, #4
 8008c98:	f107 0310 	add.w	r3, r7, #16
 8008c9c:	4611      	mov	r1, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f001 f85e 	bl	8009d60 <xTaskCheckForTimeOut>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d123      	bne.n	8008cf2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cac:	f000 fad5 	bl	800925a <prvIsQueueEmpty>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d017      	beq.n	8008ce6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	3324      	adds	r3, #36	; 0x24
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 ff88 	bl	8009bd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cc6:	f000 fa76 	bl	80091b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cca:	f000 fdb3 	bl	8009834 <xTaskResumeAll>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d189      	bne.n	8008be8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008cd4:	4b0f      	ldr	r3, [pc, #60]	; (8008d14 <xQueueReceive+0x1b4>)
 8008cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	e780      	b.n	8008be8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ce8:	f000 fa65 	bl	80091b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cec:	f000 fda2 	bl	8009834 <xTaskResumeAll>
 8008cf0:	e77a      	b.n	8008be8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cf4:	f000 fa5f 	bl	80091b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cf8:	f000 fd9c 	bl	8009834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfe:	f000 faac 	bl	800925a <prvIsQueueEmpty>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f43f af6f 	beq.w	8008be8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3730      	adds	r7, #48	; 0x30
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	e000ed04 	.word	0xe000ed04

08008d18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08e      	sub	sp, #56	; 0x38
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d22:	2300      	movs	r3, #0
 8008d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d109      	bne.n	8008d48 <xQueueSemaphoreTake+0x30>
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	623b      	str	r3, [r7, #32]
 8008d46:	e7fe      	b.n	8008d46 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d009      	beq.n	8008d64 <xQueueSemaphoreTake+0x4c>
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	61fb      	str	r3, [r7, #28]
 8008d62:	e7fe      	b.n	8008d62 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d64:	f001 f93a 	bl	8009fdc <xTaskGetSchedulerState>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d102      	bne.n	8008d74 <xQueueSemaphoreTake+0x5c>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <xQueueSemaphoreTake+0x60>
 8008d74:	2301      	movs	r3, #1
 8008d76:	e000      	b.n	8008d7a <xQueueSemaphoreTake+0x62>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d109      	bne.n	8008d92 <xQueueSemaphoreTake+0x7a>
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	61bb      	str	r3, [r7, #24]
 8008d90:	e7fe      	b.n	8008d90 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d92:	f001 ffc3 	bl	800ad1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d024      	beq.n	8008dec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	1e5a      	subs	r2, r3, #1
 8008da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d104      	bne.n	8008dbc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008db2:	f001 facd 	bl	800a350 <pvTaskIncrementMutexHeldCount>
 8008db6:	4602      	mov	r2, r0
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00f      	beq.n	8008de4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc6:	3310      	adds	r3, #16
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 ff51 	bl	8009c70 <xTaskRemoveFromEventList>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d007      	beq.n	8008de4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008dd4:	4b53      	ldr	r3, [pc, #332]	; (8008f24 <xQueueSemaphoreTake+0x20c>)
 8008dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008de4:	f001 ffc8 	bl	800ad78 <vPortExitCritical>
				return pdPASS;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e096      	b.n	8008f1a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d110      	bne.n	8008e14 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d009      	beq.n	8008e0c <xQueueSemaphoreTake+0xf4>
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	e7fe      	b.n	8008e0a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e0c:	f001 ffb4 	bl	800ad78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e10:	2300      	movs	r3, #0
 8008e12:	e082      	b.n	8008f1a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e1a:	f107 030c 	add.w	r3, r7, #12
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f000 ff88 	bl	8009d34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e28:	f001 ffa6 	bl	800ad78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e2c:	f000 fcf4 	bl	8009818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e30:	f001 ff74 	bl	800ad1c <vPortEnterCritical>
 8008e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e3a:	b25b      	sxtb	r3, r3
 8008e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e40:	d103      	bne.n	8008e4a <xQueueSemaphoreTake+0x132>
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e50:	b25b      	sxtb	r3, r3
 8008e52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e56:	d103      	bne.n	8008e60 <xQueueSemaphoreTake+0x148>
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e60:	f001 ff8a 	bl	800ad78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e64:	463a      	mov	r2, r7
 8008e66:	f107 030c 	add.w	r3, r7, #12
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 ff77 	bl	8009d60 <xTaskCheckForTimeOut>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d132      	bne.n	8008ede <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e7a:	f000 f9ee 	bl	800925a <prvIsQueueEmpty>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d026      	beq.n	8008ed2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d109      	bne.n	8008ea0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008e8c:	f001 ff46 	bl	800ad1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 f8bf 	bl	800a018 <xTaskPriorityInherit>
 8008e9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008e9c:	f001 ff6c 	bl	800ad78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	3324      	adds	r3, #36	; 0x24
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 fe93 	bl	8009bd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008eae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008eb0:	f000 f981 	bl	80091b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008eb4:	f000 fcbe 	bl	8009834 <xTaskResumeAll>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f47f af69 	bne.w	8008d92 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008ec0:	4b18      	ldr	r3, [pc, #96]	; (8008f24 <xQueueSemaphoreTake+0x20c>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	e75f      	b.n	8008d92 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008ed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ed4:	f000 f96f 	bl	80091b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008ed8:	f000 fcac 	bl	8009834 <xTaskResumeAll>
 8008edc:	e759      	b.n	8008d92 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ee0:	f000 f969 	bl	80091b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ee4:	f000 fca6 	bl	8009834 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008eea:	f000 f9b6 	bl	800925a <prvIsQueueEmpty>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f43f af4e 	beq.w	8008d92 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00d      	beq.n	8008f18 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008efc:	f001 ff0e 	bl	800ad1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f02:	f000 f8b0 	bl	8009066 <prvGetDisinheritPriorityAfterTimeout>
 8008f06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 f986 	bl	800a220 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f14:	f001 ff30 	bl	800ad78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3738      	adds	r7, #56	; 0x38
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	e000ed04 	.word	0xe000ed04

08008f28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b08e      	sub	sp, #56	; 0x38
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <xQueueReceiveFromISR+0x2a>
 8008f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	623b      	str	r3, [r7, #32]
 8008f50:	e7fe      	b.n	8008f50 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <xQueueReceiveFromISR+0x38>
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d101      	bne.n	8008f64 <xQueueReceiveFromISR+0x3c>
 8008f60:	2301      	movs	r3, #1
 8008f62:	e000      	b.n	8008f66 <xQueueReceiveFromISR+0x3e>
 8008f64:	2300      	movs	r3, #0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <xQueueReceiveFromISR+0x56>
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	e7fe      	b.n	8008f7c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f7e:	f001 ffa9 	bl	800aed4 <vPortValidateInterruptPriority>
	__asm volatile
 8008f82:	f3ef 8211 	mrs	r2, BASEPRI
 8008f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	61ba      	str	r2, [r7, #24]
 8008f98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008f9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d02f      	beq.n	800900a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fb4:	68b9      	ldr	r1, [r7, #8]
 8008fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fb8:	f000 f8d7 	bl	800916a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	1e5a      	subs	r2, r3, #1
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008fc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fcc:	d112      	bne.n	8008ff4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d016      	beq.n	8009004 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	3310      	adds	r3, #16
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fe48 	bl	8009c70 <xTaskRemoveFromEventList>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00e      	beq.n	8009004 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00b      	beq.n	8009004 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	e007      	b.n	8009004 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	b25a      	sxtb	r2, r3
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009004:	2301      	movs	r3, #1
 8009006:	637b      	str	r3, [r7, #52]	; 0x34
 8009008:	e001      	b.n	800900e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800900a:	2300      	movs	r3, #0
 800900c:	637b      	str	r3, [r7, #52]	; 0x34
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800901a:	4618      	mov	r0, r3
 800901c:	3738      	adds	r7, #56	; 0x38
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d109      	bne.n	8009048 <vQueueDelete+0x26>
	__asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	60bb      	str	r3, [r7, #8]
 8009046:	e7fe      	b.n	8009046 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f000 f95d 	bl	8009308 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f002 f83b 	bl	800b0d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009066:	b480      	push	{r7}
 8009068:	b085      	sub	sp, #20
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	d006      	beq.n	8009084 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f1c3 0307 	rsb	r3, r3, #7
 8009080:	60fb      	str	r3, [r7, #12]
 8009082:	e001      	b.n	8009088 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009084:	2300      	movs	r3, #0
 8009086:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009088:	68fb      	ldr	r3, [r7, #12]
	}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b086      	sub	sp, #24
 800909a:	af00      	add	r7, sp, #0
 800909c:	60f8      	str	r0, [r7, #12]
 800909e:	60b9      	str	r1, [r7, #8]
 80090a0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090a2:	2300      	movs	r3, #0
 80090a4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090aa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10d      	bne.n	80090d0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d14d      	bne.n	8009158 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f001 f829 	bl	800a118 <xTaskPriorityDisinherit>
 80090c6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	609a      	str	r2, [r3, #8]
 80090ce:	e043      	b.n	8009158 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d119      	bne.n	800910a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6858      	ldr	r0, [r3, #4]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	461a      	mov	r2, r3
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	f002 f92f 	bl	800b344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685a      	ldr	r2, [r3, #4]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	441a      	add	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d32b      	bcc.n	8009158 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	605a      	str	r2, [r3, #4]
 8009108:	e026      	b.n	8009158 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	68d8      	ldr	r0, [r3, #12]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	461a      	mov	r2, r3
 8009114:	68b9      	ldr	r1, [r7, #8]
 8009116:	f002 f915 	bl	800b344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	425b      	negs	r3, r3
 8009124:	441a      	add	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	68da      	ldr	r2, [r3, #12]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	d207      	bcs.n	8009146 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689a      	ldr	r2, [r3, #8]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913e:	425b      	negs	r3, r3
 8009140:	441a      	add	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d105      	bne.n	8009158 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	3b01      	subs	r3, #1
 8009156:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009160:	697b      	ldr	r3, [r7, #20]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b082      	sub	sp, #8
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009178:	2b00      	cmp	r3, #0
 800917a:	d018      	beq.n	80091ae <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	68da      	ldr	r2, [r3, #12]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	441a      	add	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	429a      	cmp	r2, r3
 8009194:	d303      	bcc.n	800919e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68d9      	ldr	r1, [r3, #12]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	461a      	mov	r2, r3
 80091a8:	6838      	ldr	r0, [r7, #0]
 80091aa:	f002 f8cb 	bl	800b344 <memcpy>
	}
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091be:	f001 fdad 	bl	800ad1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091c8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091ca:	e011      	b.n	80091f0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d012      	beq.n	80091fa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	3324      	adds	r3, #36	; 0x24
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fd49 	bl	8009c70 <xTaskRemoveFromEventList>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80091e4:	f000 fe1c 	bl	8009e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80091f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dce9      	bgt.n	80091cc <prvUnlockQueue+0x16>
 80091f8:	e000      	b.n	80091fc <prvUnlockQueue+0x46>
					break;
 80091fa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	22ff      	movs	r2, #255	; 0xff
 8009200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009204:	f001 fdb8 	bl	800ad78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009208:	f001 fd88 	bl	800ad1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009212:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009214:	e011      	b.n	800923a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d012      	beq.n	8009244 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	3310      	adds	r3, #16
 8009222:	4618      	mov	r0, r3
 8009224:	f000 fd24 	bl	8009c70 <xTaskRemoveFromEventList>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800922e:	f000 fdf7 	bl	8009e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	3b01      	subs	r3, #1
 8009236:	b2db      	uxtb	r3, r3
 8009238:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800923a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800923e:	2b00      	cmp	r3, #0
 8009240:	dce9      	bgt.n	8009216 <prvUnlockQueue+0x60>
 8009242:	e000      	b.n	8009246 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009244:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	22ff      	movs	r2, #255	; 0xff
 800924a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800924e:	f001 fd93 	bl	800ad78 <vPortExitCritical>
}
 8009252:	bf00      	nop
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009262:	f001 fd5b 	bl	800ad1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800926e:	2301      	movs	r3, #1
 8009270:	60fb      	str	r3, [r7, #12]
 8009272:	e001      	b.n	8009278 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009278:	f001 fd7e 	bl	800ad78 <vPortExitCritical>

	return xReturn;
 800927c:	68fb      	ldr	r3, [r7, #12]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800928e:	f001 fd45 	bl	800ad1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929a:	429a      	cmp	r2, r3
 800929c:	d102      	bne.n	80092a4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800929e:	2301      	movs	r3, #1
 80092a0:	60fb      	str	r3, [r7, #12]
 80092a2:	e001      	b.n	80092a8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092a4:	2300      	movs	r3, #0
 80092a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092a8:	f001 fd66 	bl	800ad78 <vPortExitCritical>

	return xReturn;
 80092ac:	68fb      	ldr	r3, [r7, #12]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092c2:	2300      	movs	r3, #0
 80092c4:	60fb      	str	r3, [r7, #12]
 80092c6:	e014      	b.n	80092f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80092c8:	4a0e      	ldr	r2, [pc, #56]	; (8009304 <vQueueAddToRegistry+0x4c>)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10b      	bne.n	80092ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80092d4:	490b      	ldr	r1, [pc, #44]	; (8009304 <vQueueAddToRegistry+0x4c>)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80092de:	4a09      	ldr	r2, [pc, #36]	; (8009304 <vQueueAddToRegistry+0x4c>)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4413      	add	r3, r2
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80092ea:	e005      	b.n	80092f8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b07      	cmp	r3, #7
 80092f6:	d9e7      	bls.n	80092c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80092f8:	bf00      	nop
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr
 8009304:	200052b0 	.word	0x200052b0

08009308 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e016      	b.n	8009344 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009316:	4a10      	ldr	r2, [pc, #64]	; (8009358 <vQueueUnregisterQueue+0x50>)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4413      	add	r3, r2
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	429a      	cmp	r2, r3
 8009324:	d10b      	bne.n	800933e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009326:	4a0c      	ldr	r2, [pc, #48]	; (8009358 <vQueueUnregisterQueue+0x50>)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2100      	movs	r1, #0
 800932c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009330:	4a09      	ldr	r2, [pc, #36]	; (8009358 <vQueueUnregisterQueue+0x50>)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	4413      	add	r3, r2
 8009338:	2200      	movs	r2, #0
 800933a:	605a      	str	r2, [r3, #4]
				break;
 800933c:	e005      	b.n	800934a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3301      	adds	r3, #1
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b07      	cmp	r3, #7
 8009348:	d9e5      	bls.n	8009316 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800934a:	bf00      	nop
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	200052b0 	.word	0x200052b0

0800935c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800936c:	f001 fcd6 	bl	800ad1c <vPortEnterCritical>
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009376:	b25b      	sxtb	r3, r3
 8009378:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800937c:	d103      	bne.n	8009386 <vQueueWaitForMessageRestricted+0x2a>
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800938c:	b25b      	sxtb	r3, r3
 800938e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009392:	d103      	bne.n	800939c <vQueueWaitForMessageRestricted+0x40>
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800939c:	f001 fcec 	bl	800ad78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d106      	bne.n	80093b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	3324      	adds	r3, #36	; 0x24
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 fc33 	bl	8009c1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093b6:	6978      	ldr	r0, [r7, #20]
 80093b8:	f7ff fefd 	bl	80091b6 <prvUnlockQueue>
	}
 80093bc:	bf00      	nop
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08e      	sub	sp, #56	; 0x38
 80093c8:	af04      	add	r7, sp, #16
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d109      	bne.n	80093ec <xTaskCreateStatic+0x28>
 80093d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093dc:	f383 8811 	msr	BASEPRI, r3
 80093e0:	f3bf 8f6f 	isb	sy
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	623b      	str	r3, [r7, #32]
 80093ea:	e7fe      	b.n	80093ea <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <xTaskCreateStatic+0x42>
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	f383 8811 	msr	BASEPRI, r3
 80093fa:	f3bf 8f6f 	isb	sy
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	61fb      	str	r3, [r7, #28]
 8009404:	e7fe      	b.n	8009404 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009406:	2358      	movs	r3, #88	; 0x58
 8009408:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	2b58      	cmp	r3, #88	; 0x58
 800940e:	d009      	beq.n	8009424 <xTaskCreateStatic+0x60>
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	61bb      	str	r3, [r7, #24]
 8009422:	e7fe      	b.n	8009422 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009424:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01e      	beq.n	800946a <xTaskCreateStatic+0xa6>
 800942c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942e:	2b00      	cmp	r3, #0
 8009430:	d01b      	beq.n	800946a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800943a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	2202      	movs	r2, #2
 8009440:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009444:	2300      	movs	r3, #0
 8009446:	9303      	str	r3, [sp, #12]
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	9302      	str	r3, [sp, #8]
 800944c:	f107 0314 	add.w	r3, r7, #20
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	68b9      	ldr	r1, [r7, #8]
 800945c:	68f8      	ldr	r0, [r7, #12]
 800945e:	f000 f850 	bl	8009502 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009462:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009464:	f000 f8d6 	bl	8009614 <prvAddNewTaskToReadyList>
 8009468:	e001      	b.n	800946e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800946a:	2300      	movs	r3, #0
 800946c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800946e:	697b      	ldr	r3, [r7, #20]
	}
 8009470:	4618      	mov	r0, r3
 8009472:	3728      	adds	r7, #40	; 0x28
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08c      	sub	sp, #48	; 0x30
 800947c:	af04      	add	r7, sp, #16
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	4613      	mov	r3, r2
 8009486:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009488:	88fb      	ldrh	r3, [r7, #6]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fd5f 	bl	800af50 <pvPortMalloc>
 8009492:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00e      	beq.n	80094b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800949a:	2058      	movs	r0, #88	; 0x58
 800949c:	f001 fd58 	bl	800af50 <pvPortMalloc>
 80094a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	631a      	str	r2, [r3, #48]	; 0x30
 80094ae:	e005      	b.n	80094bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094b0:	6978      	ldr	r0, [r7, #20]
 80094b2:	f001 fe0f 	bl	800b0d4 <vPortFree>
 80094b6:	e001      	b.n	80094bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094b8:	2300      	movs	r3, #0
 80094ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d017      	beq.n	80094f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094ca:	88fa      	ldrh	r2, [r7, #6]
 80094cc:	2300      	movs	r3, #0
 80094ce:	9303      	str	r3, [sp, #12]
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	9302      	str	r3, [sp, #8]
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	9301      	str	r3, [sp, #4]
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	68b9      	ldr	r1, [r7, #8]
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	f000 f80e 	bl	8009502 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094e6:	69f8      	ldr	r0, [r7, #28]
 80094e8:	f000 f894 	bl	8009614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094ec:	2301      	movs	r3, #1
 80094ee:	61bb      	str	r3, [r7, #24]
 80094f0:	e002      	b.n	80094f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094f8:	69bb      	ldr	r3, [r7, #24]
	}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3720      	adds	r7, #32
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b088      	sub	sp, #32
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
 800950e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800951a:	3b01      	subs	r3, #1
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	f023 0307 	bic.w	r3, r3, #7
 8009528:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	f003 0307 	and.w	r3, r3, #7
 8009530:	2b00      	cmp	r3, #0
 8009532:	d009      	beq.n	8009548 <prvInitialiseNewTask+0x46>
 8009534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	617b      	str	r3, [r7, #20]
 8009546:	e7fe      	b.n	8009546 <prvInitialiseNewTask+0x44>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01f      	beq.n	8009594 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009554:	2300      	movs	r3, #0
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	e012      	b.n	8009580 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	4413      	add	r3, r2
 8009560:	7819      	ldrb	r1, [r3, #0]
 8009562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	4413      	add	r3, r2
 8009568:	3334      	adds	r3, #52	; 0x34
 800956a:	460a      	mov	r2, r1
 800956c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	4413      	add	r3, r2
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d006      	beq.n	8009588 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	3301      	adds	r3, #1
 800957e:	61fb      	str	r3, [r7, #28]
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	2b0f      	cmp	r3, #15
 8009584:	d9e9      	bls.n	800955a <prvInitialiseNewTask+0x58>
 8009586:	e000      	b.n	800958a <prvInitialiseNewTask+0x88>
			{
				break;
 8009588:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009592:	e003      	b.n	800959c <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	2b06      	cmp	r3, #6
 80095a0:	d901      	bls.n	80095a6 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095a2:	2306      	movs	r3, #6
 80095a4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095aa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095b0:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80095b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b4:	2200      	movs	r2, #0
 80095b6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ba:	3304      	adds	r3, #4
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fee9 	bl	8008394 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	3318      	adds	r3, #24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7fe fee4 	bl	8008394 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	f1c3 0207 	rsb	r2, r3, #7
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095e0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	2200      	movs	r2, #0
 80095e6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	68f9      	ldr	r1, [r7, #12]
 80095f4:	69b8      	ldr	r0, [r7, #24]
 80095f6:	f001 fa6b 	bl	800aad0 <pxPortInitialiseStack>
 80095fa:	4602      	mov	r2, r0
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800960a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800960c:	bf00      	nop
 800960e:	3720      	adds	r7, #32
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800961c:	f001 fb7e 	bl	800ad1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009620:	4b2a      	ldr	r3, [pc, #168]	; (80096cc <prvAddNewTaskToReadyList+0xb8>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3301      	adds	r3, #1
 8009626:	4a29      	ldr	r2, [pc, #164]	; (80096cc <prvAddNewTaskToReadyList+0xb8>)
 8009628:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800962a:	4b29      	ldr	r3, [pc, #164]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d109      	bne.n	8009646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009632:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009638:	4b24      	ldr	r3, [pc, #144]	; (80096cc <prvAddNewTaskToReadyList+0xb8>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d110      	bne.n	8009662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009640:	f000 fc12 	bl	8009e68 <prvInitialiseTaskLists>
 8009644:	e00d      	b.n	8009662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009646:	4b23      	ldr	r3, [pc, #140]	; (80096d4 <prvAddNewTaskToReadyList+0xc0>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d109      	bne.n	8009662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800964e:	4b20      	ldr	r3, [pc, #128]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009658:	429a      	cmp	r2, r3
 800965a:	d802      	bhi.n	8009662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800965c:	4a1c      	ldr	r2, [pc, #112]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009662:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <prvAddNewTaskToReadyList+0xc4>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3301      	adds	r3, #1
 8009668:	4a1b      	ldr	r2, [pc, #108]	; (80096d8 <prvAddNewTaskToReadyList+0xc4>)
 800966a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	2201      	movs	r2, #1
 8009672:	409a      	lsls	r2, r3
 8009674:	4b19      	ldr	r3, [pc, #100]	; (80096dc <prvAddNewTaskToReadyList+0xc8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4313      	orrs	r3, r2
 800967a:	4a18      	ldr	r2, [pc, #96]	; (80096dc <prvAddNewTaskToReadyList+0xc8>)
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4a15      	ldr	r2, [pc, #84]	; (80096e0 <prvAddNewTaskToReadyList+0xcc>)
 800968c:	441a      	add	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3304      	adds	r3, #4
 8009692:	4619      	mov	r1, r3
 8009694:	4610      	mov	r0, r2
 8009696:	f7fe fe8a 	bl	80083ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800969a:	f001 fb6d 	bl	800ad78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800969e:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <prvAddNewTaskToReadyList+0xc0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00e      	beq.n	80096c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096a6:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d207      	bcs.n	80096c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096b4:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <prvAddNewTaskToReadyList+0xd0>)
 80096b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	200008a8 	.word	0x200008a8
 80096d0:	200007a8 	.word	0x200007a8
 80096d4:	200008b4 	.word	0x200008b4
 80096d8:	200008c4 	.word	0x200008c4
 80096dc:	200008b0 	.word	0x200008b0
 80096e0:	200007ac 	.word	0x200007ac
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d016      	beq.n	8009728 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096fa:	4b13      	ldr	r3, [pc, #76]	; (8009748 <vTaskDelay+0x60>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <vTaskDelay+0x2e>
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	60bb      	str	r3, [r7, #8]
 8009714:	e7fe      	b.n	8009714 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009716:	f000 f87f 	bl	8009818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800971a:	2100      	movs	r1, #0
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fe2b 	bl	800a378 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009722:	f000 f887 	bl	8009834 <xTaskResumeAll>
 8009726:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d107      	bne.n	800973e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800972e:	4b07      	ldr	r3, [pc, #28]	; (800974c <vTaskDelay+0x64>)
 8009730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800973e:	bf00      	nop
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	200008d0 	.word	0x200008d0
 800974c:	e000ed04 	.word	0xe000ed04

08009750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b08a      	sub	sp, #40	; 0x28
 8009754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800975e:	463a      	mov	r2, r7
 8009760:	1d39      	adds	r1, r7, #4
 8009762:	f107 0308 	add.w	r3, r7, #8
 8009766:	4618      	mov	r0, r3
 8009768:	f7f6 fe20 	bl	80003ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	9202      	str	r2, [sp, #8]
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	2300      	movs	r3, #0
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	2300      	movs	r3, #0
 800977c:	460a      	mov	r2, r1
 800977e:	4920      	ldr	r1, [pc, #128]	; (8009800 <vTaskStartScheduler+0xb0>)
 8009780:	4820      	ldr	r0, [pc, #128]	; (8009804 <vTaskStartScheduler+0xb4>)
 8009782:	f7ff fe1f 	bl	80093c4 <xTaskCreateStatic>
 8009786:	4602      	mov	r2, r0
 8009788:	4b1f      	ldr	r3, [pc, #124]	; (8009808 <vTaskStartScheduler+0xb8>)
 800978a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800978c:	4b1e      	ldr	r3, [pc, #120]	; (8009808 <vTaskStartScheduler+0xb8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	e001      	b.n	800979e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800979a:	2300      	movs	r3, #0
 800979c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d102      	bne.n	80097aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80097a4:	f000 fe4e 	bl	800a444 <xTimerCreateTimerTask>
 80097a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d115      	bne.n	80097dc <vTaskStartScheduler+0x8c>
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097c2:	4b12      	ldr	r3, [pc, #72]	; (800980c <vTaskStartScheduler+0xbc>)
 80097c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097ca:	4b11      	ldr	r3, [pc, #68]	; (8009810 <vTaskStartScheduler+0xc0>)
 80097cc:	2201      	movs	r2, #1
 80097ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80097d0:	4b10      	ldr	r3, [pc, #64]	; (8009814 <vTaskStartScheduler+0xc4>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097d6:	f001 fa03 	bl	800abe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097da:	e00d      	b.n	80097f8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097e2:	d109      	bne.n	80097f8 <vTaskStartScheduler+0xa8>
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	e7fe      	b.n	80097f6 <vTaskStartScheduler+0xa6>
}
 80097f8:	bf00      	nop
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	0800b42c 	.word	0x0800b42c
 8009804:	08009e39 	.word	0x08009e39
 8009808:	200008cc 	.word	0x200008cc
 800980c:	200008c8 	.word	0x200008c8
 8009810:	200008b4 	.word	0x200008b4
 8009814:	200008ac 	.word	0x200008ac

08009818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009818:	b480      	push	{r7}
 800981a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800981c:	4b04      	ldr	r3, [pc, #16]	; (8009830 <vTaskSuspendAll+0x18>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3301      	adds	r3, #1
 8009822:	4a03      	ldr	r2, [pc, #12]	; (8009830 <vTaskSuspendAll+0x18>)
 8009824:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009826:	bf00      	nop
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	200008d0 	.word	0x200008d0

08009834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800983a:	2300      	movs	r3, #0
 800983c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800983e:	2300      	movs	r3, #0
 8009840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009842:	4b41      	ldr	r3, [pc, #260]	; (8009948 <xTaskResumeAll+0x114>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d109      	bne.n	800985e <xTaskResumeAll+0x2a>
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	e7fe      	b.n	800985c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800985e:	f001 fa5d 	bl	800ad1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009862:	4b39      	ldr	r3, [pc, #228]	; (8009948 <xTaskResumeAll+0x114>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3b01      	subs	r3, #1
 8009868:	4a37      	ldr	r2, [pc, #220]	; (8009948 <xTaskResumeAll+0x114>)
 800986a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800986c:	4b36      	ldr	r3, [pc, #216]	; (8009948 <xTaskResumeAll+0x114>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d161      	bne.n	8009938 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009874:	4b35      	ldr	r3, [pc, #212]	; (800994c <xTaskResumeAll+0x118>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d05d      	beq.n	8009938 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800987c:	e02e      	b.n	80098dc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800987e:	4b34      	ldr	r3, [pc, #208]	; (8009950 <xTaskResumeAll+0x11c>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3318      	adds	r3, #24
 800988a:	4618      	mov	r0, r3
 800988c:	f7fe fdec 	bl	8008468 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3304      	adds	r3, #4
 8009894:	4618      	mov	r0, r3
 8009896:	f7fe fde7 	bl	8008468 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	2201      	movs	r2, #1
 80098a0:	409a      	lsls	r2, r3
 80098a2:	4b2c      	ldr	r3, [pc, #176]	; (8009954 <xTaskResumeAll+0x120>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	4a2a      	ldr	r2, [pc, #168]	; (8009954 <xTaskResumeAll+0x120>)
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4a27      	ldr	r2, [pc, #156]	; (8009958 <xTaskResumeAll+0x124>)
 80098ba:	441a      	add	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3304      	adds	r3, #4
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f7fe fd73 	bl	80083ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098cc:	4b23      	ldr	r3, [pc, #140]	; (800995c <xTaskResumeAll+0x128>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d302      	bcc.n	80098dc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80098d6:	4b22      	ldr	r3, [pc, #136]	; (8009960 <xTaskResumeAll+0x12c>)
 80098d8:	2201      	movs	r2, #1
 80098da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098dc:	4b1c      	ldr	r3, [pc, #112]	; (8009950 <xTaskResumeAll+0x11c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1cc      	bne.n	800987e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098ea:	f000 fb57 	bl	8009f9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80098ee:	4b1d      	ldr	r3, [pc, #116]	; (8009964 <xTaskResumeAll+0x130>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d010      	beq.n	800991c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098fa:	f000 f859 	bl	80099b0 <xTaskIncrementTick>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009904:	4b16      	ldr	r3, [pc, #88]	; (8009960 <xTaskResumeAll+0x12c>)
 8009906:	2201      	movs	r2, #1
 8009908:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3b01      	subs	r3, #1
 800990e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1f1      	bne.n	80098fa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009916:	4b13      	ldr	r3, [pc, #76]	; (8009964 <xTaskResumeAll+0x130>)
 8009918:	2200      	movs	r2, #0
 800991a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800991c:	4b10      	ldr	r3, [pc, #64]	; (8009960 <xTaskResumeAll+0x12c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d009      	beq.n	8009938 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009924:	2301      	movs	r3, #1
 8009926:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009928:	4b0f      	ldr	r3, [pc, #60]	; (8009968 <xTaskResumeAll+0x134>)
 800992a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992e:	601a      	str	r2, [r3, #0]
 8009930:	f3bf 8f4f 	dsb	sy
 8009934:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009938:	f001 fa1e 	bl	800ad78 <vPortExitCritical>

	return xAlreadyYielded;
 800993c:	68bb      	ldr	r3, [r7, #8]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	200008d0 	.word	0x200008d0
 800994c:	200008a8 	.word	0x200008a8
 8009950:	20000868 	.word	0x20000868
 8009954:	200008b0 	.word	0x200008b0
 8009958:	200007ac 	.word	0x200007ac
 800995c:	200007a8 	.word	0x200007a8
 8009960:	200008bc 	.word	0x200008bc
 8009964:	200008b8 	.word	0x200008b8
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009972:	4b05      	ldr	r3, [pc, #20]	; (8009988 <xTaskGetTickCount+0x1c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009978:	687b      	ldr	r3, [r7, #4]
}
 800997a:	4618      	mov	r0, r3
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	200008ac 	.word	0x200008ac

0800998c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009992:	f001 fa9f 	bl	800aed4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009996:	2300      	movs	r3, #0
 8009998:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <xTaskGetTickCountFromISR+0x20>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099a0:	683b      	ldr	r3, [r7, #0]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	200008ac 	.word	0x200008ac

080099b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ba:	4b4e      	ldr	r3, [pc, #312]	; (8009af4 <xTaskIncrementTick+0x144>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f040 8087 	bne.w	8009ad2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80099c4:	4b4c      	ldr	r3, [pc, #304]	; (8009af8 <xTaskIncrementTick+0x148>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80099cc:	4a4a      	ldr	r2, [pc, #296]	; (8009af8 <xTaskIncrementTick+0x148>)
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d11f      	bne.n	8009a18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80099d8:	4b48      	ldr	r3, [pc, #288]	; (8009afc <xTaskIncrementTick+0x14c>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d009      	beq.n	80099f6 <xTaskIncrementTick+0x46>
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	e7fe      	b.n	80099f4 <xTaskIncrementTick+0x44>
 80099f6:	4b41      	ldr	r3, [pc, #260]	; (8009afc <xTaskIncrementTick+0x14c>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	4b40      	ldr	r3, [pc, #256]	; (8009b00 <xTaskIncrementTick+0x150>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a3e      	ldr	r2, [pc, #248]	; (8009afc <xTaskIncrementTick+0x14c>)
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	4a3e      	ldr	r2, [pc, #248]	; (8009b00 <xTaskIncrementTick+0x150>)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	4b3e      	ldr	r3, [pc, #248]	; (8009b04 <xTaskIncrementTick+0x154>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	4a3c      	ldr	r2, [pc, #240]	; (8009b04 <xTaskIncrementTick+0x154>)
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	f000 fac2 	bl	8009f9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a18:	4b3b      	ldr	r3, [pc, #236]	; (8009b08 <xTaskIncrementTick+0x158>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d348      	bcc.n	8009ab4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a22:	4b36      	ldr	r3, [pc, #216]	; (8009afc <xTaskIncrementTick+0x14c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d104      	bne.n	8009a36 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a2c:	4b36      	ldr	r3, [pc, #216]	; (8009b08 <xTaskIncrementTick+0x158>)
 8009a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a32:	601a      	str	r2, [r3, #0]
					break;
 8009a34:	e03e      	b.n	8009ab4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a36:	4b31      	ldr	r3, [pc, #196]	; (8009afc <xTaskIncrementTick+0x14c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d203      	bcs.n	8009a56 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a4e:	4a2e      	ldr	r2, [pc, #184]	; (8009b08 <xTaskIncrementTick+0x158>)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009a54:	e02e      	b.n	8009ab4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	3304      	adds	r3, #4
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fd04 	bl	8008468 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d004      	beq.n	8009a72 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	3318      	adds	r3, #24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fe fcfb 	bl	8008468 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	2201      	movs	r2, #1
 8009a78:	409a      	lsls	r2, r3
 8009a7a:	4b24      	ldr	r3, [pc, #144]	; (8009b0c <xTaskIncrementTick+0x15c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	4a22      	ldr	r2, [pc, #136]	; (8009b0c <xTaskIncrementTick+0x15c>)
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4a1f      	ldr	r2, [pc, #124]	; (8009b10 <xTaskIncrementTick+0x160>)
 8009a92:	441a      	add	r2, r3
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	3304      	adds	r3, #4
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f7fe fc87 	bl	80083ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa4:	4b1b      	ldr	r3, [pc, #108]	; (8009b14 <xTaskIncrementTick+0x164>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d3b9      	bcc.n	8009a22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ab2:	e7b6      	b.n	8009a22 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ab4:	4b17      	ldr	r3, [pc, #92]	; (8009b14 <xTaskIncrementTick+0x164>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aba:	4915      	ldr	r1, [pc, #84]	; (8009b10 <xTaskIncrementTick+0x160>)
 8009abc:	4613      	mov	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	4413      	add	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	440b      	add	r3, r1
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d907      	bls.n	8009adc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8009acc:	2301      	movs	r3, #1
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	e004      	b.n	8009adc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009ad2:	4b11      	ldr	r3, [pc, #68]	; (8009b18 <xTaskIncrementTick+0x168>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	4a0f      	ldr	r2, [pc, #60]	; (8009b18 <xTaskIncrementTick+0x168>)
 8009ada:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009adc:	4b0f      	ldr	r3, [pc, #60]	; (8009b1c <xTaskIncrementTick+0x16c>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009ae8:	697b      	ldr	r3, [r7, #20]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3718      	adds	r7, #24
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	200008d0 	.word	0x200008d0
 8009af8:	200008ac 	.word	0x200008ac
 8009afc:	20000860 	.word	0x20000860
 8009b00:	20000864 	.word	0x20000864
 8009b04:	200008c0 	.word	0x200008c0
 8009b08:	200008c8 	.word	0x200008c8
 8009b0c:	200008b0 	.word	0x200008b0
 8009b10:	200007ac 	.word	0x200007ac
 8009b14:	200007a8 	.word	0x200007a8
 8009b18:	200008b8 	.word	0x200008b8
 8009b1c:	200008bc 	.word	0x200008bc

08009b20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b20:	b480      	push	{r7}
 8009b22:	b087      	sub	sp, #28
 8009b24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b26:	4b26      	ldr	r3, [pc, #152]	; (8009bc0 <vTaskSwitchContext+0xa0>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b2e:	4b25      	ldr	r3, [pc, #148]	; (8009bc4 <vTaskSwitchContext+0xa4>)
 8009b30:	2201      	movs	r2, #1
 8009b32:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b34:	e03e      	b.n	8009bb4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009b36:	4b23      	ldr	r3, [pc, #140]	; (8009bc4 <vTaskSwitchContext+0xa4>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b3c:	4b22      	ldr	r3, [pc, #136]	; (8009bc8 <vTaskSwitchContext+0xa8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	fab3 f383 	clz	r3, r3
 8009b48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b4a:	7afb      	ldrb	r3, [r7, #11]
 8009b4c:	f1c3 031f 	rsb	r3, r3, #31
 8009b50:	617b      	str	r3, [r7, #20]
 8009b52:	491e      	ldr	r1, [pc, #120]	; (8009bcc <vTaskSwitchContext+0xac>)
 8009b54:	697a      	ldr	r2, [r7, #20]
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	440b      	add	r3, r1
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d109      	bne.n	8009b7a <vTaskSwitchContext+0x5a>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	607b      	str	r3, [r7, #4]
 8009b78:	e7fe      	b.n	8009b78 <vTaskSwitchContext+0x58>
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4a11      	ldr	r2, [pc, #68]	; (8009bcc <vTaskSwitchContext+0xac>)
 8009b86:	4413      	add	r3, r2
 8009b88:	613b      	str	r3, [r7, #16]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	605a      	str	r2, [r3, #4]
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d104      	bne.n	8009baa <vTaskSwitchContext+0x8a>
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	605a      	str	r2, [r3, #4]
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	4a07      	ldr	r2, [pc, #28]	; (8009bd0 <vTaskSwitchContext+0xb0>)
 8009bb2:	6013      	str	r3, [r2, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	371c      	adds	r7, #28
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	200008d0 	.word	0x200008d0
 8009bc4:	200008bc 	.word	0x200008bc
 8009bc8:	200008b0 	.word	0x200008b0
 8009bcc:	200007ac 	.word	0x200007ac
 8009bd0:	200007a8 	.word	0x200007a8

08009bd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d109      	bne.n	8009bf8 <vTaskPlaceOnEventList+0x24>
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	e7fe      	b.n	8009bf6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bf8:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <vTaskPlaceOnEventList+0x44>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3318      	adds	r3, #24
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7fe fbf8 	bl	80083f6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c06:	2101      	movs	r1, #1
 8009c08:	6838      	ldr	r0, [r7, #0]
 8009c0a:	f000 fbb5 	bl	800a378 <prvAddCurrentTaskToDelayedList>
}
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	200007a8 	.word	0x200007a8

08009c1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b086      	sub	sp, #24
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d109      	bne.n	8009c42 <vTaskPlaceOnEventListRestricted+0x26>
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	e7fe      	b.n	8009c40 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c42:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <vTaskPlaceOnEventListRestricted+0x50>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3318      	adds	r3, #24
 8009c48:	4619      	mov	r1, r3
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7fe fbaf 	bl	80083ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	68b8      	ldr	r0, [r7, #8]
 8009c60:	f000 fb8a 	bl	800a378 <prvAddCurrentTaskToDelayedList>
	}
 8009c64:	bf00      	nop
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	200007a8 	.word	0x200007a8

08009c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d109      	bne.n	8009c9a <xTaskRemoveFromEventList+0x2a>
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	e7fe      	b.n	8009c98 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	3318      	adds	r3, #24
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f7fe fbe2 	bl	8008468 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ca4:	4b1d      	ldr	r3, [pc, #116]	; (8009d1c <xTaskRemoveFromEventList+0xac>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d11c      	bne.n	8009ce6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe fbd9 	bl	8008468 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cba:	2201      	movs	r2, #1
 8009cbc:	409a      	lsls	r2, r3
 8009cbe:	4b18      	ldr	r3, [pc, #96]	; (8009d20 <xTaskRemoveFromEventList+0xb0>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	4a16      	ldr	r2, [pc, #88]	; (8009d20 <xTaskRemoveFromEventList+0xb0>)
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4a13      	ldr	r2, [pc, #76]	; (8009d24 <xTaskRemoveFromEventList+0xb4>)
 8009cd6:	441a      	add	r2, r3
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f7fe fb65 	bl	80083ae <vListInsertEnd>
 8009ce4:	e005      	b.n	8009cf2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	3318      	adds	r3, #24
 8009cea:	4619      	mov	r1, r3
 8009cec:	480e      	ldr	r0, [pc, #56]	; (8009d28 <xTaskRemoveFromEventList+0xb8>)
 8009cee:	f7fe fb5e 	bl	80083ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf6:	4b0d      	ldr	r3, [pc, #52]	; (8009d2c <xTaskRemoveFromEventList+0xbc>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d905      	bls.n	8009d0c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d00:	2301      	movs	r3, #1
 8009d02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d04:	4b0a      	ldr	r3, [pc, #40]	; (8009d30 <xTaskRemoveFromEventList+0xc0>)
 8009d06:	2201      	movs	r2, #1
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	e001      	b.n	8009d10 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d10:	697b      	ldr	r3, [r7, #20]
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	3718      	adds	r7, #24
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	200008d0 	.word	0x200008d0
 8009d20:	200008b0 	.word	0x200008b0
 8009d24:	200007ac 	.word	0x200007ac
 8009d28:	20000868 	.word	0x20000868
 8009d2c:	200007a8 	.word	0x200007a8
 8009d30:	200008bc 	.word	0x200008bc

08009d34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009d3c:	4b06      	ldr	r3, [pc, #24]	; (8009d58 <vTaskInternalSetTimeOutState+0x24>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009d44:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <vTaskInternalSetTimeOutState+0x28>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	605a      	str	r2, [r3, #4]
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	200008c0 	.word	0x200008c0
 8009d5c:	200008ac 	.word	0x200008ac

08009d60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b088      	sub	sp, #32
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d109      	bne.n	8009d84 <xTaskCheckForTimeOut+0x24>
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	613b      	str	r3, [r7, #16]
 8009d82:	e7fe      	b.n	8009d82 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d109      	bne.n	8009d9e <xTaskCheckForTimeOut+0x3e>
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	e7fe      	b.n	8009d9c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009d9e:	f000 ffbd 	bl	800ad1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009da2:	4b1d      	ldr	r3, [pc, #116]	; (8009e18 <xTaskCheckForTimeOut+0xb8>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dba:	d102      	bne.n	8009dc2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	61fb      	str	r3, [r7, #28]
 8009dc0:	e023      	b.n	8009e0a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	4b15      	ldr	r3, [pc, #84]	; (8009e1c <xTaskCheckForTimeOut+0xbc>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d007      	beq.n	8009dde <xTaskCheckForTimeOut+0x7e>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	69ba      	ldr	r2, [r7, #24]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d302      	bcc.n	8009dde <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	61fb      	str	r3, [r7, #28]
 8009ddc:	e015      	b.n	8009e0a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	697a      	ldr	r2, [r7, #20]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d20b      	bcs.n	8009e00 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	1ad2      	subs	r2, r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff ff9d 	bl	8009d34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61fb      	str	r3, [r7, #28]
 8009dfe:	e004      	b.n	8009e0a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e06:	2301      	movs	r3, #1
 8009e08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e0a:	f000 ffb5 	bl	800ad78 <vPortExitCritical>

	return xReturn;
 8009e0e:	69fb      	ldr	r3, [r7, #28]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3720      	adds	r7, #32
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	200008ac 	.word	0x200008ac
 8009e1c:	200008c0 	.word	0x200008c0

08009e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e20:	b480      	push	{r7}
 8009e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e24:	4b03      	ldr	r3, [pc, #12]	; (8009e34 <vTaskMissedYield+0x14>)
 8009e26:	2201      	movs	r2, #1
 8009e28:	601a      	str	r2, [r3, #0]
}
 8009e2a:	bf00      	nop
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr
 8009e34:	200008bc 	.word	0x200008bc

08009e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009e40:	f000 f852 	bl	8009ee8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009e44:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <prvIdleTask+0x28>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d9f9      	bls.n	8009e40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009e4c:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <prvIdleTask+0x2c>)
 8009e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009e5c:	e7f0      	b.n	8009e40 <prvIdleTask+0x8>
 8009e5e:	bf00      	nop
 8009e60:	200007ac 	.word	0x200007ac
 8009e64:	e000ed04 	.word	0xe000ed04

08009e68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e6e:	2300      	movs	r3, #0
 8009e70:	607b      	str	r3, [r7, #4]
 8009e72:	e00c      	b.n	8009e8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	4613      	mov	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4a12      	ldr	r2, [pc, #72]	; (8009ec8 <prvInitialiseTaskLists+0x60>)
 8009e80:	4413      	add	r3, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fa66 	bl	8008354 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	607b      	str	r3, [r7, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b06      	cmp	r3, #6
 8009e92:	d9ef      	bls.n	8009e74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009e94:	480d      	ldr	r0, [pc, #52]	; (8009ecc <prvInitialiseTaskLists+0x64>)
 8009e96:	f7fe fa5d 	bl	8008354 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009e9a:	480d      	ldr	r0, [pc, #52]	; (8009ed0 <prvInitialiseTaskLists+0x68>)
 8009e9c:	f7fe fa5a 	bl	8008354 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ea0:	480c      	ldr	r0, [pc, #48]	; (8009ed4 <prvInitialiseTaskLists+0x6c>)
 8009ea2:	f7fe fa57 	bl	8008354 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ea6:	480c      	ldr	r0, [pc, #48]	; (8009ed8 <prvInitialiseTaskLists+0x70>)
 8009ea8:	f7fe fa54 	bl	8008354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009eac:	480b      	ldr	r0, [pc, #44]	; (8009edc <prvInitialiseTaskLists+0x74>)
 8009eae:	f7fe fa51 	bl	8008354 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009eb2:	4b0b      	ldr	r3, [pc, #44]	; (8009ee0 <prvInitialiseTaskLists+0x78>)
 8009eb4:	4a05      	ldr	r2, [pc, #20]	; (8009ecc <prvInitialiseTaskLists+0x64>)
 8009eb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <prvInitialiseTaskLists+0x7c>)
 8009eba:	4a05      	ldr	r2, [pc, #20]	; (8009ed0 <prvInitialiseTaskLists+0x68>)
 8009ebc:	601a      	str	r2, [r3, #0]
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	200007ac 	.word	0x200007ac
 8009ecc:	20000838 	.word	0x20000838
 8009ed0:	2000084c 	.word	0x2000084c
 8009ed4:	20000868 	.word	0x20000868
 8009ed8:	2000087c 	.word	0x2000087c
 8009edc:	20000894 	.word	0x20000894
 8009ee0:	20000860 	.word	0x20000860
 8009ee4:	20000864 	.word	0x20000864

08009ee8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009eee:	e019      	b.n	8009f24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ef0:	f000 ff14 	bl	800ad1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef4:	4b0f      	ldr	r3, [pc, #60]	; (8009f34 <prvCheckTasksWaitingTermination+0x4c>)
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3304      	adds	r3, #4
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe fab1 	bl	8008468 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f06:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <prvCheckTasksWaitingTermination+0x50>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	4a0a      	ldr	r2, [pc, #40]	; (8009f38 <prvCheckTasksWaitingTermination+0x50>)
 8009f0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f10:	4b0a      	ldr	r3, [pc, #40]	; (8009f3c <prvCheckTasksWaitingTermination+0x54>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	4a09      	ldr	r2, [pc, #36]	; (8009f3c <prvCheckTasksWaitingTermination+0x54>)
 8009f18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f1a:	f000 ff2d 	bl	800ad78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f80e 	bl	8009f40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f24:	4b05      	ldr	r3, [pc, #20]	; (8009f3c <prvCheckTasksWaitingTermination+0x54>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1e1      	bne.n	8009ef0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	2000087c 	.word	0x2000087c
 8009f38:	200008a8 	.word	0x200008a8
 8009f3c:	20000890 	.word	0x20000890

08009f40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d108      	bne.n	8009f64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 f8bc 	bl	800b0d4 <vPortFree>
				vPortFree( pxTCB );
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 f8b9 	bl	800b0d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009f62:	e017      	b.n	8009f94 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d103      	bne.n	8009f76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 f8b0 	bl	800b0d4 <vPortFree>
	}
 8009f74:	e00e      	b.n	8009f94 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d009      	beq.n	8009f94 <prvDeleteTCB+0x54>
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	60fb      	str	r3, [r7, #12]
 8009f92:	e7fe      	b.n	8009f92 <prvDeleteTCB+0x52>
	}
 8009f94:	bf00      	nop
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fa2:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <prvResetNextTaskUnblockTime+0x38>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009fac:	4b0a      	ldr	r3, [pc, #40]	; (8009fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8009fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009fb4:	e008      	b.n	8009fc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fb6:	4b07      	ldr	r3, [pc, #28]	; (8009fd4 <prvResetNextTaskUnblockTime+0x38>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	4a04      	ldr	r2, [pc, #16]	; (8009fd8 <prvResetNextTaskUnblockTime+0x3c>)
 8009fc6:	6013      	str	r3, [r2, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	20000860 	.word	0x20000860
 8009fd8:	200008c8 	.word	0x200008c8

08009fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009fe2:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <xTaskGetSchedulerState+0x34>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d102      	bne.n	8009ff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009fea:	2301      	movs	r3, #1
 8009fec:	607b      	str	r3, [r7, #4]
 8009fee:	e008      	b.n	800a002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ff0:	4b08      	ldr	r3, [pc, #32]	; (800a014 <xTaskGetSchedulerState+0x38>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d102      	bne.n	8009ffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	607b      	str	r3, [r7, #4]
 8009ffc:	e001      	b.n	800a002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ffe:	2300      	movs	r3, #0
 800a000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a002:	687b      	ldr	r3, [r7, #4]
	}
 800a004:	4618      	mov	r0, r3
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr
 800a010:	200008b4 	.word	0x200008b4
 800a014:	200008d0 	.word	0x200008d0

0800a018 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a024:	2300      	movs	r3, #0
 800a026:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d069      	beq.n	800a102 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a032:	4b36      	ldr	r3, [pc, #216]	; (800a10c <xTaskPriorityInherit+0xf4>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a038:	429a      	cmp	r2, r3
 800a03a:	d259      	bcs.n	800a0f0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	2b00      	cmp	r3, #0
 800a042:	db06      	blt.n	800a052 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a044:	4b31      	ldr	r3, [pc, #196]	; (800a10c <xTaskPriorityInherit+0xf4>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	f1c3 0207 	rsb	r2, r3, #7
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	6959      	ldr	r1, [r3, #20]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	4a2b      	ldr	r2, [pc, #172]	; (800a110 <xTaskPriorityInherit+0xf8>)
 800a064:	4413      	add	r3, r2
 800a066:	4299      	cmp	r1, r3
 800a068:	d13a      	bne.n	800a0e0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	3304      	adds	r3, #4
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe f9fa 	bl	8008468 <uxListRemove>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d115      	bne.n	800a0a6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07e:	4924      	ldr	r1, [pc, #144]	; (800a110 <xTaskPriorityInherit+0xf8>)
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	440b      	add	r3, r1
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <xTaskPriorityInherit+0x8e>
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	2201      	movs	r2, #1
 800a096:	fa02 f303 	lsl.w	r3, r2, r3
 800a09a:	43da      	mvns	r2, r3
 800a09c:	4b1d      	ldr	r3, [pc, #116]	; (800a114 <xTaskPriorityInherit+0xfc>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	4a1c      	ldr	r2, [pc, #112]	; (800a114 <xTaskPriorityInherit+0xfc>)
 800a0a4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a0a6:	4b19      	ldr	r3, [pc, #100]	; (800a10c <xTaskPriorityInherit+0xf4>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	409a      	lsls	r2, r3
 800a0b8:	4b16      	ldr	r3, [pc, #88]	; (800a114 <xTaskPriorityInherit+0xfc>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	4a15      	ldr	r2, [pc, #84]	; (800a114 <xTaskPriorityInherit+0xfc>)
 800a0c0:	6013      	str	r3, [r2, #0]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4a10      	ldr	r2, [pc, #64]	; (800a110 <xTaskPriorityInherit+0xf8>)
 800a0d0:	441a      	add	r2, r3
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f7fe f968 	bl	80083ae <vListInsertEnd>
 800a0de:	e004      	b.n	800a0ea <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a0e0:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <xTaskPriorityInherit+0xf4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	60fb      	str	r3, [r7, #12]
 800a0ee:	e008      	b.n	800a102 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <xTaskPriorityInherit+0xf4>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d201      	bcs.n	800a102 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a0fe:	2301      	movs	r3, #1
 800a100:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a102:	68fb      	ldr	r3, [r7, #12]
	}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	200007a8 	.word	0x200007a8
 800a110:	200007ac 	.word	0x200007ac
 800a114:	200008b0 	.word	0x200008b0

0800a118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d06c      	beq.n	800a208 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a12e:	4b39      	ldr	r3, [pc, #228]	; (800a214 <xTaskPriorityDisinherit+0xfc>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	429a      	cmp	r2, r3
 800a136:	d009      	beq.n	800a14c <xTaskPriorityDisinherit+0x34>
 800a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13c:	f383 8811 	msr	BASEPRI, r3
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	f3bf 8f4f 	dsb	sy
 800a148:	60fb      	str	r3, [r7, #12]
 800a14a:	e7fe      	b.n	800a14a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a150:	2b00      	cmp	r3, #0
 800a152:	d109      	bne.n	800a168 <xTaskPriorityDisinherit+0x50>
 800a154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a158:	f383 8811 	msr	BASEPRI, r3
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f3bf 8f4f 	dsb	sy
 800a164:	60bb      	str	r3, [r7, #8]
 800a166:	e7fe      	b.n	800a166 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16c:	1e5a      	subs	r2, r3, #1
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d044      	beq.n	800a208 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d140      	bne.n	800a208 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	3304      	adds	r3, #4
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7fe f96c 	bl	8008468 <uxListRemove>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d115      	bne.n	800a1c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19a:	491f      	ldr	r1, [pc, #124]	; (800a218 <xTaskPriorityDisinherit+0x100>)
 800a19c:	4613      	mov	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	440b      	add	r3, r1
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <xTaskPriorityDisinherit+0xaa>
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b6:	43da      	mvns	r2, r3
 800a1b8:	4b18      	ldr	r3, [pc, #96]	; (800a21c <xTaskPriorityDisinherit+0x104>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	4a17      	ldr	r2, [pc, #92]	; (800a21c <xTaskPriorityDisinherit+0x104>)
 800a1c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ce:	f1c3 0207 	rsb	r2, r3, #7
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	2201      	movs	r2, #1
 800a1dc:	409a      	lsls	r2, r3
 800a1de:	4b0f      	ldr	r3, [pc, #60]	; (800a21c <xTaskPriorityDisinherit+0x104>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	4a0d      	ldr	r2, [pc, #52]	; (800a21c <xTaskPriorityDisinherit+0x104>)
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4a08      	ldr	r2, [pc, #32]	; (800a218 <xTaskPriorityDisinherit+0x100>)
 800a1f6:	441a      	add	r2, r3
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	4610      	mov	r0, r2
 800a200:	f7fe f8d5 	bl	80083ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a204:	2301      	movs	r3, #1
 800a206:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a208:	697b      	ldr	r3, [r7, #20]
	}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	200007a8 	.word	0x200007a8
 800a218:	200007ac 	.word	0x200007ac
 800a21c:	200008b0 	.word	0x200008b0

0800a220 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a220:	b580      	push	{r7, lr}
 800a222:	b088      	sub	sp, #32
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a22e:	2301      	movs	r3, #1
 800a230:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 8081 	beq.w	800a33c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d109      	bne.n	800a256 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	e7fe      	b.n	800a254 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d902      	bls.n	800a266 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	61fb      	str	r3, [r7, #28]
 800a264:	e002      	b.n	800a26c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a26a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	69fa      	ldr	r2, [r7, #28]
 800a272:	429a      	cmp	r2, r3
 800a274:	d062      	beq.n	800a33c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d15d      	bne.n	800a33c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a280:	4b30      	ldr	r3, [pc, #192]	; (800a344 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	69ba      	ldr	r2, [r7, #24]
 800a286:	429a      	cmp	r2, r3
 800a288:	d109      	bne.n	800a29e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	60bb      	str	r3, [r7, #8]
 800a29c:	e7fe      	b.n	800a29c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	db04      	blt.n	800a2bc <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	f1c3 0207 	rsb	r2, r3, #7
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	6959      	ldr	r1, [r3, #20]
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4a1f      	ldr	r2, [pc, #124]	; (800a348 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a2cc:	4413      	add	r3, r2
 800a2ce:	4299      	cmp	r1, r3
 800a2d0:	d134      	bne.n	800a33c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2d2:	69bb      	ldr	r3, [r7, #24]
 800a2d4:	3304      	adds	r3, #4
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fe f8c6 	bl	8008468 <uxListRemove>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d115      	bne.n	800a30e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e6:	4918      	ldr	r1, [pc, #96]	; (800a348 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	440b      	add	r3, r1
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a302:	43da      	mvns	r2, r3
 800a304:	4b11      	ldr	r3, [pc, #68]	; (800a34c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4013      	ands	r3, r2
 800a30a:	4a10      	ldr	r2, [pc, #64]	; (800a34c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a30c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a312:	2201      	movs	r2, #1
 800a314:	409a      	lsls	r2, r3
 800a316:	4b0d      	ldr	r3, [pc, #52]	; (800a34c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	4a0b      	ldr	r2, [pc, #44]	; (800a34c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a31e:	6013      	str	r3, [r2, #0]
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4a06      	ldr	r2, [pc, #24]	; (800a348 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a32e:	441a      	add	r2, r3
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	3304      	adds	r3, #4
 800a334:	4619      	mov	r1, r3
 800a336:	4610      	mov	r0, r2
 800a338:	f7fe f839 	bl	80083ae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a33c:	bf00      	nop
 800a33e:	3720      	adds	r7, #32
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	200007a8 	.word	0x200007a8
 800a348:	200007ac 	.word	0x200007ac
 800a34c:	200008b0 	.word	0x200008b0

0800a350 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a354:	4b07      	ldr	r3, [pc, #28]	; (800a374 <pvTaskIncrementMutexHeldCount+0x24>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a35c:	4b05      	ldr	r3, [pc, #20]	; (800a374 <pvTaskIncrementMutexHeldCount+0x24>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a362:	3201      	adds	r2, #1
 800a364:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800a366:	4b03      	ldr	r3, [pc, #12]	; (800a374 <pvTaskIncrementMutexHeldCount+0x24>)
 800a368:	681b      	ldr	r3, [r3, #0]
	}
 800a36a:	4618      	mov	r0, r3
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	200007a8 	.word	0x200007a8

0800a378 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a382:	4b29      	ldr	r3, [pc, #164]	; (800a428 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a388:	4b28      	ldr	r3, [pc, #160]	; (800a42c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3304      	adds	r3, #4
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe f86a 	bl	8008468 <uxListRemove>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10b      	bne.n	800a3b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a39a:	4b24      	ldr	r3, [pc, #144]	; (800a42c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a6:	43da      	mvns	r2, r3
 800a3a8:	4b21      	ldr	r3, [pc, #132]	; (800a430 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	4a20      	ldr	r2, [pc, #128]	; (800a430 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a3b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3b8:	d10a      	bne.n	800a3d0 <prvAddCurrentTaskToDelayedList+0x58>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d007      	beq.n	800a3d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3c0:	4b1a      	ldr	r3, [pc, #104]	; (800a42c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	481a      	ldr	r0, [pc, #104]	; (800a434 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a3ca:	f7fd fff0 	bl	80083ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a3ce:	e026      	b.n	800a41e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a3d8:	4b14      	ldr	r3, [pc, #80]	; (800a42c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d209      	bcs.n	800a3fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3e8:	4b13      	ldr	r3, [pc, #76]	; (800a438 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	4b0f      	ldr	r3, [pc, #60]	; (800a42c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	f7fd fffe 	bl	80083f6 <vListInsert>
}
 800a3fa:	e010      	b.n	800a41e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3304      	adds	r3, #4
 800a406:	4619      	mov	r1, r3
 800a408:	4610      	mov	r0, r2
 800a40a:	f7fd fff4 	bl	80083f6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a40e:	4b0c      	ldr	r3, [pc, #48]	; (800a440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	429a      	cmp	r2, r3
 800a416:	d202      	bcs.n	800a41e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a418:	4a09      	ldr	r2, [pc, #36]	; (800a440 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6013      	str	r3, [r2, #0]
}
 800a41e:	bf00      	nop
 800a420:	3710      	adds	r7, #16
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	200008ac 	.word	0x200008ac
 800a42c:	200007a8 	.word	0x200007a8
 800a430:	200008b0 	.word	0x200008b0
 800a434:	20000894 	.word	0x20000894
 800a438:	20000864 	.word	0x20000864
 800a43c:	20000860 	.word	0x20000860
 800a440:	200008c8 	.word	0x200008c8

0800a444 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b08a      	sub	sp, #40	; 0x28
 800a448:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a44a:	2300      	movs	r3, #0
 800a44c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a44e:	f000 faff 	bl	800aa50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a452:	4b1c      	ldr	r3, [pc, #112]	; (800a4c4 <xTimerCreateTimerTask+0x80>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d021      	beq.n	800a49e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a45e:	2300      	movs	r3, #0
 800a460:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a462:	1d3a      	adds	r2, r7, #4
 800a464:	f107 0108 	add.w	r1, r7, #8
 800a468:	f107 030c 	add.w	r3, r7, #12
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7f5 ffb7 	bl	80003e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	9202      	str	r2, [sp, #8]
 800a47a:	9301      	str	r3, [sp, #4]
 800a47c:	2302      	movs	r3, #2
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	2300      	movs	r3, #0
 800a482:	460a      	mov	r2, r1
 800a484:	4910      	ldr	r1, [pc, #64]	; (800a4c8 <xTimerCreateTimerTask+0x84>)
 800a486:	4811      	ldr	r0, [pc, #68]	; (800a4cc <xTimerCreateTimerTask+0x88>)
 800a488:	f7fe ff9c 	bl	80093c4 <xTaskCreateStatic>
 800a48c:	4602      	mov	r2, r0
 800a48e:	4b10      	ldr	r3, [pc, #64]	; (800a4d0 <xTimerCreateTimerTask+0x8c>)
 800a490:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a492:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <xTimerCreateTimerTask+0x8c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a49a:	2301      	movs	r3, #1
 800a49c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d109      	bne.n	800a4b8 <xTimerCreateTimerTask+0x74>
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	613b      	str	r3, [r7, #16]
 800a4b6:	e7fe      	b.n	800a4b6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800a4b8:	697b      	ldr	r3, [r7, #20]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20000904 	.word	0x20000904
 800a4c8:	0800b434 	.word	0x0800b434
 800a4cc:	0800a605 	.word	0x0800a605
 800a4d0:	20000908 	.word	0x20000908

0800a4d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08a      	sub	sp, #40	; 0x28
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d109      	bne.n	800a500 <xTimerGenericCommand+0x2c>
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	623b      	str	r3, [r7, #32]
 800a4fe:	e7fe      	b.n	800a4fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a500:	4b19      	ldr	r3, [pc, #100]	; (800a568 <xTimerGenericCommand+0x94>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d02a      	beq.n	800a55e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b05      	cmp	r3, #5
 800a518:	dc18      	bgt.n	800a54c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a51a:	f7ff fd5f 	bl	8009fdc <xTaskGetSchedulerState>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b02      	cmp	r3, #2
 800a522:	d109      	bne.n	800a538 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a524:	4b10      	ldr	r3, [pc, #64]	; (800a568 <xTimerGenericCommand+0x94>)
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	f107 0110 	add.w	r1, r7, #16
 800a52c:	2300      	movs	r3, #0
 800a52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a530:	f7fe f8fe 	bl	8008730 <xQueueGenericSend>
 800a534:	6278      	str	r0, [r7, #36]	; 0x24
 800a536:	e012      	b.n	800a55e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a538:	4b0b      	ldr	r3, [pc, #44]	; (800a568 <xTimerGenericCommand+0x94>)
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	f107 0110 	add.w	r1, r7, #16
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	f7fe f8f4 	bl	8008730 <xQueueGenericSend>
 800a548:	6278      	str	r0, [r7, #36]	; 0x24
 800a54a:	e008      	b.n	800a55e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a54c:	4b06      	ldr	r3, [pc, #24]	; (800a568 <xTimerGenericCommand+0x94>)
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	f107 0110 	add.w	r1, r7, #16
 800a554:	2300      	movs	r3, #0
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	f7fe f9e4 	bl	8008924 <xQueueGenericSendFromISR>
 800a55c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a560:	4618      	mov	r0, r3
 800a562:	3728      	adds	r7, #40	; 0x28
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	20000904 	.word	0x20000904

0800a56c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b088      	sub	sp, #32
 800a570:	af02      	add	r7, sp, #8
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a576:	4b22      	ldr	r3, [pc, #136]	; (800a600 <prvProcessExpiredTimer+0x94>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	3304      	adds	r3, #4
 800a584:	4618      	mov	r0, r3
 800a586:	f7fd ff6f 	bl	8008468 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b00      	cmp	r3, #0
 800a596:	d021      	beq.n	800a5dc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	699a      	ldr	r2, [r3, #24]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	18d1      	adds	r1, r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	6978      	ldr	r0, [r7, #20]
 800a5a6:	f000 f8d1 	bl	800a74c <prvInsertTimerInActiveList>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01e      	beq.n	800a5ee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	2100      	movs	r1, #0
 800a5ba:	6978      	ldr	r0, [r7, #20]
 800a5bc:	f7ff ff8a 	bl	800a4d4 <xTimerGenericCommand>
 800a5c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d112      	bne.n	800a5ee <prvProcessExpiredTimer+0x82>
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	60fb      	str	r3, [r7, #12]
 800a5da:	e7fe      	b.n	800a5da <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5e2:	f023 0301 	bic.w	r3, r3, #1
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	6978      	ldr	r0, [r7, #20]
 800a5f4:	4798      	blx	r3
}
 800a5f6:	bf00      	nop
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	200008fc 	.word	0x200008fc

0800a604 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a60c:	f107 0308 	add.w	r3, r7, #8
 800a610:	4618      	mov	r0, r3
 800a612:	f000 f857 	bl	800a6c4 <prvGetNextExpireTime>
 800a616:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	4619      	mov	r1, r3
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f000 f803 	bl	800a628 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a622:	f000 f8d5 	bl	800a7d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a626:	e7f1      	b.n	800a60c <prvTimerTask+0x8>

0800a628 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a632:	f7ff f8f1 	bl	8009818 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a636:	f107 0308 	add.w	r3, r7, #8
 800a63a:	4618      	mov	r0, r3
 800a63c:	f000 f866 	bl	800a70c <prvSampleTimeNow>
 800a640:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d130      	bne.n	800a6aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10a      	bne.n	800a664 <prvProcessTimerOrBlockTask+0x3c>
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	429a      	cmp	r2, r3
 800a654:	d806      	bhi.n	800a664 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a656:	f7ff f8ed 	bl	8009834 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a65a:	68f9      	ldr	r1, [r7, #12]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7ff ff85 	bl	800a56c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a662:	e024      	b.n	800a6ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d008      	beq.n	800a67c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a66a:	4b13      	ldr	r3, [pc, #76]	; (800a6b8 <prvProcessTimerOrBlockTask+0x90>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d101      	bne.n	800a678 <prvProcessTimerOrBlockTask+0x50>
 800a674:	2301      	movs	r3, #1
 800a676:	e000      	b.n	800a67a <prvProcessTimerOrBlockTask+0x52>
 800a678:	2300      	movs	r3, #0
 800a67a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a67c:	4b0f      	ldr	r3, [pc, #60]	; (800a6bc <prvProcessTimerOrBlockTask+0x94>)
 800a67e:	6818      	ldr	r0, [r3, #0]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	1ad3      	subs	r3, r2, r3
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	4619      	mov	r1, r3
 800a68a:	f7fe fe67 	bl	800935c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a68e:	f7ff f8d1 	bl	8009834 <xTaskResumeAll>
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10a      	bne.n	800a6ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a698:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <prvProcessTimerOrBlockTask+0x98>)
 800a69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a69e:	601a      	str	r2, [r3, #0]
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	f3bf 8f6f 	isb	sy
}
 800a6a8:	e001      	b.n	800a6ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a6aa:	f7ff f8c3 	bl	8009834 <xTaskResumeAll>
}
 800a6ae:	bf00      	nop
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20000900 	.word	0x20000900
 800a6bc:	20000904 	.word	0x20000904
 800a6c0:	e000ed04 	.word	0xe000ed04

0800a6c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a6cc:	4b0e      	ldr	r3, [pc, #56]	; (800a708 <prvGetNextExpireTime+0x44>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d101      	bne.n	800a6da <prvGetNextExpireTime+0x16>
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	e000      	b.n	800a6dc <prvGetNextExpireTime+0x18>
 800a6da:	2200      	movs	r2, #0
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d105      	bne.n	800a6f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a6e8:	4b07      	ldr	r3, [pc, #28]	; (800a708 <prvGetNextExpireTime+0x44>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	e001      	b.n	800a6f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3714      	adds	r7, #20
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr
 800a706:	bf00      	nop
 800a708:	200008fc 	.word	0x200008fc

0800a70c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a714:	f7ff f92a 	bl	800996c <xTaskGetTickCount>
 800a718:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a71a:	4b0b      	ldr	r3, [pc, #44]	; (800a748 <prvSampleTimeNow+0x3c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	429a      	cmp	r2, r3
 800a722:	d205      	bcs.n	800a730 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a724:	f000 f930 	bl	800a988 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	e002      	b.n	800a736 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a736:	4a04      	ldr	r2, [pc, #16]	; (800a748 <prvSampleTimeNow+0x3c>)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a73c:	68fb      	ldr	r3, [r7, #12]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	2000090c 	.word	0x2000090c

0800a74c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a75a:	2300      	movs	r3, #0
 800a75c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d812      	bhi.n	800a798 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	1ad2      	subs	r2, r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d302      	bcc.n	800a786 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a780:	2301      	movs	r3, #1
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	e01b      	b.n	800a7be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a786:	4b10      	ldr	r3, [pc, #64]	; (800a7c8 <prvInsertTimerInActiveList+0x7c>)
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7fd fe30 	bl	80083f6 <vListInsert>
 800a796:	e012      	b.n	800a7be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d206      	bcs.n	800a7ae <prvInsertTimerInActiveList+0x62>
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d302      	bcc.n	800a7ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	e007      	b.n	800a7be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7ae:	4b07      	ldr	r3, [pc, #28]	; (800a7cc <prvInsertTimerInActiveList+0x80>)
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	4610      	mov	r0, r2
 800a7ba:	f7fd fe1c 	bl	80083f6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a7be:	697b      	ldr	r3, [r7, #20]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	20000900 	.word	0x20000900
 800a7cc:	200008fc 	.word	0x200008fc

0800a7d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08e      	sub	sp, #56	; 0x38
 800a7d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7d6:	e0c6      	b.n	800a966 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	da17      	bge.n	800a80e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a7de:	1d3b      	adds	r3, r7, #4
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d109      	bne.n	800a7fe <prvProcessReceivedCommands+0x2e>
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	61fb      	str	r3, [r7, #28]
 800a7fc:	e7fe      	b.n	800a7fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a804:	6850      	ldr	r0, [r2, #4]
 800a806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a808:	6892      	ldr	r2, [r2, #8]
 800a80a:	4611      	mov	r1, r2
 800a80c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	f2c0 80a7 	blt.w	800a964 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d004      	beq.n	800a82c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a824:	3304      	adds	r3, #4
 800a826:	4618      	mov	r0, r3
 800a828:	f7fd fe1e 	bl	8008468 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a82c:	463b      	mov	r3, r7
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff ff6c 	bl	800a70c <prvSampleTimeNow>
 800a834:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b09      	cmp	r3, #9
 800a83a:	f200 8094 	bhi.w	800a966 <prvProcessReceivedCommands+0x196>
 800a83e:	a201      	add	r2, pc, #4	; (adr r2, 800a844 <prvProcessReceivedCommands+0x74>)
 800a840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a844:	0800a86d 	.word	0x0800a86d
 800a848:	0800a86d 	.word	0x0800a86d
 800a84c:	0800a86d 	.word	0x0800a86d
 800a850:	0800a8df 	.word	0x0800a8df
 800a854:	0800a8f3 	.word	0x0800a8f3
 800a858:	0800a93b 	.word	0x0800a93b
 800a85c:	0800a86d 	.word	0x0800a86d
 800a860:	0800a86d 	.word	0x0800a86d
 800a864:	0800a8df 	.word	0x0800a8df
 800a868:	0800a8f3 	.word	0x0800a8f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a872:	f043 0301 	orr.w	r3, r3, #1
 800a876:	b2da      	uxtb	r2, r3
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	18d1      	adds	r1, r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a88c:	f7ff ff5e 	bl	800a74c <prvInsertTimerInActiveList>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d067      	beq.n	800a966 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a898:	6a1b      	ldr	r3, [r3, #32]
 800a89a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a89c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8a4:	f003 0304 	and.w	r3, r3, #4
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d05c      	beq.n	800a966 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	441a      	add	r2, r3
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8be:	f7ff fe09 	bl	800a4d4 <xTimerGenericCommand>
 800a8c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d14d      	bne.n	800a966 <prvProcessReceivedCommands+0x196>
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	61bb      	str	r3, [r7, #24]
 800a8dc:	e7fe      	b.n	800a8dc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8e4:	f023 0301 	bic.w	r3, r3, #1
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a8f0:	e039      	b.n	800a966 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8f8:	f043 0301 	orr.w	r3, r3, #1
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a904:	68ba      	ldr	r2, [r7, #8]
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d109      	bne.n	800a926 <prvProcessReceivedCommands+0x156>
 800a912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	e7fe      	b.n	800a924 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a928:	699a      	ldr	r2, [r3, #24]
 800a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92c:	18d1      	adds	r1, r2, r3
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a934:	f7ff ff0a 	bl	800a74c <prvInsertTimerInActiveList>
					break;
 800a938:	e015      	b.n	800a966 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a940:	f003 0302 	and.w	r3, r3, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	d103      	bne.n	800a950 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800a948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a94a:	f000 fbc3 	bl	800b0d4 <vPortFree>
 800a94e:	e00a      	b.n	800a966 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a952:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a956:	f023 0301 	bic.w	r3, r3, #1
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a962:	e000      	b.n	800a966 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a964:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a966:	4b07      	ldr	r3, [pc, #28]	; (800a984 <prvProcessReceivedCommands+0x1b4>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	1d39      	adds	r1, r7, #4
 800a96c:	2200      	movs	r2, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fe f8f6 	bl	8008b60 <xQueueReceive>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	f47f af2e 	bne.w	800a7d8 <prvProcessReceivedCommands+0x8>
	}
}
 800a97c:	bf00      	nop
 800a97e:	3730      	adds	r7, #48	; 0x30
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	20000904 	.word	0x20000904

0800a988 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a98e:	e047      	b.n	800aa20 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a990:	4b2d      	ldr	r3, [pc, #180]	; (800aa48 <prvSwitchTimerLists+0xc0>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a99a:	4b2b      	ldr	r3, [pc, #172]	; (800aa48 <prvSwitchTimerLists+0xc0>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fd fd5d 	bl	8008468 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a9bc:	f003 0304 	and.w	r3, r3, #4
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d02d      	beq.n	800aa20 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	693a      	ldr	r2, [r7, #16]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d90e      	bls.n	800a9f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9e2:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <prvSwitchTimerLists+0xc0>)
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f7fd fd02 	bl	80083f6 <vListInsert>
 800a9f2:	e015      	b.n	800aa20 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f7ff fd68 	bl	800a4d4 <xTimerGenericCommand>
 800aa04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d109      	bne.n	800aa20 <prvSwitchTimerLists+0x98>
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	603b      	str	r3, [r7, #0]
 800aa1e:	e7fe      	b.n	800aa1e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa20:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <prvSwitchTimerLists+0xc0>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1b2      	bne.n	800a990 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa2a:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <prvSwitchTimerLists+0xc0>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa30:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <prvSwitchTimerLists+0xc4>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a04      	ldr	r2, [pc, #16]	; (800aa48 <prvSwitchTimerLists+0xc0>)
 800aa36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aa38:	4a04      	ldr	r2, [pc, #16]	; (800aa4c <prvSwitchTimerLists+0xc4>)
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	6013      	str	r3, [r2, #0]
}
 800aa3e:	bf00      	nop
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	200008fc 	.word	0x200008fc
 800aa4c:	20000900 	.word	0x20000900

0800aa50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aa56:	f000 f961 	bl	800ad1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aa5a:	4b15      	ldr	r3, [pc, #84]	; (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d120      	bne.n	800aaa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aa62:	4814      	ldr	r0, [pc, #80]	; (800aab4 <prvCheckForValidListAndQueue+0x64>)
 800aa64:	f7fd fc76 	bl	8008354 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aa68:	4813      	ldr	r0, [pc, #76]	; (800aab8 <prvCheckForValidListAndQueue+0x68>)
 800aa6a:	f7fd fc73 	bl	8008354 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aa6e:	4b13      	ldr	r3, [pc, #76]	; (800aabc <prvCheckForValidListAndQueue+0x6c>)
 800aa70:	4a10      	ldr	r2, [pc, #64]	; (800aab4 <prvCheckForValidListAndQueue+0x64>)
 800aa72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aa74:	4b12      	ldr	r3, [pc, #72]	; (800aac0 <prvCheckForValidListAndQueue+0x70>)
 800aa76:	4a10      	ldr	r2, [pc, #64]	; (800aab8 <prvCheckForValidListAndQueue+0x68>)
 800aa78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9300      	str	r3, [sp, #0]
 800aa7e:	4b11      	ldr	r3, [pc, #68]	; (800aac4 <prvCheckForValidListAndQueue+0x74>)
 800aa80:	4a11      	ldr	r2, [pc, #68]	; (800aac8 <prvCheckForValidListAndQueue+0x78>)
 800aa82:	2110      	movs	r1, #16
 800aa84:	200a      	movs	r0, #10
 800aa86:	f7fd fd81 	bl	800858c <xQueueGenericCreateStatic>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	4b08      	ldr	r3, [pc, #32]	; (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa8e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d005      	beq.n	800aaa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aa98:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <prvCheckForValidListAndQueue+0x60>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	490b      	ldr	r1, [pc, #44]	; (800aacc <prvCheckForValidListAndQueue+0x7c>)
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fc0a 	bl	80092b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aaa4:	f000 f968 	bl	800ad78 <vPortExitCritical>
}
 800aaa8:	bf00      	nop
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	20000904 	.word	0x20000904
 800aab4:	200008d4 	.word	0x200008d4
 800aab8:	200008e8 	.word	0x200008e8
 800aabc:	200008fc 	.word	0x200008fc
 800aac0:	20000900 	.word	0x20000900
 800aac4:	200009b0 	.word	0x200009b0
 800aac8:	20000910 	.word	0x20000910
 800aacc:	0800b43c 	.word	0x0800b43c

0800aad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3b04      	subs	r3, #4
 800aae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	3b04      	subs	r3, #4
 800aaee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f023 0201 	bic.w	r2, r3, #1
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3b04      	subs	r3, #4
 800aafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab00:	4a0c      	ldr	r2, [pc, #48]	; (800ab34 <pxPortInitialiseStack+0x64>)
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	3b14      	subs	r3, #20
 800ab0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3b04      	subs	r3, #4
 800ab16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f06f 0202 	mvn.w	r2, #2
 800ab1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3b20      	subs	r3, #32
 800ab24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab26:	68fb      	ldr	r3, [r7, #12]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	0800ab39 	.word	0x0800ab39

0800ab38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab42:	4b11      	ldr	r3, [pc, #68]	; (800ab88 <prvTaskExitError+0x50>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab4a:	d009      	beq.n	800ab60 <prvTaskExitError+0x28>
 800ab4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	60fb      	str	r3, [r7, #12]
 800ab5e:	e7fe      	b.n	800ab5e <prvTaskExitError+0x26>
 800ab60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab64:	f383 8811 	msr	BASEPRI, r3
 800ab68:	f3bf 8f6f 	isb	sy
 800ab6c:	f3bf 8f4f 	dsb	sy
 800ab70:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab72:	bf00      	nop
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0fc      	beq.n	800ab74 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab7a:	bf00      	nop
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	20000010 	.word	0x20000010
 800ab8c:	00000000 	.word	0x00000000

0800ab90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <pxCurrentTCBConst2>)
 800ab92:	6819      	ldr	r1, [r3, #0]
 800ab94:	6808      	ldr	r0, [r1, #0]
 800ab96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9a:	f380 8809 	msr	PSP, r0
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f04f 0000 	mov.w	r0, #0
 800aba6:	f380 8811 	msr	BASEPRI, r0
 800abaa:	4770      	bx	lr
 800abac:	f3af 8000 	nop.w

0800abb0 <pxCurrentTCBConst2>:
 800abb0:	200007a8 	.word	0x200007a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop

0800abb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abb8:	4808      	ldr	r0, [pc, #32]	; (800abdc <prvPortStartFirstTask+0x24>)
 800abba:	6800      	ldr	r0, [r0, #0]
 800abbc:	6800      	ldr	r0, [r0, #0]
 800abbe:	f380 8808 	msr	MSP, r0
 800abc2:	f04f 0000 	mov.w	r0, #0
 800abc6:	f380 8814 	msr	CONTROL, r0
 800abca:	b662      	cpsie	i
 800abcc:	b661      	cpsie	f
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	df00      	svc	0
 800abd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abda:	bf00      	nop
 800abdc:	e000ed08 	.word	0xe000ed08

0800abe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abe6:	4b44      	ldr	r3, [pc, #272]	; (800acf8 <xPortStartScheduler+0x118>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a44      	ldr	r2, [pc, #272]	; (800acfc <xPortStartScheduler+0x11c>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d109      	bne.n	800ac04 <xPortStartScheduler+0x24>
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	613b      	str	r3, [r7, #16]
 800ac02:	e7fe      	b.n	800ac02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac04:	4b3c      	ldr	r3, [pc, #240]	; (800acf8 <xPortStartScheduler+0x118>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a3d      	ldr	r2, [pc, #244]	; (800ad00 <xPortStartScheduler+0x120>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d109      	bne.n	800ac22 <xPortStartScheduler+0x42>
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	60fb      	str	r3, [r7, #12]
 800ac20:	e7fe      	b.n	800ac20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac22:	4b38      	ldr	r3, [pc, #224]	; (800ad04 <xPortStartScheduler+0x124>)
 800ac24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	22ff      	movs	r2, #255	; 0xff
 800ac32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	b2db      	uxtb	r3, r3
 800ac3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac3c:	78fb      	ldrb	r3, [r7, #3]
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	4b30      	ldr	r3, [pc, #192]	; (800ad08 <xPortStartScheduler+0x128>)
 800ac48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac4a:	4b30      	ldr	r3, [pc, #192]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac4c:	2207      	movs	r2, #7
 800ac4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac50:	e009      	b.n	800ac66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800ac52:	4b2e      	ldr	r3, [pc, #184]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4a2c      	ldr	r2, [pc, #176]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac5c:	78fb      	ldrb	r3, [r7, #3]
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	005b      	lsls	r3, r3, #1
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac66:	78fb      	ldrb	r3, [r7, #3]
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac6e:	2b80      	cmp	r3, #128	; 0x80
 800ac70:	d0ef      	beq.n	800ac52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac72:	4b26      	ldr	r3, [pc, #152]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f1c3 0307 	rsb	r3, r3, #7
 800ac7a:	2b04      	cmp	r3, #4
 800ac7c:	d009      	beq.n	800ac92 <xPortStartScheduler+0xb2>
 800ac7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	60bb      	str	r3, [r7, #8]
 800ac90:	e7fe      	b.n	800ac90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac92:	4b1e      	ldr	r3, [pc, #120]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	021b      	lsls	r3, r3, #8
 800ac98:	4a1c      	ldr	r2, [pc, #112]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ac9c:	4b1b      	ldr	r3, [pc, #108]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aca4:	4a19      	ldr	r2, [pc, #100]	; (800ad0c <xPortStartScheduler+0x12c>)
 800aca6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800acb0:	4b17      	ldr	r3, [pc, #92]	; (800ad10 <xPortStartScheduler+0x130>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a16      	ldr	r2, [pc, #88]	; (800ad10 <xPortStartScheduler+0x130>)
 800acb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acbc:	4b14      	ldr	r3, [pc, #80]	; (800ad10 <xPortStartScheduler+0x130>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a13      	ldr	r2, [pc, #76]	; (800ad10 <xPortStartScheduler+0x130>)
 800acc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800acc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acc8:	f000 f8d6 	bl	800ae78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800accc:	4b11      	ldr	r3, [pc, #68]	; (800ad14 <xPortStartScheduler+0x134>)
 800acce:	2200      	movs	r2, #0
 800acd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acd2:	f000 f8f5 	bl	800aec0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acd6:	4b10      	ldr	r3, [pc, #64]	; (800ad18 <xPortStartScheduler+0x138>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a0f      	ldr	r2, [pc, #60]	; (800ad18 <xPortStartScheduler+0x138>)
 800acdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ace0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ace2:	f7ff ff69 	bl	800abb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ace6:	f7fe ff1b 	bl	8009b20 <vTaskSwitchContext>
	prvTaskExitError();
 800acea:	f7ff ff25 	bl	800ab38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acee:	2300      	movs	r3, #0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3718      	adds	r7, #24
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}
 800acf8:	e000ed00 	.word	0xe000ed00
 800acfc:	410fc271 	.word	0x410fc271
 800ad00:	410fc270 	.word	0x410fc270
 800ad04:	e000e400 	.word	0xe000e400
 800ad08:	200009f8 	.word	0x200009f8
 800ad0c:	200009fc 	.word	0x200009fc
 800ad10:	e000ed20 	.word	0xe000ed20
 800ad14:	20000010 	.word	0x20000010
 800ad18:	e000ef34 	.word	0xe000ef34

0800ad1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad34:	4b0e      	ldr	r3, [pc, #56]	; (800ad70 <vPortEnterCritical+0x54>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	4a0d      	ldr	r2, [pc, #52]	; (800ad70 <vPortEnterCritical+0x54>)
 800ad3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	; (800ad70 <vPortEnterCritical+0x54>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d10e      	bne.n	800ad64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad46:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <vPortEnterCritical+0x58>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d009      	beq.n	800ad64 <vPortEnterCritical+0x48>
 800ad50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	603b      	str	r3, [r7, #0]
 800ad62:	e7fe      	b.n	800ad62 <vPortEnterCritical+0x46>
	}
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	20000010 	.word	0x20000010
 800ad74:	e000ed04 	.word	0xe000ed04

0800ad78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad7e:	4b11      	ldr	r3, [pc, #68]	; (800adc4 <vPortExitCritical+0x4c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d109      	bne.n	800ad9a <vPortExitCritical+0x22>
 800ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	607b      	str	r3, [r7, #4]
 800ad98:	e7fe      	b.n	800ad98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ad9a:	4b0a      	ldr	r3, [pc, #40]	; (800adc4 <vPortExitCritical+0x4c>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3b01      	subs	r3, #1
 800ada0:	4a08      	ldr	r2, [pc, #32]	; (800adc4 <vPortExitCritical+0x4c>)
 800ada2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ada4:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <vPortExitCritical+0x4c>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d104      	bne.n	800adb6 <vPortExitCritical+0x3e>
 800adac:	2300      	movs	r3, #0
 800adae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800adb6:	bf00      	nop
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	20000010 	.word	0x20000010
	...

0800add0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800add0:	f3ef 8009 	mrs	r0, PSP
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	4b15      	ldr	r3, [pc, #84]	; (800ae30 <pxCurrentTCBConst>)
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	f01e 0f10 	tst.w	lr, #16
 800ade0:	bf08      	it	eq
 800ade2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ade6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adea:	6010      	str	r0, [r2, #0]
 800adec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800adf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800adf4:	f380 8811 	msr	BASEPRI, r0
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f7fe fe8e 	bl	8009b20 <vTaskSwitchContext>
 800ae04:	f04f 0000 	mov.w	r0, #0
 800ae08:	f380 8811 	msr	BASEPRI, r0
 800ae0c:	bc09      	pop	{r0, r3}
 800ae0e:	6819      	ldr	r1, [r3, #0]
 800ae10:	6808      	ldr	r0, [r1, #0]
 800ae12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae16:	f01e 0f10 	tst.w	lr, #16
 800ae1a:	bf08      	it	eq
 800ae1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae20:	f380 8809 	msr	PSP, r0
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	f3af 8000 	nop.w

0800ae30 <pxCurrentTCBConst>:
 800ae30:	200007a8 	.word	0x200007a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae34:	bf00      	nop
 800ae36:	bf00      	nop

0800ae38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae50:	f7fe fdae 	bl	80099b0 <xTaskIncrementTick>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d003      	beq.n	800ae62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae5a:	4b06      	ldr	r3, [pc, #24]	; (800ae74 <SysTick_Handler+0x3c>)
 800ae5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae60:	601a      	str	r2, [r3, #0]
 800ae62:	2300      	movs	r3, #0
 800ae64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	e000ed04 	.word	0xe000ed04

0800ae78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae78:	b480      	push	{r7}
 800ae7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae7c:	4b0b      	ldr	r3, [pc, #44]	; (800aeac <vPortSetupTimerInterrupt+0x34>)
 800ae7e:	2200      	movs	r2, #0
 800ae80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae82:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <vPortSetupTimerInterrupt+0x38>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae88:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <vPortSetupTimerInterrupt+0x3c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a0a      	ldr	r2, [pc, #40]	; (800aeb8 <vPortSetupTimerInterrupt+0x40>)
 800ae8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae92:	099b      	lsrs	r3, r3, #6
 800ae94:	4a09      	ldr	r2, [pc, #36]	; (800aebc <vPortSetupTimerInterrupt+0x44>)
 800ae96:	3b01      	subs	r3, #1
 800ae98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ae9a:	4b04      	ldr	r3, [pc, #16]	; (800aeac <vPortSetupTimerInterrupt+0x34>)
 800ae9c:	2207      	movs	r2, #7
 800ae9e:	601a      	str	r2, [r3, #0]
}
 800aea0:	bf00      	nop
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
 800aeaa:	bf00      	nop
 800aeac:	e000e010 	.word	0xe000e010
 800aeb0:	e000e018 	.word	0xe000e018
 800aeb4:	20000000 	.word	0x20000000
 800aeb8:	10624dd3 	.word	0x10624dd3
 800aebc:	e000e014 	.word	0xe000e014

0800aec0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aec0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aed0 <vPortEnableVFP+0x10>
 800aec4:	6801      	ldr	r1, [r0, #0]
 800aec6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aeca:	6001      	str	r1, [r0, #0]
 800aecc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aece:	bf00      	nop
 800aed0:	e000ed88 	.word	0xe000ed88

0800aed4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeda:	f3ef 8305 	mrs	r3, IPSR
 800aede:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b0f      	cmp	r3, #15
 800aee4:	d913      	bls.n	800af0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aee6:	4a16      	ldr	r2, [pc, #88]	; (800af40 <vPortValidateInterruptPriority+0x6c>)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4413      	add	r3, r2
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aef0:	4b14      	ldr	r3, [pc, #80]	; (800af44 <vPortValidateInterruptPriority+0x70>)
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	7afa      	ldrb	r2, [r7, #11]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d209      	bcs.n	800af0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	607b      	str	r3, [r7, #4]
 800af0c:	e7fe      	b.n	800af0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af0e:	4b0e      	ldr	r3, [pc, #56]	; (800af48 <vPortValidateInterruptPriority+0x74>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af16:	4b0d      	ldr	r3, [pc, #52]	; (800af4c <vPortValidateInterruptPriority+0x78>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d909      	bls.n	800af32 <vPortValidateInterruptPriority+0x5e>
 800af1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af22:	f383 8811 	msr	BASEPRI, r3
 800af26:	f3bf 8f6f 	isb	sy
 800af2a:	f3bf 8f4f 	dsb	sy
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	e7fe      	b.n	800af30 <vPortValidateInterruptPriority+0x5c>
	}
 800af32:	bf00      	nop
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	e000e3f0 	.word	0xe000e3f0
 800af44:	200009f8 	.word	0x200009f8
 800af48:	e000ed0c 	.word	0xe000ed0c
 800af4c:	200009fc 	.word	0x200009fc

0800af50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b08a      	sub	sp, #40	; 0x28
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af58:	2300      	movs	r3, #0
 800af5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af5c:	f7fe fc5c 	bl	8009818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af60:	4b57      	ldr	r3, [pc, #348]	; (800b0c0 <pvPortMalloc+0x170>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af68:	f000 f90c 	bl	800b184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af6c:	4b55      	ldr	r3, [pc, #340]	; (800b0c4 <pvPortMalloc+0x174>)
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4013      	ands	r3, r2
 800af74:	2b00      	cmp	r3, #0
 800af76:	f040 808c 	bne.w	800b092 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d01c      	beq.n	800afba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800af80:	2208      	movs	r2, #8
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4413      	add	r3, r2
 800af86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f003 0307 	and.w	r3, r3, #7
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d013      	beq.n	800afba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f023 0307 	bic.w	r3, r3, #7
 800af98:	3308      	adds	r3, #8
 800af9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f003 0307 	and.w	r3, r3, #7
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d009      	beq.n	800afba <pvPortMalloc+0x6a>
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	617b      	str	r3, [r7, #20]
 800afb8:	e7fe      	b.n	800afb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d068      	beq.n	800b092 <pvPortMalloc+0x142>
 800afc0:	4b41      	ldr	r3, [pc, #260]	; (800b0c8 <pvPortMalloc+0x178>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d863      	bhi.n	800b092 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afca:	4b40      	ldr	r3, [pc, #256]	; (800b0cc <pvPortMalloc+0x17c>)
 800afcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afce:	4b3f      	ldr	r3, [pc, #252]	; (800b0cc <pvPortMalloc+0x17c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afd4:	e004      	b.n	800afe0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d903      	bls.n	800aff2 <pvPortMalloc+0xa2>
 800afea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f1      	bne.n	800afd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aff2:	4b33      	ldr	r3, [pc, #204]	; (800b0c0 <pvPortMalloc+0x170>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff8:	429a      	cmp	r2, r3
 800affa:	d04a      	beq.n	800b092 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2208      	movs	r2, #8
 800b002:	4413      	add	r3, r2
 800b004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	6a3b      	ldr	r3, [r7, #32]
 800b00c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	1ad2      	subs	r2, r2, r3
 800b016:	2308      	movs	r3, #8
 800b018:	005b      	lsls	r3, r3, #1
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d91e      	bls.n	800b05c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b01e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4413      	add	r3, r2
 800b024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	f003 0307 	and.w	r3, r3, #7
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d009      	beq.n	800b044 <pvPortMalloc+0xf4>
 800b030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	613b      	str	r3, [r7, #16]
 800b042:	e7fe      	b.n	800b042 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	1ad2      	subs	r2, r2, r3
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b056:	69b8      	ldr	r0, [r7, #24]
 800b058:	f000 f8f6 	bl	800b248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b05c:	4b1a      	ldr	r3, [pc, #104]	; (800b0c8 <pvPortMalloc+0x178>)
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	4a18      	ldr	r2, [pc, #96]	; (800b0c8 <pvPortMalloc+0x178>)
 800b068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b06a:	4b17      	ldr	r3, [pc, #92]	; (800b0c8 <pvPortMalloc+0x178>)
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	4b18      	ldr	r3, [pc, #96]	; (800b0d0 <pvPortMalloc+0x180>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d203      	bcs.n	800b07e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b076:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <pvPortMalloc+0x178>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a15      	ldr	r2, [pc, #84]	; (800b0d0 <pvPortMalloc+0x180>)
 800b07c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	4b10      	ldr	r3, [pc, #64]	; (800b0c4 <pvPortMalloc+0x174>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	431a      	orrs	r2, r3
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	2200      	movs	r2, #0
 800b090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b092:	f7fe fbcf 	bl	8009834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	f003 0307 	and.w	r3, r3, #7
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d009      	beq.n	800b0b4 <pvPortMalloc+0x164>
 800b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	60fb      	str	r3, [r7, #12]
 800b0b2:	e7fe      	b.n	800b0b2 <pvPortMalloc+0x162>
	return pvReturn;
 800b0b4:	69fb      	ldr	r3, [r7, #28]
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3728      	adds	r7, #40	; 0x28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20003118 	.word	0x20003118
 800b0c4:	20003124 	.word	0x20003124
 800b0c8:	2000311c 	.word	0x2000311c
 800b0cc:	20003110 	.word	0x20003110
 800b0d0:	20003120 	.word	0x20003120

0800b0d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d046      	beq.n	800b174 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b0e6:	2308      	movs	r3, #8
 800b0e8:	425b      	negs	r3, r3
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	685a      	ldr	r2, [r3, #4]
 800b0f8:	4b20      	ldr	r3, [pc, #128]	; (800b17c <vPortFree+0xa8>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d109      	bne.n	800b116 <vPortFree+0x42>
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	e7fe      	b.n	800b114 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d009      	beq.n	800b132 <vPortFree+0x5e>
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	60bb      	str	r3, [r7, #8]
 800b130:	e7fe      	b.n	800b130 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	685a      	ldr	r2, [r3, #4]
 800b136:	4b11      	ldr	r3, [pc, #68]	; (800b17c <vPortFree+0xa8>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d019      	beq.n	800b174 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d115      	bne.n	800b174 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	4b0b      	ldr	r3, [pc, #44]	; (800b17c <vPortFree+0xa8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	43db      	mvns	r3, r3
 800b152:	401a      	ands	r2, r3
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b158:	f7fe fb5e 	bl	8009818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	4b07      	ldr	r3, [pc, #28]	; (800b180 <vPortFree+0xac>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4413      	add	r3, r2
 800b166:	4a06      	ldr	r2, [pc, #24]	; (800b180 <vPortFree+0xac>)
 800b168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b16a:	6938      	ldr	r0, [r7, #16]
 800b16c:	f000 f86c 	bl	800b248 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b170:	f7fe fb60 	bl	8009834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b174:	bf00      	nop
 800b176:	3718      	adds	r7, #24
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	20003124 	.word	0x20003124
 800b180:	2000311c 	.word	0x2000311c

0800b184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b18a:	f242 7310 	movw	r3, #10000	; 0x2710
 800b18e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b190:	4b27      	ldr	r3, [pc, #156]	; (800b230 <prvHeapInit+0xac>)
 800b192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00c      	beq.n	800b1b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	3307      	adds	r3, #7
 800b1a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f023 0307 	bic.w	r3, r3, #7
 800b1aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	4a1f      	ldr	r2, [pc, #124]	; (800b230 <prvHeapInit+0xac>)
 800b1b4:	4413      	add	r3, r2
 800b1b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1bc:	4a1d      	ldr	r2, [pc, #116]	; (800b234 <prvHeapInit+0xb0>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b1c2:	4b1c      	ldr	r3, [pc, #112]	; (800b234 <prvHeapInit+0xb0>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b1d0:	2208      	movs	r2, #8
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	1a9b      	subs	r3, r3, r2
 800b1d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f023 0307 	bic.w	r3, r3, #7
 800b1de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4a15      	ldr	r2, [pc, #84]	; (800b238 <prvHeapInit+0xb4>)
 800b1e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b1e6:	4b14      	ldr	r3, [pc, #80]	; (800b238 <prvHeapInit+0xb4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b1ee:	4b12      	ldr	r3, [pc, #72]	; (800b238 <prvHeapInit+0xb4>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b204:	4b0c      	ldr	r3, [pc, #48]	; (800b238 <prvHeapInit+0xb4>)
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	4a0a      	ldr	r2, [pc, #40]	; (800b23c <prvHeapInit+0xb8>)
 800b212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4a09      	ldr	r2, [pc, #36]	; (800b240 <prvHeapInit+0xbc>)
 800b21a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b21c:	4b09      	ldr	r3, [pc, #36]	; (800b244 <prvHeapInit+0xc0>)
 800b21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b222:	601a      	str	r2, [r3, #0]
}
 800b224:	bf00      	nop
 800b226:	3714      	adds	r7, #20
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20000a00 	.word	0x20000a00
 800b234:	20003110 	.word	0x20003110
 800b238:	20003118 	.word	0x20003118
 800b23c:	20003120 	.word	0x20003120
 800b240:	2000311c 	.word	0x2000311c
 800b244:	20003124 	.word	0x20003124

0800b248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b250:	4b28      	ldr	r3, [pc, #160]	; (800b2f4 <prvInsertBlockIntoFreeList+0xac>)
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e002      	b.n	800b25c <prvInsertBlockIntoFreeList+0x14>
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	429a      	cmp	r2, r3
 800b264:	d8f7      	bhi.n	800b256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	4413      	add	r3, r2
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	429a      	cmp	r2, r3
 800b276:	d108      	bne.n	800b28a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	441a      	add	r2, r3
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	441a      	add	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d118      	bne.n	800b2d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	4b15      	ldr	r3, [pc, #84]	; (800b2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d00d      	beq.n	800b2c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685a      	ldr	r2, [r3, #4]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	441a      	add	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e008      	b.n	800b2d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b2c6:	4b0c      	ldr	r3, [pc, #48]	; (800b2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	601a      	str	r2, [r3, #0]
 800b2ce:	e003      	b.n	800b2d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d002      	beq.n	800b2e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2e6:	bf00      	nop
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	20003110 	.word	0x20003110
 800b2f8:	20003118 	.word	0x20003118

0800b2fc <__libc_init_array>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	4e0d      	ldr	r6, [pc, #52]	; (800b334 <__libc_init_array+0x38>)
 800b300:	4c0d      	ldr	r4, [pc, #52]	; (800b338 <__libc_init_array+0x3c>)
 800b302:	1ba4      	subs	r4, r4, r6
 800b304:	10a4      	asrs	r4, r4, #2
 800b306:	2500      	movs	r5, #0
 800b308:	42a5      	cmp	r5, r4
 800b30a:	d109      	bne.n	800b320 <__libc_init_array+0x24>
 800b30c:	4e0b      	ldr	r6, [pc, #44]	; (800b33c <__libc_init_array+0x40>)
 800b30e:	4c0c      	ldr	r4, [pc, #48]	; (800b340 <__libc_init_array+0x44>)
 800b310:	f000 f82c 	bl	800b36c <_init>
 800b314:	1ba4      	subs	r4, r4, r6
 800b316:	10a4      	asrs	r4, r4, #2
 800b318:	2500      	movs	r5, #0
 800b31a:	42a5      	cmp	r5, r4
 800b31c:	d105      	bne.n	800b32a <__libc_init_array+0x2e>
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
 800b320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b324:	4798      	blx	r3
 800b326:	3501      	adds	r5, #1
 800b328:	e7ee      	b.n	800b308 <__libc_init_array+0xc>
 800b32a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b32e:	4798      	blx	r3
 800b330:	3501      	adds	r5, #1
 800b332:	e7f2      	b.n	800b31a <__libc_init_array+0x1e>
 800b334:	0800b520 	.word	0x0800b520
 800b338:	0800b520 	.word	0x0800b520
 800b33c:	0800b520 	.word	0x0800b520
 800b340:	0800b524 	.word	0x0800b524

0800b344 <memcpy>:
 800b344:	b510      	push	{r4, lr}
 800b346:	1e43      	subs	r3, r0, #1
 800b348:	440a      	add	r2, r1
 800b34a:	4291      	cmp	r1, r2
 800b34c:	d100      	bne.n	800b350 <memcpy+0xc>
 800b34e:	bd10      	pop	{r4, pc}
 800b350:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b354:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b358:	e7f7      	b.n	800b34a <memcpy+0x6>

0800b35a <memset>:
 800b35a:	4402      	add	r2, r0
 800b35c:	4603      	mov	r3, r0
 800b35e:	4293      	cmp	r3, r2
 800b360:	d100      	bne.n	800b364 <memset+0xa>
 800b362:	4770      	bx	lr
 800b364:	f803 1b01 	strb.w	r1, [r3], #1
 800b368:	e7f9      	b.n	800b35e <memset+0x4>
	...

0800b36c <_init>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr

0800b378 <_fini>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	bf00      	nop
 800b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37e:	bc08      	pop	{r3}
 800b380:	469e      	mov	lr, r3
 800b382:	4770      	bx	lr
