
iis2clx_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e8  080030e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030e8  080030e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030e8  080030e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  080030fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000098  080030fc  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0cf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019a0  00000000  00000000  0002b10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  0002cab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000890  00000000  00000000  0002d428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002595f  00000000  00000000  0002dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000088ad  00000000  00000000  00053617  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4bed  00000000  00000000  0005bec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140ab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002520  00000000  00000000  00140b2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003090 	.word	0x08003090

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003090 	.word	0x08003090

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 0314 	add.w	r3, r7, #20
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80001de:	4b2f      	ldr	r3, [pc, #188]	; (800029c <MX_GPIO_Init+0xd4>)
 80001e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e2:	4a2e      	ldr	r2, [pc, #184]	; (800029c <MX_GPIO_Init+0xd4>)
 80001e4:	f043 0310 	orr.w	r3, r3, #16
 80001e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ea:	4b2c      	ldr	r3, [pc, #176]	; (800029c <MX_GPIO_Init+0xd4>)
 80001ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001ee:	f003 0310 	and.w	r3, r3, #16
 80001f2:	613b      	str	r3, [r7, #16]
 80001f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f6:	4b29      	ldr	r3, [pc, #164]	; (800029c <MX_GPIO_Init+0xd4>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fa:	4a28      	ldr	r2, [pc, #160]	; (800029c <MX_GPIO_Init+0xd4>)
 80001fc:	f043 0302 	orr.w	r3, r3, #2
 8000200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000202:	4b26      	ldr	r3, [pc, #152]	; (800029c <MX_GPIO_Init+0xd4>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000206:	f003 0302 	and.w	r3, r3, #2
 800020a:	60fb      	str	r3, [r7, #12]
 800020c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800020e:	4b23      	ldr	r3, [pc, #140]	; (800029c <MX_GPIO_Init+0xd4>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000212:	4a22      	ldr	r2, [pc, #136]	; (800029c <MX_GPIO_Init+0xd4>)
 8000214:	f043 0308 	orr.w	r3, r3, #8
 8000218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021a:	4b20      	ldr	r3, [pc, #128]	; (800029c <MX_GPIO_Init+0xd4>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	f003 0308 	and.w	r3, r3, #8
 8000222:	60bb      	str	r3, [r7, #8]
 8000224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000226:	4b1d      	ldr	r3, [pc, #116]	; (800029c <MX_GPIO_Init+0xd4>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	4a1c      	ldr	r2, [pc, #112]	; (800029c <MX_GPIO_Init+0xd4>)
 800022c:	f043 0301 	orr.w	r3, r3, #1
 8000230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <MX_GPIO_Init+0xd4>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	f003 0301 	and.w	r3, r3, #1
 800023a:	607b      	str	r3, [r7, #4]
 800023c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000244:	4816      	ldr	r0, [pc, #88]	; (80002a0 <MX_GPIO_Init+0xd8>)
 8000246:	f000 fde3 	bl	8000e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800024a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800024e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000250:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_GPIO_Init+0xdc>)
 8000252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000254:	2300      	movs	r3, #0
 8000256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	4619      	mov	r1, r3
 800025e:	4812      	ldr	r0, [pc, #72]	; (80002a8 <MX_GPIO_Init+0xe0>)
 8000260:	f000 fc2e 	bl	8000ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000264:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	4619      	mov	r1, r3
 800027c:	4808      	ldr	r0, [pc, #32]	; (80002a0 <MX_GPIO_Init+0xd8>)
 800027e:	f000 fc1f 	bl	8000ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000282:	2200      	movs	r2, #0
 8000284:	2100      	movs	r1, #0
 8000286:	2028      	movs	r0, #40	; 0x28
 8000288:	f000 fbe3 	bl	8000a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800028c:	2028      	movs	r0, #40	; 0x28
 800028e:	f000 fbfc 	bl	8000a8a <HAL_NVIC_EnableIRQ>

}
 8000292:	bf00      	nop
 8000294:	3728      	adds	r7, #40	; 0x28
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40021000 	.word	0x40021000
 80002a0:	48000c00 	.word	0x48000c00
 80002a4:	10110000 	.word	0x10110000
 80002a8:	48001000 	.word	0x48001000

080002ac <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	; (8000320 <MX_I2C2_Init+0x74>)
 80002b2:	4a1c      	ldr	r2, [pc, #112]	; (8000324 <MX_I2C2_Init+0x78>)
 80002b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80002b6:	4b1a      	ldr	r3, [pc, #104]	; (8000320 <MX_I2C2_Init+0x74>)
 80002b8:	4a1b      	ldr	r2, [pc, #108]	; (8000328 <MX_I2C2_Init+0x7c>)
 80002ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80002bc:	4b18      	ldr	r3, [pc, #96]	; (8000320 <MX_I2C2_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <MX_I2C2_Init+0x74>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <MX_I2C2_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <MX_I2C2_Init+0x74>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002d4:	4b12      	ldr	r3, [pc, #72]	; (8000320 <MX_I2C2_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <MX_I2C2_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e0:	4b0f      	ldr	r3, [pc, #60]	; (8000320 <MX_I2C2_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002e6:	480e      	ldr	r0, [pc, #56]	; (8000320 <MX_I2C2_Init+0x74>)
 80002e8:	f000 fde7 	bl	8000eba <HAL_I2C_Init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80002f2:	f000 f9a1 	bl	8000638 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002f6:	2100      	movs	r1, #0
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <MX_I2C2_Init+0x74>)
 80002fa:	f001 fb3f 	bl	800197c <HAL_I2CEx_ConfigAnalogFilter>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000304:	f000 f998 	bl	8000638 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000308:	2100      	movs	r1, #0
 800030a:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_I2C2_Init+0x74>)
 800030c:	f001 fb81 	bl	8001a12 <HAL_I2CEx_ConfigDigitalFilter>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000316:	f000 f98f 	bl	8000638 <Error_Handler>
  }

}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000034 	.word	0x20000034
 8000324:	40005800 	.word	0x40005800
 8000328:	10909cec 	.word	0x10909cec

0800032c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	; 0x28
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <HAL_I2C_MspInit+0x7c>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d128      	bne.n	80003a0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <HAL_I2C_MspInit+0x80>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	4a16      	ldr	r2, [pc, #88]	; (80003ac <HAL_I2C_MspInit+0x80>)
 8000354:	f043 0302 	orr.w	r3, r3, #2
 8000358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <HAL_I2C_MspInit+0x80>)
 800035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800035e:	f003 0302 	and.w	r3, r3, #2
 8000362:	613b      	str	r3, [r7, #16]
 8000364:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000366:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800036a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800036c:	2312      	movs	r3, #18
 800036e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000370:	2301      	movs	r3, #1
 8000372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000374:	2303      	movs	r3, #3
 8000376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000378:	2304      	movs	r3, #4
 800037a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	4619      	mov	r1, r3
 8000382:	480b      	ldr	r0, [pc, #44]	; (80003b0 <HAL_I2C_MspInit+0x84>)
 8000384:	f000 fb9c 	bl	8000ac0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <HAL_I2C_MspInit+0x80>)
 800038a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038c:	4a07      	ldr	r2, [pc, #28]	; (80003ac <HAL_I2C_MspInit+0x80>)
 800038e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000392:	6593      	str	r3, [r2, #88]	; 0x58
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <HAL_I2C_MspInit+0x80>)
 8000396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80003a0:	bf00      	nop
 80003a2:	3728      	adds	r7, #40	; 0x28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40005800 	.word	0x40005800
 80003ac:	40021000 	.word	0x40021000
 80003b0:	48000400 	.word	0x48000400

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b084      	sub	sp, #16
 80003b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f000 f9fe 	bl	80007ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f8a9 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f7ff ff01 	bl	80001c8 <MX_GPIO_Init>
  MX_I2C2_Init();
 80003c6:	f7ff ff71 	bl	80002ac <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
for (int i =0; i<255; i++)
 80003ca:	2300      	movs	r3, #0
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	e012      	b.n	80003f6 <main+0x42>
{
	if (HAL_I2C_IsDeviceReady(&hi2c2, i, 1, 10) == HAL_OK)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	b299      	uxth	r1, r3
 80003d4:	230a      	movs	r3, #10
 80003d6:	2201      	movs	r2, #1
 80003d8:	4845      	ldr	r0, [pc, #276]	; (80004f0 <main+0x13c>)
 80003da:	f000 ffe7 	bl	80013ac <HAL_I2C_IsDeviceReady>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d105      	bne.n	80003f0 <main+0x3c>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80003e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e8:	4842      	ldr	r0, [pc, #264]	; (80004f4 <main+0x140>)
 80003ea:	f000 fd29 	bl	8000e40 <HAL_GPIO_TogglePin>
		break;
 80003ee:	e005      	b.n	80003fc <main+0x48>
for (int i =0; i<255; i++)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	3301      	adds	r3, #1
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2bfe      	cmp	r3, #254	; 0xfe
 80003fa:	dde9      	ble.n	80003d0 <main+0x1c>

/** 
 * Initializing the sensor 
 *  Writing the correct value into CTRL1_XL 
 **/ 
i2cBuf[0] = IIS2CLX_CTRL1_LX_ADDR; 
 80003fc:	2210      	movs	r2, #16
 80003fe:	4b3e      	ldr	r3, [pc, #248]	; (80004f8 <main+0x144>)
 8000400:	701a      	strb	r2, [r3, #0]
i2cBuf[1] = (II2CLX_ODR_104Hz & 0xF0) | (IIS2CLX_FS_2_G & 0x0C);
 8000402:	2340      	movs	r3, #64	; 0x40
 8000404:	b25b      	sxtb	r3, r3
 8000406:	f023 030f 	bic.w	r3, r3, #15
 800040a:	b25a      	sxtb	r2, r3
 800040c:	230c      	movs	r3, #12
 800040e:	b25b      	sxtb	r3, r3
 8000410:	f003 030c 	and.w	r3, r3, #12
 8000414:	b25b      	sxtb	r3, r3
 8000416:	4313      	orrs	r3, r2
 8000418:	b25b      	sxtb	r3, r3
 800041a:	b2da      	uxtb	r2, r3
 800041c:	4b36      	ldr	r3, [pc, #216]	; (80004f8 <main+0x144>)
 800041e:	705a      	strb	r2, [r3, #1]

HAL_I2C_Master_Transmit(&hi2c2, IIS2CLX_DEV_ADDR, i2cBuf, 2, HAL_MAX_DELAY);
 8000420:	23d6      	movs	r3, #214	; 0xd6
 8000422:	b299      	uxth	r1, r3
 8000424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	2302      	movs	r3, #2
 800042c:	4a32      	ldr	r2, [pc, #200]	; (80004f8 <main+0x144>)
 800042e:	4830      	ldr	r0, [pc, #192]	; (80004f0 <main+0x13c>)
 8000430:	f000 fdd2 	bl	8000fd8 <HAL_I2C_Master_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* Constantly Read Acc Values */ 
    i2cBuf[0] = IIS2CLX_X_AXIS_L_ADDR; 
 8000434:	2228      	movs	r2, #40	; 0x28
 8000436:	4b30      	ldr	r3, [pc, #192]	; (80004f8 <main+0x144>)
 8000438:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c2, IIS2CLX_DEV_ADDR, i2cBuf, 1, HAL_MAX_DELAY);
 800043a:	23d6      	movs	r3, #214	; 0xd6
 800043c:	b299      	uxth	r1, r3
 800043e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000442:	9300      	str	r3, [sp, #0]
 8000444:	2301      	movs	r3, #1
 8000446:	4a2c      	ldr	r2, [pc, #176]	; (80004f8 <main+0x144>)
 8000448:	4829      	ldr	r0, [pc, #164]	; (80004f0 <main+0x13c>)
 800044a:	f000 fdc5 	bl	8000fd8 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2, IIS2CLX_DEV_ADDR, &i2cBuf[1], 4, HAL_MAX_DELAY);
 800044e:	23d6      	movs	r3, #214	; 0xd6
 8000450:	b299      	uxth	r1, r3
 8000452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000456:	9300      	str	r3, [sp, #0]
 8000458:	2304      	movs	r3, #4
 800045a:	4a28      	ldr	r2, [pc, #160]	; (80004fc <main+0x148>)
 800045c:	4824      	ldr	r0, [pc, #144]	; (80004f0 <main+0x13c>)
 800045e:	f000 feaf 	bl	80011c0 <HAL_I2C_Master_Receive>

    /** combining the bytes of each axis **/
    acc_x_temp = ((int16_t) i2cBuf[1]<<8 | i2cBuf[2]); 
 8000462:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <main+0x144>)
 8000464:	785b      	ldrb	r3, [r3, #1]
 8000466:	021b      	lsls	r3, r3, #8
 8000468:	b21a      	sxth	r2, r3
 800046a:	4b23      	ldr	r3, [pc, #140]	; (80004f8 <main+0x144>)
 800046c:	789b      	ldrb	r3, [r3, #2]
 800046e:	b21b      	sxth	r3, r3
 8000470:	4313      	orrs	r3, r2
 8000472:	b21a      	sxth	r2, r3
 8000474:	4b22      	ldr	r3, [pc, #136]	; (8000500 <main+0x14c>)
 8000476:	801a      	strh	r2, [r3, #0]
    acc_y_temp = ((int16_t ) i2cBuf[3]<<8 | i2cBuf[4]);
 8000478:	4b1f      	ldr	r3, [pc, #124]	; (80004f8 <main+0x144>)
 800047a:	78db      	ldrb	r3, [r3, #3]
 800047c:	021b      	lsls	r3, r3, #8
 800047e:	b21a      	sxth	r2, r3
 8000480:	4b1d      	ldr	r3, [pc, #116]	; (80004f8 <main+0x144>)
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	b21b      	sxth	r3, r3
 8000486:	4313      	orrs	r3, r2
 8000488:	b21a      	sxth	r2, r3
 800048a:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <main+0x150>)
 800048c:	801a      	strh	r2, [r3, #0]
    /** Converting to 2's negative **/
    acc_x_temp = twoComplement(acc_x_temp); 
 800048e:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <main+0x14c>)
 8000490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000494:	4618      	mov	r0, r3
 8000496:	f000 f8b4 	bl	8000602 <twoComplement>
 800049a:	4603      	mov	r3, r0
 800049c:	461a      	mov	r2, r3
 800049e:	4b18      	ldr	r3, [pc, #96]	; (8000500 <main+0x14c>)
 80004a0:	801a      	strh	r2, [r3, #0]
    acc_y_temp = twoComplement(acc_y_temp);
 80004a2:	4b18      	ldr	r3, [pc, #96]	; (8000504 <main+0x150>)
 80004a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f8aa 	bl	8000602 <twoComplement>
 80004ae:	4603      	mov	r3, r0
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <main+0x150>)
 80004b4:	801a      	strh	r2, [r3, #0]

    acc_x_mg = (((float)acc_x_temp)/16393); 
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <main+0x14c>)
 80004b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004bc:	ee07 3a90 	vmov	s15, r3
 80004c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80004c4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000508 <main+0x154>
 80004c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <main+0x158>)
 80004ce:	edc3 7a00 	vstr	s15, [r3]
    acc_y_mg = (((float)acc_y_temp)/16393);
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <main+0x150>)
 80004d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004d8:	ee07 3a90 	vmov	s15, r3
 80004dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80004e0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000508 <main+0x154>
 80004e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <main+0x15c>)
 80004ea:	edc3 7a00 	vstr	s15, [r3]
    i2cBuf[0] = IIS2CLX_X_AXIS_L_ADDR; 
 80004ee:	e7a1      	b.n	8000434 <main+0x80>
 80004f0:	20000034 	.word	0x20000034
 80004f4:	48000c00 	.word	0x48000c00
 80004f8:	2000008c 	.word	0x2000008c
 80004fc:	2000008d 	.word	0x2000008d
 8000500:	20000028 	.word	0x20000028
 8000504:	2000002a 	.word	0x2000002a
 8000508:	46801200 	.word	0x46801200
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000030 	.word	0x20000030

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b0b8      	sub	sp, #224	; 0xe0
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800051e:	2244      	movs	r2, #68	; 0x44
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fdac 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000538:	463b      	mov	r3, r7
 800053a:	2288      	movs	r2, #136	; 0x88
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fd9e 	bl	8003080 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000544:	2310      	movs	r3, #16
 8000546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054a:	2301      	movs	r3, #1
 800054c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000556:	2360      	movs	r3, #96	; 0x60
 8000558:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	2302      	movs	r3, #2
 800055e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000562:	2301      	movs	r3, #1
 8000564:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800056e:	2328      	movs	r3, #40	; 0x28
 8000570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000574:	2307      	movs	r3, #7
 8000576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800058a:	4618      	mov	r0, r3
 800058c:	f001 faf2 	bl	8001b74 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000596:	f000 f84f 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005bc:	2104      	movs	r1, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 febe 	bl	8002340 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005ca:	f000 f835 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	4618      	mov	r0, r3
 80005da:	f002 f87d 	bl	80026d8 <HAL_RCCEx_PeriphCLKConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005e4:	f000 f828 	bl	8000638 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ec:	f001 fa6c 	bl	8001ac8 <HAL_PWREx_ControlVoltageScaling>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80005f6:	f000 f81f 	bl	8000638 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	37e0      	adds	r7, #224	; 0xe0
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <twoComplement>:

/* USER CODE BEGIN 4 */
int16_t twoComplement(int16_t in1)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	4603      	mov	r3, r0
 800060a:	80fb      	strh	r3, [r7, #6]
  if (in1 > 0x7ff)
 800060c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000614:	db08      	blt.n	8000628 <twoComplement+0x26>
  {
    return in1 |= 0xF000;
 8000616:	88fb      	ldrh	r3, [r7, #6]
 8000618:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800061c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000620:	80fb      	strh	r3, [r7, #6]
 8000622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000626:	e001      	b.n	800062c <twoComplement+0x2a>
  }
  else return in1;
 8000628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <HAL_MspInit+0x44>)
 8000650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <HAL_MspInit+0x44>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6613      	str	r3, [r2, #96]	; 0x60
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <HAL_MspInit+0x44>)
 800065c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_MspInit+0x44>)
 8000668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <HAL_MspInit+0x44>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	6593      	str	r3, [r2, #88]	; 0x58
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_MspInit+0x44>)
 8000674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40021000 	.word	0x40021000

08000690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f8bc 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80006f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80006f4:	f000 fbbe 	bl	8000e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <SystemInit+0x64>)
 8000702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000706:	4a16      	ldr	r2, [pc, #88]	; (8000760 <SystemInit+0x64>)
 8000708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800070c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000710:	4b14      	ldr	r3, [pc, #80]	; (8000764 <SystemInit+0x68>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a13      	ldr	r2, [pc, #76]	; (8000764 <SystemInit+0x68>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <SystemInit+0x68>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <SystemInit+0x68>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <SystemInit+0x68>)
 8000728:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800072c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000730:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <SystemInit+0x68>)
 8000734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000738:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <SystemInit+0x68>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a09      	ldr	r2, [pc, #36]	; (8000764 <SystemInit+0x68>)
 8000740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000744:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <SystemInit+0x68>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <SystemInit+0x64>)
 800074e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000752:	609a      	str	r2, [r3, #8]
#endif
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000ed00 	.word	0xe000ed00
 8000764:	40021000 	.word	0x40021000

08000768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800076c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800076e:	e003      	b.n	8000778 <LoopCopyDataInit>

08000770 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000772:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000774:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000776:	3104      	adds	r1, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000778:	480b      	ldr	r0, [pc, #44]	; (80007a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800077c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800077e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000780:	d3f6      	bcc.n	8000770 <CopyDataInit>
	ldr	r2, =_sbss
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000784:	e002      	b.n	800078c <LoopFillZerobss>

08000786 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000786:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000788:	f842 3b04 	str.w	r3, [r2], #4

0800078c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <LoopForever+0x16>)
	cmp	r2, r3
 800078e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000790:	d3f9      	bcc.n	8000786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000792:	f7ff ffb3 	bl	80006fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000796:	f002 fc4f 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800079a:	f7ff fe0b 	bl	80003b4 <main>

0800079e <LoopForever>:

LoopForever:
    b LoopForever
 800079e:	e7fe      	b.n	800079e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80007a4:	080030f0 	.word	0x080030f0
	ldr	r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80007ac:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80007b0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80007b4:	20000098 	.word	0x20000098

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>

080007ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f939 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f80e 	bl	80007ec <HAL_InitTick>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	e001      	b.n	80007e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007dc:	f7ff ff34 	bl	8000648 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <HAL_InitTick+0x68>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d022      	beq.n	8000846 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_InitTick+0x6c>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <HAL_InitTick+0x68>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800080c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000810:	fbb2 f3f3 	udiv	r3, r2, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f946 	bl	8000aa6 <HAL_SYSTICK_Config>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10f      	bne.n	8000840 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d809      	bhi.n	800083a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000826:	2200      	movs	r2, #0
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800082e:	f000 f910 	bl	8000a52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_InitTick+0x70>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	e007      	b.n	800084a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e004      	b.n	800084a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e001      	b.n	800084a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000008 	.word	0x20000008
 8000858:	20000000 	.word	0x20000000
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_IncTick+0x1c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x20>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4413      	add	r3, r2
 800086e:	4a03      	ldr	r2, [pc, #12]	; (800087c <HAL_IncTick+0x1c>)
 8000870:	6013      	str	r3, [r2, #0]
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	20000094 	.word	0x20000094
 8000880:	20000008 	.word	0x20000008

08000884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <HAL_GetTick+0x14>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000094 	.word	0x20000094

0800089c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	60d3      	str	r3, [r2, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <__NVIC_GetPriorityGrouping+0x18>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	f003 0307 	and.w	r3, r3, #7
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db0b      	blt.n	800092a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 021f 	and.w	r2, r3, #31
 8000918:	4907      	ldr	r1, [pc, #28]	; (8000938 <__NVIC_EnableIRQ+0x38>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	095b      	lsrs	r3, r3, #5
 8000920:	2001      	movs	r0, #1
 8000922:	fa00 f202 	lsl.w	r2, r0, r2
 8000926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094c:	2b00      	cmp	r3, #0
 800094e:	db0a      	blt.n	8000966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	b2da      	uxtb	r2, r3
 8000954:	490c      	ldr	r1, [pc, #48]	; (8000988 <__NVIC_SetPriority+0x4c>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	0112      	lsls	r2, r2, #4
 800095c:	b2d2      	uxtb	r2, r2
 800095e:	440b      	add	r3, r1
 8000960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000964:	e00a      	b.n	800097c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4908      	ldr	r1, [pc, #32]	; (800098c <__NVIC_SetPriority+0x50>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	f003 030f 	and.w	r3, r3, #15
 8000972:	3b04      	subs	r3, #4
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	b2d2      	uxtb	r2, r2
 8000978:	440b      	add	r3, r1
 800097a:	761a      	strb	r2, [r3, #24]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000e100 	.word	0xe000e100
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	f1c3 0307 	rsb	r3, r3, #7
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	bf28      	it	cs
 80009ae:	2304      	movcs	r3, #4
 80009b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3304      	adds	r3, #4
 80009b6:	2b06      	cmp	r3, #6
 80009b8:	d902      	bls.n	80009c0 <NVIC_EncodePriority+0x30>
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3b03      	subs	r3, #3
 80009be:	e000      	b.n	80009c2 <NVIC_EncodePriority+0x32>
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43da      	mvns	r2, r3
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa01 f303 	lsl.w	r3, r1, r3
 80009e2:	43d9      	mvns	r1, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e8:	4313      	orrs	r3, r2
         );
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3724      	adds	r7, #36	; 0x24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a1c:	f7ff ff8e 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff29 	bl	800089c <__NVIC_SetPriorityGrouping>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a64:	f7ff ff3e 	bl	80008e4 <__NVIC_GetPriorityGrouping>
 8000a68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff ff8e 	bl	8000990 <NVIC_EncodePriority>
 8000a74:	4602      	mov	r2, r0
 8000a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5d 	bl	800093c <__NVIC_SetPriority>
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff31 	bl	8000900 <__NVIC_EnableIRQ>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f7ff ffa2 	bl	80009f8 <SysTick_Config>
 8000ab4:	4603      	mov	r3, r0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ace:	e17f      	b.n	8000dd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8171 	beq.w	8000dca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d00b      	beq.n	8000b08 <HAL_GPIO_Init+0x48>
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d007      	beq.n	8000b08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000afc:	2b11      	cmp	r3, #17
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	2b12      	cmp	r3, #18
 8000b06:	d130      	bne.n	8000b6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	2203      	movs	r2, #3
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	68da      	ldr	r2, [r3, #12]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b3e:	2201      	movs	r2, #1
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	f003 0201 	and.w	r2, r3, #1
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d118      	bne.n	8000ba8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	08db      	lsrs	r3, r3, #3
 8000b92:	f003 0201 	and.w	r2, r3, #1
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	2203      	movs	r2, #3
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x128>
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	2b12      	cmp	r3, #18
 8000be6:	d123      	bne.n	8000c30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	08da      	lsrs	r2, r3, #3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3208      	adds	r2, #8
 8000bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f003 0307 	and.w	r3, r3, #7
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	220f      	movs	r2, #15
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	691a      	ldr	r2, [r3, #16]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	08da      	lsrs	r2, r3, #3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3208      	adds	r2, #8
 8000c2a:	6939      	ldr	r1, [r7, #16]
 8000c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0203 	and.w	r2, r3, #3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f000 80ac 	beq.w	8000dca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b5e      	ldr	r3, [pc, #376]	; (8000dec <HAL_GPIO_Init+0x32c>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	4a5d      	ldr	r2, [pc, #372]	; (8000dec <HAL_GPIO_Init+0x32c>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7e:	4b5b      	ldr	r3, [pc, #364]	; (8000dec <HAL_GPIO_Init+0x32c>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c8a:	4a59      	ldr	r2, [pc, #356]	; (8000df0 <HAL_GPIO_Init+0x330>)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cb4:	d025      	beq.n	8000d02 <HAL_GPIO_Init+0x242>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a4e      	ldr	r2, [pc, #312]	; (8000df4 <HAL_GPIO_Init+0x334>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d01f      	beq.n	8000cfe <HAL_GPIO_Init+0x23e>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a4d      	ldr	r2, [pc, #308]	; (8000df8 <HAL_GPIO_Init+0x338>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d019      	beq.n	8000cfa <HAL_GPIO_Init+0x23a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4a4c      	ldr	r2, [pc, #304]	; (8000dfc <HAL_GPIO_Init+0x33c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d013      	beq.n	8000cf6 <HAL_GPIO_Init+0x236>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a4b      	ldr	r2, [pc, #300]	; (8000e00 <HAL_GPIO_Init+0x340>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d00d      	beq.n	8000cf2 <HAL_GPIO_Init+0x232>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a4a      	ldr	r2, [pc, #296]	; (8000e04 <HAL_GPIO_Init+0x344>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d007      	beq.n	8000cee <HAL_GPIO_Init+0x22e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a49      	ldr	r2, [pc, #292]	; (8000e08 <HAL_GPIO_Init+0x348>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d101      	bne.n	8000cea <HAL_GPIO_Init+0x22a>
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	e00c      	b.n	8000d04 <HAL_GPIO_Init+0x244>
 8000cea:	2307      	movs	r3, #7
 8000cec:	e00a      	b.n	8000d04 <HAL_GPIO_Init+0x244>
 8000cee:	2305      	movs	r3, #5
 8000cf0:	e008      	b.n	8000d04 <HAL_GPIO_Init+0x244>
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	e006      	b.n	8000d04 <HAL_GPIO_Init+0x244>
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e004      	b.n	8000d04 <HAL_GPIO_Init+0x244>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e002      	b.n	8000d04 <HAL_GPIO_Init+0x244>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <HAL_GPIO_Init+0x244>
 8000d02:	2300      	movs	r3, #0
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	f002 0203 	and.w	r2, r2, #3
 8000d0a:	0092      	lsls	r2, r2, #2
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d14:	4936      	ldr	r1, [pc, #216]	; (8000df0 <HAL_GPIO_Init+0x330>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d22:	4b3a      	ldr	r3, [pc, #232]	; (8000e0c <HAL_GPIO_Init+0x34c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d46:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <HAL_GPIO_Init+0x34c>)
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	; (8000e0c <HAL_GPIO_Init+0x34c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d70:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <HAL_GPIO_Init+0x34c>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <HAL_GPIO_Init+0x34c>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	; (8000e0c <HAL_GPIO_Init+0x34c>)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_GPIO_Init+0x34c>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dc4:	4a11      	ldr	r2, [pc, #68]	; (8000e0c <HAL_GPIO_Init+0x34c>)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f47f ae78 	bne.w	8000ad0 <HAL_GPIO_Init+0x10>
  }
}
 8000de0:	bf00      	nop
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40010000 	.word	0x40010000
 8000df4:	48000400 	.word	0x48000400
 8000df8:	48000800 	.word	0x48000800
 8000dfc:	48000c00 	.word	0x48000c00
 8000e00:	48001000 	.word	0x48001000
 8000e04:	48001400 	.word	0x48001400
 8000e08:	48001800 	.word	0x48001800
 8000e0c:	40010400 	.word	0x40010400

08000e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	807b      	strh	r3, [r7, #2]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e20:	787b      	ldrb	r3, [r7, #1]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e26:	887a      	ldrh	r2, [r7, #2]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e2e:	887a      	ldrh	r2, [r7, #2]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	887b      	ldrh	r3, [r7, #2]
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e58:	887a      	ldrh	r2, [r7, #2]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000e5e:	e002      	b.n	8000e66 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e60:	887a      	ldrh	r2, [r7, #2]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	619a      	str	r2, [r3, #24]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
	...

08000e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e7e:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	88fb      	ldrh	r3, [r7, #6]
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e90:	88fb      	ldrh	r3, [r7, #6]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f806 	bl	8000ea4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40010400 	.word	0x40010400

08000ea4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d101      	bne.n	8000ecc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e081      	b.n	8000fd0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d106      	bne.n	8000ee6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff fa23 	bl	800032c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2224      	movs	r2, #36	; 0x24
 8000eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d107      	bne.n	8000f34 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	e006      	b.n	8000f42 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d104      	bne.n	8000f54 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f52:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	6812      	ldr	r2, [r2, #0]
 8000f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f66:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f76:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	ea42 0103 	orr.w	r1, r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	021a      	lsls	r2, r3, #8
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	69d9      	ldr	r1, [r3, #28]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a1a      	ldr	r2, [r3, #32]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0201 	orr.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2220      	movs	r2, #32
 8000fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	817b      	strh	r3, [r7, #10]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b20      	cmp	r3, #32
 8000ff6:	f040 80da 	bne.w	80011ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001000:	2b01      	cmp	r3, #1
 8001002:	d101      	bne.n	8001008 <HAL_I2C_Master_Transmit+0x30>
 8001004:	2302      	movs	r3, #2
 8001006:	e0d3      	b.n	80011b0 <HAL_I2C_Master_Transmit+0x1d8>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2201      	movs	r2, #1
 800100c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001010:	f7ff fc38 	bl	8000884 <HAL_GetTick>
 8001014:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2319      	movs	r3, #25
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 faed 	bl	8001602 <I2C_WaitOnFlagUntilTimeout>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0be      	b.n	80011b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2221      	movs	r2, #33	; 0x21
 8001036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2210      	movs	r2, #16
 800103e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	893a      	ldrh	r2, [r7, #8]
 8001052:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2200      	movs	r2, #0
 8001058:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800105e:	b29b      	uxth	r3, r3
 8001060:	2bff      	cmp	r3, #255	; 0xff
 8001062:	d90e      	bls.n	8001082 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800106e:	b2da      	uxtb	r2, r3
 8001070:	8979      	ldrh	r1, [r7, #10]
 8001072:	4b51      	ldr	r3, [pc, #324]	; (80011b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f000 fc50 	bl	8001920 <I2C_TransferConfig>
 8001080:	e06c      	b.n	800115c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001086:	b29a      	uxth	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001090:	b2da      	uxtb	r2, r3
 8001092:	8979      	ldrh	r1, [r7, #10]
 8001094:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f000 fc3f 	bl	8001920 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80010a2:	e05b      	b.n	800115c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	6a39      	ldr	r1, [r7, #32]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 faea 	bl	8001682 <I2C_WaitOnTXISFlagUntilTimeout>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e07b      	b.n	80011b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	1c5a      	adds	r2, r3, #1
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e0:	3b01      	subs	r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d034      	beq.n	800115c <HAL_I2C_Master_Transmit+0x184>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d130      	bne.n	800115c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	6a3b      	ldr	r3, [r7, #32]
 8001100:	2200      	movs	r2, #0
 8001102:	2180      	movs	r1, #128	; 0x80
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f000 fa7c 	bl	8001602 <I2C_WaitOnFlagUntilTimeout>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e04d      	b.n	80011b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001118:	b29b      	uxth	r3, r3
 800111a:	2bff      	cmp	r3, #255	; 0xff
 800111c:	d90e      	bls.n	800113c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001128:	b2da      	uxtb	r2, r3
 800112a:	8979      	ldrh	r1, [r7, #10]
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	f000 fbf3 	bl	8001920 <I2C_TransferConfig>
 800113a:	e00f      	b.n	800115c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001140:	b29a      	uxth	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800114a:	b2da      	uxtb	r2, r3
 800114c:	8979      	ldrh	r1, [r7, #10]
 800114e:	2300      	movs	r3, #0
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f000 fbe2 	bl	8001920 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001160:	b29b      	uxth	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d19e      	bne.n	80010a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	6a39      	ldr	r1, [r7, #32]
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 fac9 	bl	8001702 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e01a      	b.n	80011b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2220      	movs	r2, #32
 8001180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6859      	ldr	r1, [r3, #4]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_I2C_Master_Transmit+0x1e4>)
 800118e:	400b      	ands	r3, r1
 8001190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2220      	movs	r2, #32
 8001196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80011ae:	2302      	movs	r3, #2
  }
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	80002000 	.word	0x80002000
 80011bc:	fe00e800 	.word	0xfe00e800

080011c0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af02      	add	r7, sp, #8
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	817b      	strh	r3, [r7, #10]
 80011d0:	4613      	mov	r3, r2
 80011d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b20      	cmp	r3, #32
 80011de:	f040 80db 	bne.w	8001398 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_I2C_Master_Receive+0x30>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e0d4      	b.n	800139a <HAL_I2C_Master_Receive+0x1da>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011f8:	f7ff fb44 	bl	8000884 <HAL_GetTick>
 80011fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2319      	movs	r3, #25
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f000 f9f9 	bl	8001602 <I2C_WaitOnFlagUntilTimeout>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e0bf      	b.n	800139a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2222      	movs	r2, #34	; 0x22
 800121e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2210      	movs	r2, #16
 8001226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	893a      	ldrh	r2, [r7, #8]
 800123a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001246:	b29b      	uxth	r3, r3
 8001248:	2bff      	cmp	r3, #255	; 0xff
 800124a:	d90e      	bls.n	800126a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	22ff      	movs	r2, #255	; 0xff
 8001250:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001256:	b2da      	uxtb	r2, r3
 8001258:	8979      	ldrh	r1, [r7, #10]
 800125a:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <HAL_I2C_Master_Receive+0x1e4>)
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 fb5c 	bl	8001920 <I2C_TransferConfig>
 8001268:	e06d      	b.n	8001346 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126e:	b29a      	uxth	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001278:	b2da      	uxtb	r2, r3
 800127a:	8979      	ldrh	r1, [r7, #10]
 800127c:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <HAL_I2C_Master_Receive+0x1e4>)
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 fb4b 	bl	8001920 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800128a:	e05c      	b.n	8001346 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	6a39      	ldr	r1, [r7, #32]
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f000 fa73 	bl	800177c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e07c      	b.n	800139a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012bc:	3b01      	subs	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	3b01      	subs	r3, #1
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d034      	beq.n	8001346 <HAL_I2C_Master_Receive+0x186>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d130      	bne.n	8001346 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	2200      	movs	r2, #0
 80012ec:	2180      	movs	r1, #128	; 0x80
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 f987 	bl	8001602 <I2C_WaitOnFlagUntilTimeout>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e04d      	b.n	800139a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001302:	b29b      	uxth	r3, r3
 8001304:	2bff      	cmp	r3, #255	; 0xff
 8001306:	d90e      	bls.n	8001326 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	22ff      	movs	r2, #255	; 0xff
 800130c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001312:	b2da      	uxtb	r2, r3
 8001314:	8979      	ldrh	r1, [r7, #10]
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 fafe 	bl	8001920 <I2C_TransferConfig>
 8001324:	e00f      	b.n	8001346 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132a:	b29a      	uxth	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001334:	b2da      	uxtb	r2, r3
 8001336:	8979      	ldrh	r1, [r7, #10]
 8001338:	2300      	movs	r3, #0
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f000 faed 	bl	8001920 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134a:	b29b      	uxth	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d19d      	bne.n	800128c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	6a39      	ldr	r1, [r7, #32]
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f000 f9d4 	bl	8001702 <I2C_WaitOnSTOPFlagUntilTimeout>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e01a      	b.n	800139a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2220      	movs	r2, #32
 800136a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6859      	ldr	r1, [r3, #4]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_I2C_Master_Receive+0x1e8>)
 8001378:	400b      	ands	r3, r1
 800137a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2220      	movs	r2, #32
 8001380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e000      	b.n	800139a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001398:	2302      	movs	r3, #2
  }
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	80002400 	.word	0x80002400
 80013a8:	fe00e800 	.word	0xfe00e800

080013ac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	460b      	mov	r3, r1
 80013ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b20      	cmp	r3, #32
 80013ca:	f040 80f1 	bne.w	80015b0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013dc:	d101      	bne.n	80013e2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80013de:	2302      	movs	r3, #2
 80013e0:	e0e7      	b.n	80015b2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_I2C_IsDeviceReady+0x44>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e0e0      	b.n	80015b2 <HAL_I2C_IsDeviceReady+0x206>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2200      	movs	r2, #0
 8001404:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d107      	bne.n	800141e <HAL_I2C_IsDeviceReady+0x72>
 800140e:	897b      	ldrh	r3, [r7, #10]
 8001410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800141c:	e004      	b.n	8001428 <HAL_I2C_IsDeviceReady+0x7c>
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001424:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800142e:	f7ff fa29 	bl	8000884 <HAL_GetTick>
 8001432:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	2b20      	cmp	r3, #32
 8001440:	bf0c      	ite	eq
 8001442:	2301      	moveq	r3, #1
 8001444:	2300      	movne	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b10      	cmp	r3, #16
 8001456:	bf0c      	ite	eq
 8001458:	2301      	moveq	r3, #1
 800145a:	2300      	movne	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001460:	e034      	b.n	80014cc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001468:	d01a      	beq.n	80014a0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800146a:	f7ff fa0b 	bl	8000884 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d302      	bcc.n	8001480 <HAL_I2C_IsDeviceReady+0xd4>
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10f      	bne.n	80014a0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2220      	movs	r2, #32
 8001484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f043 0220 	orr.w	r2, r3, #32
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e088      	b.n	80015b2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	2b20      	cmp	r3, #32
 80014ac:	bf0c      	ite	eq
 80014ae:	2301      	moveq	r3, #1
 80014b0:	2300      	movne	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	f003 0310 	and.w	r3, r3, #16
 80014c0:	2b10      	cmp	r3, #16
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80014cc:	7ffb      	ldrb	r3, [r7, #31]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_I2C_IsDeviceReady+0x12c>
 80014d2:	7fbb      	ldrb	r3, [r7, #30]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0c4      	beq.n	8001462 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d01a      	beq.n	800151c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	2120      	movs	r1, #32
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f886 	bl	8001602 <I2C_WaitOnFlagUntilTimeout>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e058      	b.n	80015b2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2220      	movs	r2, #32
 8001506:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2220      	movs	r2, #32
 800150c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	e04a      	b.n	80015b2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	2200      	movs	r2, #0
 8001524:	2120      	movs	r1, #32
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 f86b 	bl	8001602 <I2C_WaitOnFlagUntilTimeout>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e03d      	b.n	80015b2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2210      	movs	r2, #16
 800153c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2220      	movs	r2, #32
 8001544:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	d118      	bne.n	8001580 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800155c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2200      	movs	r2, #0
 8001566:	2120      	movs	r1, #32
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f84a 	bl	8001602 <I2C_WaitOnFlagUntilTimeout>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e01c      	b.n	80015b2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2220      	movs	r2, #32
 800157e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	f63f af3b 	bhi.w	8001406 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2220      	movs	r2, #32
 8001594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f043 0220 	orr.w	r2, r3, #32
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80015b0:	2302      	movs	r3, #2
  }
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3720      	adds	r7, #32
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d103      	bne.n	80015d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d007      	beq.n	80015f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	619a      	str	r2, [r3, #24]
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	60f8      	str	r0, [r7, #12]
 800160a:	60b9      	str	r1, [r7, #8]
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4613      	mov	r3, r2
 8001610:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001612:	e022      	b.n	800165a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800161a:	d01e      	beq.n	800165a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800161c:	f7ff f932 	bl	8000884 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d302      	bcc.n	8001632 <I2C_WaitOnFlagUntilTimeout+0x30>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d113      	bne.n	800165a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f043 0220 	orr.w	r2, r3, #32
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2220      	movs	r2, #32
 8001642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	699a      	ldr	r2, [r3, #24]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4013      	ands	r3, r2
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	429a      	cmp	r2, r3
 8001668:	bf0c      	ite	eq
 800166a:	2301      	moveq	r3, #1
 800166c:	2300      	movne	r3, #0
 800166e:	b2db      	uxtb	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	429a      	cmp	r2, r3
 8001676:	d0cd      	beq.n	8001614 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800168e:	e02c      	b.n	80016ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	68b9      	ldr	r1, [r7, #8]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 f8dd 	bl	8001854 <I2C_IsAcknowledgeFailed>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e02a      	b.n	80016fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016aa:	d01e      	beq.n	80016ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ac:	f7ff f8ea 	bl	8000884 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d302      	bcc.n	80016c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d113      	bne.n	80016ea <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f043 0220 	orr.w	r2, r3, #32
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2220      	movs	r2, #32
 80016d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e007      	b.n	80016fa <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d1cb      	bne.n	8001690 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800170e:	e028      	b.n	8001762 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f89d 	bl	8001854 <I2C_IsAcknowledgeFailed>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e026      	b.n	8001772 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001724:	f7ff f8ae 	bl	8000884 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	429a      	cmp	r2, r3
 8001732:	d302      	bcc.n	800173a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d113      	bne.n	8001762 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f043 0220 	orr.w	r2, r3, #32
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e007      	b.n	8001772 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0320 	and.w	r3, r3, #32
 800176c:	2b20      	cmp	r3, #32
 800176e:	d1cf      	bne.n	8001710 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001788:	e055      	b.n	8001836 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f860 	bl	8001854 <I2C_IsAcknowledgeFailed>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e053      	b.n	8001846 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0320 	and.w	r3, r3, #32
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	d129      	bne.n	8001800 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	d105      	bne.n	80017c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e03f      	b.n	8001846 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2220      	movs	r2, #32
 80017cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80017da:	400b      	ands	r3, r1
 80017dc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2220      	movs	r2, #32
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e022      	b.n	8001846 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001800:	f7ff f840 	bl	8000884 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d302      	bcc.n	8001816 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10f      	bne.n	8001836 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f043 0220 	orr.w	r2, r3, #32
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2220      	movs	r2, #32
 8001826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e007      	b.n	8001846 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b04      	cmp	r3, #4
 8001842:	d1a2      	bne.n	800178a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	fe00e800 	.word	0xfe00e800

08001854 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b10      	cmp	r3, #16
 800186c:	d151      	bne.n	8001912 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800186e:	e022      	b.n	80018b6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001876:	d01e      	beq.n	80018b6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001878:	f7ff f804 	bl	8000884 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	429a      	cmp	r2, r3
 8001886:	d302      	bcc.n	800188e <I2C_IsAcknowledgeFailed+0x3a>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d113      	bne.n	80018b6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f043 0220 	orr.w	r2, r3, #32
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2220      	movs	r2, #32
 800189e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e02e      	b.n	8001914 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	2b20      	cmp	r3, #32
 80018c2:	d1d5      	bne.n	8001870 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2210      	movs	r2, #16
 80018ca:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2220      	movs	r2, #32
 80018d2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f7ff fe70 	bl	80015ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6859      	ldr	r1, [r3, #4]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <I2C_IsAcknowledgeFailed+0xc8>)
 80018e6:	400b      	ands	r3, r1
 80018e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f043 0204 	orr.w	r2, r3, #4
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	fe00e800 	.word	0xfe00e800

08001920 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	460b      	mov	r3, r1
 800192c:	817b      	strh	r3, [r7, #10]
 800192e:	4613      	mov	r3, r2
 8001930:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	0d5b      	lsrs	r3, r3, #21
 800193c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <I2C_TransferConfig+0x58>)
 8001942:	430b      	orrs	r3, r1
 8001944:	43db      	mvns	r3, r3
 8001946:	ea02 0103 	and.w	r1, r2, r3
 800194a:	897b      	ldrh	r3, [r7, #10]
 800194c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001950:	7a7b      	ldrb	r3, [r7, #9]
 8001952:	041b      	lsls	r3, r3, #16
 8001954:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	431a      	orrs	r2, r3
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	431a      	orrs	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	03ff63ff 	.word	0x03ff63ff

0800197c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b20      	cmp	r3, #32
 8001990:	d138      	bne.n	8001a04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800199c:	2302      	movs	r3, #2
 800199e:	e032      	b.n	8001a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6819      	ldr	r1, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b085      	sub	sp, #20
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b20      	cmp	r3, #32
 8001a26:	d139      	bne.n	8001a9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e033      	b.n	8001a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2224      	movs	r2, #36	; 0x24
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad6:	d130      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae4:	d038      	beq.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aee:	4a1e      	ldr	r2, [pc, #120]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2232      	movs	r2, #50	; 0x32
 8001afc:	fb02 f303 	mul.w	r3, r2, r3
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b02:	fba2 2303 	umull	r2, r3, r2, r3
 8001b06:	0c9b      	lsrs	r3, r3, #18
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0c:	e002      	b.n	8001b14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b20:	d102      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f2      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b34:	d110      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e00f      	b.n	8001b5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d007      	beq.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b50:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	431bde83 	.word	0x431bde83

08001b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e3d4      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b86:	4ba1      	ldr	r3, [pc, #644]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b90:	4b9e      	ldr	r3, [pc, #632]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80e4 	beq.w	8001d70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d007      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4a>
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	f040 808b 	bne.w	8001ccc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	f040 8087 	bne.w	8001ccc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bbe:	4b93      	ldr	r3, [pc, #588]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x62>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e3ac      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
 8001bda:	4b8c      	ldr	r3, [pc, #560]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x7c>
 8001be6:	4b89      	ldr	r3, [pc, #548]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bee:	e005      	b.n	8001bfc <HAL_RCC_OscConfig+0x88>
 8001bf0:	4b86      	ldr	r3, [pc, #536]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d223      	bcs.n	8001c48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fd07 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e38d      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c14:	4b7d      	ldr	r3, [pc, #500]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a7c      	ldr	r2, [pc, #496]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c1a:	f043 0308 	orr.w	r3, r3, #8
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b7a      	ldr	r3, [pc, #488]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4977      	ldr	r1, [pc, #476]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c32:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	4972      	ldr	r1, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
 8001c46:	e025      	b.n	8001c94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c48:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a6f      	ldr	r2, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c4e:	f043 0308 	orr.w	r3, r3, #8
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	496a      	ldr	r1, [pc, #424]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c66:	4b69      	ldr	r3, [pc, #420]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	4965      	ldr	r1, [pc, #404]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fcc7 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e34d      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c94:	f000 fc36 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 8001c98:	4601      	mov	r1, r0
 8001c9a:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 030f 	and.w	r3, r3, #15
 8001ca4:	4a5a      	ldr	r2, [pc, #360]	; (8001e10 <HAL_RCC_OscConfig+0x29c>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb0:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_RCC_OscConfig+0x2a0>)
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cb4:	4b58      	ldr	r3, [pc, #352]	; (8001e18 <HAL_RCC_OscConfig+0x2a4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fd97 	bl	80007ec <HAL_InitTick>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d052      	beq.n	8001d6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	e331      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d032      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd4:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ce0:	f7fe fdd0 	bl	8000884 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ce8:	f7fe fdcc 	bl	8000884 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e31a      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfa:	4b44      	ldr	r3, [pc, #272]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a40      	ldr	r2, [pc, #256]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	493b      	ldr	r1, [pc, #236]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d24:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	4936      	ldr	r1, [pc, #216]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e01a      	b.n	8001d70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a33      	ldr	r2, [pc, #204]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d46:	f7fe fd9d 	bl	8000884 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d4e:	f7fe fd99 	bl	8000884 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e2e7      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x1da>
 8001d6c:	e000      	b.n	8001d70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d074      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x21a>
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d10e      	bne.n	8001da6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d10b      	bne.n	8001da6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d064      	beq.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d160      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e2c4      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x24a>
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e01d      	b.n	8001dfa <HAL_RCC_OscConfig+0x286>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc6:	d10c      	bne.n	8001de2 <HAL_RCC_OscConfig+0x26e>
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e00b      	b.n	8001dfa <HAL_RCC_OscConfig+0x286>
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_RCC_OscConfig+0x298>)
 8001df4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e02:	f7fe fd3f 	bl	8000884 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e08:	e011      	b.n	8001e2e <HAL_RCC_OscConfig+0x2ba>
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	080030a8 	.word	0x080030a8
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7fe fd32 	bl	8000884 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e280      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e2e:	4baf      	ldr	r3, [pc, #700]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x2a8>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fd22 	bl	8000884 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7fe fd1e 	bl	8000884 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e26c      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e56:	4ba5      	ldr	r3, [pc, #660]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x2d0>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d060      	beq.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x310>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d119      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d116      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e84:	4b99      	ldr	r3, [pc, #612]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_OscConfig+0x328>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e249      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9c:	4b93      	ldr	r3, [pc, #588]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	061b      	lsls	r3, r3, #24
 8001eaa:	4990      	ldr	r1, [pc, #576]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb0:	e040      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d023      	beq.n	8001f02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eba:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a8b      	ldr	r2, [pc, #556]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7fe fcdd 	bl	8000884 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7fe fcd9 	bl	8000884 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e227      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	4b82      	ldr	r3, [pc, #520]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b7f      	ldr	r3, [pc, #508]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	061b      	lsls	r3, r3, #24
 8001efa:	497c      	ldr	r1, [pc, #496]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
 8001f00:	e018      	b.n	8001f34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b7a      	ldr	r3, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a79      	ldr	r2, [pc, #484]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7fe fcb9 	bl	8000884 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f16:	f7fe fcb5 	bl	8000884 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e203      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f28:	4b70      	ldr	r3, [pc, #448]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1f0      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d03c      	beq.n	8001fba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f48:	4b68      	ldr	r3, [pc, #416]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	4a67      	ldr	r2, [pc, #412]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7fe fc94 	bl	8000884 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7fe fc90 	bl	8000884 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1de      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f72:	4b5e      	ldr	r3, [pc, #376]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ef      	beq.n	8001f60 <HAL_RCC_OscConfig+0x3ec>
 8001f80:	e01b      	b.n	8001fba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f82:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f88:	4a58      	ldr	r2, [pc, #352]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f92:	f7fe fc77 	bl	8000884 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7fe fc73 	bl	8000884 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1c1      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ef      	bne.n	8001f9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80a6 	beq.w	8002114 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fcc:	4b47      	ldr	r3, [pc, #284]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10d      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b44      	ldr	r3, [pc, #272]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	4a43      	ldr	r2, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe4:	4b41      	ldr	r3, [pc, #260]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8001fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_RCC_OscConfig+0x57c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d118      	bne.n	8002032 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002000:	4b3b      	ldr	r3, [pc, #236]	; (80020f0 <HAL_RCC_OscConfig+0x57c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a3a      	ldr	r2, [pc, #232]	; (80020f0 <HAL_RCC_OscConfig+0x57c>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200c:	f7fe fc3a 	bl	8000884 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002014:	f7fe fc36 	bl	8000884 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e184      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002026:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <HAL_RCC_OscConfig+0x57c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x4d8>
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	4a2a      	ldr	r2, [pc, #168]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204a:	e024      	b.n	8002096 <HAL_RCC_OscConfig+0x522>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d110      	bne.n	8002076 <HAL_RCC_OscConfig+0x502>
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002064:	4b21      	ldr	r3, [pc, #132]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a20      	ldr	r2, [pc, #128]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002074:	e00f      	b.n	8002096 <HAL_RCC_OscConfig+0x522>
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 8002088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208c:	4a17      	ldr	r2, [pc, #92]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 800208e:	f023 0304 	bic.w	r3, r3, #4
 8002092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d016      	beq.n	80020cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7fe fbf1 	bl	8000884 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe fbed 	bl	8000884 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e139      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_OscConfig+0x578>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0ed      	beq.n	80020a6 <HAL_RCC_OscConfig+0x532>
 80020ca:	e01a      	b.n	8002102 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7fe fbda 	bl	8000884 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d2:	e00f      	b.n	80020f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7fe fbd6 	bl	8000884 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d906      	bls.n	80020f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e122      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f4:	4b90      	ldr	r3, [pc, #576]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1e8      	bne.n	80020d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002102:	7ffb      	ldrb	r3, [r7, #31]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d105      	bne.n	8002114 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002108:	4b8b      	ldr	r3, [pc, #556]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	4a8a      	ldr	r2, [pc, #552]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800210e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002112:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8108 	beq.w	800232e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	2b02      	cmp	r3, #2
 8002124:	f040 80d0 	bne.w	80022c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002128:	4b83      	ldr	r3, [pc, #524]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0203 	and.w	r2, r3, #3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	429a      	cmp	r2, r3
 800213a:	d130      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	3b01      	subs	r3, #1
 8002148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d127      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002158:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d11f      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002168:	2a07      	cmp	r2, #7
 800216a:	bf14      	ite	ne
 800216c:	2201      	movne	r2, #1
 800216e:	2200      	moveq	r2, #0
 8002170:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	4293      	cmp	r3, r2
 8002174:	d113      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002180:	085b      	lsrs	r3, r3, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d109      	bne.n	800219e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	085b      	lsrs	r3, r3, #1
 8002196:	3b01      	subs	r3, #1
 8002198:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d06e      	beq.n	800227c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	d069      	beq.n	8002278 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021a4:	4b64      	ldr	r3, [pc, #400]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021b0:	4b61      	ldr	r3, [pc, #388]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0b7      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021c0:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021cc:	f7fe fb5a 	bl	8000884 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fb56 	bl	8000884 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0a4      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f2:	4b51      	ldr	r3, [pc, #324]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_RCC_OscConfig+0x7c8>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002202:	3a01      	subs	r2, #1
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800220c:	0212      	lsls	r2, r2, #8
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002214:	0852      	lsrs	r2, r2, #1
 8002216:	3a01      	subs	r2, #1
 8002218:	0552      	lsls	r2, r2, #21
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002220:	0852      	lsrs	r2, r2, #1
 8002222:	3a01      	subs	r2, #1
 8002224:	0652      	lsls	r2, r2, #25
 8002226:	4311      	orrs	r1, r2
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800222c:	0912      	lsrs	r2, r2, #4
 800222e:	0452      	lsls	r2, r2, #17
 8002230:	430a      	orrs	r2, r1
 8002232:	4941      	ldr	r1, [pc, #260]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 8002234:	4313      	orrs	r3, r2
 8002236:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002238:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a3e      	ldr	r2, [pc, #248]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002244:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4a3b      	ldr	r2, [pc, #236]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800224a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002250:	f7fe fb18 	bl	8000884 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fb14 	bl	8000884 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e062      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002276:	e05a      	b.n	800232e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e059      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227c:	4b2e      	ldr	r3, [pc, #184]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d152      	bne.n	800232e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2a      	ldr	r2, [pc, #168]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002294:	4b28      	ldr	r3, [pc, #160]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022a0:	f7fe faf0 	bl	8000884 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe faec 	bl	8000884 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e03a      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0x734>
 80022c6:	e032      	b.n	800232e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d02d      	beq.n	800232a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80022d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d105      	bne.n	80022f2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80022ec:	f023 0303 	bic.w	r3, r3, #3
 80022f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 80022f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7fe fabf 	bl	8000884 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230a:	f7fe fabb 	bl	8000884 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e009      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_OscConfig+0x7c4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x796>
 8002328:	e001      	b.n	800232e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	f99d808c 	.word	0xf99d808c

08002340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0c8      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d910      	bls.n	8002384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	4961      	ldr	r1, [pc, #388]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b0      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d04c      	beq.n	800242a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002398:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d121      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e09e      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b0:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d115      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e092      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c8:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e086      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e07e      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e8:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 0203 	bic.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	493f      	ldr	r1, [pc, #252]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fa:	f7fe fa43 	bl	8000884 <HAL_GetTick>
 80023fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002400:	e00a      	b.n	8002418 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002402:	f7fe fa3f 	bl	8000884 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e066      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002418:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 020c 	and.w	r2, r3, #12
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	429a      	cmp	r2, r3
 8002428:	d1eb      	bne.n	8002402 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	492c      	ldr	r1, [pc, #176]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d210      	bcs.n	8002478 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 0207 	bic.w	r2, r3, #7
 800245e:	4924      	ldr	r1, [pc, #144]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e036      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4918      	ldr	r1, [pc, #96]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4910      	ldr	r1, [pc, #64]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b6:	f000 f825 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024ba:	4601      	mov	r1, r0
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	4a0c      	ldr	r2, [pc, #48]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	fa21 f303 	lsr.w	r3, r1, r3
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f986 	bl	80007ec <HAL_InitTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80024e4:	7afb      	ldrb	r3, [r7, #11]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	080030a8 	.word	0x080030a8
 80024fc:	20000000 	.word	0x20000000
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_GetSysClockFreq+0x104>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_RCC_GetSysClockFreq+0x104>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x34>
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d121      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d11e      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002538:	4b33      	ldr	r3, [pc, #204]	; (8002608 <HAL_RCC_GetSysClockFreq+0x104>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002544:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_RCC_GetSysClockFreq+0x104>)
 8002546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e005      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_RCC_GetSysClockFreq+0x104>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002560:	4a2a      	ldr	r2, [pc, #168]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002574:	e00a      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d102      	bne.n	8002582 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800257c:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_RCC_GetSysClockFreq+0x10c>)
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	e004      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d101      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_RCC_GetSysClockFreq+0x110>)
 800258a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d133      	bne.n	80025fa <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_GetSysClockFreq+0x104>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d002      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0xa4>
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	d003      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0xaa>
 80025a6:	e005      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025aa:	617b      	str	r3, [r7, #20]
      break;
 80025ac:	e005      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_GetSysClockFreq+0x110>)
 80025b0:	617b      	str	r3, [r7, #20]
      break;
 80025b2:	e002      	b.n	80025ba <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	617b      	str	r3, [r7, #20]
      break;
 80025b8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <HAL_RCC_GetSysClockFreq+0x104>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	3301      	adds	r3, #1
 80025c6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	fb02 f203 	mul.w	r2, r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e0:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_GetSysClockFreq+0x104>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0e5b      	lsrs	r3, r3, #25
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	3301      	adds	r3, #1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025fa:	69bb      	ldr	r3, [r7, #24]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3724      	adds	r7, #36	; 0x24
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40021000 	.word	0x40021000
 800260c:	080030b8 	.word	0x080030b8
 8002610:	00f42400 	.word	0x00f42400
 8002614:	007a1200 	.word	0x007a1200

08002618 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002624:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002630:	f7ff fa3c 	bl	8001aac <HAL_PWREx_GetVoltageRange>
 8002634:	6178      	str	r0, [r7, #20]
 8002636:	e014      	b.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	; 0x58
 8002644:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff fa2c 	bl	8001aac <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002668:	d10b      	bne.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d919      	bls.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2ba0      	cmp	r3, #160	; 0xa0
 8002674:	d902      	bls.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002676:	2302      	movs	r3, #2
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	e013      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e010      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d902      	bls.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002688:	2303      	movs	r3, #3
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e00a      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d102      	bne.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002694:	2302      	movs	r3, #2
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e004      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b70      	cmp	r3, #112	; 0x70
 800269e:	d101      	bne.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a0:	2301      	movs	r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 0207 	bic.w	r2, r3, #7
 80026ac:	4909      	ldr	r1, [pc, #36]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d001      	beq.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40022000 	.word	0x40022000

080026d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026e0:	2300      	movs	r3, #0
 80026e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026e4:	2300      	movs	r3, #0
 80026e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03f      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fc:	d01c      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80026fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002702:	d802      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002708:	e01f      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800270a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800270e:	d003      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002710:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002714:	d01c      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002716:	e018      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002718:	4b85      	ldr	r3, [pc, #532]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a84      	ldr	r2, [pc, #528]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002722:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002724:	e015      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fab9 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002736:	e00c      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3320      	adds	r3, #32
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fba0 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002748:	e003      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	74fb      	strb	r3, [r7, #19]
      break;
 800274e:	e000      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002758:	4b75      	ldr	r3, [pc, #468]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002766:	4972      	ldr	r1, [pc, #456]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800276e:	e001      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d03f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d01c      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800278a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800278e:	d802      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00e      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002794:	e01f      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800279a:	d003      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800279c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027a0:	d01c      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80027a2:	e018      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027a4:	4b62      	ldr	r3, [pc, #392]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a61      	ldr	r2, [pc, #388]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b0:	e015      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fa73 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027c2:	e00c      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3320      	adds	r3, #32
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fb5a 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d4:	e003      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	74fb      	strb	r3, [r7, #19]
      break;
 80027da:	e000      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80027dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027de:	7cfb      	ldrb	r3, [r7, #19]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027e4:	4b52      	ldr	r3, [pc, #328]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f2:	494f      	ldr	r1, [pc, #316]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027fa:	e001      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a0 	beq.w	800294e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00d      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002828:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4a40      	ldr	r2, [pc, #256]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
 8002834:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002840:	2301      	movs	r3, #1
 8002842:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002844:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3a      	ldr	r2, [pc, #232]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800284a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002850:	f7fe f818 	bl	8000884 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002856:	e009      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002858:	f7fe f814 	bl	8000884 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d902      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	74fb      	strb	r3, [r7, #19]
        break;
 800286a:	e005      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800286c:	4b31      	ldr	r3, [pc, #196]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ef      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d15c      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002888:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01f      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	d019      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800289c:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	4a20      	ldr	r2, [pc, #128]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fd ffd3 	bl	8000884 <HAL_GetTick>
 80028de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e0:	e00b      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fd ffcf 	bl	8000884 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d902      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	74fb      	strb	r3, [r7, #19]
            break;
 80028f8:	e006      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ec      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291e:	4904      	ldr	r1, [pc, #16]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002926:	e009      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
 800292c:	e006      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293c:	7c7b      	ldrb	r3, [r7, #17]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d105      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002942:	4b9e      	ldr	r3, [pc, #632]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	4a9d      	ldr	r2, [pc, #628]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295a:	4b98      	ldr	r3, [pc, #608]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f023 0203 	bic.w	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	4994      	ldr	r1, [pc, #592]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297c:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 020c 	bic.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	498c      	ldr	r1, [pc, #560]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800299e:	4b87      	ldr	r3, [pc, #540]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	4983      	ldr	r1, [pc, #524]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029c0:	4b7e      	ldr	r3, [pc, #504]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	497b      	ldr	r1, [pc, #492]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029e2:	4b76      	ldr	r3, [pc, #472]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f0:	4972      	ldr	r1, [pc, #456]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a04:	4b6d      	ldr	r3, [pc, #436]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	496a      	ldr	r1, [pc, #424]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	4961      	ldr	r1, [pc, #388]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a48:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	4959      	ldr	r1, [pc, #356]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a78:	4950      	ldr	r1, [pc, #320]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a8c:	4b4b      	ldr	r3, [pc, #300]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	4948      	ldr	r1, [pc, #288]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aae:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	493f      	ldr	r1, [pc, #252]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d028      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ad0:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ade:	4937      	ldr	r1, [pc, #220]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d106      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a31      	ldr	r2, [pc, #196]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
 8002afc:	e011      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b06:	d10c      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f8c8 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d028      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	491f      	ldr	r1, [pc, #124]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b4c:	d106      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b58:	60d3      	str	r3, [r2, #12]
 8002b5a:	e011      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f899 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02b      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	4908      	ldr	r1, [pc, #32]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a02      	ldr	r2, [pc, #8]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb6:	60d3      	str	r3, [r2, #12]
 8002bb8:	e014      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f867 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d02f      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfe:	4928      	ldr	r1, [pc, #160]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0e:	d10d      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	2102      	movs	r1, #2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f844 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d014      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c26:	7cfb      	ldrb	r3, [r7, #19]
 8002c28:	74bb      	strb	r3, [r7, #18]
 8002c2a:	e011      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3320      	adds	r3, #32
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f921 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6a:	490d      	ldr	r1, [pc, #52]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8e:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cb2:	4b73      	ldr	r3, [pc, #460]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d018      	beq.n	8002cf0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cbe:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0203 	and.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d10d      	bne.n	8002cea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d044      	beq.n	8002d74 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e041      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d00c      	beq.n	8002d12 <RCCEx_PLLSAI1_Config+0x6e>
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d013      	beq.n	8002d24 <RCCEx_PLLSAI1_Config+0x80>
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d120      	bne.n	8002d42 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d00:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11d      	bne.n	8002d48 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e01a      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d12:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d116      	bne.n	8002d4c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d22:	e013      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d24:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10f      	bne.n	8002d50 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d40:	e006      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
      break;
 8002d46:	e004      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d48:	bf00      	nop
 8002d4a:	e002      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d4c:	bf00      	nop
 8002d4e:	e000      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d50:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d58:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	4944      	ldr	r1, [pc, #272]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d17d      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d7a:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d86:	f7fd fd7d 	bl	8000884 <HAL_GetTick>
 8002d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8c:	e009      	b.n	8002da2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d8e:	f7fd fd79 	bl	8000884 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d902      	bls.n	8002da2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	73fb      	strb	r3, [r7, #15]
        break;
 8002da0:	e005      	b.n	8002dae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ef      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d160      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d111      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6892      	ldr	r2, [r2, #8]
 8002dca:	0211      	lsls	r1, r2, #8
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68d2      	ldr	r2, [r2, #12]
 8002dd0:	0912      	lsrs	r2, r2, #4
 8002dd2:	0452      	lsls	r2, r2, #17
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	492a      	ldr	r1, [pc, #168]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	610b      	str	r3, [r1, #16]
 8002ddc:	e027      	b.n	8002e2e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d112      	bne.n	8002e0a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de4:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	0211      	lsls	r1, r2, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6912      	ldr	r2, [r2, #16]
 8002dfa:	0852      	lsrs	r2, r2, #1
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	0552      	lsls	r2, r2, #21
 8002e00:	430a      	orrs	r2, r1
 8002e02:	491f      	ldr	r1, [pc, #124]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	610b      	str	r3, [r1, #16]
 8002e08:	e011      	b.n	8002e2e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6892      	ldr	r2, [r2, #8]
 8002e1a:	0211      	lsls	r1, r2, #8
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6952      	ldr	r2, [r2, #20]
 8002e20:	0852      	lsrs	r2, r2, #1
 8002e22:	3a01      	subs	r2, #1
 8002e24:	0652      	lsls	r2, r2, #25
 8002e26:	430a      	orrs	r2, r1
 8002e28:	4915      	ldr	r1, [pc, #84]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fd fd23 	bl	8000884 <HAL_GetTick>
 8002e3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e40:	e009      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e42:	f7fd fd1f 	bl	8000884 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d902      	bls.n	8002e56 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	73fb      	strb	r3, [r7, #15]
          break;
 8002e54:	e005      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ef      	beq.n	8002e42 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4903      	ldr	r1, [pc, #12]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000

08002e84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e92:	4b68      	ldr	r3, [pc, #416]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d018      	beq.n	8002ed0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e9e:	4b65      	ldr	r3, [pc, #404]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0203 	and.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d10d      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eb6:	4b5f      	ldr	r3, [pc, #380]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d044      	beq.n	8002f54 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e041      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d00c      	beq.n	8002ef2 <RCCEx_PLLSAI2_Config+0x6e>
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d013      	beq.n	8002f04 <RCCEx_PLLSAI2_Config+0x80>
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d120      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ee0:	4b54      	ldr	r3, [pc, #336]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d11d      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef0:	e01a      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ef2:	4b50      	ldr	r3, [pc, #320]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f02:	e013      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f04:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10f      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f10:	4b48      	ldr	r3, [pc, #288]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f20:	e006      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      break;
 8002f26:	e004      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f30:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10d      	bne.n	8002f54 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	4939      	ldr	r1, [pc, #228]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d167      	bne.n	800302a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f5a:	4b36      	ldr	r3, [pc, #216]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a35      	ldr	r2, [pc, #212]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f66:	f7fd fc8d 	bl	8000884 <HAL_GetTick>
 8002f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f6c:	e009      	b.n	8002f82 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f6e:	f7fd fc89 	bl	8000884 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d902      	bls.n	8002f82 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	73fb      	strb	r3, [r7, #15]
        break;
 8002f80:	e005      	b.n	8002f8e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f82:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ef      	bne.n	8002f6e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d14a      	bne.n	800302a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d111      	bne.n	8002fbe <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6892      	ldr	r2, [r2, #8]
 8002faa:	0211      	lsls	r1, r2, #8
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68d2      	ldr	r2, [r2, #12]
 8002fb0:	0912      	lsrs	r2, r2, #4
 8002fb2:	0452      	lsls	r2, r2, #17
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	491f      	ldr	r1, [pc, #124]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	614b      	str	r3, [r1, #20]
 8002fbc:	e011      	b.n	8002fe2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6892      	ldr	r2, [r2, #8]
 8002fce:	0211      	lsls	r1, r2, #8
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6912      	ldr	r2, [r2, #16]
 8002fd4:	0852      	lsrs	r2, r2, #1
 8002fd6:	3a01      	subs	r2, #1
 8002fd8:	0652      	lsls	r2, r2, #25
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	4915      	ldr	r1, [pc, #84]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a13      	ldr	r2, [pc, #76]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fd fc49 	bl	8000884 <HAL_GetTick>
 8002ff2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ff4:	e009      	b.n	800300a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ff6:	f7fd fc45 	bl	8000884 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d902      	bls.n	800300a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	73fb      	strb	r3, [r7, #15]
          break;
 8003008:	e005      	b.n	8003016 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ef      	beq.n	8002ff6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	4903      	ldr	r1, [pc, #12]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	4e0d      	ldr	r6, [pc, #52]	; (8003070 <__libc_init_array+0x38>)
 800303c:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <__libc_init_array+0x3c>)
 800303e:	1ba4      	subs	r4, r4, r6
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	2500      	movs	r5, #0
 8003044:	42a5      	cmp	r5, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	4e0b      	ldr	r6, [pc, #44]	; (8003078 <__libc_init_array+0x40>)
 800304a:	4c0c      	ldr	r4, [pc, #48]	; (800307c <__libc_init_array+0x44>)
 800304c:	f000 f820 	bl	8003090 <_init>
 8003050:	1ba4      	subs	r4, r4, r6
 8003052:	10a4      	asrs	r4, r4, #2
 8003054:	2500      	movs	r5, #0
 8003056:	42a5      	cmp	r5, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003060:	4798      	blx	r3
 8003062:	3501      	adds	r5, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800306a:	4798      	blx	r3
 800306c:	3501      	adds	r5, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	080030e8 	.word	0x080030e8
 8003074:	080030e8 	.word	0x080030e8
 8003078:	080030e8 	.word	0x080030e8
 800307c:	080030ec 	.word	0x080030ec

08003080 <memset>:
 8003080:	4402      	add	r2, r0
 8003082:	4603      	mov	r3, r0
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	f803 1b01 	strb.w	r1, [r3], #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
