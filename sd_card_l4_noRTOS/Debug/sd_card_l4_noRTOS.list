
sd_card_l4_noRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b9c  08007b9c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08007b9c  08007b9c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b9c  08007b9c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba0  08007ba0  00017ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007ba4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002228  20000080  08007c24  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200022a8  08007c24  000222a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014896  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e4c  00000000  00000000  00034946  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  00037798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  00038618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002805d  00000000  00000000  00039310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb0b  00000000  00000000  0006136d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea1b5  00000000  00000000  0006fe78  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015a02d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000379c  00000000  00000000  0015a0a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a6c 	.word	0x08007a6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08007a6c 	.word	0x08007a6c

080001c8 <BSP_SD_Init>:
/**
 * @brief  Initializes the SD card device.
 * @retval SD status
 */
  uint8_t BSP_SD_Init(void)
{
 80001c8:	b508      	push	{r3, lr}
	uint8_t sd_state = MSD_OK;
	/* Check if the SD card is plugged in the slot */
	if (BSP_SD_IsDetected() != SD_PRESENT)
 80001ca:	f004 fdb9 	bl	8004d40 <BSP_SD_IsDetected>
 80001ce:	2801      	cmp	r0, #1
 80001d0:	d001      	beq.n	80001d6 <BSP_SD_Init+0xe>
	{
		return MSD_ERROR_SD_NOT_PRESENT;
 80001d2:	2002      	movs	r0, #2
			sd_state = MSD_ERROR;
		}
	}

	return sd_state;
}
 80001d4:	bd08      	pop	{r3, pc}
	sd_state = HAL_SD_Init(&hsd1);
 80001d6:	4807      	ldr	r0, [pc, #28]	; (80001f4 <BSP_SD_Init+0x2c>)
 80001d8:	f002 fd2a 	bl	8002c30 <HAL_SD_Init>
	if (sd_state == MSD_OK)
 80001dc:	2800      	cmp	r0, #0
 80001de:	d1f9      	bne.n	80001d4 <BSP_SD_Init+0xc>
		if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80001e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e4:	4803      	ldr	r0, [pc, #12]	; (80001f4 <BSP_SD_Init+0x2c>)
 80001e6:	f003 fac5 	bl	8003774 <HAL_SD_ConfigWideBusOperation>
		return MSD_ERROR_SD_NOT_PRESENT;
 80001ea:	3000      	adds	r0, #0
 80001ec:	bf18      	it	ne
 80001ee:	2001      	movne	r0, #1
}
 80001f0:	bd08      	pop	{r3, pc}
 80001f2:	bf00      	nop
 80001f4:	2000016c 	.word	0x2000016c

080001f8 <BSP_SD_ReadBlocks_DMA>:
 * @param  ReadAddr: Address from where data is to be read
 * @param  NumOfBlocks: Number of SD blocks to read
 * @retval SD status
 */
  uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80001f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t sd_state = MSD_OK;

	/* Invalidate the dma tx handle*/
	hsd1.hdmatx = NULL;
 80001fa:	4c0b      	ldr	r4, [pc, #44]	; (8000228 <BSP_SD_ReadBlocks_DMA+0x30>)
{
 80001fc:	4605      	mov	r5, r0
	hsd1.hdmatx = NULL;
 80001fe:	2300      	movs	r3, #0

	/* Prepare the dma channel for a read operation */
	sd_state = SD_DMAConfigRx(&hsd1);
 8000200:	4620      	mov	r0, r4
{
 8000202:	460e      	mov	r6, r1
 8000204:	4617      	mov	r7, r2
	hsd1.hdmatx = NULL;
 8000206:	63e3      	str	r3, [r4, #60]	; 0x3c
	sd_state = SD_DMAConfigRx(&hsd1);
 8000208:	f000 f848 	bl	800029c <SD_DMAConfigRx>

	if(sd_state == HAL_OK)
 800020c:	b108      	cbz	r0, 8000212 <BSP_SD_ReadBlocks_DMA+0x1a>
	{
		return MSD_OK;
	}
	else
	{
		return MSD_ERROR;
 800020e:	2001      	movs	r0, #1
	}

}
 8000210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sd_state = HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks);
 8000212:	463b      	mov	r3, r7
 8000214:	4632      	mov	r2, r6
 8000216:	4629      	mov	r1, r5
 8000218:	4620      	mov	r0, r4
 800021a:	f002 fdc7 	bl	8002dac <HAL_SD_ReadBlocks_DMA>
		return MSD_OK;
 800021e:	3000      	adds	r0, #0
 8000220:	bf18      	it	ne
 8000222:	2001      	movne	r0, #1
}
 8000224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000226:	bf00      	nop
 8000228:	2000016c 	.word	0x2000016c

0800022c <BSP_SD_WriteBlocks_DMA>:
 * @param  WriteAddr: Address from where data is to be written
 * @param  NumOfBlocks: Number of SD blocks to write
 * @retval SD status
 */
  uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800022c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t sd_state = MSD_OK;

	/* Invalidate the dma rx handle*/
	hsd1.hdmarx = NULL;
 800022e:	4c0b      	ldr	r4, [pc, #44]	; (800025c <BSP_SD_WriteBlocks_DMA+0x30>)
{
 8000230:	4605      	mov	r5, r0
	hsd1.hdmarx = NULL;
 8000232:	2300      	movs	r3, #0

	/* Prepare the dma channel for a read operation */
	sd_state = SD_DMAConfigTx(&hsd1);
 8000234:	4620      	mov	r0, r4
{
 8000236:	460e      	mov	r6, r1
 8000238:	4617      	mov	r7, r2
	hsd1.hdmarx = NULL;
 800023a:	6423      	str	r3, [r4, #64]	; 0x40
	sd_state = SD_DMAConfigTx(&hsd1);
 800023c:	f000 f85c 	bl	80002f8 <SD_DMAConfigTx>

	if(sd_state == HAL_OK)
 8000240:	b108      	cbz	r0, 8000246 <BSP_SD_WriteBlocks_DMA+0x1a>
	{
		return MSD_OK;
	}
	else
	{
		return MSD_ERROR;
 8000242:	2001      	movs	r0, #1
	}
}
 8000244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sd_state = HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks);
 8000246:	463b      	mov	r3, r7
 8000248:	4632      	mov	r2, r6
 800024a:	4629      	mov	r1, r5
 800024c:	4620      	mov	r0, r4
 800024e:	f002 fe75 	bl	8002f3c <HAL_SD_WriteBlocks_DMA>
		return MSD_OK;
 8000252:	3000      	adds	r0, #0
 8000254:	bf18      	it	ne
 8000256:	2001      	movne	r0, #1
}
 8000258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800025a:	bf00      	nop
 800025c:	2000016c 	.word	0x2000016c

08000260 <BSP_SD_DMA_Tx_IRQHandler>:
  * @brief  Handles SD DMA Tx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Tx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hsd1.hdmatx);
 8000260:	4b01      	ldr	r3, [pc, #4]	; (8000268 <BSP_SD_DMA_Tx_IRQHandler+0x8>)
 8000262:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000264:	f000 bf67 	b.w	8001136 <HAL_DMA_IRQHandler>
 8000268:	2000016c 	.word	0x2000016c

0800026c <BSP_SD_DMA_Rx_IRQHandler>:
  * @brief  Handles SD DMA Rx transfer interrupt request.
  * @retval None
  */
void BSP_SD_DMA_Rx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hsd1.hdmarx);
 800026c:	4b01      	ldr	r3, [pc, #4]	; (8000274 <BSP_SD_DMA_Rx_IRQHandler+0x8>)
 800026e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8000270:	f000 bf61 	b.w	8001136 <HAL_DMA_IRQHandler>
 8000274:	2000016c 	.word	0x2000016c

08000278 <BSP_SD_GetCardState>:
 *          This value can be one of the following values:
 *            @arg  SD_TRANSFER_OK: No data transfer is acting
 *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 */
  uint8_t BSP_SD_GetCardState(void)
{
 8000278:	b508      	push	{r3, lr}
	return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800027a:	4803      	ldr	r0, [pc, #12]	; (8000288 <BSP_SD_GetCardState+0x10>)
 800027c:	f003 fb10 	bl	80038a0 <HAL_SD_GetCardState>
}
 8000280:	3804      	subs	r0, #4
 8000282:	bf18      	it	ne
 8000284:	2001      	movne	r0, #1
 8000286:	bd08      	pop	{r3, pc}
 8000288:	2000016c 	.word	0x2000016c

0800028c <BSP_SD_GetCardInfo>:
 * @retval None
 */
  void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
	/* Get SD card Information */
	HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800028c:	4601      	mov	r1, r0
 800028e:	4801      	ldr	r0, [pc, #4]	; (8000294 <BSP_SD_GetCardInfo+0x8>)
 8000290:	f003 ba44 	b.w	800371c <HAL_SD_GetCardInfo>
 8000294:	2000016c 	.word	0x2000016c

08000298 <BSP_SD_AbortCallback>:
 * @note empty (up to the user to fill it in or to remove it if useless)
 */
  void BSP_SD_AbortCallback(void)
{

}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop

0800029c <SD_DMAConfigRx>:
  * @brief Configure the DMA to receive data from the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigRx(SD_HandleTypeDef *hsd)
{
 800029c:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef hdma_rx;
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Configure DMA Rx parameters */
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 800029e:	4c14      	ldr	r4, [pc, #80]	; (80002f0 <SD_DMAConfigRx+0x54>)
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_rx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80002a0:	6404      	str	r4, [r0, #64]	; 0x40
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80002a2:	2307      	movs	r3, #7
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002a4:	f44f 7500 	mov.w	r5, #512	; 0x200
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80002a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80002ac:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  __HAL_LINKDMA(hsd, hdmarx, hdma_rx);
 80002b0:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_rx.Init.Request             = DMA_REQUEST_7;
 80002b2:	6063      	str	r3, [r4, #4]
  hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80002b4:	6165      	str	r5, [r4, #20]
  hdma_rx.Instance = DMA2_Channel4;
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <SD_DMAConfigRx+0x58>)
 80002b8:	6023      	str	r3, [r4, #0]
  hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80002ba:	2500      	movs	r5, #0
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80002bc:	2680      	movs	r6, #128	; 0x80

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_rx);
 80002be:	4620      	mov	r0, r4
  hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80002c0:	61a1      	str	r1, [r4, #24]
  hdma_rx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80002c2:	6222      	str	r2, [r4, #32]
  hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 80002c4:	6126      	str	r6, [r4, #16]
  hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80002c6:	e9c4 5502 	strd	r5, r5, [r4, #8]
  HAL_DMA_Abort(&hdma_rx);
 80002ca:	f000 feb5 	bl	8001038 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_rx);
 80002ce:	4620      	mov	r0, r4
 80002d0:	f000 fdc0 	bl	8000e54 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_rx);
 80002d4:	4620      	mov	r0, r4
 80002d6:	f000 fd05 	bl	8000ce4 <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 80002da:	462a      	mov	r2, r5
  status = HAL_DMA_Init(&hdma_rx);
 80002dc:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 80002de:	2106      	movs	r1, #6
 80002e0:	203b      	movs	r0, #59	; 0x3b
 80002e2:	f000 fcc8 	bl	8000c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80002e6:	203b      	movs	r0, #59	; 0x3b
 80002e8:	f000 fce1 	bl	8000cae <HAL_NVIC_EnableIRQ>

  return (status);
}
 80002ec:	4620      	mov	r0, r4
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	2000009c 	.word	0x2000009c
 80002f4:	40020444 	.word	0x40020444

080002f8 <SD_DMAConfigTx>:
  * @brief Configure the DMA to transmit data to the SD card
  * @retval
  *  HAL_ERROR or HAL_OK
  */
static HAL_StatusTypeDef SD_DMAConfigTx(SD_HandleTypeDef *hsd)
{
 80002f8:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef hdma_tx;
  HAL_StatusTypeDef status;

  /* Configure DMA Tx parameters */
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80002fa:	4c15      	ldr	r4, [pc, #84]	; (8000350 <SD_DMAConfigTx+0x58>)
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;

  hdma_tx.Instance = DMA2_Channel4;

  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 80002fc:	63c4      	str	r4, [r0, #60]	; 0x3c
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 80002fe:	2207      	movs	r2, #7
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000300:	2310      	movs	r3, #16
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000302:	f44f 7500 	mov.w	r5, #512	; 0x200
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000306:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_LINKDMA(hsd, hdmatx, hdma_tx);
 800030a:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma_tx.Init.Request             = DMA_REQUEST_7;
 800030c:	6062      	str	r2, [r4, #4]
  hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800030e:	60a3      	str	r3, [r4, #8]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8000310:	f44f 5240 	mov.w	r2, #12288	; 0x3000
  hdma_tx.Instance = DMA2_Channel4;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <SD_DMAConfigTx+0x5c>)
  hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000316:	6165      	str	r5, [r4, #20]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000318:	2680      	movs	r6, #128	; 0x80
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800031a:	2500      	movs	r5, #0

  /* Stop any ongoing transfer and reset the state*/
  HAL_DMA_Abort(&hdma_tx);
 800031c:	4620      	mov	r0, r4
  hdma_tx.Instance = DMA2_Channel4;
 800031e:	6023      	str	r3, [r4, #0]
  hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000320:	61a1      	str	r1, [r4, #24]
  hdma_tx.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8000322:	6222      	str	r2, [r4, #32]
  hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000324:	6126      	str	r6, [r4, #16]
  hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000326:	60e5      	str	r5, [r4, #12]
  HAL_DMA_Abort(&hdma_tx);
 8000328:	f000 fe86 	bl	8001038 <HAL_DMA_Abort>

  /* Deinitialize the Channel for new transfer */
  HAL_DMA_DeInit(&hdma_tx);
 800032c:	4620      	mov	r0, r4
 800032e:	f000 fd91 	bl	8000e54 <HAL_DMA_DeInit>

  /* Configure the DMA Channel */
  status = HAL_DMA_Init(&hdma_tx);
 8000332:	4620      	mov	r0, r4
 8000334:	f000 fcd6 	bl	8000ce4 <HAL_DMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 8000338:	462a      	mov	r2, r5
  status = HAL_DMA_Init(&hdma_tx);
 800033a:	4604      	mov	r4, r0
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 6, 0);
 800033c:	2106      	movs	r1, #6
 800033e:	203b      	movs	r0, #59	; 0x3b
 8000340:	f000 fc99 	bl	8000c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000344:	203b      	movs	r0, #59	; 0x3b
 8000346:	f000 fcb2 	bl	8000cae <HAL_NVIC_EnableIRQ>

  return (status);
}
 800034a:	4620      	mov	r0, r4
 800034c:	bd70      	pop	{r4, r5, r6, pc}
 800034e:	bf00      	nop
 8000350:	200000e4 	.word	0x200000e4
 8000354:	40020444 	.word	0x40020444

08000358 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800035e:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <MX_DMA_Init+0x38>)
 8000360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000362:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <MX_DMA_Init+0x38>)
 8000364:	f043 0302 	orr.w	r3, r3, #2
 8000368:	6493      	str	r3, [r2, #72]	; 0x48
 800036a:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_DMA_Init+0x38>)
 800036c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800036e:	f003 0302 	and.w	r3, r3, #2
 8000372:	607b      	str	r3, [r7, #4]
 8000374:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	2100      	movs	r1, #0
 800037a:	203b      	movs	r0, #59	; 0x3b
 800037c:	f000 fc7b 	bl	8000c76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000380:	203b      	movs	r0, #59	; 0x3b
 8000382:	f000 fc94 	bl	8000cae <HAL_NVIC_EnableIRQ>

}
 8000386:	bf00      	nop
 8000388:	3708      	adds	r7, #8
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000

08000394 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 030c 	add.w	r3, r7, #12
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
 80003a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <MX_GPIO_Init+0x94>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ae:	4a1e      	ldr	r2, [pc, #120]	; (8000428 <MX_GPIO_Init+0x94>)
 80003b0:	f043 0308 	orr.w	r3, r3, #8
 80003b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <MX_GPIO_Init+0x94>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ba:	f003 0308 	and.w	r3, r3, #8
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c2:	4b19      	ldr	r3, [pc, #100]	; (8000428 <MX_GPIO_Init+0x94>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003c6:	4a18      	ldr	r2, [pc, #96]	; (8000428 <MX_GPIO_Init+0x94>)
 80003c8:	f043 0304 	orr.w	r3, r3, #4
 80003cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ce:	4b16      	ldr	r3, [pc, #88]	; (8000428 <MX_GPIO_Init+0x94>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d2:	f003 0304 	and.w	r3, r3, #4
 80003d6:	607b      	str	r3, [r7, #4]
 80003d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80003e0:	4812      	ldr	r0, [pc, #72]	; (800042c <MX_GPIO_Init+0x98>)
 80003e2:	f001 f947 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80003e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003f0:	2302      	movs	r3, #2
 80003f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	4619      	mov	r1, r3
 80003fa:	480c      	ldr	r0, [pc, #48]	; (800042c <MX_GPIO_Init+0x98>)
 80003fc:	f000 ff7a 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000400:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	4619      	mov	r1, r3
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_GPIO_Init+0x98>)
 800041a:	f000 ff6b 	bl	80012f4 <HAL_GPIO_Init>

}
 800041e:	bf00      	nop
 8000420:	3720      	adds	r7, #32
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	48000c00 	.word	0x48000c00

08000430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000436:	f000 fab0 	bl	800099a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043a:	f000 f873 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043e:	f7ff ffa9 	bl	8000394 <MX_GPIO_Init>
  MX_DMA_Init();
 8000442:	f7ff ff89 	bl	8000358 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000446:	f000 f8fd 	bl	8000644 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800044a:	f004 fc41 	bl	8004cd0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  f_mount(&SDFatFS, SDPath, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	492b      	ldr	r1, [pc, #172]	; (8000500 <main+0xd0>)
 8000452:	482c      	ldr	r0, [pc, #176]	; (8000504 <main+0xd4>)
 8000454:	f006 fc10 	bl	8006c78 <f_mount>

  for (int i =0 ; i <3; i++)
 8000458:	2300      	movs	r3, #0
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	e04c      	b.n	80004f8 <main+0xc8>
  {

	  	  	  if (i == 0)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d10f      	bne.n	8000484 <main+0x54>
	  	  	  {
	  	  		f_open(&SDFile, (const TCHAR*)filename , FA_CREATE_ALWAYS | FA_WRITE) ;
 8000464:	220a      	movs	r2, #10
 8000466:	4928      	ldr	r1, [pc, #160]	; (8000508 <main+0xd8>)
 8000468:	4828      	ldr	r0, [pc, #160]	; (800050c <main+0xdc>)
 800046a:	f006 fc4b 	bl	8006d04 <f_open>
	  	  		  f_write(&SDFile, wrtext1, sizeof(wrtext1), (void *)byteswrite);
 800046e:	4b28      	ldr	r3, [pc, #160]	; (8000510 <main+0xe0>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2211      	movs	r2, #17
 8000474:	4927      	ldr	r1, [pc, #156]	; (8000514 <main+0xe4>)
 8000476:	4825      	ldr	r0, [pc, #148]	; (800050c <main+0xdc>)
 8000478:	f006 fe10 	bl	800709c <f_write>
	  	  		  f_close(&SDFile);
 800047c:	4823      	ldr	r0, [pc, #140]	; (800050c <main+0xdc>)
 800047e:	f007 f81f 	bl	80074c0 <f_close>
 8000482:	e030      	b.n	80004e6 <main+0xb6>

	  	  	  }
	  	  	  else if (i == 1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d115      	bne.n	80004b6 <main+0x86>
	  	  	  {
	  	  		  f_open(&SDFile, (const TCHAR*)filename , FA_OPEN_APPEND | FA_WRITE) ;
 800048a:	2232      	movs	r2, #50	; 0x32
 800048c:	491e      	ldr	r1, [pc, #120]	; (8000508 <main+0xd8>)
 800048e:	481f      	ldr	r0, [pc, #124]	; (800050c <main+0xdc>)
 8000490:	f006 fc38 	bl	8006d04 <f_open>
	  	  		  f_lseek(&SDFile, f_size(&SDFile));
 8000494:	4b1d      	ldr	r3, [pc, #116]	; (800050c <main+0xdc>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	4619      	mov	r1, r3
 800049a:	481c      	ldr	r0, [pc, #112]	; (800050c <main+0xdc>)
 800049c:	f007 f83a 	bl	8007514 <f_lseek>
	  	  		  f_write(&SDFile, wrtext2, sizeof(wrtext2), (void *)byteswrite);
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <main+0xe0>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2226      	movs	r2, #38	; 0x26
 80004a6:	491c      	ldr	r1, [pc, #112]	; (8000518 <main+0xe8>)
 80004a8:	4818      	ldr	r0, [pc, #96]	; (800050c <main+0xdc>)
 80004aa:	f006 fdf7 	bl	800709c <f_write>
	  	  		f_close(&SDFile);
 80004ae:	4817      	ldr	r0, [pc, #92]	; (800050c <main+0xdc>)
 80004b0:	f007 f806 	bl	80074c0 <f_close>
 80004b4:	e017      	b.n	80004e6 <main+0xb6>
	  	  	  }
	  	  	else if (i == 2)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d114      	bne.n	80004e6 <main+0xb6>
	  	  		  	  	  {
	  	  					 f_open(&SDFile, (const TCHAR*)filename , FA_OPEN_APPEND | FA_WRITE) ;
 80004bc:	2232      	movs	r2, #50	; 0x32
 80004be:	4912      	ldr	r1, [pc, #72]	; (8000508 <main+0xd8>)
 80004c0:	4812      	ldr	r0, [pc, #72]	; (800050c <main+0xdc>)
 80004c2:	f006 fc1f 	bl	8006d04 <f_open>
	  	  		  	  		  f_lseek(&SDFile, f_size(&SDFile));
 80004c6:	4b11      	ldr	r3, [pc, #68]	; (800050c <main+0xdc>)
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	4619      	mov	r1, r3
 80004cc:	480f      	ldr	r0, [pc, #60]	; (800050c <main+0xdc>)
 80004ce:	f007 f821 	bl	8007514 <f_lseek>
	  	  		  	  		  f_write(&SDFile, wrtext3, sizeof(wrtext3), (void *)byteswrite);
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <main+0xe0>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2225      	movs	r2, #37	; 0x25
 80004d8:	4910      	ldr	r1, [pc, #64]	; (800051c <main+0xec>)
 80004da:	480c      	ldr	r0, [pc, #48]	; (800050c <main+0xdc>)
 80004dc:	f006 fdde 	bl	800709c <f_write>
	  	  		  	  	f_close(&SDFile);
 80004e0:	480a      	ldr	r0, [pc, #40]	; (800050c <main+0xdc>)
 80004e2:	f006 ffed 	bl	80074c0 <f_close>
	  	  		  	  	  }
	  	  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <main+0xf0>)
 80004ee:	f001 f8c1 	bl	8001674 <HAL_GPIO_WritePin>
  for (int i =0 ; i <3; i++)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b02      	cmp	r3, #2
 80004fc:	ddaf      	ble.n	800045e <main+0x2e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <main+0xce>
 8000500:	20000240 	.word	0x20000240
 8000504:	20001274 	.word	0x20001274
 8000508:	20000000 	.word	0x20000000
 800050c:	20000244 	.word	0x20000244
 8000510:	20000168 	.word	0x20000168
 8000514:	2000000c 	.word	0x2000000c
 8000518:	20000020 	.word	0x20000020
 800051c:	20000048 	.word	0x20000048
 8000520:	48000c00 	.word	0x48000c00

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b0b8      	sub	sp, #224	; 0xe0
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800052e:	2244      	movs	r2, #68	; 0x44
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f007 fa92 	bl	8007a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000548:	463b      	mov	r3, r7
 800054a:	2288      	movs	r2, #136	; 0x88
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f007 fa84 	bl	8007a5c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000554:	2310      	movs	r3, #16
 8000556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000566:	2360      	movs	r3, #96	; 0x60
 8000568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000572:	2301      	movs	r3, #1
 8000574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800057e:	2328      	movs	r3, #40	; 0x28
 8000580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000584:	2307      	movs	r3, #7
 8000586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f8e6 	bl	800176c <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005a6:	f000 f845 	bl	8000634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2303      	movs	r3, #3
 80005b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005cc:	2104      	movs	r1, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fcb2 	bl	8001f38 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005da:	f000 f82b 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80005de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80005e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005e8:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005ea:	2301      	movs	r3, #1
 80005ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80005f2:	2310      	movs	r3, #16
 80005f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005f6:	2307      	movs	r3, #7
 80005f8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000602:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000606:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000608:	463b      	mov	r3, r7
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fe60 	bl	80022d0 <HAL_RCCEx_PeriphCLKConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000616:	f000 f80d 	bl	8000634 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061e:	f001 f84f 	bl	80016c0 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000628:	f000 f804 	bl	8000634 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	37e0      	adds	r7, #224	; 0xe0
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_SDMMC1_SD_Init+0x3c>)
 800064a:	4a0e      	ldr	r2, [pc, #56]	; (8000684 <MX_SDMMC1_SD_Init+0x40>)
 800064c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_SDMMC1_SD_Init+0x3c>)
 8000650:	2200      	movs	r2, #0
 8000652:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_SDMMC1_SD_Init+0x3c>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_SDMMC1_SD_Init+0x3c>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_SDMMC1_SD_Init+0x3c>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_SDMMC1_SD_Init+0x3c>)
 8000668:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066c:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 6;
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <MX_SDMMC1_SD_Init+0x3c>)
 8000670:	2206      	movs	r2, #6
 8000672:	619a      	str	r2, [r3, #24]

}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	2000016c 	.word	0x2000016c
 8000684:	40012800 	.word	0x40012800

08000688 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a4b      	ldr	r2, [pc, #300]	; (80007d4 <HAL_SD_MspInit+0x14c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	f040 8090 	bne.w	80007cc <HAL_SD_MspInit+0x144>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80006ac:	4b4a      	ldr	r3, [pc, #296]	; (80007d8 <HAL_SD_MspInit+0x150>)
 80006ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006b0:	4a49      	ldr	r2, [pc, #292]	; (80007d8 <HAL_SD_MspInit+0x150>)
 80006b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006b6:	6613      	str	r3, [r2, #96]	; 0x60
 80006b8:	4b47      	ldr	r3, [pc, #284]	; (80007d8 <HAL_SD_MspInit+0x150>)
 80006ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006c0:	613b      	str	r3, [r7, #16]
 80006c2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c4:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <HAL_SD_MspInit+0x150>)
 80006c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c8:	4a43      	ldr	r2, [pc, #268]	; (80007d8 <HAL_SD_MspInit+0x150>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d0:	4b41      	ldr	r3, [pc, #260]	; (80007d8 <HAL_SD_MspInit+0x150>)
 80006d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006dc:	4b3e      	ldr	r3, [pc, #248]	; (80007d8 <HAL_SD_MspInit+0x150>)
 80006de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e0:	4a3d      	ldr	r2, [pc, #244]	; (80007d8 <HAL_SD_MspInit+0x150>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e8:	4b3b      	ldr	r3, [pc, #236]	; (80007d8 <HAL_SD_MspInit+0x150>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80006f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fa:	2302      	movs	r3, #2
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fe:	2301      	movs	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000706:	230c      	movs	r3, #12
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	4832      	ldr	r0, [pc, #200]	; (80007dc <HAL_SD_MspInit+0x154>)
 8000712:	f000 fdef 	bl	80012f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000728:	230c      	movs	r3, #12
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	482a      	ldr	r0, [pc, #168]	; (80007dc <HAL_SD_MspInit+0x154>)
 8000734:	f000 fdde 	bl	80012f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000738:	2304      	movs	r3, #4
 800073a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073c:	2302      	movs	r3, #2
 800073e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000740:	2301      	movs	r3, #1
 8000742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000748:	230c      	movs	r3, #12
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	4619      	mov	r1, r3
 8000752:	4823      	ldr	r0, [pc, #140]	; (80007e0 <HAL_SD_MspInit+0x158>)
 8000754:	f000 fdce 	bl	80012f4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1 Init */
    hdma_sdmmc1.Instance = DMA2_Channel4;
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 800075a:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <HAL_SD_MspInit+0x160>)
 800075c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1.Init.Request = DMA_REQUEST_7;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 8000760:	2207      	movs	r2, #7
 8000762:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1.Init.MemInc = DMA_MINC_ENABLE;
 8000770:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 8000772:	2280      	movs	r2, #128	; 0x80
 8000774:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000776:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 8000780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000784:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1.Init.Mode = DMA_NORMAL;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 800078e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000792:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1) != HAL_OK)
 8000794:	4813      	ldr	r0, [pc, #76]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 8000796:	f000 faa5 	bl	8000ce4 <HAL_DMA_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <HAL_SD_MspInit+0x11c>
    {
      Error_Handler();
 80007a0:	f7ff ff48 	bl	8000634 <Error_Handler>

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    /* Be sure to change transfer direction before calling
     HAL_SD_ReadBlocks_DMA or HAL_SD_WriteBlocks_DMA. */
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 80007a8:	641a      	str	r2, [r3, #64]	; 0x40
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 80007b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <HAL_SD_MspInit+0x15c>)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2100      	movs	r1, #0
 80007c0:	2031      	movs	r0, #49	; 0x31
 80007c2:	f000 fa58 	bl	8000c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80007c6:	2031      	movs	r0, #49	; 0x31
 80007c8:	f000 fa71 	bl	8000cae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40012800 	.word	0x40012800
 80007d8:	40021000 	.word	0x40021000
 80007dc:	48000800 	.word	0x48000800
 80007e0:	48000c00 	.word	0x48000c00
 80007e4:	200001f0 	.word	0x200001f0
 80007e8:	40020444 	.word	0x40020444

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	; 0x58
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000888:	f000 f8da 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <SDMMC1_IRQHandler+0x10>)
 8000896:	f002 fc1d 	bl	80030d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000016c 	.word	0x2000016c

080008a4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */
	  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <DMA2_Channel4_IRQHandler+0x34>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	2b81      	cmp	r3, #129	; 0x81
 80008ae:	d003      	beq.n	80008b8 <DMA2_Channel4_IRQHandler+0x14>
	      (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_MULTIPLE_BLOCK)))
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <DMA2_Channel4_IRQHandler+0x34>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	  if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_READ_SINGLE_BLOCK)) ||
 80008b4:	2b82      	cmp	r3, #130	; 0x82
 80008b6:	d102      	bne.n	80008be <DMA2_Channel4_IRQHandler+0x1a>
	  {
	    BSP_SD_DMA_Rx_IRQHandler();
 80008b8:	f7ff fcd8 	bl	800026c <BSP_SD_DMA_Rx_IRQHandler>
	  {
 80008bc:	e009      	b.n	80008d2 <DMA2_Channel4_IRQHandler+0x2e>
	  }
	  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <DMA2_Channel4_IRQHandler+0x34>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	2b90      	cmp	r3, #144	; 0x90
 80008c4:	d003      	beq.n	80008ce <DMA2_Channel4_IRQHandler+0x2a>
	      (hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_MULTIPLE_BLOCK)))
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <DMA2_Channel4_IRQHandler+0x34>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	  else if((hsd1.Context == (SD_CONTEXT_DMA | SD_CONTEXT_WRITE_SINGLE_BLOCK)) ||
 80008ca:	2ba0      	cmp	r3, #160	; 0xa0
 80008cc:	d102      	bne.n	80008d4 <DMA2_Channel4_IRQHandler+0x30>
	  {
	    BSP_SD_DMA_Tx_IRQHandler();
 80008ce:	f7ff fcc7 	bl	8000260 <BSP_SD_DMA_Tx_IRQHandler>
	  }
	  return;
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1);
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2000016c 	.word	0x2000016c

080008dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <SystemInit+0x64>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <SystemInit+0x64>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <SystemInit+0x68>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <SystemInit+0x68>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <SystemInit+0x68>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <SystemInit+0x68>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <SystemInit+0x68>)
 8000908:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800090c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000910:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <SystemInit+0x68>)
 8000914:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000918:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <SystemInit+0x68>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a09      	ldr	r2, [pc, #36]	; (8000944 <SystemInit+0x68>)
 8000920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000924:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <SystemInit+0x68>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SystemInit+0x64>)
 800092e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000932:	609a      	str	r2, [r3, #8]
#endif
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00
 8000944:	40021000 	.word	0x40021000

08000948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000980 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800094c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800094e:	e003      	b.n	8000958 <LoopCopyDataInit>

08000950 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000952:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000954:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000956:	3104      	adds	r1, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000958:	480b      	ldr	r0, [pc, #44]	; (8000988 <LoopForever+0xa>)
	ldr	r3, =_edata
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <LoopForever+0xe>)
	adds	r2, r0, r1
 800095c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800095e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000960:	d3f6      	bcc.n	8000950 <CopyDataInit>
	ldr	r2, =_sbss
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000964:	e002      	b.n	800096c <LoopFillZerobss>

08000966 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000966:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000968:	f842 3b04 	str.w	r3, [r2], #4

0800096c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <LoopForever+0x16>)
	cmp	r2, r3
 800096e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000970:	d3f9      	bcc.n	8000966 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000972:	f7ff ffb3 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000976:	f007 f84d 	bl	8007a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800097a:	f7ff fd59 	bl	8000430 <main>

0800097e <LoopForever>:

LoopForever:
    b LoopForever
 800097e:	e7fe      	b.n	800097e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000980:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000984:	08007ba4 	.word	0x08007ba4
	ldr	r0, =_sdata
 8000988:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800098c:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000990:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8000994:	200022a8 	.word	0x200022a8

08000998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000998:	e7fe      	b.n	8000998 <ADC1_2_IRQHandler>

0800099a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a4:	2003      	movs	r0, #3
 80009a6:	f000 f95b 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 f80e 	bl	80009cc <HAL_InitTick>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	71fb      	strb	r3, [r7, #7]
 80009ba:	e001      	b.n	80009c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009bc:	f7ff ff16 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <HAL_InitTick+0x68>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d022      	beq.n	8000a26 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_InitTick+0x6c>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <HAL_InitTick+0x68>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80009f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f968 	bl	8000cca <HAL_SYSTICK_Config>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d10f      	bne.n	8000a20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b0f      	cmp	r3, #15
 8000a04:	d809      	bhi.n	8000a1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a06:	2200      	movs	r2, #0
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a0e:	f000 f932 	bl	8000c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_InitTick+0x70>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	e007      	b.n	8000a2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	e004      	b.n	8000a2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
 8000a24:	e001      	b.n	8000a2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000078 	.word	0x20000078
 8000a38:	20000070 	.word	0x20000070
 8000a3c:	20000074 	.word	0x20000074

08000a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x20>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a03      	ldr	r2, [pc, #12]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a50:	6013      	str	r3, [r2, #0]
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	20000238 	.word	0x20000238
 8000a60:	20000078 	.word	0x20000078

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000238 	.word	0x20000238

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff ffee 	bl	8000a64 <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a94:	d004      	beq.n	8000aa0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_Delay+0x40>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aa0:	bf00      	nop
 8000aa2:	f7ff ffdf 	bl	8000a64 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d8f7      	bhi.n	8000aa2 <HAL_Delay+0x26>
  {
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000078 	.word	0x20000078

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db0b      	blt.n	8000b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f003 021f 	and.w	r2, r3, #31
 8000b3c:	4907      	ldr	r1, [pc, #28]	; (8000b5c <__NVIC_EnableIRQ+0x38>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	2001      	movs	r0, #1
 8000b46:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000e100 	.word	0xe000e100

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff29 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff3e 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff8e 	bl	8000bb4 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5d 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff31 	bl	8000b24 <__NVIC_EnableIRQ>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffa2 	bl	8000c1c <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e098      	b.n	8000e28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <HAL_DMA_Init+0x150>)
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d80f      	bhi.n	8000d22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b4b      	ldr	r3, [pc, #300]	; (8000e38 <HAL_DMA_Init+0x154>)
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a4b      	ldr	r2, [pc, #300]	; (8000e3c <HAL_DMA_Init+0x158>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	009a      	lsls	r2, r3, #2
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a48      	ldr	r2, [pc, #288]	; (8000e40 <HAL_DMA_Init+0x15c>)
 8000d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d20:	e00e      	b.n	8000d40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b46      	ldr	r3, [pc, #280]	; (8000e44 <HAL_DMA_Init+0x160>)
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a43      	ldr	r2, [pc, #268]	; (8000e3c <HAL_DMA_Init+0x158>)
 8000d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d32:	091b      	lsrs	r3, r3, #4
 8000d34:	009a      	lsls	r2, r3, #2
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a42      	ldr	r2, [pc, #264]	; (8000e48 <HAL_DMA_Init+0x164>)
 8000d3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2202      	movs	r2, #2
 8000d44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	691b      	ldr	r3, [r3, #16]
 8000d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	68fa      	ldr	r2, [r7, #12]
 8000d90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d9a:	d039      	beq.n	8000e10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a27      	ldr	r2, [pc, #156]	; (8000e40 <HAL_DMA_Init+0x15c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d11a      	bne.n	8000ddc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000da6:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <HAL_DMA_Init+0x168>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f003 031c 	and.w	r3, r3, #28
 8000db2:	210f      	movs	r1, #15
 8000db4:	fa01 f303 	lsl.w	r3, r1, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4924      	ldr	r1, [pc, #144]	; (8000e4c <HAL_DMA_Init+0x168>)
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <HAL_DMA_Init+0x168>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6859      	ldr	r1, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dcc:	f003 031c 	and.w	r3, r3, #28
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	491d      	ldr	r1, [pc, #116]	; (8000e4c <HAL_DMA_Init+0x168>)
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	600b      	str	r3, [r1, #0]
 8000dda:	e019      	b.n	8000e10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_DMA_Init+0x16c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de4:	f003 031c 	and.w	r3, r3, #28
 8000de8:	210f      	movs	r1, #15
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4917      	ldr	r1, [pc, #92]	; (8000e50 <HAL_DMA_Init+0x16c>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_DMA_Init+0x16c>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6859      	ldr	r1, [r3, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 031c 	and.w	r3, r3, #28
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	4911      	ldr	r1, [pc, #68]	; (8000e50 <HAL_DMA_Init+0x16c>)
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40020407 	.word	0x40020407
 8000e38:	bffdfff8 	.word	0xbffdfff8
 8000e3c:	cccccccd 	.word	0xcccccccd
 8000e40:	40020000 	.word	0x40020000
 8000e44:	bffdfbf8 	.word	0xbffdfbf8
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	400200a8 	.word	0x400200a8
 8000e50:	400204a8 	.word	0x400204a8

08000e54 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e072      	b.n	8000f4c <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0201 	bic.w	r2, r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <HAL_DMA_DeInit+0x104>)
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d80f      	bhi.n	8000ea2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b34      	ldr	r3, [pc, #208]	; (8000f5c <HAL_DMA_DeInit+0x108>)
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <HAL_DMA_DeInit+0x10c>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	091b      	lsrs	r3, r3, #4
 8000e94:	009a      	lsls	r2, r3, #2
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a31      	ldr	r2, [pc, #196]	; (8000f64 <HAL_DMA_DeInit+0x110>)
 8000e9e:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea0:	e00e      	b.n	8000ec0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b2f      	ldr	r3, [pc, #188]	; (8000f68 <HAL_DMA_DeInit+0x114>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a2c      	ldr	r2, [pc, #176]	; (8000f60 <HAL_DMA_DeInit+0x10c>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	009a      	lsls	r2, r3, #2
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a2b      	ldr	r2, [pc, #172]	; (8000f6c <HAL_DMA_DeInit+0x118>)
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	f003 021c 	and.w	r2, r3, #28
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <HAL_DMA_DeInit+0x110>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10d      	bne.n	8000f02 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ee6:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <HAL_DMA_DeInit+0x11c>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	f003 031c 	and.w	r3, r3, #28
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	491d      	ldr	r1, [pc, #116]	; (8000f70 <HAL_DMA_DeInit+0x11c>)
 8000efc:	4013      	ands	r3, r2
 8000efe:	600b      	str	r3, [r1, #0]
 8000f00:	e00c      	b.n	8000f1c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_DMA_DeInit+0x120>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f003 031c 	and.w	r3, r3, #28
 8000f0e:	210f      	movs	r1, #15
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	4917      	ldr	r1, [pc, #92]	; (8000f74 <HAL_DMA_DeInit+0x120>)
 8000f18:	4013      	ands	r3, r2
 8000f1a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	40020407 	.word	0x40020407
 8000f5c:	bffdfff8 	.word	0xbffdfff8
 8000f60:	cccccccd 	.word	0xcccccccd
 8000f64:	40020000 	.word	0x40020000
 8000f68:	bffdfbf8 	.word	0xbffdfbf8
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	400200a8 	.word	0x400200a8
 8000f74:	400204a8 	.word	0x400204a8

08000f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_DMA_Start_IT+0x20>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e04b      	b.n	8001030 <HAL_DMA_Start_IT+0xb8>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d13a      	bne.n	8001022 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f022 0201 	bic.w	r2, r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f000 f95f 	bl	8001294 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 020e 	orr.w	r2, r2, #14
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	e00f      	b.n	8001010 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0204 	bic.w	r2, r2, #4
 8000ffe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 020a 	orr.w	r2, r2, #10
 800100e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	e005      	b.n	800102e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800102a:	2302      	movs	r3, #2
 800102c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800102e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d008      	beq.n	8001062 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e022      	b.n	80010a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 020e 	bic.w	r2, r2, #14
 8001070:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 0201 	bic.w	r2, r2, #1
 8001080:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	f003 021c 	and.w	r2, r3, #28
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2201      	movs	r2, #1
 800109a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d005      	beq.n	80010d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e029      	b.n	800112c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 020e 	bic.w	r2, r2, #14
 80010e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0201 	bic.w	r2, r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	f003 021c 	and.w	r2, r3, #28
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	2101      	movs	r1, #1
 8001106:	fa01 f202 	lsl.w	r2, r1, r2
 800110a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	4798      	blx	r3
    }
  }
  return status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f003 031c 	and.w	r3, r3, #28
 8001156:	2204      	movs	r2, #4
 8001158:	409a      	lsls	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4013      	ands	r3, r2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d026      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x7a>
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d021      	beq.n	80011b0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0320 	and.w	r3, r3, #32
 8001176:	2b00      	cmp	r3, #0
 8001178:	d107      	bne.n	800118a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0204 	bic.w	r2, r2, #4
 8001188:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f003 021c 	and.w	r2, r3, #28
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	2104      	movs	r1, #4
 8001198:	fa01 f202 	lsl.w	r2, r1, r2
 800119c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d071      	beq.n	800128a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80011ae:	e06c      	b.n	800128a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f003 031c 	and.w	r3, r3, #28
 80011b8:	2202      	movs	r2, #2
 80011ba:	409a      	lsls	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d02e      	beq.n	8001222 <HAL_DMA_IRQHandler+0xec>
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d029      	beq.n	8001222 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0320 	and.w	r3, r3, #32
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10b      	bne.n	80011f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 020a 	bic.w	r2, r2, #10
 80011ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	f003 021c 	and.w	r2, r3, #28
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	2102      	movs	r1, #2
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
 8001206:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2b00      	cmp	r3, #0
 8001216:	d038      	beq.n	800128a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001220:	e033      	b.n	800128a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f003 031c 	and.w	r3, r3, #28
 800122a:	2208      	movs	r2, #8
 800122c:	409a      	lsls	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4013      	ands	r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d02a      	beq.n	800128c <HAL_DMA_IRQHandler+0x156>
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d025      	beq.n	800128c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 020e 	bic.w	r2, r2, #14
 800124e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	f003 021c 	and.w	r2, r3, #28
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	2101      	movs	r1, #1
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800127e:	2b00      	cmp	r3, #0
 8001280:	d004      	beq.n	800128c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800128a:	bf00      	nop
 800128c:	bf00      	nop
}
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f003 021c 	and.w	r2, r3, #28
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	2101      	movs	r1, #1
 80012b0:	fa01 f202 	lsl.w	r2, r1, r2
 80012b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2b10      	cmp	r3, #16
 80012c4:	d108      	bne.n	80012d8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012d6:	e007      	b.n	80012e8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	60da      	str	r2, [r3, #12]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e17f      	b.n	8001604 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8171 	beq.w	80015fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d00b      	beq.n	800133c <HAL_GPIO_Init+0x48>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001330:	2b11      	cmp	r3, #17
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b12      	cmp	r3, #18
 800133a:	d130      	bne.n	800139e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001372:	2201      	movs	r2, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f003 0201 	and.w	r2, r3, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d118      	bne.n	80013dc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013b0:	2201      	movs	r2, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	f003 0201 	and.w	r2, r3, #1
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x128>
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b12      	cmp	r3, #18
 800141a:	d123      	bne.n	8001464 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	08da      	lsrs	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3208      	adds	r2, #8
 8001424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 0307 	and.w	r3, r3, #7
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	220f      	movs	r2, #15
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4013      	ands	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	691a      	ldr	r2, [r3, #16]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	08da      	lsrs	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3208      	adds	r2, #8
 800145e:	6939      	ldr	r1, [r7, #16]
 8001460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0203 	and.w	r2, r3, #3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 80ac 	beq.w	80015fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	4b5e      	ldr	r3, [pc, #376]	; (8001620 <HAL_GPIO_Init+0x32c>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	4a5d      	ldr	r2, [pc, #372]	; (8001620 <HAL_GPIO_Init+0x32c>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6613      	str	r3, [r2, #96]	; 0x60
 80014b2:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <HAL_GPIO_Init+0x32c>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014be:	4a59      	ldr	r2, [pc, #356]	; (8001624 <HAL_GPIO_Init+0x330>)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014e8:	d025      	beq.n	8001536 <HAL_GPIO_Init+0x242>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4e      	ldr	r2, [pc, #312]	; (8001628 <HAL_GPIO_Init+0x334>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01f      	beq.n	8001532 <HAL_GPIO_Init+0x23e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4d      	ldr	r2, [pc, #308]	; (800162c <HAL_GPIO_Init+0x338>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_Init+0x23a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_GPIO_Init+0x33c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0x236>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_GPIO_Init+0x340>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_Init+0x232>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_GPIO_Init+0x344>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x22e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a49      	ldr	r2, [pc, #292]	; (800163c <HAL_GPIO_Init+0x348>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_Init+0x22a>
 800151a:	2306      	movs	r3, #6
 800151c:	e00c      	b.n	8001538 <HAL_GPIO_Init+0x244>
 800151e:	2307      	movs	r3, #7
 8001520:	e00a      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001522:	2305      	movs	r3, #5
 8001524:	e008      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001526:	2304      	movs	r3, #4
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x244>
 800152a:	2303      	movs	r3, #3
 800152c:	e004      	b.n	8001538 <HAL_GPIO_Init+0x244>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x244>
 8001536:	2300      	movs	r3, #0
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	f002 0203 	and.w	r2, r2, #3
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4093      	lsls	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001548:	4936      	ldr	r1, [pc, #216]	; (8001624 <HAL_GPIO_Init+0x330>)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001556:	4b3a      	ldr	r3, [pc, #232]	; (8001640 <HAL_GPIO_Init+0x34c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800157a:	4a31      	ldr	r2, [pc, #196]	; (8001640 <HAL_GPIO_Init+0x34c>)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001580:	4b2f      	ldr	r3, [pc, #188]	; (8001640 <HAL_GPIO_Init+0x34c>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015a4:	4a26      	ldr	r2, [pc, #152]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ce:	4a1c      	ldr	r2, [pc, #112]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f8:	4a11      	ldr	r2, [pc, #68]	; (8001640 <HAL_GPIO_Init+0x34c>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	3301      	adds	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa22 f303 	lsr.w	r3, r2, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f ae78 	bne.w	8001304 <HAL_GPIO_Init+0x10>
  }
}
 8001614:	bf00      	nop
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	48000400 	.word	0x48000400
 800162c:	48000800 	.word	0x48000800
 8001630:	48000c00 	.word	0x48000c00
 8001634:	48001000 	.word	0x48001000
 8001638:	48001400 	.word	0x48001400
 800163c:	48001800 	.word	0x48001800
 8001640:	40010400 	.word	0x40010400

08001644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	4013      	ands	r3, r2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e001      	b.n	8001666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001690:	e002      	b.n	8001698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001692:	887a      	ldrh	r2, [r7, #2]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_PWREx_GetVoltageRange+0x18>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40007000 	.word	0x40007000

080016c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ce:	d130      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016dc:	d038      	beq.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016e6:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2232      	movs	r2, #50	; 0x32
 80016f4:	fb02 f303 	mul.w	r3, r2, r3
 80016f8:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0c9b      	lsrs	r3, r3, #18
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001704:	e002      	b.n	800170c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3b01      	subs	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001718:	d102      	bne.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x60>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f2      	bne.n	8001706 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172c:	d110      	bne.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e00f      	b.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800173a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173e:	d007      	beq.n	8001750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001748:	4a05      	ldr	r2, [pc, #20]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800174e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40007000 	.word	0x40007000
 8001764:	20000070 	.word	0x20000070
 8001768:	431bde83 	.word	0x431bde83

0800176c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e3d4      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177e:	4ba1      	ldr	r3, [pc, #644]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001788:	4b9e      	ldr	r3, [pc, #632]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80e4 	beq.w	8001968 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d007      	beq.n	80017b6 <HAL_RCC_OscConfig+0x4a>
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b0c      	cmp	r3, #12
 80017aa:	f040 808b 	bne.w	80018c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	f040 8087 	bne.w	80018c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b6:	4b93      	ldr	r3, [pc, #588]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_RCC_OscConfig+0x62>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e3ac      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1a      	ldr	r2, [r3, #32]
 80017d2:	4b8c      	ldr	r3, [pc, #560]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_RCC_OscConfig+0x7c>
 80017de:	4b89      	ldr	r3, [pc, #548]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017e6:	e005      	b.n	80017f4 <HAL_RCC_OscConfig+0x88>
 80017e8:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80017ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d223      	bcs.n	8001840 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fd07 	bl	8002210 <RCC_SetFlashLatencyFromMSIRange>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e38d      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180c:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a7c      	ldr	r2, [pc, #496]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001812:	f043 0308 	orr.w	r3, r3, #8
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4977      	ldr	r1, [pc, #476]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	4972      	ldr	r1, [pc, #456]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
 800183e:	e025      	b.n	800188c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001840:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a6f      	ldr	r2, [pc, #444]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001846:	f043 0308 	orr.w	r3, r3, #8
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	496a      	ldr	r1, [pc, #424]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800185a:	4313      	orrs	r3, r2
 800185c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800185e:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	4965      	ldr	r1, [pc, #404]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fcc7 	bl	8002210 <RCC_SetFlashLatencyFromMSIRange>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e34d      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800188c:	f000 fc36 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 8001890:	4601      	mov	r1, r0
 8001892:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	4a5a      	ldr	r2, [pc, #360]	; (8001a08 <HAL_RCC_OscConfig+0x29c>)
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	fa21 f303 	lsr.w	r3, r1, r3
 80018a8:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_RCC_OscConfig+0x2a0>)
 80018aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018ac:	4b58      	ldr	r3, [pc, #352]	; (8001a10 <HAL_RCC_OscConfig+0x2a4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f88b 	bl	80009cc <HAL_InitTick>
 80018b6:	4603      	mov	r3, r0
 80018b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d052      	beq.n	8001966 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	e331      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d032      	beq.n	8001932 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018cc:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018d8:	f7ff f8c4 	bl	8000a64 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e0:	f7ff f8c0 	bl	8000a64 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e31a      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a40      	ldr	r2, [pc, #256]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	493b      	ldr	r1, [pc, #236]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	4936      	ldr	r1, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
 8001930:	e01a      	b.n	8001968 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001932:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a33      	ldr	r2, [pc, #204]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800193e:	f7ff f891 	bl	8000a64 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001946:	f7ff f88d 	bl	8000a64 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e2e7      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x1da>
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001966:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d074      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b08      	cmp	r3, #8
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x21a>
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b0c      	cmp	r3, #12
 800197e:	d10e      	bne.n	800199e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d10b      	bne.n	800199e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d064      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d160      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e2c4      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x24a>
 80019a8:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e01d      	b.n	80019f2 <HAL_RCC_OscConfig+0x286>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x26e>
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x286>
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <HAL_RCC_OscConfig+0x298>)
 80019ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff f833 	bl	8000a64 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a00:	e011      	b.n	8001a26 <HAL_RCC_OscConfig+0x2ba>
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000
 8001a08:	08007ac8 	.word	0x08007ac8
 8001a0c:	20000070 	.word	0x20000070
 8001a10:	20000074 	.word	0x20000074
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff f826 	bl	8000a64 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e280      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a26:	4baf      	ldr	r3, [pc, #700]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2a8>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f816 	bl	8000a64 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f812 	bl	8000a64 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e26c      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4e:	4ba5      	ldr	r3, [pc, #660]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2d0>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d060      	beq.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_OscConfig+0x310>
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d119      	bne.n	8001aaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d116      	bne.n	8001aaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a7c:	4b99      	ldr	r3, [pc, #612]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_OscConfig+0x328>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e249      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b93      	ldr	r3, [pc, #588]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	4990      	ldr	r1, [pc, #576]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	e040      	b.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d023      	beq.n	8001afa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab2:	4b8c      	ldr	r3, [pc, #560]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a8b      	ldr	r2, [pc, #556]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001abe:	f7fe ffd1 	bl	8000a64 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac6:	f7fe ffcd 	bl	8000a64 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e227      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad8:	4b82      	ldr	r3, [pc, #520]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae4:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	061b      	lsls	r3, r3, #24
 8001af2:	497c      	ldr	r1, [pc, #496]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
 8001af8:	e018      	b.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afa:	4b7a      	ldr	r3, [pc, #488]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a79      	ldr	r2, [pc, #484]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7fe ffad 	bl	8000a64 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7fe ffa9 	bl	8000a64 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e203      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b20:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d01c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b40:	4b68      	ldr	r3, [pc, #416]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	4a67      	ldr	r2, [pc, #412]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7fe ff88 	bl	8000a64 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b58:	f7fe ff84 	bl	8000a64 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1de      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b6a:	4b5e      	ldr	r3, [pc, #376]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ef      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3ec>
 8001b78:	e01b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b80:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001b82:	f023 0301 	bic.w	r3, r3, #1
 8001b86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8a:	f7fe ff6b 	bl	8000a64 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b92:	f7fe ff67 	bl	8000a64 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1c1      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba4:	4b4f      	ldr	r3, [pc, #316]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1ef      	bne.n	8001b92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80a6 	beq.w	8001d0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bc4:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10d      	bne.n	8001bec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd0:	4b44      	ldr	r3, [pc, #272]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	4a43      	ldr	r2, [pc, #268]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6593      	str	r3, [r2, #88]	; 0x58
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be8:	2301      	movs	r3, #1
 8001bea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bec:	4b3e      	ldr	r3, [pc, #248]	; (8001ce8 <HAL_RCC_OscConfig+0x57c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d118      	bne.n	8001c2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bf8:	4b3b      	ldr	r3, [pc, #236]	; (8001ce8 <HAL_RCC_OscConfig+0x57c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a3a      	ldr	r2, [pc, #232]	; (8001ce8 <HAL_RCC_OscConfig+0x57c>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c04:	f7fe ff2e 	bl	8000a64 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0c:	f7fe ff2a 	bl	8000a64 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e184      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_RCC_OscConfig+0x57c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d108      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4d8>
 8001c32:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c38:	4a2a      	ldr	r2, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c42:	e024      	b.n	8001c8e <HAL_RCC_OscConfig+0x522>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	d110      	bne.n	8001c6e <HAL_RCC_OscConfig+0x502>
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c52:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6c:	e00f      	b.n	8001c8e <HAL_RCC_OscConfig+0x522>
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c74:	4a1b      	ldr	r2, [pc, #108]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c76:	f023 0301 	bic.w	r3, r3, #1
 8001c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c84:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001c86:	f023 0304 	bic.w	r3, r3, #4
 8001c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d016      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7fe fee5 	bl	8000a64 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7fe fee1 	bl	8000a64 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e139      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ed      	beq.n	8001c9e <HAL_RCC_OscConfig+0x532>
 8001cc2:	e01a      	b.n	8001cfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc4:	f7fe fece 	bl	8000a64 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cca:	e00f      	b.n	8001cec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7fe feca 	bl	8000a64 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d906      	bls.n	8001cec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e122      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cec:	4b90      	ldr	r3, [pc, #576]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e8      	bne.n	8001ccc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfa:	7ffb      	ldrb	r3, [r7, #31]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d00:	4b8b      	ldr	r3, [pc, #556]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d04:	4a8a      	ldr	r2, [pc, #552]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 8108 	beq.w	8001f26 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	f040 80d0 	bne.w	8001ec0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d20:	4b83      	ldr	r3, [pc, #524]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d130      	bne.n	8001d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d127      	bne.n	8001d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d11f      	bne.n	8001d96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d60:	2a07      	cmp	r2, #7
 8001d62:	bf14      	ite	ne
 8001d64:	2201      	movne	r2, #1
 8001d66:	2200      	moveq	r2, #0
 8001d68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d113      	bne.n	8001d96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d06e      	beq.n	8001e74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d069      	beq.n	8001e70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d9c:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001da8:	4b61      	ldr	r3, [pc, #388]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0b7      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001db8:	4b5d      	ldr	r3, [pc, #372]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a5c      	ldr	r2, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc4:	f7fe fe4e 	bl	8000a64 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7fe fe4a 	bl	8000a64 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0a4      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dde:	4b54      	ldr	r3, [pc, #336]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <HAL_RCC_OscConfig+0x7c8>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dfa:	3a01      	subs	r2, #1
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e04:	0212      	lsls	r2, r2, #8
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e0c:	0852      	lsrs	r2, r2, #1
 8001e0e:	3a01      	subs	r2, #1
 8001e10:	0552      	lsls	r2, r2, #21
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e18:	0852      	lsrs	r2, r2, #1
 8001e1a:	3a01      	subs	r2, #1
 8001e1c:	0652      	lsls	r2, r2, #25
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e24:	0912      	lsrs	r2, r2, #4
 8001e26:	0452      	lsls	r2, r2, #17
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	4941      	ldr	r1, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e30:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a3e      	ldr	r2, [pc, #248]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e3c:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a3b      	ldr	r2, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e48:	f7fe fe0c 	bl	8000a64 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e50:	f7fe fe08 	bl	8000a64 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e062      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d0f0      	beq.n	8001e50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e6e:	e05a      	b.n	8001f26 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e059      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d152      	bne.n	8001f26 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2a      	ldr	r2, [pc, #168]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e98:	f7fe fde4 	bl	8000a64 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7fe fde0 	bl	8000a64 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e03a      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x734>
 8001ebe:	e032      	b.n	8001f26 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d02d      	beq.n	8001f22 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001ecc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001ee4:	f023 0303 	bic.w	r3, r3, #3
 8001ee8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001ef0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7fe fdb3 	bl	8000a64 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f02:	f7fe fdaf 	bl	8000a64 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e009      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f14:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_OscConfig+0x7c4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x796>
 8001f20:	e001      	b.n	8001f26 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000
 8001f34:	f99d808c 	.word	0xf99d808c

08001f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0c8      	b.n	80020de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d910      	bls.n	8001f7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 0207 	bic.w	r2, r3, #7
 8001f62:	4961      	ldr	r1, [pc, #388]	; (80020e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6a:	4b5f      	ldr	r3, [pc, #380]	; (80020e8 <HAL_RCC_ClockConfig+0x1b0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d001      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0b0      	b.n	80020de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d04c      	beq.n	8002022 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f90:	4b56      	ldr	r3, [pc, #344]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d121      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e09e      	b.n	80020de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d115      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e092      	b.n	80020de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc0:	4b4a      	ldr	r3, [pc, #296]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e086      	b.n	80020de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd0:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e07e      	b.n	80020de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 0203 	bic.w	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	493f      	ldr	r1, [pc, #252]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff2:	f7fe fd37 	bl	8000a64 <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffa:	f7fe fd33 	bl	8000a64 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f241 3288 	movw	r2, #5000	; 0x1388
 8002008:	4293      	cmp	r3, r2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e066      	b.n	80020de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 020c 	and.w	r2, r3, #12
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	429a      	cmp	r2, r3
 8002020:	d1eb      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202e:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	492c      	ldr	r1, [pc, #176]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d210      	bcs.n	8002070 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4924      	ldr	r1, [pc, #144]	; (80020e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCC_ClockConfig+0x1b0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e036      	b.n	80020de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4918      	ldr	r1, [pc, #96]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d009      	beq.n	80020ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4910      	ldr	r1, [pc, #64]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ae:	f000 f825 	bl	80020fc <HAL_RCC_GetSysClockFreq>
 80020b2:	4601      	mov	r1, r0
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_RCC_ClockConfig+0x1b4>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	091b      	lsrs	r3, r3, #4
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	4a0c      	ldr	r2, [pc, #48]	; (80020f0 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	5cd3      	ldrb	r3, [r2, r3]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	fa21 f303 	lsr.w	r3, r1, r3
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_ClockConfig+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fc7a 	bl	80009cc <HAL_InitTick>
 80020d8:	4603      	mov	r3, r0
 80020da:	72fb      	strb	r3, [r7, #11]

  return status;
 80020dc:	7afb      	ldrb	r3, [r7, #11]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40022000 	.word	0x40022000
 80020ec:	40021000 	.word	0x40021000
 80020f0:	08007ac8 	.word	0x08007ac8
 80020f4:	20000070 	.word	0x20000070
 80020f8:	20000074 	.word	0x20000074

080020fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_GetSysClockFreq+0x104>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCC_GetSysClockFreq+0x104>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x34>
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d121      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d11e      	bne.n	800216e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_RCC_GetSysClockFreq+0x104>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCC_GetSysClockFreq+0x104>)
 800213e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e005      	b.n	8002158 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_RCC_GetSysClockFreq+0x104>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002158:	4a2a      	ldr	r2, [pc, #168]	; (8002204 <HAL_RCC_GetSysClockFreq+0x108>)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10d      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800216c:	e00a      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b04      	cmp	r3, #4
 8002172:	d102      	bne.n	800217a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	e004      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d101      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <HAL_RCC_GetSysClockFreq+0x110>)
 8002182:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b0c      	cmp	r3, #12
 8002188:	d133      	bne.n	80021f2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_GetSysClockFreq+0x104>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d002      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0xa4>
 800219a:	2b03      	cmp	r3, #3
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0xaa>
 800219e:	e005      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021a2:	617b      	str	r3, [r7, #20]
      break;
 80021a4:	e005      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_RCC_GetSysClockFreq+0x110>)
 80021a8:	617b      	str	r3, [r7, #20]
      break;
 80021aa:	e002      	b.n	80021b2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	617b      	str	r3, [r7, #20]
      break;
 80021b0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_RCC_GetSysClockFreq+0x104>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	3301      	adds	r3, #1
 80021be:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_RCC_GetSysClockFreq+0x104>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	0a1b      	lsrs	r3, r3, #8
 80021c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	fb02 f203 	mul.w	r2, r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_RCC_GetSysClockFreq+0x104>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	0e5b      	lsrs	r3, r3, #25
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	3301      	adds	r3, #1
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021f2:	69bb      	ldr	r3, [r7, #24]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3724      	adds	r7, #36	; 0x24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40021000 	.word	0x40021000
 8002204:	08007ad8 	.word	0x08007ad8
 8002208:	00f42400 	.word	0x00f42400
 800220c:	007a1200 	.word	0x007a1200

08002210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002228:	f7ff fa3c 	bl	80016a4 <HAL_PWREx_GetVoltageRange>
 800222c:	6178      	str	r0, [r7, #20]
 800222e:	e014      	b.n	800225a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	6593      	str	r3, [r2, #88]	; 0x58
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002248:	f7ff fa2c 	bl	80016a4 <HAL_PWREx_GetVoltageRange>
 800224c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002260:	d10b      	bne.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b80      	cmp	r3, #128	; 0x80
 8002266:	d919      	bls.n	800229c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2ba0      	cmp	r3, #160	; 0xa0
 800226c:	d902      	bls.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800226e:	2302      	movs	r3, #2
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	e013      	b.n	800229c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002274:	2301      	movs	r3, #1
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	e010      	b.n	800229c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b80      	cmp	r3, #128	; 0x80
 800227e:	d902      	bls.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002280:	2303      	movs	r3, #3
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	e00a      	b.n	800229c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b80      	cmp	r3, #128	; 0x80
 800228a:	d102      	bne.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800228c:	2302      	movs	r3, #2
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	e004      	b.n	800229c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b70      	cmp	r3, #112	; 0x70
 8002296:	d101      	bne.n	800229c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002298:	2301      	movs	r3, #1
 800229a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 0207 	bic.w	r2, r3, #7
 80022a4:	4909      	ldr	r1, [pc, #36]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022ac:	4b07      	ldr	r3, [pc, #28]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40022000 	.word	0x40022000

080022d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022d8:	2300      	movs	r3, #0
 80022da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022dc:	2300      	movs	r3, #0
 80022de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03f      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f4:	d01c      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80022f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fa:	d802      	bhi.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00e      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002300:	e01f      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002306:	d003      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002308:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800230c:	d01c      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800230e:	e018      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002310:	4b85      	ldr	r3, [pc, #532]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a84      	ldr	r2, [pc, #528]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231c:	e015      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3304      	adds	r3, #4
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fab9 	bl	800289c <RCCEx_PLLSAI1_Config>
 800232a:	4603      	mov	r3, r0
 800232c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800232e:	e00c      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3320      	adds	r3, #32
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fba0 	bl	8002a7c <RCCEx_PLLSAI2_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002340:	e003      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	74fb      	strb	r3, [r7, #19]
      break;
 8002346:	e000      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10b      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002350:	4b75      	ldr	r3, [pc, #468]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002356:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800235e:	4972      	ldr	r1, [pc, #456]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002366:	e001      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d03f      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002380:	d01c      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002382:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002386:	d802      	bhi.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xda>
 800238c:	e01f      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800238e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002392:	d003      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002394:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002398:	d01c      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800239a:	e018      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800239c:	4b62      	ldr	r3, [pc, #392]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a61      	ldr	r2, [pc, #388]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023a8:	e015      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fa73 	bl	800289c <RCCEx_PLLSAI1_Config>
 80023b6:	4603      	mov	r3, r0
 80023b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023ba:	e00c      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3320      	adds	r3, #32
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fb5a 	bl	8002a7c <RCCEx_PLLSAI2_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023cc:	e003      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	74fb      	strb	r3, [r7, #19]
      break;
 80023d2:	e000      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80023d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023dc:	4b52      	ldr	r3, [pc, #328]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ea:	494f      	ldr	r1, [pc, #316]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023f2:	e001      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80a0 	beq.w	8002546 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00d      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002424:	4a40      	ldr	r2, [pc, #256]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242a:	6593      	str	r3, [r2, #88]	; 0x58
 800242c:	4b3e      	ldr	r3, [pc, #248]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800242e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002438:	2301      	movs	r3, #1
 800243a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800243c:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a3a      	ldr	r2, [pc, #232]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002446:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002448:	f7fe fb0c 	bl	8000a64 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800244e:	e009      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002450:	f7fe fb08 	bl	8000a64 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d902      	bls.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	74fb      	strb	r3, [r7, #19]
        break;
 8002462:	e005      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002464:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ef      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d15c      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002476:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002480:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01f      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	429a      	cmp	r2, r3
 8002492:	d019      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002494:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800249e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024a0:	4b21      	ldr	r3, [pc, #132]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	4a20      	ldr	r2, [pc, #128]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024c0:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d016      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe fac7 	bl	8000a64 <HAL_GetTick>
 80024d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d8:	e00b      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fac3 	bl	8000a64 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d902      	bls.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	74fb      	strb	r3, [r7, #19]
            break;
 80024f0:	e006      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ec      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002516:	4904      	ldr	r1, [pc, #16]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800251e:	e009      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
 8002524:	e006      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002530:	7cfb      	ldrb	r3, [r7, #19]
 8002532:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002534:	7c7b      	ldrb	r3, [r7, #17]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800253a:	4b9e      	ldr	r3, [pc, #632]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253e:	4a9d      	ldr	r2, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002544:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0203 	bic.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 020c 	bic.w	r2, r3, #12
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026a6:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	493f      	ldr	r1, [pc, #252]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d028      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d6:	4937      	ldr	r1, [pc, #220]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e6:	d106      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	4a31      	ldr	r2, [pc, #196]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f2:	60d3      	str	r3, [r2, #12]
 80026f4:	e011      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026fe:	d10c      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	2101      	movs	r1, #1
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f8c8 	bl	800289c <RCCEx_PLLSAI1_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d028      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002726:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	491f      	ldr	r1, [pc, #124]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002744:	d106      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002746:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800274c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002750:	60d3      	str	r3, [r2, #12]
 8002752:	e011      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800275c:	d10c      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f000 f899 	bl	800289c <RCCEx_PLLSAI1_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800276e:	7cfb      	ldrb	r3, [r7, #19]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d02b      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002792:	4908      	ldr	r1, [pc, #32]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a2:	d109      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a02      	ldr	r2, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ae:	60d3      	str	r3, [r2, #12]
 80027b0:	e014      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027c0:	d10c      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3304      	adds	r3, #4
 80027c6:	2101      	movs	r1, #1
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f867 	bl	800289c <RCCEx_PLLSAI1_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80027d8:	7cfb      	ldrb	r3, [r7, #19]
 80027da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d02f      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f6:	4928      	ldr	r1, [pc, #160]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002806:	d10d      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3304      	adds	r3, #4
 800280c:	2102      	movs	r1, #2
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f844 	bl	800289c <RCCEx_PLLSAI1_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d014      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	74bb      	strb	r3, [r7, #18]
 8002822:	e011      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800282c:	d10c      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3320      	adds	r3, #32
 8002832:	2102      	movs	r1, #2
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f921 	bl	8002a7c <RCCEx_PLLSAI2_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002862:	490d      	ldr	r1, [pc, #52]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002886:	4904      	ldr	r1, [pc, #16]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800288e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000

0800289c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028a6:	2300      	movs	r3, #0
 80028a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d018      	beq.n	80028e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028b6:	4b70      	ldr	r3, [pc, #448]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0203 	and.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d10d      	bne.n	80028e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
       ||
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ce:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
       ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d044      	beq.n	800296c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	73fb      	strb	r3, [r7, #15]
 80028e6:	e041      	b.n	800296c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d00c      	beq.n	800290a <RCCEx_PLLSAI1_Config+0x6e>
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d013      	beq.n	800291c <RCCEx_PLLSAI1_Config+0x80>
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d120      	bne.n	800293a <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028f8:	4b5f      	ldr	r3, [pc, #380]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11d      	bne.n	8002940 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002908:	e01a      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800290a:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002912:	2b00      	cmp	r3, #0
 8002914:	d116      	bne.n	8002944 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291a:	e013      	b.n	8002944 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800291c:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10f      	bne.n	8002948 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002938:	e006      	b.n	8002948 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      break;
 800293e:	e004      	b.n	800294a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002940:	bf00      	nop
 8002942:	e002      	b.n	800294a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002944:	bf00      	nop
 8002946:	e000      	b.n	800294a <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002948:	bf00      	nop
    }

    if(status == HAL_OK)
 800294a:	7bfb      	ldrb	r3, [r7, #15]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002950:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	3b01      	subs	r3, #1
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	430b      	orrs	r3, r1
 8002966:	4944      	ldr	r1, [pc, #272]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d17d      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002972:	4b41      	ldr	r3, [pc, #260]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a40      	ldr	r2, [pc, #256]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002978:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800297c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297e:	f7fe f871 	bl	8000a64 <HAL_GetTick>
 8002982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002984:	e009      	b.n	800299a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002986:	f7fe f86d 	bl	8000a64 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d902      	bls.n	800299a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	73fb      	strb	r3, [r7, #15]
        break;
 8002998:	e005      	b.n	80029a6 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ef      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d160      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d111      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6892      	ldr	r2, [r2, #8]
 80029c2:	0211      	lsls	r1, r2, #8
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	68d2      	ldr	r2, [r2, #12]
 80029c8:	0912      	lsrs	r2, r2, #4
 80029ca:	0452      	lsls	r2, r2, #17
 80029cc:	430a      	orrs	r2, r1
 80029ce:	492a      	ldr	r1, [pc, #168]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	610b      	str	r3, [r1, #16]
 80029d4:	e027      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d112      	bne.n	8002a02 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6892      	ldr	r2, [r2, #8]
 80029ec:	0211      	lsls	r1, r2, #8
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6912      	ldr	r2, [r2, #16]
 80029f2:	0852      	lsrs	r2, r2, #1
 80029f4:	3a01      	subs	r2, #1
 80029f6:	0552      	lsls	r2, r2, #21
 80029f8:	430a      	orrs	r2, r1
 80029fa:	491f      	ldr	r1, [pc, #124]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	610b      	str	r3, [r1, #16]
 8002a00:	e011      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	0211      	lsls	r1, r2, #8
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6952      	ldr	r2, [r2, #20]
 8002a18:	0852      	lsrs	r2, r2, #1
 8002a1a:	3a01      	subs	r2, #1
 8002a1c:	0652      	lsls	r2, r2, #25
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	4915      	ldr	r1, [pc, #84]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe f817 	bl	8000a64 <HAL_GetTick>
 8002a36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a38:	e009      	b.n	8002a4e <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a3a:	f7fe f813 	bl	8000a64 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d902      	bls.n	8002a4e <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	73fb      	strb	r3, [r7, #15]
          break;
 8002a4c:	e005      	b.n	8002a5a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ef      	beq.n	8002a3a <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4903      	ldr	r1, [pc, #12]	; (8002a78 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000

08002a7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a8a:	4b68      	ldr	r3, [pc, #416]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0203 	and.w	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d10d      	bne.n	8002ac2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
       ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aae:	4b5f      	ldr	r3, [pc, #380]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
       ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d044      	beq.n	8002b4c <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e041      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d00c      	beq.n	8002aea <RCCEx_PLLSAI2_Config+0x6e>
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d013      	beq.n	8002afc <RCCEx_PLLSAI2_Config+0x80>
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d120      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ad8:	4b54      	ldr	r3, [pc, #336]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d11d      	bne.n	8002b20 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e01a      	b.n	8002b20 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aea:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d116      	bne.n	8002b24 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afa:	e013      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10f      	bne.n	8002b28 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b08:	4b48      	ldr	r3, [pc, #288]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b18:	e006      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1e:	e004      	b.n	8002b2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b20:	bf00      	nop
 8002b22:	e002      	b.n	8002b2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002b28:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b30:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6819      	ldr	r1, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	430b      	orrs	r3, r1
 8002b46:	4939      	ldr	r1, [pc, #228]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d167      	bne.n	8002c22 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a35      	ldr	r2, [pc, #212]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5e:	f7fd ff81 	bl	8000a64 <HAL_GetTick>
 8002b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b64:	e009      	b.n	8002b7a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b66:	f7fd ff7d 	bl	8000a64 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d902      	bls.n	8002b7a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	73fb      	strb	r3, [r7, #15]
        break;
 8002b78:	e005      	b.n	8002b86 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1ef      	bne.n	8002b66 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d14a      	bne.n	8002c22 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d111      	bne.n	8002bb6 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b92:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6892      	ldr	r2, [r2, #8]
 8002ba2:	0211      	lsls	r1, r2, #8
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68d2      	ldr	r2, [r2, #12]
 8002ba8:	0912      	lsrs	r2, r2, #4
 8002baa:	0452      	lsls	r2, r2, #17
 8002bac:	430a      	orrs	r2, r1
 8002bae:	491f      	ldr	r1, [pc, #124]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	614b      	str	r3, [r1, #20]
 8002bb4:	e011      	b.n	8002bda <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6892      	ldr	r2, [r2, #8]
 8002bc6:	0211      	lsls	r1, r2, #8
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6912      	ldr	r2, [r2, #16]
 8002bcc:	0852      	lsrs	r2, r2, #1
 8002bce:	3a01      	subs	r2, #1
 8002bd0:	0652      	lsls	r2, r2, #25
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	4915      	ldr	r1, [pc, #84]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bda:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fd ff3d 	bl	8000a64 <HAL_GetTick>
 8002bea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bec:	e009      	b.n	8002c02 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bee:	f7fd ff39 	bl	8000a64 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d902      	bls.n	8002c02 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	73fb      	strb	r3, [r7, #15]
          break;
 8002c00:	e005      	b.n	8002c0e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c02:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ef      	beq.n	8002bee <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	4903      	ldr	r1, [pc, #12]	; (8002c2c <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e022      	b.n	8002c88 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d105      	bne.n	8002c5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fd fd17 	bl	8000688 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f814 	bl	8002c90 <HAL_SD_InitCard>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00a      	b.n	8002c88 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c90:	b5b0      	push	{r4, r5, r7, lr}
 8002c92:	b08e      	sub	sp, #56	; 0x38
 8002c94:	af04      	add	r7, sp, #16
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002cac:	2376      	movs	r3, #118	; 0x76
 8002cae:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681d      	ldr	r5, [r3, #0]
 8002cb4:	466c      	mov	r4, sp
 8002cb6:	f107 0314 	add.w	r3, r7, #20
 8002cba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002cc2:	f107 0308 	add.w	r3, r7, #8
 8002cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f001 fa9b 	bl	8004204 <SDMMC_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e05f      	b.n	8002da0 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cee:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hsd->Instance);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 fad0 	bl	800429a <SDMMC_PowerState_ON>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_SD_InitCard+0x7c>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e049      	b.n	8002da0 <HAL_SD_InitCard+0x110>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 ffb5 	bl	8003c8c <SD_PowerON>
 8002d22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e02e      	b.n	8002da0 <HAL_SD_InitCard+0x110>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fed4 	bl	8003af0 <SD_InitCard>
 8002d48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_SD_InitCard+0xd8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e01b      	b.n	8002da0 <HAL_SD_InitCard+0x110>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fb25 	bl	80043c0 <SDMMC_CmdBlockLength>
 8002d76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00f      	beq.n	8002d9e <HAL_SD_InitCard+0x10e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <HAL_SD_InitCard+0x118>)
 8002d84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <HAL_SD_InitCard+0x110>
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3728      	adds	r7, #40	; 0x28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bdb0      	pop	{r4, r5, r7, pc}
 8002da8:	004005ff 	.word	0x004005ff

08002dac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08c      	sub	sp, #48	; 0x30
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d107      	bne.n	8002dd4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0a9      	b.n	8002f28 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	f040 80a2 	bne.w	8002f26 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	441a      	add	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d907      	bls.n	8002e06 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e090      	b.n	8002f28 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2200      	movs	r2, #0
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a45      	ldr	r2, [pc, #276]	; (8002f30 <HAL_SD_ReadBlocks_DMA+0x184>)
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	4a44      	ldr	r2, [pc, #272]	; (8002f34 <HAL_SD_ReadBlocks_DMA+0x188>)
 8002e24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3380      	adds	r3, #128	; 0x80
 8002e38:	4619      	mov	r1, r3
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	025b      	lsls	r3, r3, #9
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	f7fe f899 	bl	8000f78 <HAL_DMA_Start_IT>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00f      	beq.n	8002e6c <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a39      	ldr	r2, [pc, #228]	; (8002f38 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e05d      	b.n	8002f28 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0208 	orr.w	r2, r2, #8
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d002      	beq.n	8002e8a <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	025b      	lsls	r3, r3, #9
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e8e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	025b      	lsls	r3, r3, #9
 8002e94:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002e96:	2390      	movs	r3, #144	; 0x90
 8002e98:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f107 0210 	add.w	r2, r7, #16
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fa59 	bl	8004368 <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d90a      	bls.n	8002ed2 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2282      	movs	r2, #130	; 0x82
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 fabd 	bl	8004448 <SDMMC_CmdReadMultiBlock>
 8002ece:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002ed0:	e009      	b.n	8002ee6 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2281      	movs	r2, #129	; 0x81
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f001 fa90 	bl	8004404 <SDMMC_CmdReadSingleBlock>
 8002ee4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d012      	beq.n	8002f12 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efa:	431a      	orrs	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e00a      	b.n	8002f28 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8002f20:	63da      	str	r2, [r3, #60]	; 0x3c

      return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3730      	adds	r7, #48	; 0x30
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	0800390b 	.word	0x0800390b
 8002f34:	0800397d 	.word	0x0800397d
 8002f38:	004005ff 	.word	0x004005ff

08002f3c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08c      	sub	sp, #48	; 0x30
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0ac      	b.n	80030be <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	f040 80a5 	bne.w	80030bc <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d907      	bls.n	8002f96 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e093      	b.n	80030be <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	4a47      	ldr	r2, [pc, #284]	; (80030c8 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	4a46      	ldr	r2, [pc, #280]	; (80030cc <HAL_SD_WriteBlocks_DMA+0x190>)
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fba:	2200      	movs	r2, #0
 8002fbc:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d002      	beq.n	8002fcc <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	025b      	lsls	r3, r3, #9
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d90a      	bls.n	8002fe8 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	22a0      	movs	r2, #160	; 0xa0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 fa76 	bl	80044d0 <SDMMC_CmdWriteMultiBlock>
 8002fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002fe6:	e009      	b.n	8002ffc <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2290      	movs	r2, #144	; 0x90
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fa49 	bl	800448c <SDMMC_CmdWriteSingleBlock>
 8002ffa:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d012      	beq.n	8003028 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a32      	ldr	r2, [pc, #200]	; (80030d0 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003008:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	431a      	orrs	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e04a      	b.n	80030be <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3380      	adds	r3, #128	; 0x80
 8003044:	461a      	mov	r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	025b      	lsls	r3, r3, #9
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	f7fd ff94 	bl	8000f78 <HAL_DMA_Start_IT>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d012      	beq.n	800307c <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <HAL_SD_WriteBlocks_DMA+0x194>)
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e020      	b.n	80030be <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003080:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	025b      	lsls	r3, r3, #9
 8003086:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003088:	2390      	movs	r3, #144	; 0x90
 800308a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003094:	2301      	movs	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f107 0210 	add.w	r2, r7, #16
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f001 f960 	bl	8004368 <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 021a 	orr.w	r2, r2, #26
 80030b6:	63da      	str	r2, [r3, #60]	; 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e000      	b.n	80030be <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
  }
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3730      	adds	r7, #48	; 0x30
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	080038e1 	.word	0x080038e1
 80030cc:	0800397d 	.word	0x0800397d
 80030d0:	004005ff 	.word	0x004005ff

080030d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_SD_IRQHandler+0x2e>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 ffdc 	bl	80040b8 <SD_Read_IT>
 8003100:	e155      	b.n	80033ae <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 808f 	beq.w	8003230 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800312a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800312e:	63d3      	str	r3, [r2, #60]	; 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d039      	beq.n	80031be <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d104      	bne.n	800315e <HAL_SD_IRQHandler+0x8a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d011      	beq.n	8003182 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f001 f9d6 	bl	8004514 <SDMMC_CmdStopTransfer>
 8003168:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d008      	beq.n	8003182 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f91f 	bl	80033c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f240 523a 	movw	r2, #1338	; 0x53a
 800318a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d104      	bne.n	80031ae <HAL_SD_IRQHandler+0xda>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f001 fdbc 	bl	8004d2c <HAL_SD_RxCpltCallback>
 80031b4:	e0fb      	b.n	80033ae <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f001 fdae 	bl	8004d18 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80031bc:	e0f7      	b.n	80033ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80f2 	beq.w	80033ae <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d011      	beq.n	80031f8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 f99b 	bl	8004514 <SDMMC_CmdStopTransfer>
 80031de:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f8e4 	bl	80033c0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 80d5 	bne.w	80033ae <HAL_SD_IRQHandler+0x2da>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 80cf 	bne.w	80033ae <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0208 	bic.w	r2, r2, #8
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f001 fd75 	bl	8004d18 <HAL_SD_TxCpltCallback>
}
 800322e:	e0be      	b.n	80033ae <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_SD_IRQHandler+0x17c>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 ff86 	bl	800415a <SD_Write_IT>
 800324e:	e0ae      	b.n	80033ae <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a7 	beq.w	80033ae <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	f043 0202 	orr.w	r2, r3, #2
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328c:	f043 0208 	orr.w	r2, r3, #8
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d005      	beq.n	80032ae <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	f043 0220 	orr.w	r2, r3, #32
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	f043 0210 	orr.w	r2, r3, #16
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80032e0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 f914 	bl	8004514 <SDMMC_CmdStopTransfer>
 80032ec:	4602      	mov	r2, r0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f855 	bl	80033c0 <HAL_SD_ErrorCallback>
}
 8003316:	e04a      	b.n	80033ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331e:	2b00      	cmp	r3, #0
 8003320:	d045      	beq.n	80033ae <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0310 	and.w	r3, r3, #16
 8003328:	2b00      	cmp	r3, #0
 800332a:	d104      	bne.n	8003336 <HAL_SD_IRQHandler+0x262>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0320 	and.w	r3, r3, #32
 8003332:	2b00      	cmp	r3, #0
 8003334:	d011      	beq.n	800335a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <HAL_SD_IRQHandler+0x2e4>)
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd feb6 	bl	80010b4 <HAL_DMA_Abort_IT>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d02f      	beq.n	80033ae <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fb5e 	bl	8003a14 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003358:	e029      	b.n	80033ae <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <HAL_SD_IRQHandler+0x29a>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d011      	beq.n	8003392 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a12      	ldr	r2, [pc, #72]	; (80033bc <HAL_SD_IRQHandler+0x2e8>)
 8003374:	639a      	str	r2, [r3, #56]	; 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd fe9a 	bl	80010b4 <HAL_DMA_Abort_IT>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d013      	beq.n	80033ae <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fb79 	bl	8003a82 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003390:	e00d      	b.n	80033ae <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f001 fcac 	bl	8004d04 <HAL_SD_AbortCallback>
}
 80033ac:	e7ff      	b.n	80033ae <HAL_SD_IRQHandler+0x2da>
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	08003a15 	.word	0x08003a15
 80033bc:	08003a83 	.word	0x08003a83

080033c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e2:	0f9b      	lsrs	r3, r3, #30
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ee:	0e9b      	lsrs	r3, r3, #26
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003400:	0e1b      	lsrs	r3, r3, #24
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	b2da      	uxtb	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003412:	0c1b      	lsrs	r3, r3, #16
 8003414:	b2da      	uxtb	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	b2da      	uxtb	r2, r3
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342a:	b2da      	uxtb	r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003434:	0d1b      	lsrs	r3, r3, #20
 8003436:	b29a      	uxth	r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	b2da      	uxtb	r2, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003452:	0bdb      	lsrs	r3, r3, #15
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003464:	0b9b      	lsrs	r3, r3, #14
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	b2da      	uxtb	r2, r3
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003476:	0b5b      	lsrs	r3, r3, #13
 8003478:	b2db      	uxtb	r3, r3
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003488:	0b1b      	lsrs	r3, r3, #12
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2200      	movs	r2, #0
 800349a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d163      	bne.n	800356c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034a8:	009a      	lsls	r2, r3, #2
 80034aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034ae:	4013      	ands	r3, r2
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034b4:	0f92      	lsrs	r2, r2, #30
 80034b6:	431a      	orrs	r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034c0:	0edb      	lsrs	r3, r3, #27
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d2:	0e1b      	lsrs	r3, r3, #24
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e4:	0d5b      	lsrs	r3, r3, #21
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f6:	0c9b      	lsrs	r3, r3, #18
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003508:	0bdb      	lsrs	r3, r3, #15
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	b2da      	uxtb	r2, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	7e1b      	ldrb	r3, [r3, #24]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	3302      	adds	r3, #2
 800352c:	2201      	movs	r2, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003536:	fb02 f203 	mul.w	r2, r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	7a1b      	ldrb	r3, [r3, #8]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	2201      	movs	r2, #1
 800354a:	409a      	lsls	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003558:	0a52      	lsrs	r2, r2, #9
 800355a:	fb02 f203 	mul.w	r2, r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003568:	661a      	str	r2, [r3, #96]	; 0x60
 800356a:	e031      	b.n	80035d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	2b01      	cmp	r3, #1
 8003572:	d11d      	bne.n	80035b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	431a      	orrs	r2, r3
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	3301      	adds	r3, #1
 8003590:	029a      	lsls	r2, r3, #10
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	661a      	str	r2, [r3, #96]	; 0x60
 80035ae:	e00f      	b.n	80035d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a58      	ldr	r2, [pc, #352]	; (8003718 <HAL_SD_GetCardCSD+0x344>)
 80035b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e09d      	b.n	800370c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d4:	0b9b      	lsrs	r3, r3, #14
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e6:	09db      	lsrs	r3, r3, #7
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	0fdb      	lsrs	r3, r3, #31
 800360a:	b2da      	uxtb	r2, r3
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	0f5b      	lsrs	r3, r3, #29
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	b2da      	uxtb	r2, r3
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	0e9b      	lsrs	r3, r3, #26
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	b2da      	uxtb	r2, r3
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	0d9b      	lsrs	r3, r3, #22
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	b2da      	uxtb	r2, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	0d5b      	lsrs	r3, r3, #21
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	0c1b      	lsrs	r3, r3, #16
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	0bdb      	lsrs	r3, r3, #15
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	b2da      	uxtb	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	0b9b      	lsrs	r3, r3, #14
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	0b5b      	lsrs	r3, r3, #13
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	0b1b      	lsrs	r3, r3, #12
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	0a9b      	lsrs	r3, r3, #10
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	004005ff 	.word	0x004005ff

0800371c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003774:	b5b0      	push	{r4, r5, r7, lr}
 8003776:	b08e      	sub	sp, #56	; 0x38
 8003778:	af04      	add	r7, sp, #16
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2203      	movs	r2, #3
 8003788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	2b03      	cmp	r3, #3
 8003792:	d02e      	beq.n	80037f2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	d106      	bne.n	80037aa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
 80037a8:	e029      	b.n	80037fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b0:	d10a      	bne.n	80037c8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fb20 	bl	8003df8 <SD_WideBus_Enable>
 80037b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
 80037c6:	e01a      	b.n	80037fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fb5d 	bl	8003e8e <SD_WideBus_Disable>
 80037d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
 80037e2:	e00c      	b.n	80037fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38
 80037f0:	e005      	b.n	80037fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a24      	ldr	r2, [pc, #144]	; (800389c <HAL_SD_ConfigWideBusOperation+0x128>)
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003814:	e01f      	b.n	8003856 <HAL_SD_ConfigWideBusOperation+0xe2>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	61bb      	str	r3, [r7, #24]
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
    }
#else
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	61fb      	str	r3, [r7, #28]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    (void)SDMMC_Init(hsd->Instance, Init);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681d      	ldr	r5, [r3, #0]
 800383c:	466c      	mov	r4, sp
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800384a:	f107 0308 	add.w	r3, r7, #8
 800384e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003850:	4628      	mov	r0, r5
 8003852:	f000 fcd7 	bl	8004204 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fdae 	bl	80043c0 <SDMMC_CmdBlockLength>
 8003864:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00c      	beq.n	8003886 <HAL_SD_ConfigWideBusOperation+0x112>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <HAL_SD_ConfigWideBusOperation+0x128>)
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800388e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003892:	4618      	mov	r0, r3
 8003894:	3728      	adds	r7, #40	; 0x28
 8003896:	46bd      	mov	sp, r7
 8003898:	bdb0      	pop	{r4, r5, r7, pc}
 800389a:	bf00      	nop
 800389c:	004005ff 	.word	0x004005ff

080038a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80038ac:	f107 030c 	add.w	r3, r7, #12
 80038b0:	4619      	mov	r1, r3
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa78 	bl	8003da8 <SD_SendStatus>
 80038b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	0a5b      	lsrs	r3, r3, #9
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80038d6:	693b      	ldr	r3, [r7, #16]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80038fe:	bf00      	nop
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	2b82      	cmp	r3, #130	; 0x82
 800391e:	d111      	bne.n	8003944 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fdf5 	bl	8004514 <SDMMC_CmdStopTransfer>
 800392a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff fd3e 	bl	80033c0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0208 	bic.w	r2, r2, #8
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f240 523a 	movw	r2, #1338	; 0x53a
 800395c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f001 f9dd 	bl	8004d2c <HAL_SD_RxCpltCallback>
#endif
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003990:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d002      	beq.n	80039a6 <SD_DMAError+0x2a>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d12d      	bne.n	8003a02 <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <SD_DMAError+0x94>)
 80039ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80039bc:	63da      	str	r2, [r3, #60]	; 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f7ff ff68 	bl	80038a0 <HAL_SD_GetCardState>
 80039d0:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b06      	cmp	r3, #6
 80039d6:	d002      	beq.n	80039de <SD_DMAError+0x62>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b05      	cmp	r3, #5
 80039dc:	d10a      	bne.n	80039f4 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fd96 	bl	8004514 <SDMMC_CmdStopTransfer>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	431a      	orrs	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f7ff fcdc 	bl	80033c0 <HAL_SD_ErrorCallback>
#endif
}
 8003a08:	bf00      	nop
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	004005ff 	.word	0x004005ff

08003a14 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff ff37 	bl	80038a0 <HAL_SD_GetCardState>
 8003a32:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b06      	cmp	r3, #6
 8003a46:	d002      	beq.n	8003a4e <SD_DMATxAbort+0x3a>
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	d10a      	bne.n	8003a64 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fd5e 	bl	8004514 <SDMMC_CmdStopTransfer>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d103      	bne.n	8003a74 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f001 f949 	bl	8004d04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003a72:	e002      	b.n	8003a7a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff fca3 	bl	80033c0 <HAL_SD_ErrorCallback>
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b084      	sub	sp, #16
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a98:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff ff00 	bl	80038a0 <HAL_SD_GetCardState>
 8003aa0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d002      	beq.n	8003abc <SD_DMARxAbort+0x3a>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d10a      	bne.n	8003ad2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 fd27 	bl	8004514 <SDMMC_CmdStopTransfer>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f001 f912 	bl	8004d04 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003ae0:	e002      	b.n	8003ae8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff fc6c 	bl	80033c0 <HAL_SD_ErrorCallback>
}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003af0:	b5b0      	push	{r4, r5, r7, lr}
 8003af2:	b094      	sub	sp, #80	; 0x50
 8003af4:	af04      	add	r7, sp, #16
 8003af6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003af8:	2301      	movs	r3, #1
 8003afa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fbd9 	bl	80042b8 <SDMMC_GetPowerState>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d102      	bne.n	8003b12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003b0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b10:	e0b7      	b.n	8003c82 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d02f      	beq.n	8003b7a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fe02 	bl	8004728 <SDMMC_CmdSendCID>
 8003b24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <SD_InitCard+0x40>
    {
      return errorstate;
 8003b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2e:	e0a8      	b.n	8003c82 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fc03 	bl	8004342 <SDMMC_GetResponse>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2104      	movs	r1, #4
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fbfa 	bl	8004342 <SDMMC_GetResponse>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2108      	movs	r1, #8
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fbf1 	bl	8004342 <SDMMC_GetResponse>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	210c      	movs	r1, #12
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 fbe8 	bl	8004342 <SDMMC_GetResponse>
 8003b72:	4602      	mov	r2, r0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d00d      	beq.n	8003b9e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f107 020e 	add.w	r2, r7, #14
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fe08 	bl	80047a2 <SDMMC_CmdSetRelAdd>
 8003b92:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <SD_InitCard+0xae>
    {
      return errorstate;
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9c:	e071      	b.n	8003c82 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d036      	beq.n	8003c14 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003ba6:	89fb      	ldrh	r3, [r7, #14]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb6:	041b      	lsls	r3, r3, #16
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 fdd2 	bl	8004764 <SDMMC_CmdSendCSD>
 8003bc0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <SD_InitCard+0xdc>
    {
      return errorstate;
 8003bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bca:	e05a      	b.n	8003c82 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fbb5 	bl	8004342 <SDMMC_GetResponse>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2104      	movs	r1, #4
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fbac 	bl	8004342 <SDMMC_GetResponse>
 8003bea:	4602      	mov	r2, r0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2108      	movs	r1, #8
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 fba3 	bl	8004342 <SDMMC_GetResponse>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	210c      	movs	r1, #12
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fb9a 	bl	8004342 <SDMMC_GetResponse>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2104      	movs	r1, #4
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fb91 	bl	8004342 <SDMMC_GetResponse>
 8003c20:	4603      	mov	r3, r0
 8003c22:	0d1a      	lsrs	r2, r3, #20
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003c28:	f107 0310 	add.w	r3, r7, #16
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7ff fbd0 	bl	80033d4 <HAL_SD_GetCardCSD>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c3e:	e020      	b.n	8003c82 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	041b      	lsls	r3, r3, #16
 8003c4a:	f04f 0400 	mov.w	r4, #0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	4623      	mov	r3, r4
 8003c52:	4608      	mov	r0, r1
 8003c54:	f000 fc80 	bl	8004558 <SDMMC_CmdSelDesel>
 8003c58:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <SD_InitCard+0x174>
  {
    return errorstate;
 8003c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c62:	e00e      	b.n	8003c82 <SD_InitCard+0x192>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681d      	ldr	r5, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	466c      	mov	r4, sp
 8003c6c:	f103 0210 	add.w	r2, r3, #16
 8003c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c76:	3304      	adds	r3, #4
 8003c78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f000 fac2 	bl	8004204 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3740      	adds	r7, #64	; 0x40
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003c8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fc7a 	bl	800459e <SDMMC_CmdGoIdleState>
 8003caa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	e072      	b.n	8003d9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fc8d 	bl	80045da <SDMMC_CmdOperCond>
 8003cc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fc63 	bl	800459e <SDMMC_CmdGoIdleState>
 8003cd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <SD_PowerON+0x5e>
    {
      return errorstate;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	e05b      	b.n	8003d9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d137      	bne.n	8003d62 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fc8d 	bl	8004618 <SDMMC_CmdAppCommand>
 8003cfe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d02d      	beq.n	8003d62 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d0a:	e047      	b.n	8003d9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2100      	movs	r1, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fc80 	bl	8004618 <SDMMC_CmdAppCommand>
 8003d18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <SD_PowerON+0x98>
    {
      return errorstate;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	e03b      	b.n	8003d9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	491e      	ldr	r1, [pc, #120]	; (8003da4 <SD_PowerON+0x118>)
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fc96 	bl	800465c <SDMMC_CmdAppOperCommand>
 8003d30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d3c:	e02e      	b.n	8003d9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fafc 	bl	8004342 <SDMMC_GetResponse>
 8003d4a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	0fdb      	lsrs	r3, r3, #31
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <SD_PowerON+0xcc>
 8003d54:	2301      	movs	r3, #1
 8003d56:	e000      	b.n	8003d5a <SD_PowerON+0xce>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]

    count++;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d802      	bhi.n	8003d72 <SD_PowerON+0xe6>
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0cc      	beq.n	8003d0c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d902      	bls.n	8003d82 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003d7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d80:	e00c      	b.n	8003d9c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
 8003d92:	e002      	b.n	8003d9a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	c1100000 	.word	0xc1100000

08003da8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003db8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dbc:	e018      	b.n	8003df0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	041b      	lsls	r3, r3, #16
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f000 fd0a 	bl	80047e4 <SDMMC_CmdSendStatus>
 8003dd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <SD_SendStatus+0x34>
  {
    return errorstate;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	e009      	b.n	8003df0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 faad 	bl	8004342 <SDMMC_GetResponse>
 8003de8:	4602      	mov	r2, r0
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fa97 	bl	8004342 <SDMMC_GetResponse>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e1e:	d102      	bne.n	8003e26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e24:	e02f      	b.n	8003e86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f879 	bl	8003f24 <SD_FindSCR>
 8003e32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	e023      	b.n	8003e86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01c      	beq.n	8003e82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f000 fbdf 	bl	8004618 <SDMMC_CmdAppCommand>
 8003e5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	e00f      	b.n	8003e86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fc18 	bl	80046a2 <SDMMC_CmdBusWidth>
 8003e72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	e003      	b.n	8003e86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e001      	b.n	8003e86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003e82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b086      	sub	sp, #24
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fa4c 	bl	8004342 <SDMMC_GetResponse>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb4:	d102      	bne.n	8003ebc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eba:	e02f      	b.n	8003f1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f82e 	bl	8003f24 <SD_FindSCR>
 8003ec8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	e023      	b.n	8003f1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01c      	beq.n	8003f18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	4619      	mov	r1, r3
 8003eea:	4610      	mov	r0, r2
 8003eec:	f000 fb94 	bl	8004618 <SDMMC_CmdAppCommand>
 8003ef0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	e00f      	b.n	8003f1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fbcd 	bl	80046a2 <SDMMC_CmdBusWidth>
 8003f08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	e003      	b.n	8003f1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e001      	b.n	8003f1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003f24:	b590      	push	{r4, r7, lr}
 8003f26:	b08f      	sub	sp, #60	; 0x3c
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f2e:	f7fc fd99 	bl	8000a64 <HAL_GetTick>
 8003f32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2108      	movs	r1, #8
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fa38 	bl	80043c0 <SDMMC_CmdBlockLength>
 8003f50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <SD_FindSCR+0x38>
  {
    return errorstate;
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	e0a9      	b.n	80040b0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 fb55 	bl	8004618 <SDMMC_CmdAppCommand>
 8003f6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	e09a      	b.n	80040b0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003f80:	2308      	movs	r3, #8
 8003f82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8003f84:	2330      	movs	r3, #48	; 0x30
 8003f86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003f90:	2301      	movs	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f107 0210 	add.w	r2, r7, #16
 8003f9c:	4611      	mov	r1, r2
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 f9e2 	bl	8004368 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fb9c 	bl	80046e6 <SDMMC_CmdSendSCR>
 8003fae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d022      	beq.n	8003ffc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	e07a      	b.n	80040b0 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6819      	ldr	r1, [r3, #0]
 8003fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	f107 0208 	add.w	r2, r7, #8
 8003fd4:	18d4      	adds	r4, r2, r3
 8003fd6:	4608      	mov	r0, r1
 8003fd8:	f000 f941 	bl	800425e <SDMMC_ReadFIFO>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	6023      	str	r3, [r4, #0]
      index++;
 8003fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003fe6:	f7fc fd3d 	bl	8000a64 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ff4:	d102      	bne.n	8003ffc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003ff6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ffa:	e059      	b.n	80040b0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004002:	f240 432a 	movw	r3, #1066	; 0x42a
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0d6      	beq.n	8003fba <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2208      	movs	r2, #8
 8004020:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004022:	2308      	movs	r3, #8
 8004024:	e044      	b.n	80040b0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2202      	movs	r2, #2
 800403a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800403c:	2302      	movs	r3, #2
 800403e:	e037      	b.n	80040b0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2220      	movs	r2, #32
 8004054:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004056:	2320      	movs	r3, #32
 8004058:	e02a      	b.n	80040b0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004062:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	061a      	lsls	r2, r3, #24
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004070:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800407a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	0e1b      	lsrs	r3, r3, #24
 8004080:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004084:	601a      	str	r2, [r3, #0]
    scr++;
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	3304      	adds	r3, #4
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	061a      	lsls	r2, r3, #24
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004098:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	0e1b      	lsrs	r3, r3, #24
 80040a8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	373c      	adds	r7, #60	; 0x3c
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd90      	pop	{r4, r7, pc}

080040b8 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d03f      	beq.n	8004152 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e033      	b.n	8004140 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f8be 	bl	800425e <SDMMC_ReadFIFO>
 80040e2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3301      	adds	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3b01      	subs	r3, #1
 800410c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	0c1b      	lsrs	r3, r3, #16
 8004112:	b2da      	uxtb	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	3b01      	subs	r3, #1
 8004122:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	0e1b      	lsrs	r3, r3, #24
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3b01      	subs	r3, #1
 8004138:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	3301      	adds	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b07      	cmp	r3, #7
 8004144:	d9c8      	bls.n	80040d8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004152:	bf00      	nop
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d043      	beq.n	80041fc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e037      	b.n	80041ea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3301      	adds	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	3b01      	subs	r3, #1
 800418a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	021a      	lsls	r2, r3, #8
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3301      	adds	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	041a      	lsls	r2, r3, #16
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	061a      	lsls	r2, r3, #24
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3b01      	subs	r3, #1
 80041d2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f107 0208 	add.w	r2, r7, #8
 80041dc:	4611      	mov	r1, r2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f84a 	bl	8004278 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	3301      	adds	r3, #1
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b07      	cmp	r3, #7
 80041ee:	d9c4      	bls.n	800417a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80041fc:	bf00      	nop
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8004204:	b084      	sub	sp, #16
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	f107 001c 	add.w	r0, r7, #28
 8004212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4313      	orrs	r3, r2
 8004220:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8004222:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 8004226:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800422a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800422e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004232:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004242:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	431a      	orrs	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	b004      	add	sp, #16
 800425c:	4770      	bx	lr

0800425e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2203      	movs	r2, #3
 80042a6:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80042a8:	2002      	movs	r0, #2
 80042aa:	f7fc fbe7 	bl	8000a7c <HAL_Delay>

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0303 	and.w	r3, r3, #3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80042f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80042f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80042fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800430e:	f023 030f 	bic.w	r3, r3, #15
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	b2db      	uxtb	r3, r3
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3314      	adds	r3, #20
 8004350:	461a      	mov	r2, r3
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	4413      	add	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800438e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004394:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800439a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0

}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80043ce:	2310      	movs	r3, #16
 80043d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80043d2:	2340      	movs	r3, #64	; 0x40
 80043d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80043da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80043e0:	f107 0308 	add.w	r3, r7, #8
 80043e4:	4619      	mov	r1, r3
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff ff74 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80043ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f0:	2110      	movs	r1, #16
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa40 	bl	8004878 <SDMMC_GetCmdResp1>
 80043f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043fa:	69fb      	ldr	r3, [r7, #28]
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3720      	adds	r7, #32
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004412:	2311      	movs	r3, #17
 8004414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004416:	2340      	movs	r3, #64	; 0x40
 8004418:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800441e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004422:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004424:	f107 0308 	add.w	r3, r7, #8
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ff52 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004430:	f241 3288 	movw	r2, #5000	; 0x1388
 8004434:	2111      	movs	r1, #17
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa1e 	bl	8004878 <SDMMC_GetCmdResp1>
 800443c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800443e:	69fb      	ldr	r3, [r7, #28]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3720      	adds	r7, #32
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004456:	2312      	movs	r3, #18
 8004458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800445a:	2340      	movs	r3, #64	; 0x40
 800445c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004466:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004468:	f107 0308 	add.w	r3, r7, #8
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ff30 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004474:	f241 3288 	movw	r2, #5000	; 0x1388
 8004478:	2112      	movs	r1, #18
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f9fc 	bl	8004878 <SDMMC_GetCmdResp1>
 8004480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004482:	69fb      	ldr	r3, [r7, #28]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800449a:	2318      	movs	r3, #24
 800449c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800449e:	2340      	movs	r3, #64	; 0x40
 80044a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044ac:	f107 0308 	add.w	r3, r7, #8
 80044b0:	4619      	mov	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff ff0e 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80044b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044bc:	2118      	movs	r1, #24
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f9da 	bl	8004878 <SDMMC_GetCmdResp1>
 80044c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80044c6:	69fb      	ldr	r3, [r7, #28]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3720      	adds	r7, #32
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80044de:	2319      	movs	r3, #25
 80044e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80044e2:	2340      	movs	r3, #64	; 0x40
 80044e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80044ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80044f0:	f107 0308 	add.w	r3, r7, #8
 80044f4:	4619      	mov	r1, r3
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff feec 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80044fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004500:	2119      	movs	r1, #25
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f9b8 	bl	8004878 <SDMMC_GetCmdResp1>
 8004508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800450a:	69fb      	ldr	r3, [r7, #28]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004520:	230c      	movs	r3, #12
 8004522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004524:	2340      	movs	r3, #64	; 0x40
 8004526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800452c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004530:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	4619      	mov	r1, r3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fecb 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800453e:	4a05      	ldr	r2, [pc, #20]	; (8004554 <SDMMC_CmdStopTransfer+0x40>)
 8004540:	210c      	movs	r1, #12
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f998 	bl	8004878 <SDMMC_GetCmdResp1>
 8004548:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 800454a:	69fb      	ldr	r3, [r7, #28]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	05f5e100 	.word	0x05f5e100

08004558 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004568:	2307      	movs	r3, #7
 800456a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800456c:	2340      	movs	r3, #64	; 0x40
 800456e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004578:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800457a:	f107 0310 	add.w	r3, r7, #16
 800457e:	4619      	mov	r1, r3
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff fea7 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004586:	f241 3288 	movw	r2, #5000	; 0x1388
 800458a:	2107      	movs	r1, #7
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 f973 	bl	8004878 <SDMMC_GetCmdResp1>
 8004592:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004596:	4618      	mov	r0, r3
 8004598:	3728      	adds	r7, #40	; 0x28
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b088      	sub	sp, #32
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80045b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80045bc:	f107 0308 	add.w	r3, r7, #8
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff fe86 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f92d 	bl	8004828 <SDMMC_GetCmdError>
 80045ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045d0:	69fb      	ldr	r3, [r7, #28]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b088      	sub	sp, #32
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80045e2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80045e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80045e8:	2308      	movs	r3, #8
 80045ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80045ec:	2340      	movs	r3, #64	; 0x40
 80045ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80045f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80045fa:	f107 0308 	add.w	r3, r7, #8
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fe67 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fb16 	bl	8004c38 <SDMMC_GetCmdResp7>
 800460c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800460e:	69fb      	ldr	r3, [r7, #28]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004626:	2337      	movs	r3, #55	; 0x37
 8004628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800462a:	2340      	movs	r3, #64	; 0x40
 800462c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004636:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004638:	f107 0308 	add.w	r3, r7, #8
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff fe48 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004644:	f241 3288 	movw	r2, #5000	; 0x1388
 8004648:	2137      	movs	r1, #55	; 0x37
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f914 	bl	8004878 <SDMMC_GetCmdResp1>
 8004650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004652:	69fb      	ldr	r3, [r7, #28]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800466c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004670:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004672:	2329      	movs	r3, #41	; 0x29
 8004674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004676:	2340      	movs	r3, #64	; 0x40
 8004678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800467e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004684:	f107 0308 	add.w	r3, r7, #8
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fe22 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa23 	bl	8004adc <SDMMC_GetCmdResp3>
 8004696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004698:	69fb      	ldr	r3, [r7, #28]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b088      	sub	sp, #32
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80046b0:	2306      	movs	r3, #6
 80046b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80046b4:	2340      	movs	r3, #64	; 0x40
 80046b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046c2:	f107 0308 	add.w	r3, r7, #8
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff fe03 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	2106      	movs	r1, #6
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f8cf 	bl	8004878 <SDMMC_GetCmdResp1>
 80046da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046dc:	69fb      	ldr	r3, [r7, #28]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b088      	sub	sp, #32
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80046f2:	2333      	movs	r3, #51	; 0x33
 80046f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80046f6:	2340      	movs	r3, #64	; 0x40
 80046f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004702:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004704:	f107 0308 	add.w	r3, r7, #8
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff fde2 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	2133      	movs	r1, #51	; 0x33
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f8ae 	bl	8004878 <SDMMC_GetCmdResp1>
 800471c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800471e:	69fb      	ldr	r3, [r7, #28]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004734:	2302      	movs	r3, #2
 8004736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004738:	23c0      	movs	r3, #192	; 0xc0
 800473a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004744:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004746:	f107 0308 	add.w	r3, r7, #8
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff fdc1 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f97c 	bl	8004a50 <SDMMC_GetCmdResp2>
 8004758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800475a:	69fb      	ldr	r3, [r7, #28]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004772:	2309      	movs	r3, #9
 8004774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004776:	23c0      	movs	r3, #192	; 0xc0
 8004778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800477e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004782:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7ff fda2 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f95d 	bl	8004a50 <SDMMC_GetCmdResp2>
 8004796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004798:	69fb      	ldr	r3, [r7, #28]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b088      	sub	sp, #32
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80047b0:	2303      	movs	r3, #3
 80047b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80047b4:	2340      	movs	r3, #64	; 0x40
 80047b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80047c2:	f107 0308 	add.w	r3, r7, #8
 80047c6:	4619      	mov	r1, r3
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fd83 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	2103      	movs	r1, #3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f9bc 	bl	8004b50 <SDMMC_GetCmdResp6>
 80047d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047da:	69fb      	ldr	r3, [r7, #28]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3720      	adds	r7, #32
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80047f2:	230d      	movs	r3, #13
 80047f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80047f6:	2340      	movs	r3, #64	; 0x40
 80047f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80047fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004802:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004804:	f107 0308 	add.w	r3, r7, #8
 8004808:	4619      	mov	r1, r3
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff fd62 	bl	80042d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	210d      	movs	r1, #13
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f82e 	bl	8004878 <SDMMC_GetCmdResp1>
 800481c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800481e:	69fb      	ldr	r3, [r7, #28]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8004828:	b490      	push	{r4, r7}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <SDMMC_GetCmdError+0x48>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a0f      	ldr	r2, [pc, #60]	; (8004874 <SDMMC_GetCmdError+0x4c>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	0a5b      	lsrs	r3, r3, #9
 800483c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004840:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004844:	4623      	mov	r3, r4
 8004846:	1e5c      	subs	r4, r3, #1
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800484c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004850:	e009      	b.n	8004866 <SDMMC_GetCmdError+0x3e>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f2      	beq.n	8004844 <SDMMC_GetCmdError+0x1c>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	22c5      	movs	r2, #197	; 0xc5
 8004862:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bc90      	pop	{r4, r7}
 800486e:	4770      	bx	lr
 8004870:	20000070 	.word	0x20000070
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004878:	b590      	push	{r4, r7, lr}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	460b      	mov	r3, r1
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004886:	4b6f      	ldr	r3, [pc, #444]	; (8004a44 <SDMMC_GetCmdResp1+0x1cc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a6f      	ldr	r2, [pc, #444]	; (8004a48 <SDMMC_GetCmdResp1+0x1d0>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	0a5b      	lsrs	r3, r3, #9
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004898:	4623      	mov	r3, r4
 800489a:	1e5c      	subs	r4, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d102      	bne.n	80048a6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048a4:	e0c9      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	617b      	str	r3, [r7, #20]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <SDMMC_GetCmdResp1+0x20>
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1eb      	bne.n	8004898 <SDMMC_GetCmdResp1+0x20>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2204      	movs	r2, #4
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80048d2:	2304      	movs	r3, #4
 80048d4:	e0b1      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0a6      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	22c5      	movs	r2, #197	; 0xc5
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7ff fd18 	bl	8004328 <SDMMC_GetCommandResponse>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	7afb      	ldrb	r3, [r7, #11]
 80048fe:	4293      	cmp	r3, r2
 8004900:	d001      	beq.n	8004906 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004902:	2301      	movs	r3, #1
 8004904:	e099      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004906:	2100      	movs	r1, #0
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7ff fd1a 	bl	8004342 <SDMMC_GetResponse>
 800490e:	6138      	str	r0, [r7, #16]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4b4e      	ldr	r3, [pc, #312]	; (8004a4c <SDMMC_GetCmdResp1+0x1d4>)
 8004914:	4013      	ands	r3, r2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800491a:	2300      	movs	r3, #0
 800491c:	e08d      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	da02      	bge.n	800492a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004928:	e087      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004934:	2340      	movs	r3, #64	; 0x40
 8004936:	e080      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	e079      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004954:	e071      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004964:	e069      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004970:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004974:	e061      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004980:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004984:	e059      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004994:	e051      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80049a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049a4:	e049      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80049b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049b4:	e041      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80049c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c4:	e039      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80049d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d4:	e031      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80049e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80049e4:	e029      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80049f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80049f4:	e021      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004a00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004a04:	e019      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004a10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a14:	e011      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004a20:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a24:	e009      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004a30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004a34:	e001      	b.n	8004a3a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	371c      	adds	r7, #28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd90      	pop	{r4, r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000070 	.word	0x20000070
 8004a48:	10624dd3 	.word	0x10624dd3
 8004a4c:	fdffe008 	.word	0xfdffe008

08004a50 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004a50:	b490      	push	{r4, r7}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a58:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <SDMMC_GetCmdResp2+0x84>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ad8 <SDMMC_GetCmdResp2+0x88>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	0a5b      	lsrs	r3, r3, #9
 8004a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a68:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004a6c:	4623      	mov	r3, r4
 8004a6e:	1e5c      	subs	r4, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d102      	bne.n	8004a7a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a78:	e026      	b.n	8004ac8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <SDMMC_GetCmdResp2+0x1c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1eb      	bne.n	8004a6c <SDMMC_GetCmdResp2+0x1c>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e00e      	b.n	8004ac8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d004      	beq.n	8004ac0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e003      	b.n	8004ac8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	22c5      	movs	r2, #197	; 0xc5
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc90      	pop	{r4, r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000070 	.word	0x20000070
 8004ad8:	10624dd3 	.word	0x10624dd3

08004adc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8004adc:	b490      	push	{r4, r7}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ae4:	4b18      	ldr	r3, [pc, #96]	; (8004b48 <SDMMC_GetCmdResp3+0x6c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <SDMMC_GetCmdResp3+0x70>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	0a5b      	lsrs	r3, r3, #9
 8004af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af4:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004af8:	4623      	mov	r3, r4
 8004afa:	1e5c      	subs	r4, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b04:	e01b      	b.n	8004b3e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0f0      	beq.n	8004af8 <SDMMC_GetCmdResp3+0x1c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1eb      	bne.n	8004af8 <SDMMC_GetCmdResp3+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2204      	movs	r2, #4
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b32:	2304      	movs	r3, #4
 8004b34:	e003      	b.n	8004b3e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	22c5      	movs	r2, #197	; 0xc5
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc90      	pop	{r4, r7}
 8004b46:	4770      	bx	lr
 8004b48:	20000070 	.word	0x20000070
 8004b4c:	10624dd3 	.word	0x10624dd3

08004b50 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b5e:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <SDMMC_GetCmdResp6+0xe0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a34      	ldr	r2, [pc, #208]	; (8004c34 <SDMMC_GetCmdResp6+0xe4>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	0a5b      	lsrs	r3, r3, #9
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004b72:	4623      	mov	r3, r4
 8004b74:	1e5c      	subs	r4, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b7e:	e052      	b.n	8004c26 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b84:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <SDMMC_GetCmdResp6+0x22>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1eb      	bne.n	8004b72 <SDMMC_GetCmdResp6+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2204      	movs	r2, #4
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004bac:	2304      	movs	r3, #4
 8004bae:	e03a      	b.n	8004c26 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d004      	beq.n	8004bc6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e02f      	b.n	8004c26 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7ff fbae 	bl	8004328 <SDMMC_GetCommandResponse>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	461a      	mov	r2, r3
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d001      	beq.n	8004bda <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e025      	b.n	8004c26 <SDMMC_GetCmdResp6+0xd6>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	22c5      	movs	r2, #197	; 0xc5
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004be0:	2100      	movs	r1, #0
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f7ff fbad 	bl	8004342 <SDMMC_GetResponse>
 8004be8:	6138      	str	r0, [r7, #16]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e011      	b.n	8004c26 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c10:	e009      	b.n	8004c26 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c20:	e001      	b.n	8004c26 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd90      	pop	{r4, r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000070 	.word	0x20000070
 8004c34:	10624dd3 	.word	0x10624dd3

08004c38 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8004c38:	b490      	push	{r4, r7}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c40:	4b21      	ldr	r3, [pc, #132]	; (8004cc8 <SDMMC_GetCmdResp7+0x90>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a21      	ldr	r2, [pc, #132]	; (8004ccc <SDMMC_GetCmdResp7+0x94>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	0a5b      	lsrs	r3, r3, #9
 8004c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c50:	fb02 f403 	mul.w	r4, r2, r3

  do
  {
    if (count-- == 0U)
 8004c54:	4623      	mov	r3, r4
 8004c56:	1e5c      	subs	r4, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c60:	e02c      	b.n	8004cbc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c66:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <SDMMC_GetCmdResp7+0x1c>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1eb      	bne.n	8004c54 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c8e:	2304      	movs	r3, #4
 8004c90:	e014      	b.n	8004cbc <SDMMC_GetCmdResp7+0x84>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e009      	b.n	8004cbc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2240      	movs	r2, #64	; 0x40
 8004cb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004cba:	2300      	movs	r3, #0

}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc90      	pop	{r4, r7}
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000070 	.word	0x20000070
 8004ccc:	10624dd3 	.word	0x10624dd3

08004cd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004cd4:	4904      	ldr	r1, [pc, #16]	; (8004ce8 <MX_FATFS_Init+0x18>)
 8004cd6:	4805      	ldr	r0, [pc, #20]	; (8004cec <MX_FATFS_Init+0x1c>)
 8004cd8:	f002 fe8c 	bl	80079f4 <FATFS_LinkDriver>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <MX_FATFS_Init+0x20>)
 8004ce2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004ce4:	bf00      	nop
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000240 	.word	0x20000240
 8004cec:	08007b08 	.word	0x08007b08
 8004cf0:	2000023c 	.word	0x2000023c

08004cf4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004cf8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8004d0c:	f7fb fac4 	bl	8000298 <BSP_SD_AbortCallback>
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8004d20:	f000 f9a0 	bl	8005064 <BSP_SD_WriteCpltCallback>
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8004d34:	f000 f9a2 	bl	800507c <BSP_SD_ReadCpltCallback>
}
 8004d38:	bf00      	nop
 8004d3a:	3708      	adds	r7, #8
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004d46:	2301      	movs	r3, #1
 8004d48:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8004d4a:	f000 f80b 	bl	8004d64 <BSP_PlatformIsDetected>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8004d54:	2300      	movs	r3, #0
 8004d56:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	b2db      	uxtb	r3, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8004d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d72:	4806      	ldr	r0, [pc, #24]	; (8004d8c <BSP_PlatformIsDetected+0x28>)
 8004d74:	f7fc fc66 	bl	8001644 <HAL_GPIO_ReadPin>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8004d82:	79fb      	ldrb	r3, [r7, #7]
}  
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	48000c00 	.word	0x48000c00

08004d90 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8004d98:	f7fb fe64 	bl	8000a64 <HAL_GetTick>
 8004d9c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8004d9e:	e006      	b.n	8004dae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004da0:	f7fb fa6a 	bl	8000278 <BSP_SD_GetCardState>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e009      	b.n	8004dc2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8004dae:	f7fb fe59 	bl	8000a64 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d8f0      	bhi.n	8004da0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8004dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <SD_CheckStatus+0x38>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004ddc:	f7fb fa4c 	bl	8000278 <BSP_SD_GetCardState>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d107      	bne.n	8004df6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004de6:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <SD_CheckStatus+0x38>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	4b04      	ldr	r3, [pc, #16]	; (8004e04 <SD_CheckStatus+0x38>)
 8004df4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004df6:	4b03      	ldr	r3, [pc, #12]	; (8004e04 <SD_CheckStatus+0x38>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	b2db      	uxtb	r3, r3
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	2000007c 	.word	0x2000007c

08004e08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004e12:	f7fb f9d9 	bl	80001c8 <BSP_SD_Init>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d107      	bne.n	8004e2c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ffd4 	bl	8004dcc <SD_CheckStatus>
 8004e24:	4603      	mov	r3, r0
 8004e26:	461a      	mov	r2, r3
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <SD_initialize+0x34>)
 8004e2a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <SD_initialize+0x34>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	b2db      	uxtb	r3, r3
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	2000007c 	.word	0x2000007c

08004e40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	4603      	mov	r3, r0
 8004e48:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff ffbd 	bl	8004dcc <SD_CheckStatus>
 8004e52:	4603      	mov	r3, r0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4603      	mov	r3, r0
 8004e6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004e70:	f247 5030 	movw	r0, #30000	; 0x7530
 8004e74:	f7ff ff8c 	bl	8004d90 <SD_CheckStatusWithTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	da01      	bge.n	8004e82 <SD_read+0x26>
  {
    return res;
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
 8004e80:	e03b      	b.n	8004efa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	68b8      	ldr	r0, [r7, #8]
 8004e88:	f7fb f9b6 	bl	80001f8 <BSP_SD_ReadBlocks_DMA>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d132      	bne.n	8004ef8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8004e92:	4b1c      	ldr	r3, [pc, #112]	; (8004f04 <SD_read+0xa8>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8004e98:	f7fb fde4 	bl	8000a64 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004e9e:	bf00      	nop
 8004ea0:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <SD_read+0xa8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d108      	bne.n	8004eba <SD_read+0x5e>
 8004ea8:	f7fb fddc 	bl	8000a64 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f247 522f 	movw	r2, #29999	; 0x752f
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d9f2      	bls.n	8004ea0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <SD_read+0xa8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	75fb      	strb	r3, [r7, #23]
 8004ec6:	e017      	b.n	8004ef8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <SD_read+0xa8>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004ece:	f7fb fdc9 	bl	8000a64 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ed4:	e007      	b.n	8004ee6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004ed6:	f7fb f9cf 	bl	8000278 <BSP_SD_GetCardState>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <SD_read+0x8a>
          {
            res = RES_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004ee4:	e008      	b.n	8004ef8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004ee6:	f7fb fdbd 	bl	8000a64 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f247 522f 	movw	r2, #29999	; 0x752f
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d9ee      	bls.n	8004ed6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20000130 	.word	0x20000130

08004f08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004f1c:	4b24      	ldr	r3, [pc, #144]	; (8004fb0 <SD_write+0xa8>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004f22:	f247 5030 	movw	r0, #30000	; 0x7530
 8004f26:	f7ff ff33 	bl	8004d90 <SD_CheckStatusWithTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	da01      	bge.n	8004f34 <SD_write+0x2c>
  {
    return res;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
 8004f32:	e038      	b.n	8004fa6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	68b8      	ldr	r0, [r7, #8]
 8004f3a:	f7fb f977 	bl	800022c <BSP_SD_WriteBlocks_DMA>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d12f      	bne.n	8004fa4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004f44:	f7fb fd8e 	bl	8000a64 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8004f4a:	bf00      	nop
 8004f4c:	4b18      	ldr	r3, [pc, #96]	; (8004fb0 <SD_write+0xa8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d108      	bne.n	8004f66 <SD_write+0x5e>
 8004f54:	f7fb fd86 	bl	8000a64 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f247 522f 	movw	r2, #29999	; 0x752f
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d9f2      	bls.n	8004f4c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <SD_write+0xa8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	75fb      	strb	r3, [r7, #23]
 8004f72:	e017      	b.n	8004fa4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8004f74:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <SD_write+0xa8>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004f7a:	f7fb fd73 	bl	8000a64 <HAL_GetTick>
 8004f7e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004f80:	e007      	b.n	8004f92 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8004f82:	f7fb f979 	bl	8000278 <BSP_SD_GetCardState>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <SD_write+0x8a>
          {
            res = RES_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f90:	e008      	b.n	8004fa4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004f92:	f7fb fd67 	bl	8000a64 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	f247 522f 	movw	r2, #29999	; 0x752f
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d9ee      	bls.n	8004f82 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	2000012c 	.word	0x2000012c

08004fb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08c      	sub	sp, #48	; 0x30
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	603a      	str	r2, [r7, #0]
 8004fbe:	71fb      	strb	r3, [r7, #7]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004fca:	4b25      	ldr	r3, [pc, #148]	; (8005060 <SD_ioctl+0xac>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <SD_ioctl+0x28>
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e03c      	b.n	8005056 <SD_ioctl+0xa2>

  switch (cmd)
 8004fdc:	79bb      	ldrb	r3, [r7, #6]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d834      	bhi.n	800504c <SD_ioctl+0x98>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <SD_ioctl+0x34>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08004ff9 	.word	0x08004ff9
 8004fec:	08005001 	.word	0x08005001
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005033 	.word	0x08005033
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004ffe:	e028      	b.n	8005052 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005000:	f107 030c 	add.w	r3, r7, #12
 8005004:	4618      	mov	r0, r3
 8005006:	f7fb f941 	bl	800028c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005016:	e01c      	b.n	8005052 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	4618      	mov	r0, r3
 800501e:	f7fb f935 	bl	800028c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	b29a      	uxth	r2, r3
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005030:	e00f      	b.n	8005052 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005032:	f107 030c 	add.w	r3, r7, #12
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb f928 	bl	800028c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	0a5a      	lsrs	r2, r3, #9
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800504a:	e002      	b.n	8005052 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800504c:	2304      	movs	r3, #4
 800504e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005056:	4618      	mov	r0, r3
 8005058:	3730      	adds	r7, #48	; 0x30
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	2000007c 	.word	0x2000007c

08005064 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <BSP_SD_WriteCpltCallback+0x14>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	2000012c 	.word	0x2000012c

0800507c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005080:	4b03      	ldr	r3, [pc, #12]	; (8005090 <BSP_SD_ReadCpltCallback+0x14>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
}
 8005086:	bf00      	nop
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	20000130 	.word	0x20000130

08005094 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	4a08      	ldr	r2, [pc, #32]	; (80050c4 <disk_status+0x30>)
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	79fa      	ldrb	r2, [r7, #7]
 80050ac:	4905      	ldr	r1, [pc, #20]	; (80050c4 <disk_status+0x30>)
 80050ae:	440a      	add	r2, r1
 80050b0:	7a12      	ldrb	r2, [r2, #8]
 80050b2:	4610      	mov	r0, r2
 80050b4:	4798      	blx	r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	2000015c 	.word	0x2000015c

080050c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	4a0d      	ldr	r2, [pc, #52]	; (8005110 <disk_initialize+0x48>)
 80050da:	5cd3      	ldrb	r3, [r2, r3]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d111      	bne.n	8005104 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	4a0b      	ldr	r2, [pc, #44]	; (8005110 <disk_initialize+0x48>)
 80050e4:	2101      	movs	r1, #1
 80050e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	4a09      	ldr	r2, [pc, #36]	; (8005110 <disk_initialize+0x48>)
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	79fa      	ldrb	r2, [r7, #7]
 80050f6:	4906      	ldr	r1, [pc, #24]	; (8005110 <disk_initialize+0x48>)
 80050f8:	440a      	add	r2, r1
 80050fa:	7a12      	ldrb	r2, [r2, #8]
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005104:	7bfb      	ldrb	r3, [r7, #15]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	2000015c 	.word	0x2000015c

08005114 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005114:	b590      	push	{r4, r7, lr}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4603      	mov	r3, r0
 8005122:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	4a0a      	ldr	r2, [pc, #40]	; (8005150 <disk_read+0x3c>)
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	689c      	ldr	r4, [r3, #8]
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	4a07      	ldr	r2, [pc, #28]	; (8005150 <disk_read+0x3c>)
 8005134:	4413      	add	r3, r2
 8005136:	7a18      	ldrb	r0, [r3, #8]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	47a0      	blx	r4
 8005140:	4603      	mov	r3, r0
 8005142:	75fb      	strb	r3, [r7, #23]
  return res;
 8005144:	7dfb      	ldrb	r3, [r7, #23]
}
 8005146:	4618      	mov	r0, r3
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd90      	pop	{r4, r7, pc}
 800514e:	bf00      	nop
 8005150:	2000015c 	.word	0x2000015c

08005154 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005154:	b590      	push	{r4, r7, lr}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
 8005160:	4603      	mov	r3, r0
 8005162:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005164:	7bfb      	ldrb	r3, [r7, #15]
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <disk_write+0x3c>)
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	68dc      	ldr	r4, [r3, #12]
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	4a07      	ldr	r2, [pc, #28]	; (8005190 <disk_write+0x3c>)
 8005174:	4413      	add	r3, r2
 8005176:	7a18      	ldrb	r0, [r3, #8]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	47a0      	blx	r4
 8005180:	4603      	mov	r3, r0
 8005182:	75fb      	strb	r3, [r7, #23]
  return res;
 8005184:	7dfb      	ldrb	r3, [r7, #23]
}
 8005186:	4618      	mov	r0, r3
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	bd90      	pop	{r4, r7, pc}
 800518e:	bf00      	nop
 8005190:	2000015c 	.word	0x2000015c

08005194 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	603a      	str	r2, [r7, #0]
 800519e:	71fb      	strb	r3, [r7, #7]
 80051a0:	460b      	mov	r3, r1
 80051a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <disk_ioctl+0x38>)
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	79fa      	ldrb	r2, [r7, #7]
 80051b2:	4906      	ldr	r1, [pc, #24]	; (80051cc <disk_ioctl+0x38>)
 80051b4:	440a      	add	r2, r1
 80051b6:	7a10      	ldrb	r0, [r2, #8]
 80051b8:	79b9      	ldrb	r1, [r7, #6]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	4798      	blx	r3
 80051be:	4603      	mov	r3, r0
 80051c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	2000015c 	.word	0x2000015c

080051d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3301      	adds	r3, #1
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80051e0:	89fb      	ldrh	r3, [r7, #14]
 80051e2:	021b      	lsls	r3, r3, #8
 80051e4:	b21a      	sxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	b21b      	sxth	r3, r3
 80051ec:	4313      	orrs	r3, r2
 80051ee:	b21b      	sxth	r3, r3
 80051f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80051f2:	89fb      	ldrh	r3, [r7, #14]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3303      	adds	r3, #3
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	3202      	adds	r2, #2
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	3201      	adds	r2, #1
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	4313      	orrs	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	7812      	ldrb	r2, [r2, #0]
 8005234:	4313      	orrs	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
	return rv;
 8005238:	68fb      	ldr	r3, [r7, #12]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	460b      	mov	r3, r1
 8005250:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	887a      	ldrh	r2, [r7, #2]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	887b      	ldrh	r3, [r7, #2]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	607a      	str	r2, [r7, #4]
 800526a:	887a      	ldrh	r2, [r7, #2]
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	0a1b      	lsrs	r3, r3, #8
 8005296:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	0a1b      	lsrs	r3, r3, #8
 80052ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	1c53      	adds	r3, r2, #1
 80052f2:	613b      	str	r3, [r7, #16]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	1c59      	adds	r1, r3, #1
 80052f8:	6179      	str	r1, [r7, #20]
 80052fa:	7812      	ldrb	r2, [r2, #0]
 80052fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3b01      	subs	r3, #1
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f1      	bne.n	80052ee <mem_cpy+0x1a>
	}
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	617a      	str	r2, [r7, #20]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3b01      	subs	r3, #1
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f3      	bne.n	8005326 <mem_set+0x10>
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800534a:	b480      	push	{r7}
 800534c:	b089      	sub	sp, #36	; 0x24
 800534e:	af00      	add	r7, sp, #0
 8005350:	60f8      	str	r0, [r7, #12]
 8005352:	60b9      	str	r1, [r7, #8]
 8005354:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	1c5a      	adds	r2, r3, #1
 8005366:	61fa      	str	r2, [r7, #28]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	4619      	mov	r1, r3
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	61ba      	str	r2, [r7, #24]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	1acb      	subs	r3, r1, r3
 8005376:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3b01      	subs	r3, #1
 800537c:	607b      	str	r3, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <mem_cmp+0x40>
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d0eb      	beq.n	8005362 <mem_cmp+0x18>

	return r;
 800538a:	697b      	ldr	r3, [r7, #20]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3724      	adds	r7, #36	; 0x24
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80053a2:	e002      	b.n	80053aa <chk_chr+0x12>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3301      	adds	r3, #1
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <chk_chr+0x26>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d1f2      	bne.n	80053a4 <chk_chr+0xc>
	return *str;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	781b      	ldrb	r3, [r3, #0]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e029      	b.n	8005438 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80053e4:	4a27      	ldr	r2, [pc, #156]	; (8005484 <chk_lock+0xb4>)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	4413      	add	r3, r2
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01d      	beq.n	800542e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80053f2:	4a24      	ldr	r2, [pc, #144]	; (8005484 <chk_lock+0xb4>)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	4413      	add	r3, r2
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d116      	bne.n	8005432 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005404:	4a1f      	ldr	r2, [pc, #124]	; (8005484 <chk_lock+0xb4>)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	3304      	adds	r3, #4
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005414:	429a      	cmp	r2, r3
 8005416:	d10c      	bne.n	8005432 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005418:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <chk_lock+0xb4>)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	4413      	add	r3, r2
 8005420:	3308      	adds	r3, #8
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005428:	429a      	cmp	r2, r3
 800542a:	d102      	bne.n	8005432 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800542c:	e007      	b.n	800543e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800542e:	2301      	movs	r3, #1
 8005430:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3301      	adds	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d9d2      	bls.n	80053e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d109      	bne.n	8005458 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <chk_lock+0x80>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d101      	bne.n	8005454 <chk_lock+0x84>
 8005450:	2300      	movs	r3, #0
 8005452:	e010      	b.n	8005476 <chk_lock+0xa6>
 8005454:	2312      	movs	r3, #18
 8005456:	e00e      	b.n	8005476 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d108      	bne.n	8005470 <chk_lock+0xa0>
 800545e:	4a09      	ldr	r2, [pc, #36]	; (8005484 <chk_lock+0xb4>)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	4413      	add	r3, r2
 8005466:	330c      	adds	r3, #12
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546e:	d101      	bne.n	8005474 <chk_lock+0xa4>
 8005470:	2310      	movs	r3, #16
 8005472:	e000      	b.n	8005476 <chk_lock+0xa6>
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	2000013c 	.word	0x2000013c

08005488 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800548e:	2300      	movs	r3, #0
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	e002      	b.n	800549a <enq_lock+0x12>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3301      	adds	r3, #1
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d806      	bhi.n	80054ae <enq_lock+0x26>
 80054a0:	4a09      	ldr	r2, [pc, #36]	; (80054c8 <enq_lock+0x40>)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	4413      	add	r3, r2
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f2      	bne.n	8005494 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	bf14      	ite	ne
 80054b4:	2301      	movne	r3, #1
 80054b6:	2300      	moveq	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	2000013c 	.word	0x2000013c

080054cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e01f      	b.n	800551c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80054dc:	4a41      	ldr	r2, [pc, #260]	; (80055e4 <inc_lock+0x118>)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	4413      	add	r3, r2
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d113      	bne.n	8005516 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80054ee:	4a3d      	ldr	r2, [pc, #244]	; (80055e4 <inc_lock+0x118>)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	4413      	add	r3, r2
 80054f6:	3304      	adds	r3, #4
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80054fe:	429a      	cmp	r2, r3
 8005500:	d109      	bne.n	8005516 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005502:	4a38      	ldr	r2, [pc, #224]	; (80055e4 <inc_lock+0x118>)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	4413      	add	r3, r2
 800550a:	3308      	adds	r3, #8
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005512:	429a      	cmp	r2, r3
 8005514:	d006      	beq.n	8005524 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d9dc      	bls.n	80054dc <inc_lock+0x10>
 8005522:	e000      	b.n	8005526 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005524:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d132      	bne.n	8005592 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	e002      	b.n	8005538 <inc_lock+0x6c>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3301      	adds	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d806      	bhi.n	800554c <inc_lock+0x80>
 800553e:	4a29      	ldr	r2, [pc, #164]	; (80055e4 <inc_lock+0x118>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	4413      	add	r3, r2
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f2      	bne.n	8005532 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d101      	bne.n	8005556 <inc_lock+0x8a>
 8005552:	2300      	movs	r3, #0
 8005554:	e040      	b.n	80055d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4922      	ldr	r1, [pc, #136]	; (80055e4 <inc_lock+0x118>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	440b      	add	r3, r1
 8005562:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	491e      	ldr	r1, [pc, #120]	; (80055e4 <inc_lock+0x118>)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	440b      	add	r3, r1
 8005570:	3304      	adds	r3, #4
 8005572:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	491a      	ldr	r1, [pc, #104]	; (80055e4 <inc_lock+0x118>)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	440b      	add	r3, r1
 8005580:	3308      	adds	r3, #8
 8005582:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005584:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <inc_lock+0x118>)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	4413      	add	r3, r2
 800558c:	330c      	adds	r3, #12
 800558e:	2200      	movs	r2, #0
 8005590:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d009      	beq.n	80055ac <inc_lock+0xe0>
 8005598:	4a12      	ldr	r2, [pc, #72]	; (80055e4 <inc_lock+0x118>)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	4413      	add	r3, r2
 80055a0:	330c      	adds	r3, #12
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <inc_lock+0xe0>
 80055a8:	2300      	movs	r3, #0
 80055aa:	e015      	b.n	80055d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d108      	bne.n	80055c4 <inc_lock+0xf8>
 80055b2:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <inc_lock+0x118>)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	4413      	add	r3, r2
 80055ba:	330c      	adds	r3, #12
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	3301      	adds	r3, #1
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	e001      	b.n	80055c8 <inc_lock+0xfc>
 80055c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c8:	4906      	ldr	r1, [pc, #24]	; (80055e4 <inc_lock+0x118>)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	440b      	add	r3, r1
 80055d0:	330c      	adds	r3, #12
 80055d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	2000013c 	.word	0x2000013c

080055e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d825      	bhi.n	8005648 <dec_lock+0x60>
		n = Files[i].ctr;
 80055fc:	4a17      	ldr	r2, [pc, #92]	; (800565c <dec_lock+0x74>)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	4413      	add	r3, r2
 8005604:	330c      	adds	r3, #12
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800560a:	89fb      	ldrh	r3, [r7, #14]
 800560c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005610:	d101      	bne.n	8005616 <dec_lock+0x2e>
 8005612:	2300      	movs	r3, #0
 8005614:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005616:	89fb      	ldrh	r3, [r7, #14]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <dec_lock+0x3a>
 800561c:	89fb      	ldrh	r3, [r7, #14]
 800561e:	3b01      	subs	r3, #1
 8005620:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005622:	4a0e      	ldr	r2, [pc, #56]	; (800565c <dec_lock+0x74>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	4413      	add	r3, r2
 800562a:	330c      	adds	r3, #12
 800562c:	89fa      	ldrh	r2, [r7, #14]
 800562e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005630:	89fb      	ldrh	r3, [r7, #14]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <dec_lock+0x5a>
 8005636:	4a09      	ldr	r2, [pc, #36]	; (800565c <dec_lock+0x74>)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	4413      	add	r3, r2
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	737b      	strb	r3, [r7, #13]
 8005646:	e001      	b.n	800564c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005648:	2302      	movs	r3, #2
 800564a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800564c:	7b7b      	ldrb	r3, [r7, #13]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	2000013c 	.word	0x2000013c

08005660 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e010      	b.n	8005690 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800566e:	4a0d      	ldr	r2, [pc, #52]	; (80056a4 <clear_lock+0x44>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	4413      	add	r3, r2
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d105      	bne.n	800568a <clear_lock+0x2a>
 800567e:	4a09      	ldr	r2, [pc, #36]	; (80056a4 <clear_lock+0x44>)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	4413      	add	r3, r2
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d9eb      	bls.n	800566e <clear_lock+0xe>
	}
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	2000013c 	.word	0x2000013c

080056a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	78db      	ldrb	r3, [r3, #3]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d034      	beq.n	8005726 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	7858      	ldrb	r0, [r3, #1]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80056cc:	2301      	movs	r3, #1
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	f7ff fd40 	bl	8005154 <disk_write>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
 80056de:	e022      	b.n	8005726 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	1ad2      	subs	r2, r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d217      	bcs.n	8005726 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	789b      	ldrb	r3, [r3, #2]
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e010      	b.n	8005720 <sync_window+0x78>
					wsect += fs->fsize;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4413      	add	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	7858      	ldrb	r0, [r3, #1]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005712:	2301      	movs	r3, #1
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	f7ff fd1d 	bl	8005154 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	3b01      	subs	r3, #1
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d8eb      	bhi.n	80056fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005726:	7bfb      	ldrb	r3, [r7, #15]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d01b      	beq.n	8005780 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ffad 	bl	80056a8 <sync_window>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d113      	bne.n	8005780 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	7858      	ldrb	r0, [r3, #1]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005762:	2301      	movs	r3, #1
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	f7ff fcd5 	bl	8005114 <disk_read>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005774:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005780:	7bfb      	ldrb	r3, [r7, #15]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3710      	adds	r7, #16
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff ff87 	bl	80056a8 <sync_window>
 800579a:	4603      	mov	r3, r0
 800579c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d159      	bne.n	8005858 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d149      	bne.n	8005840 <sync_fs+0xb4>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	791b      	ldrb	r3, [r3, #4]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d145      	bne.n	8005840 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	899b      	ldrh	r3, [r3, #12]
 80057be:	461a      	mov	r2, r3
 80057c0:	2100      	movs	r1, #0
 80057c2:	f7ff fda8 	bl	8005316 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3334      	adds	r3, #52	; 0x34
 80057ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fd37 	bl	8005246 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3334      	adds	r3, #52	; 0x34
 80057dc:	4921      	ldr	r1, [pc, #132]	; (8005864 <sync_fs+0xd8>)
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fd4c 	bl	800527c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3334      	adds	r3, #52	; 0x34
 80057e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80057ec:	491e      	ldr	r1, [pc, #120]	; (8005868 <sync_fs+0xdc>)
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff fd44 	bl	800527c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3334      	adds	r3, #52	; 0x34
 80057f8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	4619      	mov	r1, r3
 8005802:	4610      	mov	r0, r2
 8005804:	f7ff fd3a 	bl	800527c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3334      	adds	r3, #52	; 0x34
 800580c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f7ff fd30 	bl	800527c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	7858      	ldrb	r0, [r3, #1]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005834:	2301      	movs	r3, #1
 8005836:	f7ff fc8d 	bl	8005154 <disk_write>
			fs->fsi_flag = 0;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	785b      	ldrb	r3, [r3, #1]
 8005844:	2200      	movs	r2, #0
 8005846:	2100      	movs	r1, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fca3 	bl	8005194 <disk_ioctl>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <sync_fs+0xcc>
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	41615252 	.word	0x41615252
 8005868:	61417272 	.word	0x61417272

0800586c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	3b02      	subs	r3, #2
 800587a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	3b02      	subs	r3, #2
 8005882:	683a      	ldr	r2, [r7, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d301      	bcc.n	800588c <clust2sect+0x20>
 8005888:	2300      	movs	r3, #0
 800588a:	e008      	b.n	800589e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	895b      	ldrh	r3, [r3, #10]
 8005890:	461a      	mov	r2, r3
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	fb03 f202 	mul.w	r2, r3, r2
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	4413      	add	r3, r2
}
 800589e:	4618      	mov	r0, r3
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b086      	sub	sp, #24
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d904      	bls.n	80058ca <get_fat+0x20>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d302      	bcc.n	80058d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80058ca:	2301      	movs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e0b7      	b.n	8005a40 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80058d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d05a      	beq.n	8005994 <get_fat+0xea>
 80058de:	2b03      	cmp	r3, #3
 80058e0:	d07d      	beq.n	80059de <get_fat+0x134>
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	f040 80a2 	bne.w	8005a2c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	899b      	ldrh	r3, [r3, #12]
 80058fe:	4619      	mov	r1, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	fbb3 f3f1 	udiv	r3, r3, r1
 8005906:	4413      	add	r3, r2
 8005908:	4619      	mov	r1, r3
 800590a:	6938      	ldr	r0, [r7, #16]
 800590c:	f7ff ff10 	bl	8005730 <move_window>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	f040 808d 	bne.w	8005a32 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	60fa      	str	r2, [r7, #12]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	8992      	ldrh	r2, [r2, #12]
 8005922:	fbb3 f1f2 	udiv	r1, r3, r2
 8005926:	fb02 f201 	mul.w	r2, r2, r1
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4413      	add	r3, r2
 8005930:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005934:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	899b      	ldrh	r3, [r3, #12]
 800593e:	4619      	mov	r1, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	fbb3 f3f1 	udiv	r3, r3, r1
 8005946:	4413      	add	r3, r2
 8005948:	4619      	mov	r1, r3
 800594a:	6938      	ldr	r0, [r7, #16]
 800594c:	f7ff fef0 	bl	8005730 <move_window>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d16f      	bne.n	8005a36 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	899b      	ldrh	r3, [r3, #12]
 800595a:	461a      	mov	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005962:	fb02 f201 	mul.w	r2, r2, r1
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4413      	add	r3, r2
 800596c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005970:	021b      	lsls	r3, r3, #8
 8005972:	461a      	mov	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4313      	orrs	r3, r2
 8005978:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <get_fat+0xe0>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	e002      	b.n	8005990 <get_fat+0xe6>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005990:	617b      	str	r3, [r7, #20]
			break;
 8005992:	e055      	b.n	8005a40 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	899b      	ldrh	r3, [r3, #12]
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	b29b      	uxth	r3, r3
 80059a0:	4619      	mov	r1, r3
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80059a8:	4413      	add	r3, r2
 80059aa:	4619      	mov	r1, r3
 80059ac:	6938      	ldr	r0, [r7, #16]
 80059ae:	f7ff febf 	bl	8005730 <move_window>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d140      	bne.n	8005a3a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	8992      	ldrh	r2, [r2, #12]
 80059c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80059ca:	fb02 f200 	mul.w	r2, r2, r0
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	440b      	add	r3, r1
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fbfc 	bl	80051d0 <ld_word>
 80059d8:	4603      	mov	r3, r0
 80059da:	617b      	str	r3, [r7, #20]
			break;
 80059dc:	e030      	b.n	8005a40 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	899b      	ldrh	r3, [r3, #12]
 80059e6:	089b      	lsrs	r3, r3, #2
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	4619      	mov	r1, r3
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80059f2:	4413      	add	r3, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	6938      	ldr	r0, [r7, #16]
 80059f8:	f7ff fe9a 	bl	8005730 <move_window>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11d      	bne.n	8005a3e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	8992      	ldrh	r2, [r2, #12]
 8005a10:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a14:	fb02 f200 	mul.w	r2, r2, r0
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff fbef 	bl	8005200 <ld_dword>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a28:	617b      	str	r3, [r7, #20]
			break;
 8005a2a:	e009      	b.n	8005a40 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	e006      	b.n	8005a40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a32:	bf00      	nop
 8005a34:	e004      	b.n	8005a40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a36:	bf00      	nop
 8005a38:	e002      	b.n	8005a40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a3e:	bf00      	nop
		}
	}

	return val;
 8005a40:	697b      	ldr	r3, [r7, #20]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005a4a:	b590      	push	{r4, r7, lr}
 8005a4c:	b089      	sub	sp, #36	; 0x24
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005a56:	2302      	movs	r3, #2
 8005a58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	f240 8106 	bls.w	8005c6e <put_fat+0x224>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	f080 8100 	bcs.w	8005c6e <put_fat+0x224>
		switch (fs->fs_type) {
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	f000 8088 	beq.w	8005b88 <put_fat+0x13e>
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	f000 80b0 	beq.w	8005bde <put_fat+0x194>
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	f040 80f5 	bne.w	8005c6e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	085b      	lsrs	r3, r3, #1
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4413      	add	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	899b      	ldrh	r3, [r3, #12]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f7ff fe42 	bl	8005730 <move_window>
 8005aac:	4603      	mov	r3, r0
 8005aae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ab0:	7ffb      	ldrb	r3, [r7, #31]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 80d4 	bne.w	8005c60 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	61ba      	str	r2, [r7, #24]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	8992      	ldrh	r2, [r2, #12]
 8005ac8:	fbb3 f0f2 	udiv	r0, r3, r2
 8005acc:	fb02 f200 	mul.w	r2, r2, r0
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00d      	beq.n	8005afc <put_fat+0xb2>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b25b      	sxtb	r3, r3
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	b25a      	sxtb	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	b25b      	sxtb	r3, r3
 8005af4:	4313      	orrs	r3, r2
 8005af6:	b25b      	sxtb	r3, r3
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	e001      	b.n	8005b00 <put_fat+0xb6>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	899b      	ldrh	r3, [r3, #12]
 8005b12:	4619      	mov	r1, r3
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b1a:	4413      	add	r3, r2
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff fe06 	bl	8005730 <move_window>
 8005b24:	4603      	mov	r3, r0
 8005b26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b28:	7ffb      	ldrb	r3, [r7, #31]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f040 809a 	bne.w	8005c64 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	899b      	ldrh	r3, [r3, #12]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b42:	fb02 f200 	mul.w	r2, r2, r0
 8005b46:	1a9b      	subs	r3, r3, r2
 8005b48:	440b      	add	r3, r1
 8005b4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <put_fat+0x114>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	091b      	lsrs	r3, r3, #4
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	e00e      	b.n	8005b7c <put_fat+0x132>
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	b25b      	sxtb	r3, r3
 8005b64:	f023 030f 	bic.w	r3, r3, #15
 8005b68:	b25a      	sxtb	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	0a1b      	lsrs	r3, r3, #8
 8005b6e:	b25b      	sxtb	r3, r3
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	b25b      	sxtb	r3, r3
 8005b76:	4313      	orrs	r3, r2
 8005b78:	b25b      	sxtb	r3, r3
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2201      	movs	r2, #1
 8005b84:	70da      	strb	r2, [r3, #3]
			break;
 8005b86:	e072      	b.n	8005c6e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	899b      	ldrh	r3, [r3, #12]
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4619      	mov	r1, r3
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff fdc5 	bl	8005730 <move_window>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005baa:	7ffb      	ldrb	r3, [r7, #31]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d15b      	bne.n	8005c68 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	8992      	ldrh	r2, [r2, #12]
 8005bbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bc2:	fb02 f200 	mul.w	r2, r2, r0
 8005bc6:	1a9b      	subs	r3, r3, r2
 8005bc8:	440b      	add	r3, r1
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	b292      	uxth	r2, r2
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff fb38 	bl	8005246 <st_word>
			fs->wflag = 1;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	70da      	strb	r2, [r3, #3]
			break;
 8005bdc:	e047      	b.n	8005c6e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	899b      	ldrh	r3, [r3, #12]
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	4619      	mov	r1, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bf2:	4413      	add	r3, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f7ff fd9a 	bl	8005730 <move_window>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c00:	7ffb      	ldrb	r3, [r7, #31]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d132      	bne.n	8005c6c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	8992      	ldrh	r2, [r2, #12]
 8005c1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c1e:	fb02 f200 	mul.w	r2, r2, r0
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	440b      	add	r3, r1
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff faea 	bl	8005200 <ld_dword>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c32:	4323      	orrs	r3, r4
 8005c34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	8992      	ldrh	r2, [r2, #12]
 8005c44:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c48:	fb02 f200 	mul.w	r2, r2, r0
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	440b      	add	r3, r1
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff fb12 	bl	800527c <st_dword>
			fs->wflag = 1;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	70da      	strb	r2, [r3, #3]
			break;
 8005c5e:	e006      	b.n	8005c6e <put_fat+0x224>
			if (res != FR_OK) break;
 8005c60:	bf00      	nop
 8005c62:	e004      	b.n	8005c6e <put_fat+0x224>
			if (res != FR_OK) break;
 8005c64:	bf00      	nop
 8005c66:	e002      	b.n	8005c6e <put_fat+0x224>
			if (res != FR_OK) break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <put_fat+0x224>
			if (res != FR_OK) break;
 8005c6c:	bf00      	nop
		}
	}
	return res;
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3724      	adds	r7, #36	; 0x24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd90      	pop	{r4, r7, pc}

08005c78 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d904      	bls.n	8005c9e <remove_chain+0x26>
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d301      	bcc.n	8005ca2 <remove_chain+0x2a>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	e04b      	b.n	8005d3a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d00c      	beq.n	8005cc2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	69b8      	ldr	r0, [r7, #24]
 8005cb0:	f7ff fecb 	bl	8005a4a <put_fat>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005cb8:	7ffb      	ldrb	r3, [r7, #31]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <remove_chain+0x4a>
 8005cbe:	7ffb      	ldrb	r3, [r7, #31]
 8005cc0:	e03b      	b.n	8005d3a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7ff fdf0 	bl	80058aa <get_fat>
 8005cca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d031      	beq.n	8005d36 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <remove_chain+0x64>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e02e      	b.n	8005d3a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce2:	d101      	bne.n	8005ce8 <remove_chain+0x70>
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e028      	b.n	8005d3a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005ce8:	2200      	movs	r2, #0
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	69b8      	ldr	r0, [r7, #24]
 8005cee:	f7ff feac 	bl	8005a4a <put_fat>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <remove_chain+0x88>
 8005cfc:	7ffb      	ldrb	r3, [r7, #31]
 8005cfe:	e01c      	b.n	8005d3a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	695a      	ldr	r2, [r3, #20]
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	3b02      	subs	r3, #2
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d20b      	bcs.n	8005d26 <remove_chain+0xae>
			fs->free_clst++;
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	791b      	ldrb	r3, [r3, #4]
 8005d1c:	f043 0301 	orr.w	r3, r3, #1
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d3c6      	bcc.n	8005cc2 <remove_chain+0x4a>
 8005d34:	e000      	b.n	8005d38 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005d36:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b088      	sub	sp, #32
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10d      	bne.n	8005d74 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <create_chain+0x2c>
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d31b      	bcc.n	8005da6 <create_chain+0x64>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	e018      	b.n	8005da6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005d74:	6839      	ldr	r1, [r7, #0]
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7ff fd97 	bl	80058aa <get_fat>
 8005d7c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d801      	bhi.n	8005d88 <create_chain+0x46>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e070      	b.n	8005e6a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d8e:	d101      	bne.n	8005d94 <create_chain+0x52>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	e06a      	b.n	8005e6a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d201      	bcs.n	8005da2 <create_chain+0x60>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	e063      	b.n	8005e6a <create_chain+0x128>
		scl = clst;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	3301      	adds	r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d307      	bcc.n	8005dca <create_chain+0x88>
				ncl = 2;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d901      	bls.n	8005dca <create_chain+0x88>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e04f      	b.n	8005e6a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005dca:	69f9      	ldr	r1, [r7, #28]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff fd6c 	bl	80058aa <get_fat>
 8005dd2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00e      	beq.n	8005df8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d003      	beq.n	8005de8 <create_chain+0xa6>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de6:	d101      	bne.n	8005dec <create_chain+0xaa>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	e03e      	b.n	8005e6a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d1da      	bne.n	8005daa <create_chain+0x68>
 8005df4:	2300      	movs	r3, #0
 8005df6:	e038      	b.n	8005e6a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005df8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005dfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dfe:	69f9      	ldr	r1, [r7, #28]
 8005e00:	6938      	ldr	r0, [r7, #16]
 8005e02:	f7ff fe22 	bl	8005a4a <put_fat>
 8005e06:	4603      	mov	r3, r0
 8005e08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <create_chain+0xe2>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d006      	beq.n	8005e24 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e16:	69fa      	ldr	r2, [r7, #28]
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6938      	ldr	r0, [r7, #16]
 8005e1c:	f7ff fe15 	bl	8005a4a <put_fat>
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d116      	bne.n	8005e58 <create_chain+0x116>
		fs->last_clst = ncl;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	3b02      	subs	r3, #2
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d804      	bhi.n	8005e48 <create_chain+0x106>
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	1e5a      	subs	r2, r3, #1
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	791b      	ldrb	r3, [r3, #4]
 8005e4c:	f043 0301 	orr.w	r3, r3, #1
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	711a      	strb	r2, [r3, #4]
 8005e56:	e007      	b.n	8005e68 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d102      	bne.n	8005e64 <create_chain+0x122>
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e62:	e000      	b.n	8005e66 <create_chain+0x124>
 8005e64:	2301      	movs	r3, #1
 8005e66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005e68:	69fb      	ldr	r3, [r7, #28]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b087      	sub	sp, #28
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	3304      	adds	r3, #4
 8005e88:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	899b      	ldrh	r3, [r3, #12]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	8952      	ldrh	r2, [r2, #10]
 8005e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1d1a      	adds	r2, r3, #4
 8005ea4:	613a      	str	r2, [r7, #16]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <clmt_clust+0x42>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e010      	b.n	8005ed6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d307      	bcc.n	8005ecc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005eca:	e7e9      	b.n	8005ea0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005ecc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b086      	sub	sp, #24
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ef8:	d204      	bcs.n	8005f04 <dir_sdi+0x22>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f003 031f 	and.w	r3, r3, #31
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005f04:	2302      	movs	r3, #2
 8005f06:	e071      	b.n	8005fec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <dir_sdi+0x46>
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d902      	bls.n	8005f28 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10c      	bne.n	8005f48 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	8912      	ldrh	r2, [r2, #8]
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d301      	bcc.n	8005f3e <dir_sdi+0x5c>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e056      	b.n	8005fec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	61da      	str	r2, [r3, #28]
 8005f46:	e02d      	b.n	8005fa4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	895b      	ldrh	r3, [r3, #10]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	899b      	ldrh	r3, [r3, #12]
 8005f52:	fb03 f302 	mul.w	r3, r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f58:	e019      	b.n	8005f8e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6979      	ldr	r1, [r7, #20]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fca3 	bl	80058aa <get_fat>
 8005f64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f6c:	d101      	bne.n	8005f72 <dir_sdi+0x90>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e03c      	b.n	8005fec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d904      	bls.n	8005f82 <dir_sdi+0xa0>
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d301      	bcc.n	8005f86 <dir_sdi+0xa4>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e032      	b.n	8005fec <dir_sdi+0x10a>
			ofs -= csz;
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d2e1      	bcs.n	8005f5a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005f96:	6979      	ldr	r1, [r7, #20]
 8005f98:	6938      	ldr	r0, [r7, #16]
 8005f9a:	f7ff fc67 	bl	800586c <clust2sect>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	69db      	ldr	r3, [r3, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <dir_sdi+0xd4>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e01a      	b.n	8005fec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69da      	ldr	r2, [r3, #28]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	899b      	ldrh	r3, [r3, #12]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fc6:	441a      	add	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	899b      	ldrh	r3, [r3, #12]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	fbb3 f0f2 	udiv	r0, r3, r2
 8005fde:	fb02 f200 	mul.w	r2, r2, r0
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	18ca      	adds	r2, r1, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3718      	adds	r7, #24
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	3320      	adds	r3, #32
 800600a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <dir_next+0x28>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800601a:	d301      	bcc.n	8006020 <dir_next+0x2c>
 800601c:	2304      	movs	r3, #4
 800601e:	e0bb      	b.n	8006198 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	899b      	ldrh	r3, [r3, #12]
 8006024:	461a      	mov	r2, r3
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	fbb3 f1f2 	udiv	r1, r3, r2
 800602c:	fb02 f201 	mul.w	r2, r2, r1
 8006030:	1a9b      	subs	r3, r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	f040 809d 	bne.w	8006172 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	8912      	ldrh	r2, [r2, #8]
 8006052:	4293      	cmp	r3, r2
 8006054:	f0c0 808d 	bcc.w	8006172 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	61da      	str	r2, [r3, #28]
 800605e:	2304      	movs	r3, #4
 8006060:	e09a      	b.n	8006198 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	899b      	ldrh	r3, [r3, #12]
 8006066:	461a      	mov	r2, r3
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	fbb3 f3f2 	udiv	r3, r3, r2
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	8952      	ldrh	r2, [r2, #10]
 8006072:	3a01      	subs	r2, #1
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d17b      	bne.n	8006172 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	4619      	mov	r1, r3
 8006082:	4610      	mov	r0, r2
 8006084:	f7ff fc11 	bl	80058aa <get_fat>
 8006088:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d801      	bhi.n	8006094 <dir_next+0xa0>
 8006090:	2302      	movs	r3, #2
 8006092:	e081      	b.n	8006198 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800609a:	d101      	bne.n	80060a0 <dir_next+0xac>
 800609c:	2301      	movs	r3, #1
 800609e:	e07b      	b.n	8006198 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d359      	bcc.n	800615e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d104      	bne.n	80060ba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	61da      	str	r2, [r3, #28]
 80060b6:	2304      	movs	r3, #4
 80060b8:	e06e      	b.n	8006198 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7ff fe3d 	bl	8005d42 <create_chain>
 80060c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <dir_next+0xe0>
 80060d0:	2307      	movs	r3, #7
 80060d2:	e061      	b.n	8006198 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <dir_next+0xea>
 80060da:	2302      	movs	r3, #2
 80060dc:	e05c      	b.n	8006198 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e4:	d101      	bne.n	80060ea <dir_next+0xf6>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e056      	b.n	8006198 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f7ff fadc 	bl	80056a8 <sync_window>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <dir_next+0x106>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e04e      	b.n	8006198 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	899b      	ldrh	r3, [r3, #12]
 8006104:	461a      	mov	r2, r3
 8006106:	2100      	movs	r1, #0
 8006108:	f7ff f905 	bl	8005316 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	6979      	ldr	r1, [r7, #20]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff fbaa 	bl	800586c <clust2sect>
 8006118:	4602      	mov	r2, r0
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	631a      	str	r2, [r3, #48]	; 0x30
 800611e:	e012      	b.n	8006146 <dir_next+0x152>
						fs->wflag = 1;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fabe 	bl	80056a8 <sync_window>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <dir_next+0x142>
 8006132:	2301      	movs	r3, #1
 8006134:	e030      	b.n	8006198 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	3301      	adds	r3, #1
 800613a:	613b      	str	r3, [r7, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	631a      	str	r2, [r3, #48]	; 0x30
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	895b      	ldrh	r3, [r3, #10]
 800614a:	461a      	mov	r2, r3
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4293      	cmp	r3, r2
 8006150:	d3e6      	bcc.n	8006120 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad2      	subs	r2, r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006164:	6979      	ldr	r1, [r7, #20]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fb80 	bl	800586c <clust2sect>
 800616c:	4602      	mov	r2, r0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	899b      	ldrh	r3, [r3, #12]
 8006182:	461a      	mov	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	fbb3 f0f2 	udiv	r0, r3, r2
 800618a:	fb02 f200 	mul.w	r2, r2, r0
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	18ca      	adds	r2, r1, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff fe95 	bl	8005ee2 <dir_sdi>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d12b      	bne.n	800621a <dir_alloc+0x7a>
		n = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	4619      	mov	r1, r3
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff faaf 	bl	8005730 <move_window>
 80061d2:	4603      	mov	r3, r0
 80061d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d11d      	bne.n	8006218 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2be5      	cmp	r3, #229	; 0xe5
 80061e4:	d004      	beq.n	80061f0 <dir_alloc+0x50>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d107      	bne.n	8006200 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3301      	adds	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d102      	bne.n	8006204 <dir_alloc+0x64>
 80061fe:	e00c      	b.n	800621a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006200:	2300      	movs	r3, #0
 8006202:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006204:	2101      	movs	r1, #1
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff fef4 	bl	8005ff4 <dir_next>
 800620c:	4603      	mov	r3, r0
 800620e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006210:	7dfb      	ldrb	r3, [r7, #23]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0d7      	beq.n	80061c6 <dir_alloc+0x26>
 8006216:	e000      	b.n	800621a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006218:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d101      	bne.n	8006224 <dir_alloc+0x84>
 8006220:	2307      	movs	r3, #7
 8006222:	75fb      	strb	r3, [r7, #23]
	return res;
 8006224:	7dfb      	ldrb	r3, [r7, #23]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	331a      	adds	r3, #26
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe ffc7 	bl	80051d0 <ld_word>
 8006242:	4603      	mov	r3, r0
 8006244:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b03      	cmp	r3, #3
 800624c:	d109      	bne.n	8006262 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	3314      	adds	r3, #20
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe ffbc 	bl	80051d0 <ld_word>
 8006258:	4603      	mov	r3, r0
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006262:	68fb      	ldr	r3, [r7, #12]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	331a      	adds	r3, #26
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	b292      	uxth	r2, r2
 8006280:	4611      	mov	r1, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe ffdf 	bl	8005246 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d109      	bne.n	80062a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f103 0214 	add.w	r2, r3, #20
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	0c1b      	lsrs	r3, r3, #16
 800629a:	b29b      	uxth	r3, r3
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe ffd1 	bl	8005246 <st_word>
	}
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80062ba:	2100      	movs	r1, #0
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fe10 	bl	8005ee2 <dir_sdi>
 80062c2:	4603      	mov	r3, r0
 80062c4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <dir_find+0x24>
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	e03e      	b.n	800634e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	4619      	mov	r1, r3
 80062d6:	6938      	ldr	r0, [r7, #16]
 80062d8:	f7ff fa2a 	bl	8005730 <move_window>
 80062dc:	4603      	mov	r3, r0
 80062de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d12f      	bne.n	8006346 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <dir_find+0x4e>
 80062f4:	2304      	movs	r3, #4
 80062f6:	75fb      	strb	r3, [r7, #23]
 80062f8:	e028      	b.n	800634c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	330b      	adds	r3, #11
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006306:	b2da      	uxtb	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	330b      	adds	r3, #11
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <dir_find+0x86>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a18      	ldr	r0, [r3, #32]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3324      	adds	r3, #36	; 0x24
 8006324:	220b      	movs	r2, #11
 8006326:	4619      	mov	r1, r3
 8006328:	f7ff f80f 	bl	800534a <mem_cmp>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006332:	2100      	movs	r1, #0
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fe5d 	bl	8005ff4 <dir_next>
 800633a:	4603      	mov	r3, r0
 800633c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d0c5      	beq.n	80062d0 <dir_find+0x24>
 8006344:	e002      	b.n	800634c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006346:	bf00      	nop
 8006348:	e000      	b.n	800634c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800634a:	bf00      	nop

	return res;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006364:	2101      	movs	r1, #1
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff ff1a 	bl	80061a0 <dir_alloc>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d11c      	bne.n	80063b0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	4619      	mov	r1, r3
 800637c:	68b8      	ldr	r0, [r7, #8]
 800637e:	f7ff f9d7 	bl	8005730 <move_window>
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d111      	bne.n	80063b0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	2220      	movs	r2, #32
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f7fe ffbe 	bl	8005316 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a18      	ldr	r0, [r3, #32]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	3324      	adds	r3, #36	; 0x24
 80063a2:	220b      	movs	r2, #11
 80063a4:	4619      	mov	r1, r3
 80063a6:	f7fe ff95 	bl	80052d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2201      	movs	r2, #1
 80063ae:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3324      	adds	r3, #36	; 0x24
 80063d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80063d2:	220b      	movs	r2, #11
 80063d4:	2120      	movs	r1, #32
 80063d6:	68b8      	ldr	r0, [r7, #8]
 80063d8:	f7fe ff9d 	bl	8005316 <mem_set>
	si = i = 0; ni = 8;
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	2308      	movs	r3, #8
 80063e6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	617a      	str	r2, [r7, #20]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80063f6:	7ffb      	ldrb	r3, [r7, #31]
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d94e      	bls.n	800649a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80063fc:	7ffb      	ldrb	r3, [r7, #31]
 80063fe:	2b2f      	cmp	r3, #47	; 0x2f
 8006400:	d006      	beq.n	8006410 <create_name+0x54>
 8006402:	7ffb      	ldrb	r3, [r7, #31]
 8006404:	2b5c      	cmp	r3, #92	; 0x5c
 8006406:	d110      	bne.n	800642a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006408:	e002      	b.n	8006410 <create_name+0x54>
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	3301      	adds	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	4413      	add	r3, r2
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b2f      	cmp	r3, #47	; 0x2f
 800641a:	d0f6      	beq.n	800640a <create_name+0x4e>
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	4413      	add	r3, r2
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b5c      	cmp	r3, #92	; 0x5c
 8006426:	d0f0      	beq.n	800640a <create_name+0x4e>
			break;
 8006428:	e038      	b.n	800649c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800642a:	7ffb      	ldrb	r3, [r7, #31]
 800642c:	2b2e      	cmp	r3, #46	; 0x2e
 800642e:	d003      	beq.n	8006438 <create_name+0x7c>
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	429a      	cmp	r2, r3
 8006436:	d30c      	bcc.n	8006452 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b0b      	cmp	r3, #11
 800643c:	d002      	beq.n	8006444 <create_name+0x88>
 800643e:	7ffb      	ldrb	r3, [r7, #31]
 8006440:	2b2e      	cmp	r3, #46	; 0x2e
 8006442:	d001      	beq.n	8006448 <create_name+0x8c>
 8006444:	2306      	movs	r3, #6
 8006446:	e044      	b.n	80064d2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006448:	2308      	movs	r3, #8
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	230b      	movs	r3, #11
 800644e:	61bb      	str	r3, [r7, #24]
			continue;
 8006450:	e022      	b.n	8006498 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006452:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006456:	2b00      	cmp	r3, #0
 8006458:	da04      	bge.n	8006464 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800645a:	7ffb      	ldrb	r3, [r7, #31]
 800645c:	3b80      	subs	r3, #128	; 0x80
 800645e:	4a1f      	ldr	r2, [pc, #124]	; (80064dc <create_name+0x120>)
 8006460:	5cd3      	ldrb	r3, [r2, r3]
 8006462:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006464:	7ffb      	ldrb	r3, [r7, #31]
 8006466:	4619      	mov	r1, r3
 8006468:	481d      	ldr	r0, [pc, #116]	; (80064e0 <create_name+0x124>)
 800646a:	f7fe ff95 	bl	8005398 <chk_chr>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <create_name+0xbc>
 8006474:	2306      	movs	r3, #6
 8006476:	e02c      	b.n	80064d2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006478:	7ffb      	ldrb	r3, [r7, #31]
 800647a:	2b60      	cmp	r3, #96	; 0x60
 800647c:	d905      	bls.n	800648a <create_name+0xce>
 800647e:	7ffb      	ldrb	r3, [r7, #31]
 8006480:	2b7a      	cmp	r3, #122	; 0x7a
 8006482:	d802      	bhi.n	800648a <create_name+0xce>
 8006484:	7ffb      	ldrb	r3, [r7, #31]
 8006486:	3b20      	subs	r3, #32
 8006488:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	613a      	str	r2, [r7, #16]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	4413      	add	r3, r2
 8006494:	7ffa      	ldrb	r2, [r7, #31]
 8006496:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006498:	e7a6      	b.n	80063e8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800649a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	441a      	add	r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <create_name+0xf4>
 80064ac:	2306      	movs	r3, #6
 80064ae:	e010      	b.n	80064d2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2be5      	cmp	r3, #229	; 0xe5
 80064b6:	d102      	bne.n	80064be <create_name+0x102>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2205      	movs	r2, #5
 80064bc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80064be:	7ffb      	ldrb	r3, [r7, #31]
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d801      	bhi.n	80064c8 <create_name+0x10c>
 80064c4:	2204      	movs	r2, #4
 80064c6:	e000      	b.n	80064ca <create_name+0x10e>
 80064c8:	2200      	movs	r2, #0
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	330b      	adds	r3, #11
 80064ce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80064d0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	08007b1c 	.word	0x08007b1c
 80064e0:	08007a84 	.word	0x08007a84

080064e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80064f8:	e002      	b.n	8006500 <follow_path+0x1c>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b2f      	cmp	r3, #47	; 0x2f
 8006506:	d0f8      	beq.n	80064fa <follow_path+0x16>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b5c      	cmp	r3, #92	; 0x5c
 800650e:	d0f4      	beq.n	80064fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2200      	movs	r2, #0
 8006514:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b1f      	cmp	r3, #31
 800651c:	d80a      	bhi.n	8006534 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2280      	movs	r2, #128	; 0x80
 8006522:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006526:	2100      	movs	r1, #0
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f7ff fcda 	bl	8005ee2 <dir_sdi>
 800652e:	4603      	mov	r3, r0
 8006530:	75fb      	strb	r3, [r7, #23]
 8006532:	e048      	b.n	80065c6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006534:	463b      	mov	r3, r7
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ff3f 	bl	80063bc <create_name>
 800653e:	4603      	mov	r3, r0
 8006540:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006542:	7dfb      	ldrb	r3, [r7, #23]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d139      	bne.n	80065bc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff feaf 	bl	80062ac <dir_find>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006558:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006560:	7dfb      	ldrb	r3, [r7, #23]
 8006562:	2b04      	cmp	r3, #4
 8006564:	d12c      	bne.n	80065c0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006566:	7afb      	ldrb	r3, [r7, #11]
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d127      	bne.n	80065c0 <follow_path+0xdc>
 8006570:	2305      	movs	r3, #5
 8006572:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006574:	e024      	b.n	80065c0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006576:	7afb      	ldrb	r3, [r7, #11]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d121      	bne.n	80065c4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	799b      	ldrb	r3, [r3, #6]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d102      	bne.n	8006592 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800658c:	2305      	movs	r3, #5
 800658e:	75fb      	strb	r3, [r7, #23]
 8006590:	e019      	b.n	80065c6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	8992      	ldrh	r2, [r2, #12]
 80065a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80065a4:	fb02 f200 	mul.w	r2, r2, r0
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	440b      	add	r3, r1
 80065ac:	4619      	mov	r1, r3
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7ff fe3d 	bl	800622e <ld_clust>
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065ba:	e7bb      	b.n	8006534 <follow_path+0x50>
			if (res != FR_OK) break;
 80065bc:	bf00      	nop
 80065be:	e002      	b.n	80065c6 <follow_path+0xe2>
				break;
 80065c0:	bf00      	nop
 80065c2:	e000      	b.n	80065c6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80065c4:	bf00      	nop
			}
		}
	}

	return res;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d031      	beq.n	800664a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	e002      	b.n	80065f4 <get_ldnumber+0x24>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	3301      	adds	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d903      	bls.n	8006604 <get_ldnumber+0x34>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b3a      	cmp	r3, #58	; 0x3a
 8006602:	d1f4      	bne.n	80065ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b3a      	cmp	r3, #58	; 0x3a
 800660a:	d11c      	bne.n	8006646 <get_ldnumber+0x76>
			tp = *path;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	60fa      	str	r2, [r7, #12]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	3b30      	subs	r3, #48	; 0x30
 800661c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b09      	cmp	r3, #9
 8006622:	d80e      	bhi.n	8006642 <get_ldnumber+0x72>
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	429a      	cmp	r2, r3
 800662a:	d10a      	bne.n	8006642 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d107      	bne.n	8006642 <get_ldnumber+0x72>
					vol = (int)i;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	3301      	adds	r3, #1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	e002      	b.n	800664c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800664a:	693b      	ldr	r3, [r7, #16]
}
 800664c:	4618      	mov	r0, r3
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	70da      	strb	r2, [r3, #3]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800666e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff f85c 	bl	8005730 <move_window>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <check_fs+0x2a>
 800667e:	2304      	movs	r3, #4
 8006680:	e038      	b.n	80066f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3334      	adds	r3, #52	; 0x34
 8006686:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe fda0 	bl	80051d0 <ld_word>
 8006690:	4603      	mov	r3, r0
 8006692:	461a      	mov	r2, r3
 8006694:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006698:	429a      	cmp	r2, r3
 800669a:	d001      	beq.n	80066a0 <check_fs+0x48>
 800669c:	2303      	movs	r3, #3
 800669e:	e029      	b.n	80066f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066a6:	2be9      	cmp	r3, #233	; 0xe9
 80066a8:	d009      	beq.n	80066be <check_fs+0x66>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066b0:	2beb      	cmp	r3, #235	; 0xeb
 80066b2:	d11e      	bne.n	80066f2 <check_fs+0x9a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80066ba:	2b90      	cmp	r3, #144	; 0x90
 80066bc:	d119      	bne.n	80066f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3334      	adds	r3, #52	; 0x34
 80066c2:	3336      	adds	r3, #54	; 0x36
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe fd9b 	bl	8005200 <ld_dword>
 80066ca:	4603      	mov	r3, r0
 80066cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80066d0:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <check_fs+0xa4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d101      	bne.n	80066da <check_fs+0x82>
 80066d6:	2300      	movs	r3, #0
 80066d8:	e00c      	b.n	80066f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3334      	adds	r3, #52	; 0x34
 80066de:	3352      	adds	r3, #82	; 0x52
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe fd8d 	bl	8005200 <ld_dword>
 80066e6:	4602      	mov	r2, r0
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <check_fs+0xa8>)
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d101      	bne.n	80066f2 <check_fs+0x9a>
 80066ee:	2300      	movs	r3, #0
 80066f0:	e000      	b.n	80066f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80066f2:	2302      	movs	r3, #2
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	00544146 	.word	0x00544146
 8006700:	33544146 	.word	0x33544146

08006704 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b096      	sub	sp, #88	; 0x58
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	4613      	mov	r3, r2
 8006710:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f7ff ff59 	bl	80065d0 <get_ldnumber>
 800671e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006722:	2b00      	cmp	r3, #0
 8006724:	da01      	bge.n	800672a <find_volume+0x26>
 8006726:	230b      	movs	r3, #11
 8006728:	e265      	b.n	8006bf6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800672a:	4ab0      	ldr	r2, [pc, #704]	; (80069ec <find_volume+0x2e8>)
 800672c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006732:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <find_volume+0x3a>
 800673a:	230c      	movs	r3, #12
 800673c:	e25b      	b.n	8006bf6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006742:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	f023 0301 	bic.w	r3, r3, #1
 800674a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01a      	beq.n	800678a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fc9b 	bl	8005094 <disk_status>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006764:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10c      	bne.n	800678a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <find_volume+0x82>
 8006776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800677a:	f003 0304 	and.w	r3, r3, #4
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006782:	230a      	movs	r3, #10
 8006784:	e237      	b.n	8006bf6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006786:	2300      	movs	r3, #0
 8006788:	e235      	b.n	8006bf6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	2200      	movs	r2, #0
 800678e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006792:	b2da      	uxtb	r2, r3
 8006794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006796:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	785b      	ldrb	r3, [r3, #1]
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe fc93 	bl	80050c8 <disk_initialize>
 80067a2:	4603      	mov	r3, r0
 80067a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80067a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80067b4:	2303      	movs	r3, #3
 80067b6:	e21e      	b.n	8006bf6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <find_volume+0xca>
 80067be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80067ca:	230a      	movs	r3, #10
 80067cc:	e213      	b.n	8006bf6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	7858      	ldrb	r0, [r3, #1]
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	330c      	adds	r3, #12
 80067d6:	461a      	mov	r2, r3
 80067d8:	2102      	movs	r1, #2
 80067da:	f7fe fcdb 	bl	8005194 <disk_ioctl>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <find_volume+0xe4>
 80067e4:	2301      	movs	r3, #1
 80067e6:	e206      	b.n	8006bf6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80067e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ea:	899b      	ldrh	r3, [r3, #12]
 80067ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f0:	d80d      	bhi.n	800680e <find_volume+0x10a>
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	899b      	ldrh	r3, [r3, #12]
 80067f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fa:	d308      	bcc.n	800680e <find_volume+0x10a>
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	899b      	ldrh	r3, [r3, #12]
 8006800:	461a      	mov	r2, r3
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	899b      	ldrh	r3, [r3, #12]
 8006806:	3b01      	subs	r3, #1
 8006808:	4013      	ands	r3, r2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <find_volume+0x10e>
 800680e:	2301      	movs	r3, #1
 8006810:	e1f1      	b.n	8006bf6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006816:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800681a:	f7ff ff1d 	bl	8006658 <check_fs>
 800681e:	4603      	mov	r3, r0
 8006820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006828:	2b02      	cmp	r3, #2
 800682a:	d14b      	bne.n	80068c4 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800682c:	2300      	movs	r3, #0
 800682e:	643b      	str	r3, [r7, #64]	; 0x40
 8006830:	e01f      	b.n	8006872 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006840:	4413      	add	r3, r2
 8006842:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	3304      	adds	r3, #4
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d006      	beq.n	800685c <find_volume+0x158>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	3308      	adds	r3, #8
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fcd4 	bl	8005200 <ld_dword>
 8006858:	4602      	mov	r2, r0
 800685a:	e000      	b.n	800685e <find_volume+0x15a>
 800685c:	2200      	movs	r2, #0
 800685e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006866:	440b      	add	r3, r1
 8006868:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800686c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686e:	3301      	adds	r3, #1
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
 8006872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006874:	2b03      	cmp	r3, #3
 8006876:	d9dc      	bls.n	8006832 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006878:	2300      	movs	r3, #0
 800687a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800687c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <find_volume+0x184>
 8006882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006884:	3b01      	subs	r3, #1
 8006886:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006890:	4413      	add	r3, r2
 8006892:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006896:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <find_volume+0x1a6>
 800689e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068a2:	f7ff fed9 	bl	8006658 <check_fs>
 80068a6:	4603      	mov	r3, r0
 80068a8:	e000      	b.n	80068ac <find_volume+0x1a8>
 80068aa:	2303      	movs	r3, #3
 80068ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80068b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d905      	bls.n	80068c4 <find_volume+0x1c0>
 80068b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ba:	3301      	adds	r3, #1
 80068bc:	643b      	str	r3, [r7, #64]	; 0x40
 80068be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d9e1      	bls.n	8006888 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80068c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d101      	bne.n	80068d0 <find_volume+0x1cc>
 80068cc:	2301      	movs	r3, #1
 80068ce:	e192      	b.n	8006bf6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80068d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d901      	bls.n	80068dc <find_volume+0x1d8>
 80068d8:	230d      	movs	r3, #13
 80068da:	e18c      	b.n	8006bf6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	3334      	adds	r3, #52	; 0x34
 80068e0:	330b      	adds	r3, #11
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fc74 	bl	80051d0 <ld_word>
 80068e8:	4603      	mov	r3, r0
 80068ea:	461a      	mov	r2, r3
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	899b      	ldrh	r3, [r3, #12]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d001      	beq.n	80068f8 <find_volume+0x1f4>
 80068f4:	230d      	movs	r3, #13
 80068f6:	e17e      	b.n	8006bf6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	3334      	adds	r3, #52	; 0x34
 80068fc:	3316      	adds	r3, #22
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fc66 	bl	80051d0 <ld_word>
 8006904:	4603      	mov	r3, r0
 8006906:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d106      	bne.n	800691c <find_volume+0x218>
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	3334      	adds	r3, #52	; 0x34
 8006912:	3324      	adds	r3, #36	; 0x24
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe fc73 	bl	8005200 <ld_dword>
 800691a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006920:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006924:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	789b      	ldrb	r3, [r3, #2]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d005      	beq.n	8006940 <find_volume+0x23c>
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	789b      	ldrb	r3, [r3, #2]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d001      	beq.n	8006940 <find_volume+0x23c>
 800693c:	230d      	movs	r3, #13
 800693e:	e15a      	b.n	8006bf6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	789b      	ldrb	r3, [r3, #2]
 8006944:	461a      	mov	r2, r3
 8006946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006948:	fb02 f303 	mul.w	r3, r2, r3
 800694c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006954:	b29a      	uxth	r2, r3
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	895b      	ldrh	r3, [r3, #10]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d008      	beq.n	8006974 <find_volume+0x270>
 8006962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006964:	895b      	ldrh	r3, [r3, #10]
 8006966:	461a      	mov	r2, r3
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	895b      	ldrh	r3, [r3, #10]
 800696c:	3b01      	subs	r3, #1
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <find_volume+0x274>
 8006974:	230d      	movs	r3, #13
 8006976:	e13e      	b.n	8006bf6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	3334      	adds	r3, #52	; 0x34
 800697c:	3311      	adds	r3, #17
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe fc26 	bl	80051d0 <ld_word>
 8006984:	4603      	mov	r3, r0
 8006986:	461a      	mov	r2, r3
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	891b      	ldrh	r3, [r3, #8]
 8006990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006992:	8992      	ldrh	r2, [r2, #12]
 8006994:	0952      	lsrs	r2, r2, #5
 8006996:	b292      	uxth	r2, r2
 8006998:	fbb3 f1f2 	udiv	r1, r3, r2
 800699c:	fb02 f201 	mul.w	r2, r2, r1
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <find_volume+0x2a8>
 80069a8:	230d      	movs	r3, #13
 80069aa:	e124      	b.n	8006bf6 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	3334      	adds	r3, #52	; 0x34
 80069b0:	3313      	adds	r3, #19
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe fc0c 	bl	80051d0 <ld_word>
 80069b8:	4603      	mov	r3, r0
 80069ba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80069bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <find_volume+0x2cc>
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	3334      	adds	r3, #52	; 0x34
 80069c6:	3320      	adds	r3, #32
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe fc19 	bl	8005200 <ld_dword>
 80069ce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80069d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d2:	3334      	adds	r3, #52	; 0x34
 80069d4:	330e      	adds	r3, #14
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe fbfa 	bl	80051d0 <ld_word>
 80069dc:	4603      	mov	r3, r0
 80069de:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80069e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <find_volume+0x2ec>
 80069e6:	230d      	movs	r3, #13
 80069e8:	e105      	b.n	8006bf6 <find_volume+0x4f2>
 80069ea:	bf00      	nop
 80069ec:	20000134 	.word	0x20000134

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80069f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f4:	4413      	add	r3, r2
 80069f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069f8:	8911      	ldrh	r1, [r2, #8]
 80069fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069fc:	8992      	ldrh	r2, [r2, #12]
 80069fe:	0952      	lsrs	r2, r2, #5
 8006a00:	b292      	uxth	r2, r2
 8006a02:	fbb1 f2f2 	udiv	r2, r1, r2
 8006a06:	b292      	uxth	r2, r2
 8006a08:	4413      	add	r3, r2
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d201      	bcs.n	8006a18 <find_volume+0x314>
 8006a14:	230d      	movs	r3, #13
 8006a16:	e0ee      	b.n	8006bf6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006a18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a20:	8952      	ldrh	r2, [r2, #10]
 8006a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <find_volume+0x32e>
 8006a2e:	230d      	movs	r3, #13
 8006a30:	e0e1      	b.n	8006bf6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8006a32:	2303      	movs	r3, #3
 8006a34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d802      	bhi.n	8006a48 <find_volume+0x344>
 8006a42:	2302      	movs	r3, #2
 8006a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d802      	bhi.n	8006a58 <find_volume+0x354>
 8006a52:	2301      	movs	r3, #1
 8006a54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	1c9a      	adds	r2, r3, #2
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a64:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006a66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6a:	441a      	add	r2, r3
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006a70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	441a      	add	r2, r3
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8006a7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d11e      	bne.n	8006ac0 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a84:	3334      	adds	r3, #52	; 0x34
 8006a86:	332a      	adds	r3, #42	; 0x2a
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe fba1 	bl	80051d0 <ld_word>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <find_volume+0x394>
 8006a94:	230d      	movs	r3, #13
 8006a96:	e0ae      	b.n	8006bf6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	891b      	ldrh	r3, [r3, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <find_volume+0x3a0>
 8006aa0:	230d      	movs	r3, #13
 8006aa2:	e0a8      	b.n	8006bf6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	3334      	adds	r3, #52	; 0x34
 8006aa8:	332c      	adds	r3, #44	; 0x2c
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fba8 	bl	8005200 <ld_dword>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	647b      	str	r3, [r7, #68]	; 0x44
 8006abe:	e01f      	b.n	8006b00 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac2:	891b      	ldrh	r3, [r3, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <find_volume+0x3c8>
 8006ac8:	230d      	movs	r3, #13
 8006aca:	e094      	b.n	8006bf6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad2:	441a      	add	r2, r3
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d103      	bne.n	8006ae8 <find_volume+0x3e4>
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	e00a      	b.n	8006afe <find_volume+0x3fa>
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	699a      	ldr	r2, [r3, #24]
 8006aec:	4613      	mov	r3, r2
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	4413      	add	r3, r2
 8006af2:	085a      	lsrs	r2, r3, #1
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006afe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	899b      	ldrh	r3, [r3, #12]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b0c:	440b      	add	r3, r1
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b12:	8989      	ldrh	r1, [r1, #12]
 8006b14:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d201      	bcs.n	8006b20 <find_volume+0x41c>
 8006b1c:	230d      	movs	r3, #13
 8006b1e:	e06a      	b.n	8006bf6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b26:	615a      	str	r2, [r3, #20]
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	695a      	ldr	r2, [r3, #20]
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	2280      	movs	r2, #128	; 0x80
 8006b34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006b36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d149      	bne.n	8006bd2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	3334      	adds	r3, #52	; 0x34
 8006b42:	3330      	adds	r3, #48	; 0x30
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fe fb43 	bl	80051d0 <ld_word>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d140      	bne.n	8006bd2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b52:	3301      	adds	r3, #1
 8006b54:	4619      	mov	r1, r3
 8006b56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b58:	f7fe fdea 	bl	8005730 <move_window>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d137      	bne.n	8006bd2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b64:	2200      	movs	r2, #0
 8006b66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	3334      	adds	r3, #52	; 0x34
 8006b6c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe fb2d 	bl	80051d0 <ld_word>
 8006b76:	4603      	mov	r3, r0
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d127      	bne.n	8006bd2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	3334      	adds	r3, #52	; 0x34
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fe fb3a 	bl	8005200 <ld_dword>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	4b1c      	ldr	r3, [pc, #112]	; (8006c00 <find_volume+0x4fc>)
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d11e      	bne.n	8006bd2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b96:	3334      	adds	r3, #52	; 0x34
 8006b98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe fb2f 	bl	8005200 <ld_dword>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b17      	ldr	r3, [pc, #92]	; (8006c04 <find_volume+0x500>)
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d113      	bne.n	8006bd2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bac:	3334      	adds	r3, #52	; 0x34
 8006bae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fe fb24 	bl	8005200 <ld_dword>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc0:	3334      	adds	r3, #52	; 0x34
 8006bc2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fb1a 	bl	8005200 <ld_dword>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006bd8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006bda:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <find_volume+0x504>)
 8006bdc:	881b      	ldrh	r3, [r3, #0]
 8006bde:	3301      	adds	r3, #1
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <find_volume+0x504>)
 8006be4:	801a      	strh	r2, [r3, #0]
 8006be6:	4b08      	ldr	r3, [pc, #32]	; (8006c08 <find_volume+0x504>)
 8006be8:	881a      	ldrh	r2, [r3, #0]
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006bee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bf0:	f7fe fd36 	bl	8005660 <clear_lock>
#endif
	return FR_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3758      	adds	r7, #88	; 0x58
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	41615252 	.word	0x41615252
 8006c04:	61417272 	.word	0x61417272
 8006c08:	20000138 	.word	0x20000138

08006c0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006c16:	2309      	movs	r3, #9
 8006c18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d01c      	beq.n	8006c5a <validate+0x4e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d018      	beq.n	8006c5a <validate+0x4e>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d013      	beq.n	8006c5a <validate+0x4e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	889a      	ldrh	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	88db      	ldrh	r3, [r3, #6]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d10c      	bne.n	8006c5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fa24 	bl	8005094 <disk_status>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <validate+0x4e>
			res = FR_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <validate+0x5a>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	e000      	b.n	8006c68 <validate+0x5c>
 8006c66:	2300      	movs	r3, #0
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	6013      	str	r3, [r2, #0]
	return res;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
	...

08006c78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006c8a:	f107 0310 	add.w	r3, r7, #16
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fc9e 	bl	80065d0 <get_ldnumber>
 8006c94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	da01      	bge.n	8006ca0 <f_mount+0x28>
 8006c9c:	230b      	movs	r3, #11
 8006c9e:	e02b      	b.n	8006cf8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ca0:	4a17      	ldr	r2, [pc, #92]	; (8006d00 <f_mount+0x88>)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d005      	beq.n	8006cbc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006cb0:	69b8      	ldr	r0, [r7, #24]
 8006cb2:	f7fe fcd5 	bl	8005660 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d002      	beq.n	8006cc8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	490d      	ldr	r1, [pc, #52]	; (8006d00 <f_mount+0x88>)
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <f_mount+0x66>
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d001      	beq.n	8006ce2 <f_mount+0x6a>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e00a      	b.n	8006cf8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ce2:	f107 010c 	add.w	r1, r7, #12
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	2200      	movs	r2, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff fd09 	bl	8006704 <find_volume>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	20000134 	.word	0x20000134

08006d04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b098      	sub	sp, #96	; 0x60
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <f_open+0x18>
 8006d18:	2309      	movs	r3, #9
 8006d1a:	e1bb      	b.n	8007094 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006d1c:	79fb      	ldrb	r3, [r7, #7]
 8006d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006d24:	79fa      	ldrb	r2, [r7, #7]
 8006d26:	f107 0110 	add.w	r1, r7, #16
 8006d2a:	f107 0308 	add.w	r3, r7, #8
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff fce8 	bl	8006704 <find_volume>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f040 819f 	bne.w	8007082 <f_open+0x37e>
		dj.obj.fs = fs;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	f107 0314 	add.w	r3, r7, #20
 8006d4e:	4611      	mov	r1, r2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fbc7 	bl	80064e4 <follow_path>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006d5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d11a      	bne.n	8006d9a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006d64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006d68:	b25b      	sxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	da03      	bge.n	8006d76 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d6e:	2306      	movs	r3, #6
 8006d70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d74:	e011      	b.n	8006d9a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	f023 0301 	bic.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bf14      	ite	ne
 8006d80:	2301      	movne	r3, #1
 8006d82:	2300      	moveq	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	461a      	mov	r2, r3
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fb1e 	bl	80053d0 <chk_lock>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	f003 031c 	and.w	r3, r3, #28
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d07f      	beq.n	8006ea4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d017      	beq.n	8006ddc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006dac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d10e      	bne.n	8006dd2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006db4:	f7fe fb68 	bl	8005488 <enq_lock>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d006      	beq.n	8006dcc <f_open+0xc8>
 8006dbe:	f107 0314 	add.w	r3, r7, #20
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff fac7 	bl	8006356 <dir_register>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	e000      	b.n	8006dce <f_open+0xca>
 8006dcc:	2312      	movs	r3, #18
 8006dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006dd2:	79fb      	ldrb	r3, [r7, #7]
 8006dd4:	f043 0308 	orr.w	r3, r3, #8
 8006dd8:	71fb      	strb	r3, [r7, #7]
 8006dda:	e010      	b.n	8006dfe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ddc:	7ebb      	ldrb	r3, [r7, #26]
 8006dde:	f003 0311 	and.w	r3, r3, #17
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <f_open+0xea>
					res = FR_DENIED;
 8006de6:	2307      	movs	r3, #7
 8006de8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006dec:	e007      	b.n	8006dfe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <f_open+0xfa>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d168      	bne.n	8006ed8 <f_open+0x1d4>
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	f003 0308 	and.w	r3, r3, #8
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d063      	beq.n	8006ed8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006e10:	f7fd ff70 	bl	8004cf4 <get_fattime>
 8006e14:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e18:	330e      	adds	r3, #14
 8006e1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe fa2d 	bl	800527c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	3316      	adds	r3, #22
 8006e26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe fa27 	bl	800527c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e30:	330b      	adds	r3, #11
 8006e32:	2220      	movs	r2, #32
 8006e34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7ff f9f6 	bl	800622e <ld_clust>
 8006e42:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fa0e 	bl	800626c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e52:	331c      	adds	r3, #28
 8006e54:	2100      	movs	r1, #0
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fa10 	bl	800527c <st_dword>
					fs->wflag = 1;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d037      	beq.n	8006ed8 <f_open+0x1d4>
						dw = fs->winsect;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006e6e:	f107 0314 	add.w	r3, r7, #20
 8006e72:	2200      	movs	r2, #0
 8006e74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe fefe 	bl	8005c78 <remove_chain>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006e82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d126      	bne.n	8006ed8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fc4e 	bl	8005730 <move_window>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e9e:	3a01      	subs	r2, #1
 8006ea0:	611a      	str	r2, [r3, #16]
 8006ea2:	e019      	b.n	8006ed8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d115      	bne.n	8006ed8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006eac:	7ebb      	ldrb	r3, [r7, #26]
 8006eae:	f003 0310 	and.w	r3, r3, #16
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <f_open+0x1ba>
					res = FR_NO_FILE;
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ebc:	e00c      	b.n	8006ed8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <f_open+0x1d4>
 8006ec8:	7ebb      	ldrb	r3, [r7, #26]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <f_open+0x1d4>
						res = FR_DENIED;
 8006ed2:	2307      	movs	r3, #7
 8006ed4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d128      	bne.n	8006f32 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006eea:	79fb      	ldrb	r3, [r7, #7]
 8006eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ef0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	f023 0301 	bic.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	bf14      	ite	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	2300      	moveq	r3, #0
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	f107 0314 	add.w	r3, r7, #20
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fe fad7 	bl	80054cc <inc_lock>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d102      	bne.n	8006f32 <f_open+0x22e>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f040 80a3 	bne.w	8007082 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f40:	4611      	mov	r1, r2
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7ff f973 	bl	800622e <ld_clust>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	331c      	adds	r3, #28
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe f954 	bl	8005200 <ld_dword>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	88da      	ldrh	r2, [r3, #6]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	79fa      	ldrb	r2, [r7, #7]
 8006f76:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3330      	adds	r3, #48	; 0x30
 8006f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe f9be 	bl	8005316 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d06e      	beq.n	8007082 <f_open+0x37e>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d06a      	beq.n	8007082 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	895b      	ldrh	r3, [r3, #10]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	899b      	ldrh	r3, [r3, #12]
 8006fbe:	fb03 f302 	mul.w	r3, r3, r2
 8006fc2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	657b      	str	r3, [r7, #84]	; 0x54
 8006fd0:	e016      	b.n	8007000 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fc67 	bl	80058aa <get_fat>
 8006fdc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d802      	bhi.n	8006fea <f_open+0x2e6>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff0:	d102      	bne.n	8006ff8 <f_open+0x2f4>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8007000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007004:	2b00      	cmp	r3, #0
 8007006:	d103      	bne.n	8007010 <f_open+0x30c>
 8007008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800700a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800700c:	429a      	cmp	r2, r3
 800700e:	d8e0      	bhi.n	8006fd2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007014:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007016:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800701a:	2b00      	cmp	r3, #0
 800701c:	d131      	bne.n	8007082 <f_open+0x37e>
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	899b      	ldrh	r3, [r3, #12]
 8007022:	461a      	mov	r2, r3
 8007024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007026:	fbb3 f1f2 	udiv	r1, r3, r2
 800702a:	fb02 f201 	mul.w	r2, r2, r1
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d026      	beq.n	8007082 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007038:	4618      	mov	r0, r3
 800703a:	f7fe fc17 	bl	800586c <clust2sect>
 800703e:	6478      	str	r0, [r7, #68]	; 0x44
 8007040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007042:	2b00      	cmp	r3, #0
 8007044:	d103      	bne.n	800704e <f_open+0x34a>
						res = FR_INT_ERR;
 8007046:	2302      	movs	r3, #2
 8007048:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800704c:	e019      	b.n	8007082 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	899b      	ldrh	r3, [r3, #12]
 8007052:	461a      	mov	r2, r3
 8007054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007056:	fbb3 f2f2 	udiv	r2, r3, r2
 800705a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705c:	441a      	add	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	7858      	ldrb	r0, [r3, #1]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1a      	ldr	r2, [r3, #32]
 8007070:	2301      	movs	r3, #1
 8007072:	f7fe f84f 	bl	8005114 <disk_read>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <f_open+0x37e>
 800707c:	2301      	movs	r3, #1
 800707e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007086:	2b00      	cmp	r3, #0
 8007088:	d002      	beq.n	8007090 <f_open+0x38c>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007090:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007094:	4618      	mov	r0, r3
 8007096:	3760      	adds	r7, #96	; 0x60
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08c      	sub	sp, #48	; 0x30
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
 80070a8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f107 0210 	add.w	r2, r7, #16
 80070ba:	4611      	mov	r1, r2
 80070bc:	4618      	mov	r0, r3
 80070be:	f7ff fda5 	bl	8006c0c <validate>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80070c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d107      	bne.n	80070e0 <f_write+0x44>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	7d5b      	ldrb	r3, [r3, #21]
 80070d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80070d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d002      	beq.n	80070e6 <f_write+0x4a>
 80070e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070e4:	e16a      	b.n	80073bc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	7d1b      	ldrb	r3, [r3, #20]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <f_write+0x5a>
 80070f2:	2307      	movs	r3, #7
 80070f4:	e162      	b.n	80073bc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	441a      	add	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	429a      	cmp	r2, r3
 8007104:	f080 814c 	bcs.w	80073a0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	43db      	mvns	r3, r3
 800710e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007110:	e146      	b.n	80073a0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	8992      	ldrh	r2, [r2, #12]
 800711a:	fbb3 f1f2 	udiv	r1, r3, r2
 800711e:	fb02 f201 	mul.w	r2, r2, r1
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	2b00      	cmp	r3, #0
 8007126:	f040 80f1 	bne.w	800730c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	8992      	ldrh	r2, [r2, #12]
 8007132:	fbb3 f3f2 	udiv	r3, r3, r2
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	8952      	ldrh	r2, [r2, #10]
 800713a:	3a01      	subs	r2, #1
 800713c:	4013      	ands	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d143      	bne.n	80071ce <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10c      	bne.n	8007168 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	2b00      	cmp	r3, #0
 8007158:	d11a      	bne.n	8007190 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2100      	movs	r1, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe fdef 	bl	8005d42 <create_chain>
 8007164:	62b8      	str	r0, [r7, #40]	; 0x28
 8007166:	e013      	b.n	8007190 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	4619      	mov	r1, r3
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7fe fe7b 	bl	8005e72 <clmt_clust>
 800717c:	62b8      	str	r0, [r7, #40]	; 0x28
 800717e:	e007      	b.n	8007190 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	4619      	mov	r1, r3
 8007188:	4610      	mov	r0, r2
 800718a:	f7fe fdda 	bl	8005d42 <create_chain>
 800718e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 8109 	beq.w	80073aa <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	2b01      	cmp	r3, #1
 800719c:	d104      	bne.n	80071a8 <f_write+0x10c>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2202      	movs	r2, #2
 80071a2:	755a      	strb	r2, [r3, #21]
 80071a4:	2302      	movs	r3, #2
 80071a6:	e109      	b.n	80073bc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ae:	d104      	bne.n	80071ba <f_write+0x11e>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	755a      	strb	r2, [r3, #21]
 80071b6:	2301      	movs	r3, #1
 80071b8:	e100      	b.n	80073bc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071be:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <f_write+0x132>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071cc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	7d1b      	ldrb	r3, [r3, #20]
 80071d2:	b25b      	sxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	da18      	bge.n	800720a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	7858      	ldrb	r0, [r3, #1]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1a      	ldr	r2, [r3, #32]
 80071e6:	2301      	movs	r3, #1
 80071e8:	f7fd ffb4 	bl	8005154 <disk_write>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d004      	beq.n	80071fc <f_write+0x160>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	755a      	strb	r2, [r3, #21]
 80071f8:	2301      	movs	r3, #1
 80071fa:	e0df      	b.n	80073bc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	7d1b      	ldrb	r3, [r3, #20]
 8007200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007204:	b2da      	uxtb	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f7fe fb2a 	bl	800586c <clust2sect>
 8007218:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <f_write+0x18e>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2202      	movs	r2, #2
 8007224:	755a      	strb	r2, [r3, #21]
 8007226:	2302      	movs	r3, #2
 8007228:	e0c8      	b.n	80073bc <f_write+0x320>
			sect += csect;
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	4413      	add	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	899b      	ldrh	r3, [r3, #12]
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	fbb3 f3f2 	udiv	r3, r3, r2
 800723e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d043      	beq.n	80072ce <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	4413      	add	r3, r2
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	8952      	ldrh	r2, [r2, #10]
 8007250:	4293      	cmp	r3, r2
 8007252:	d905      	bls.n	8007260 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	895b      	ldrh	r3, [r3, #10]
 8007258:	461a      	mov	r2, r3
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	7858      	ldrb	r0, [r3, #1]
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	69f9      	ldr	r1, [r7, #28]
 800726a:	f7fd ff73 	bl	8005154 <disk_write>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <f_write+0x1e2>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	755a      	strb	r2, [r3, #21]
 800727a:	2301      	movs	r3, #1
 800727c:	e09e      	b.n	80073bc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1a      	ldr	r2, [r3, #32]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	6a3a      	ldr	r2, [r7, #32]
 8007288:	429a      	cmp	r2, r3
 800728a:	d918      	bls.n	80072be <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6a1a      	ldr	r2, [r3, #32]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	8992      	ldrh	r2, [r2, #12]
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	18d1      	adds	r1, r2, r3
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	899b      	ldrh	r3, [r3, #12]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f7fe f812 	bl	80052d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	7d1b      	ldrb	r3, [r3, #20]
 80072b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	899b      	ldrh	r3, [r3, #12]
 80072c2:	461a      	mov	r2, r3
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80072cc:	e04b      	b.n	8007366 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d016      	beq.n	8007306 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	699a      	ldr	r2, [r3, #24]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d210      	bcs.n	8007306 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	7858      	ldrb	r0, [r3, #1]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072ee:	2301      	movs	r3, #1
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	f7fd ff0f 	bl	8005114 <disk_read>
 80072f6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d004      	beq.n	8007306 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	755a      	strb	r2, [r3, #21]
 8007302:	2301      	movs	r3, #1
 8007304:	e05a      	b.n	80073bc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	899b      	ldrh	r3, [r3, #12]
 8007310:	4618      	mov	r0, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	8992      	ldrh	r2, [r2, #12]
 800731a:	fbb3 f1f2 	udiv	r1, r3, r2
 800731e:	fb02 f201 	mul.w	r2, r2, r1
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	1ac3      	subs	r3, r0, r3
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d901      	bls.n	8007334 <f_write+0x298>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	8992      	ldrh	r2, [r2, #12]
 8007342:	fbb3 f0f2 	udiv	r0, r3, r2
 8007346:	fb02 f200 	mul.w	r2, r2, r0
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	440b      	add	r3, r1
 800734e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007350:	69f9      	ldr	r1, [r7, #28]
 8007352:	4618      	mov	r0, r3
 8007354:	f7fd ffbe 	bl	80052d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	7d1b      	ldrb	r3, [r3, #20]
 800735c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007360:	b2da      	uxtb	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007366:	69fa      	ldr	r2, [r7, #28]
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	4413      	add	r3, r2
 800736c:	61fb      	str	r3, [r7, #28]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699a      	ldr	r2, [r3, #24]
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	441a      	add	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	619a      	str	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	429a      	cmp	r2, r3
 8007384:	bf38      	it	cc
 8007386:	461a      	movcc	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	60da      	str	r2, [r3, #12]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	441a      	add	r2, r3
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f47f aeb5 	bne.w	8007112 <f_write+0x76>
 80073a8:	e000      	b.n	80073ac <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80073aa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	7d1b      	ldrb	r3, [r3, #20]
 80073b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3730      	adds	r7, #48	; 0x30
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b086      	sub	sp, #24
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f107 0208 	add.w	r2, r7, #8
 80073d2:	4611      	mov	r1, r2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff fc19 	bl	8006c0c <validate>
 80073da:	4603      	mov	r3, r0
 80073dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80073de:	7dfb      	ldrb	r3, [r7, #23]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d168      	bne.n	80074b6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	7d1b      	ldrb	r3, [r3, #20]
 80073e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d062      	beq.n	80074b6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	7d1b      	ldrb	r3, [r3, #20]
 80073f4:	b25b      	sxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da15      	bge.n	8007426 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	7858      	ldrb	r0, [r3, #1]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1a      	ldr	r2, [r3, #32]
 8007408:	2301      	movs	r3, #1
 800740a:	f7fd fea3 	bl	8005154 <disk_write>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <f_sync+0x54>
 8007414:	2301      	movs	r3, #1
 8007416:	e04f      	b.n	80074b8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7d1b      	ldrb	r3, [r3, #20]
 800741c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007420:	b2da      	uxtb	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007426:	f7fd fc65 	bl	8004cf4 <get_fattime>
 800742a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7fe f97b 	bl	8005730 <move_window>
 800743a:	4603      	mov	r3, r0
 800743c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d138      	bne.n	80074b6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007448:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	330b      	adds	r3, #11
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	330b      	adds	r3, #11
 8007454:	f042 0220 	orr.w	r2, r2, #32
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	461a      	mov	r2, r3
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	f7fe ff00 	bl	800626c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f103 021c 	add.w	r2, r3, #28
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f7fd feff 	bl	800527c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3316      	adds	r3, #22
 8007482:	6939      	ldr	r1, [r7, #16]
 8007484:	4618      	mov	r0, r3
 8007486:	f7fd fef9 	bl	800527c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3312      	adds	r3, #18
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f7fd fed8 	bl	8005246 <st_word>
					fs->wflag = 1;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2201      	movs	r2, #1
 800749a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe f974 	bl	800578c <sync_fs>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	7d1b      	ldrb	r3, [r3, #20]
 80074ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074b0:	b2da      	uxtb	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80074b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff ff7b 	bl	80073c4 <f_sync>
 80074ce:	4603      	mov	r3, r0
 80074d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d118      	bne.n	800750a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f107 0208 	add.w	r2, r7, #8
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fb93 	bl	8006c0c <validate>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10c      	bne.n	800750a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe f877 	bl	80055e8 <dec_lock>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d102      	bne.n	800750a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b090      	sub	sp, #64	; 0x40
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f107 0208 	add.w	r2, r7, #8
 8007524:	4611      	mov	r1, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7ff fb70 	bl	8006c0c <validate>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8007532:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <f_lseek+0x2e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7d5b      	ldrb	r3, [r3, #21]
 800753e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8007542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007546:	2b00      	cmp	r3, #0
 8007548:	d002      	beq.n	8007550 <f_lseek+0x3c>
 800754a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800754e:	e201      	b.n	8007954 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 80d9 	beq.w	800770c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007560:	d15a      	bne.n	8007618 <f_lseek+0x104>
			tbl = fp->cltbl;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	1d1a      	adds	r2, r3, #4
 800756c:	627a      	str	r2, [r7, #36]	; 0x24
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	2302      	movs	r3, #2
 8007574:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800757c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757e:	2b00      	cmp	r3, #0
 8007580:	d03a      	beq.n	80075f8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	613b      	str	r3, [r7, #16]
 8007586:	2300      	movs	r3, #0
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	3302      	adds	r3, #2
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	3301      	adds	r3, #1
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fe f983 	bl	80058aa <get_fat>
 80075a4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d804      	bhi.n	80075b6 <f_lseek+0xa2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	755a      	strb	r2, [r3, #21]
 80075b2:	2302      	movs	r3, #2
 80075b4:	e1ce      	b.n	8007954 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075bc:	d104      	bne.n	80075c8 <f_lseek+0xb4>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	755a      	strb	r2, [r3, #21]
 80075c4:	2301      	movs	r3, #1
 80075c6:	e1c5      	b.n	8007954 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d0de      	beq.n	8007590 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80075d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d809      	bhi.n	80075ee <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	1d1a      	adds	r2, r3, #4
 80075de:	627a      	str	r2, [r7, #36]	; 0x24
 80075e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	1d1a      	adds	r2, r3, #4
 80075e8:	627a      	str	r2, [r7, #36]	; 0x24
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d3c4      	bcc.n	8007582 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075fe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	429a      	cmp	r2, r3
 8007606:	d803      	bhi.n	8007610 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e19f      	b.n	8007950 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007610:	2311      	movs	r3, #17
 8007612:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007616:	e19b      	b.n	8007950 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d902      	bls.n	8007628 <f_lseek+0x114>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 818d 	beq.w	8007950 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	3b01      	subs	r3, #1
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fe fc18 	bl	8005e72 <clmt_clust>
 8007642:	4602      	mov	r2, r0
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	4619      	mov	r1, r3
 8007650:	4610      	mov	r0, r2
 8007652:	f7fe f90b 	bl	800586c <clust2sect>
 8007656:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <f_lseek+0x154>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2202      	movs	r2, #2
 8007662:	755a      	strb	r2, [r3, #21]
 8007664:	2302      	movs	r3, #2
 8007666:	e175      	b.n	8007954 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	3b01      	subs	r3, #1
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	8992      	ldrh	r2, [r2, #12]
 8007670:	fbb3 f3f2 	udiv	r3, r3, r2
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	8952      	ldrh	r2, [r2, #10]
 8007678:	3a01      	subs	r2, #1
 800767a:	4013      	ands	r3, r2
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	4413      	add	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	8992      	ldrh	r2, [r2, #12]
 800768a:	fbb3 f1f2 	udiv	r1, r3, r2
 800768e:	fb02 f201 	mul.w	r2, r2, r1
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 815b 	beq.w	8007950 <f_lseek+0x43c>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	f000 8155 	beq.w	8007950 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7d1b      	ldrb	r3, [r3, #20]
 80076aa:	b25b      	sxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da18      	bge.n	80076e2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	7858      	ldrb	r0, [r3, #1]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a1a      	ldr	r2, [r3, #32]
 80076be:	2301      	movs	r3, #1
 80076c0:	f7fd fd48 	bl	8005154 <disk_write>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d004      	beq.n	80076d4 <f_lseek+0x1c0>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2201      	movs	r2, #1
 80076ce:	755a      	strb	r2, [r3, #21]
 80076d0:	2301      	movs	r3, #1
 80076d2:	e13f      	b.n	8007954 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	7d1b      	ldrb	r3, [r3, #20]
 80076d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	7858      	ldrb	r0, [r3, #1]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076ec:	2301      	movs	r3, #1
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	f7fd fd10 	bl	8005114 <disk_read>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d004      	beq.n	8007704 <f_lseek+0x1f0>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	755a      	strb	r2, [r3, #21]
 8007700:	2301      	movs	r3, #1
 8007702:	e127      	b.n	8007954 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	621a      	str	r2, [r3, #32]
 800770a:	e121      	b.n	8007950 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	d908      	bls.n	8007728 <f_lseek+0x214>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7d1b      	ldrb	r3, [r3, #20]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	637b      	str	r3, [r7, #52]	; 0x34
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007736:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 80b5 	beq.w	80078aa <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	895b      	ldrh	r3, [r3, #10]
 8007744:	461a      	mov	r2, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	899b      	ldrh	r3, [r3, #12]
 800774a:	fb03 f302 	mul.w	r3, r3, r2
 800774e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d01b      	beq.n	800778e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	1e5a      	subs	r2, r3, #1
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	1e59      	subs	r1, r3, #1
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800776a:	429a      	cmp	r2, r3
 800776c:	d30f      	bcc.n	800778e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	1e5a      	subs	r2, r3, #1
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	425b      	negs	r3, r3
 8007776:	401a      	ands	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	63bb      	str	r3, [r7, #56]	; 0x38
 800778c:	e022      	b.n	80077d4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	2b00      	cmp	r3, #0
 8007798:	d119      	bne.n	80077ce <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe facf 	bl	8005d42 <create_chain>
 80077a4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d104      	bne.n	80077b6 <f_lseek+0x2a2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	755a      	strb	r2, [r3, #21]
 80077b2:	2302      	movs	r3, #2
 80077b4:	e0ce      	b.n	8007954 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077bc:	d104      	bne.n	80077c8 <f_lseek+0x2b4>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	755a      	strb	r2, [r3, #21]
 80077c4:	2301      	movs	r3, #1
 80077c6:	e0c5      	b.n	8007954 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077cc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077d2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80077d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d067      	beq.n	80078aa <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80077da:	e03a      	b.n	8007852 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699a      	ldr	r2, [r3, #24]
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	441a      	add	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	7d1b      	ldrb	r3, [r3, #20]
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00b      	beq.n	8007814 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe fa9e 	bl	8005d42 <create_chain>
 8007806:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780a:	2b00      	cmp	r3, #0
 800780c:	d108      	bne.n	8007820 <f_lseek+0x30c>
							ofs = 0; break;
 800780e:	2300      	movs	r3, #0
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	e022      	b.n	800785a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007818:	4618      	mov	r0, r3
 800781a:	f7fe f846 	bl	80058aa <get_fat>
 800781e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007826:	d104      	bne.n	8007832 <f_lseek+0x31e>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	755a      	strb	r2, [r3, #21]
 800782e:	2301      	movs	r3, #1
 8007830:	e090      	b.n	8007954 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007834:	2b01      	cmp	r3, #1
 8007836:	d904      	bls.n	8007842 <f_lseek+0x32e>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783e:	429a      	cmp	r2, r3
 8007840:	d304      	bcc.n	800784c <f_lseek+0x338>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2202      	movs	r2, #2
 8007846:	755a      	strb	r2, [r3, #21]
 8007848:	2302      	movs	r3, #2
 800784a:	e083      	b.n	8007954 <f_lseek+0x440>
					fp->clust = clst;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007850:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	429a      	cmp	r2, r3
 8007858:	d8c0      	bhi.n	80077dc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	441a      	add	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	899b      	ldrh	r3, [r3, #12]
 800786a:	461a      	mov	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007872:	fb02 f201 	mul.w	r2, r2, r1
 8007876:	1a9b      	subs	r3, r3, r2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d016      	beq.n	80078aa <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007880:	4618      	mov	r0, r3
 8007882:	f7fd fff3 	bl	800586c <clust2sect>
 8007886:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <f_lseek+0x384>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2202      	movs	r2, #2
 8007892:	755a      	strb	r2, [r3, #21]
 8007894:	2302      	movs	r3, #2
 8007896:	e05d      	b.n	8007954 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	899b      	ldrh	r3, [r3, #12]
 800789c:	461a      	mov	r2, r3
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078a6:	4413      	add	r3, r2
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d90a      	bls.n	80078cc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699a      	ldr	r2, [r3, #24]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	7d1b      	ldrb	r3, [r3, #20]
 80078c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	8992      	ldrh	r2, [r2, #12]
 80078d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80078d8:	fb02 f201 	mul.w	r2, r2, r1
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d036      	beq.n	8007950 <f_lseek+0x43c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d031      	beq.n	8007950 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	7d1b      	ldrb	r3, [r3, #20]
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	da18      	bge.n	8007928 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	7858      	ldrb	r0, [r3, #1]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1a      	ldr	r2, [r3, #32]
 8007904:	2301      	movs	r3, #1
 8007906:	f7fd fc25 	bl	8005154 <disk_write>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <f_lseek+0x406>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	755a      	strb	r2, [r3, #21]
 8007916:	2301      	movs	r3, #1
 8007918:	e01c      	b.n	8007954 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7d1b      	ldrb	r3, [r3, #20]
 800791e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007922:	b2da      	uxtb	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	7858      	ldrb	r0, [r3, #1]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007932:	2301      	movs	r3, #1
 8007934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007936:	f7fd fbed 	bl	8005114 <disk_read>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <f_lseek+0x436>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	755a      	strb	r2, [r3, #21]
 8007946:	2301      	movs	r3, #1
 8007948:	e004      	b.n	8007954 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800794e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007950:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007954:	4618      	mov	r0, r3
 8007956:	3740      	adds	r7, #64	; 0x40
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007972:	4b1f      	ldr	r3, [pc, #124]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 8007974:	7a5b      	ldrb	r3, [r3, #9]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d131      	bne.n	80079e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800797c:	4b1c      	ldr	r3, [pc, #112]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 800797e:	7a5b      	ldrb	r3, [r3, #9]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 8007986:	2100      	movs	r1, #0
 8007988:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800798a:	4b19      	ldr	r3, [pc, #100]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 800798c:	7a5b      	ldrb	r3, [r3, #9]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800799a:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 800799c:	7a5b      	ldrb	r3, [r3, #9]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	4b13      	ldr	r3, [pc, #76]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 80079a4:	4413      	add	r3, r2
 80079a6:	79fa      	ldrb	r2, [r7, #7]
 80079a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 80079ac:	7a5b      	ldrb	r3, [r3, #9]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	b2d1      	uxtb	r1, r2
 80079b4:	4a0e      	ldr	r2, [pc, #56]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 80079b6:	7251      	strb	r1, [r2, #9]
 80079b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80079ba:	7dbb      	ldrb	r3, [r7, #22]
 80079bc:	3330      	adds	r3, #48	; 0x30
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	3301      	adds	r3, #1
 80079c8:	223a      	movs	r2, #58	; 0x3a
 80079ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	3302      	adds	r3, #2
 80079d0:	222f      	movs	r2, #47	; 0x2f
 80079d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	3303      	adds	r3, #3
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	2000015c 	.word	0x2000015c

080079f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80079fe:	2200      	movs	r2, #0
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff ffaa 	bl	800795c <FATFS_LinkDriverEx>
 8007a08:	4603      	mov	r3, r0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <__libc_init_array>:
 8007a14:	b570      	push	{r4, r5, r6, lr}
 8007a16:	4e0d      	ldr	r6, [pc, #52]	; (8007a4c <__libc_init_array+0x38>)
 8007a18:	4c0d      	ldr	r4, [pc, #52]	; (8007a50 <__libc_init_array+0x3c>)
 8007a1a:	1ba4      	subs	r4, r4, r6
 8007a1c:	10a4      	asrs	r4, r4, #2
 8007a1e:	2500      	movs	r5, #0
 8007a20:	42a5      	cmp	r5, r4
 8007a22:	d109      	bne.n	8007a38 <__libc_init_array+0x24>
 8007a24:	4e0b      	ldr	r6, [pc, #44]	; (8007a54 <__libc_init_array+0x40>)
 8007a26:	4c0c      	ldr	r4, [pc, #48]	; (8007a58 <__libc_init_array+0x44>)
 8007a28:	f000 f820 	bl	8007a6c <_init>
 8007a2c:	1ba4      	subs	r4, r4, r6
 8007a2e:	10a4      	asrs	r4, r4, #2
 8007a30:	2500      	movs	r5, #0
 8007a32:	42a5      	cmp	r5, r4
 8007a34:	d105      	bne.n	8007a42 <__libc_init_array+0x2e>
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
 8007a38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a3c:	4798      	blx	r3
 8007a3e:	3501      	adds	r5, #1
 8007a40:	e7ee      	b.n	8007a20 <__libc_init_array+0xc>
 8007a42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a46:	4798      	blx	r3
 8007a48:	3501      	adds	r5, #1
 8007a4a:	e7f2      	b.n	8007a32 <__libc_init_array+0x1e>
 8007a4c:	08007b9c 	.word	0x08007b9c
 8007a50:	08007b9c 	.word	0x08007b9c
 8007a54:	08007b9c 	.word	0x08007b9c
 8007a58:	08007ba0 	.word	0x08007ba0

08007a5c <memset>:
 8007a5c:	4402      	add	r2, r0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d100      	bne.n	8007a66 <memset+0xa>
 8007a64:	4770      	bx	lr
 8007a66:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6a:	e7f9      	b.n	8007a60 <memset+0x4>

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
