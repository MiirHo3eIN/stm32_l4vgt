
iis2clx_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007430  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080075c0  080075c0  000175c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007868  08007868  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007868  08007868  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007868  08007868  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  200001dc  08007a4c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200002c0  08007a4c  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d14b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f0c  00000000  00000000  0002d357  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002f268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000260e8  00000000  00000000  00030610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d64  00000000  00000000  000566f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e538e  00000000  00000000  0006045c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001457ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000320c  00000000  00000000  00145868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075a8 	.word	0x080075a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080075a8 	.word	0x080075a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_DMA_Init+0x38>)
 8000bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb2:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <MX_DMA_Init+0x38>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_DMA_Init+0x38>)
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2100      	movs	r1, #0
 8000bca:	200f      	movs	r0, #15
 8000bcc:	f000 fd5b 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000bd0:	200f      	movs	r0, #15
 8000bd2:	f000 fd74 	bl	80016be <HAL_NVIC_EnableIRQ>

}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfa:	4b39      	ldr	r3, [pc, #228]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a38      	ldr	r2, [pc, #224]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b36      	ldr	r3, [pc, #216]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b33      	ldr	r3, [pc, #204]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a32      	ldr	r2, [pc, #200]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a26      	ldr	r2, [pc, #152]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <MX_GPIO_Init+0xfc>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8000c60:	4820      	ldr	r0, [pc, #128]	; (8000ce4 <MX_GPIO_Init+0x100>)
 8000c62:	f001 f935 	bl	8001ed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6c:	481e      	ldr	r0, [pc, #120]	; (8000ce8 <MX_GPIO_Init+0x104>)
 8000c6e:	f001 f92f 	bl	8001ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_GPIO_Init+0x108>)
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	4619      	mov	r1, r3
 8000c86:	481a      	ldr	r0, [pc, #104]	; (8000cf0 <MX_GPIO_Init+0x10c>)
 8000c88:	f000 ff7a 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000c8c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <MX_GPIO_Init+0x100>)
 8000ca6:	f000 ff6b 	bl	8001b80 <HAL_GPIO_Init>

  /* Configure GPIO pin: pB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <MX_GPIO_Init+0x104>)
 8000cc4:	f000 ff5c 	bl	8001b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2028      	movs	r0, #40	; 0x28
 8000cce:	f000 fcda 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cd2:	2028      	movs	r0, #40	; 0x28
 8000cd4:	f000 fcf3 	bl	80016be <HAL_NVIC_EnableIRQ>

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	48000c00 	.word	0x48000c00
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	10110000 	.word	0x10110000
 8000cf0:	48001000 	.word	0x48001000

08000cf4 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <MX_I2C2_Init+0x78>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702D95;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d00:	4a1b      	ldr	r2, [pc, #108]	; (8000d70 <MX_I2C2_Init+0x7c>)
 8000d02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0a:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d2e:	480e      	ldr	r0, [pc, #56]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d30:	f001 f923 	bl	8001f7a <HAL_I2C_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d3a:	f000 fa4d 	bl	80011d8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 8000d3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d44:	f003 f862 	bl	8003e0c <HAL_I2CEx_ConfigAnalogFilter>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000d4e:	f000 fa43 	bl	80011d8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4804      	ldr	r0, [pc, #16]	; (8000d68 <MX_I2C2_Init+0x74>)
 8000d56:	f003 f8a4 	bl	8003ea2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000d60:	f000 fa3a 	bl	80011d8 <Error_Handler>
  }

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000210 	.word	0x20000210
 8000d6c:	40005800 	.word	0x40005800
 8000d70:	00702d95 	.word	0x00702d95

08000d74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a34      	ldr	r2, [pc, #208]	; (8000e64 <HAL_I2C_MspInit+0xf0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d162      	bne.n	8000e5c <HAL_I2C_MspInit+0xe8>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <HAL_I2C_MspInit+0xf4>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a33      	ldr	r2, [pc, #204]	; (8000e68 <HAL_I2C_MspInit+0xf4>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <HAL_I2C_MspInit+0xf4>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db4:	2312      	movs	r3, #18
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc0:	2304      	movs	r3, #4
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4828      	ldr	r0, [pc, #160]	; (8000e6c <HAL_I2C_MspInit+0xf8>)
 8000dcc:	f000 fed8 	bl	8001b80 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_I2C_MspInit+0xf4>)
 8000dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd4:	4a24      	ldr	r2, [pc, #144]	; (8000e68 <HAL_I2C_MspInit+0xf4>)
 8000dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dda:	6593      	str	r3, [r2, #88]	; 0x58
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <HAL_I2C_MspInit+0xf4>)
 8000dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_I2C_MspInit+0x100>)
 8000dec:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_3;
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000df0:	2203      	movs	r2, #3
 8000df2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000e12:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000e1a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000e1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000e22:	f000 fc67 	bl	80016f4 <HAL_DMA_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8000e2c:	f000 f9d4 	bl	80011d8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <HAL_I2C_MspInit+0xfc>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2021      	movs	r0, #33	; 0x21
 8000e42:	f000 fc20 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000e46:	2021      	movs	r0, #33	; 0x21
 8000e48:	f000 fc39 	bl	80016be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2022      	movs	r0, #34	; 0x22
 8000e52:	f000 fc18 	bl	8001686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000e56:	2022      	movs	r0, #34	; 0x22
 8000e58:	f000 fc31 	bl	80016be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40005800 	.word	0x40005800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	2000025c 	.word	0x2000025c
 8000e74:	40020058 	.word	0x40020058

08000e78 <vspfunc>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
char buffer[10];
int vspfunc(char *format, ...) {
 8000e78:	b40f      	push	{r0, r1, r2, r3}
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
   va_list aptr;
   int ret;

   va_start(aptr, format);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	603b      	str	r3, [r7, #0]
   ret = vsprintf(buffer, format, aptr);
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	6939      	ldr	r1, [r7, #16]
 8000e8a:	4806      	ldr	r0, [pc, #24]	; (8000ea4 <vspfunc+0x2c>)
 8000e8c:	f004 ffc0 	bl	8005e10 <vsiprintf>
 8000e90:	6078      	str	r0, [r7, #4]
   va_end(aptr);

   return(ret);
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e9e:	b004      	add	sp, #16
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200002a4 	.word	0x200002a4

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fa9e 	bl	80013ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f867 	bl	8000f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f7ff fe95 	bl	8000be4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f7ff fe75 	bl	8000ba8 <MX_DMA_Init>
  MX_I2C2_Init();
 8000ebe:	f7ff ff19 	bl	8000cf4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
for (int i =0; i<255; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	e012      	b.n	8000eee <main+0x46>
{
	if (HAL_I2C_IsDeviceReady(&hi2c2, i, 1, 10) == HAL_OK)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	b299      	uxth	r1, r3
 8000ecc:	230a      	movs	r3, #10
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4826      	ldr	r0, [pc, #152]	; (8000f6c <main+0xc4>)
 8000ed2:	f001 fac5 	bl	8002460 <HAL_I2C_IsDeviceReady>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d105      	bne.n	8000ee8 <main+0x40>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000edc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee0:	4823      	ldr	r0, [pc, #140]	; (8000f70 <main+0xc8>)
 8000ee2:	f001 f80d 	bl	8001f00 <HAL_GPIO_TogglePin>
		break;
 8000ee6:	e005      	b.n	8000ef4 <main+0x4c>
for (int i =0; i<255; i++)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3301      	adds	r3, #1
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2bfe      	cmp	r3, #254	; 0xfe
 8000ef2:	dde9      	ble.n	8000ec8 <main+0x20>
	}
}

float f = 0.001;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <main+0xcc>)
 8000ef6:	603b      	str	r3, [r7, #0]
vspfunc("%1.4f", f);
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f7ff fb25 	bl	8000548 <__aeabi_f2d>
 8000efe:	4603      	mov	r3, r0
 8000f00:	460c      	mov	r4, r1
 8000f02:	461a      	mov	r2, r3
 8000f04:	4623      	mov	r3, r4
 8000f06:	481c      	ldr	r0, [pc, #112]	; (8000f78 <main+0xd0>)
 8000f08:	f7ff ffb6 	bl	8000e78 <vspfunc>

/** 
 * Initializing the sensor 
 *  Writing the correct value into CTRL1_XL 
 **/ 
i2cBuf[0] = IIS2CLX_CTRL1_LX_ADDR; 
 8000f0c:	2210      	movs	r2, #16
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <main+0xd4>)
 8000f10:	701a      	strb	r2, [r3, #0]
i2cBuf[1] = (II2CLX_ODR_104Hz & 0xF0) | (IIS2CLX_FS_2_G & 0x0C);
 8000f12:	2340      	movs	r3, #64	; 0x40
 8000f14:	b25b      	sxtb	r3, r3
 8000f16:	f023 030f 	bic.w	r3, r3, #15
 8000f1a:	b25a      	sxtb	r2, r3
 8000f1c:	230c      	movs	r3, #12
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	4313      	orrs	r3, r2
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <main+0xd4>)
 8000f2e:	705a      	strb	r2, [r3, #1]

HAL_I2C_Master_Transmit(&hi2c2, IIS2CLX_DEV_ADDR, i2cBuf, 2, 10);
 8000f30:	23d6      	movs	r3, #214	; 0xd6
 8000f32:	b299      	uxth	r1, r3
 8000f34:	230a      	movs	r3, #10
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <main+0xd4>)
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <main+0xc4>)
 8000f3e:	f001 f8ab 	bl	8002098 <HAL_I2C_Master_Transmit>

 
i2cBuf[0] = IIS2CLX_X_AXIS_L_ADDR;
 8000f42:	2228      	movs	r2, #40	; 0x28
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <main+0xd4>)
 8000f46:	701a      	strb	r2, [r3, #0]
HAL_I2C_Master_Transmit(&hi2c2, IIS2CLX_DEV_ADDR, i2cBuf, 1, 10);
 8000f48:	23d6      	movs	r3, #214	; 0xd6
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <main+0xd4>)
 8000f54:	4805      	ldr	r0, [pc, #20]	; (8000f6c <main+0xc4>)
 8000f56:	f001 f89f 	bl	8002098 <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Receive_DMA(&hi2c2, IIS2CLX_DEV_ADDR, &i2cBuf[1], 4);
 8000f5a:	23d6      	movs	r3, #214	; 0xd6
 8000f5c:	b299      	uxth	r1, r3
 8000f5e:	2304      	movs	r3, #4
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <main+0xd8>)
 8000f62:	4802      	ldr	r0, [pc, #8]	; (8000f6c <main+0xc4>)
 8000f64:	f001 f98c 	bl	8002280 <HAL_I2C_Master_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <main+0xc0>
 8000f6a:	bf00      	nop
 8000f6c:	20000210 	.word	0x20000210
 8000f70:	48000c00 	.word	0x48000c00
 8000f74:	3a83126f 	.word	0x3a83126f
 8000f78:	080075c0 	.word	0x080075c0
 8000f7c:	200002b0 	.word	0x200002b0
 8000f80:	200002b1 	.word	0x200002b1

08000f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0b8      	sub	sp, #224	; 0xe0
 8000f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f8e:	2244      	movs	r2, #68	; 0x44
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f004 fac2 	bl	800551c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f98:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2288      	movs	r2, #136	; 0x88
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f004 fab4 	bl	800551c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fc6:	2360      	movs	r3, #96	; 0x60
 8000fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000fde:	2328      	movs	r3, #40	; 0x28
 8000fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 f802 	bl	8004004 <HAL_RCC_OscConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001006:	f000 f8e7 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100a:	230f      	movs	r3, #15
 800100c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001010:	2303      	movs	r3, #3
 8001012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001028:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800102c:	2104      	movs	r1, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f003 fbce 	bl	80047d0 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800103a:	f000 f8cd 	bl	80011d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001042:	2300      	movs	r3, #0
 8001044:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fd8d 	bl	8004b68 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001054:	f000 f8c0 	bl	80011d8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001058:	f44f 7000 	mov.w	r0, #512	; 0x200
 800105c:	f002 ff7c 	bl	8003f58 <HAL_PWREx_ControlVoltageScaling>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001066:	f000 f8b7 	bl	80011d8 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	37e0      	adds	r7, #224	; 0xe0
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <twoComplement>:

/* USER CODE BEGIN 4 */
int16_t twoComplement(int16_t in1)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	80fb      	strh	r3, [r7, #6]
  if (in1 > 0x7ff)
 800107c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001084:	db08      	blt.n	8001098 <twoComplement+0x26>
  {
    return in1 |= 0xF000;
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800108c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001090:	80fb      	strh	r3, [r7, #6]
 8001092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001096:	e001      	b.n	800109c <twoComplement+0x2a>
  }
  else return in1;
 8001098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_I2C_MasterRxCpltCallback>:


void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback can be implemented in the user file
   */
  if (hi2c->Instance == I2C2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <HAL_I2C_MasterRxCpltCallback+0x8c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d138      	bne.n	800112c <HAL_I2C_MasterRxCpltCallback+0x84>
  {
	  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 80010ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010be:	481e      	ldr	r0, [pc, #120]	; (8001138 <HAL_I2C_MasterRxCpltCallback+0x90>)
 80010c0:	f000 ff1e 	bl	8001f00 <HAL_GPIO_TogglePin>
	    acc_x_temp = ((int16_t) i2cBuf[1]<<8 | i2cBuf[2]);
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_I2C_MasterRxCpltCallback+0x94>)
 80010c6:	785b      	ldrb	r3, [r3, #1]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <HAL_I2C_MasterRxCpltCallback+0x94>)
 80010ce:	789b      	ldrb	r3, [r3, #2]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <HAL_I2C_MasterRxCpltCallback+0x98>)
 80010d8:	801a      	strh	r2, [r3, #0]
	    acc_y_temp = ((int16_t ) i2cBuf[3]<<8 | i2cBuf[4]);
 80010da:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_I2C_MasterRxCpltCallback+0x94>)
 80010dc:	78db      	ldrb	r3, [r3, #3]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_I2C_MasterRxCpltCallback+0x94>)
 80010e4:	791b      	ldrb	r3, [r3, #4]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_I2C_MasterRxCpltCallback+0x9c>)
 80010ee:	801a      	strh	r2, [r3, #0]
	    data_conv(acc_x_temp, acc_y_temp);
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_I2C_MasterRxCpltCallback+0x98>)
 80010f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <HAL_I2C_MasterRxCpltCallback+0x9c>)
 80010f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4610      	mov	r0, r2
 8001100:	f000 f826 	bl	8001150 <data_conv>
	    i2cBuf[0] = IIS2CLX_X_AXIS_L_ADDR;
 8001104:	2228      	movs	r2, #40	; 0x28
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_I2C_MasterRxCpltCallback+0x94>)
 8001108:	701a      	strb	r2, [r3, #0]
	    HAL_I2C_Master_Transmit(&hi2c2, IIS2CLX_DEV_ADDR, i2cBuf, 1, HAL_MAX_DELAY);
 800110a:	23d6      	movs	r3, #214	; 0xd6
 800110c:	b299      	uxth	r1, r3
 800110e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2301      	movs	r3, #1
 8001116:	4a09      	ldr	r2, [pc, #36]	; (800113c <HAL_I2C_MasterRxCpltCallback+0x94>)
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <HAL_I2C_MasterRxCpltCallback+0xa0>)
 800111a:	f000 ffbd 	bl	8002098 <HAL_I2C_Master_Transmit>
    	HAL_I2C_Master_Receive_DMA(&hi2c2, IIS2CLX_DEV_ADDR, &i2cBuf[1], 4);
 800111e:	23d6      	movs	r3, #214	; 0xd6
 8001120:	b299      	uxth	r1, r3
 8001122:	2304      	movs	r3, #4
 8001124:	4a09      	ldr	r2, [pc, #36]	; (800114c <HAL_I2C_MasterRxCpltCallback+0xa4>)
 8001126:	4808      	ldr	r0, [pc, #32]	; (8001148 <HAL_I2C_MasterRxCpltCallback+0xa0>)
 8001128:	f001 f8aa 	bl	8002280 <HAL_I2C_Master_Receive_DMA>

  }
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40005800 	.word	0x40005800
 8001138:	48000400 	.word	0x48000400
 800113c:	200002b0 	.word	0x200002b0
 8001140:	200001f8 	.word	0x200001f8
 8001144:	200001fa 	.word	0x200001fa
 8001148:	20000210 	.word	0x20000210
 800114c:	200002b1 	.word	0x200002b1

08001150 <data_conv>:

void data_conv(int16_t in1, int16_t in2)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	80fb      	strh	r3, [r7, #6]
 800115c:	4613      	mov	r3, r2
 800115e:	80bb      	strh	r3, [r7, #4]

    acc_x_temp = twoComplement(in1);
 8001160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff84 	bl	8001072 <twoComplement>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <data_conv+0x74>)
 8001170:	801a      	strh	r2, [r3, #0]
    acc_y_temp = twoComplement(in2);
 8001172:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff7b 	bl	8001072 <twoComplement>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <data_conv+0x78>)
 8001182:	801a      	strh	r2, [r3, #0]

    acc_x_mg = (((float)acc_x_temp)/16393);
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <data_conv+0x74>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001192:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80011cc <data_conv+0x7c>
 8001196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <data_conv+0x80>)
 800119c:	edc3 7a00 	vstr	s15, [r3]
    acc_y_mg = (((float)acc_y_temp)/16393);
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <data_conv+0x78>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ae:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011cc <data_conv+0x7c>
 80011b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <data_conv+0x84>)
 80011b8:	edc3 7a00 	vstr	s15, [r3]

}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	200001fa 	.word	0x200001fa
 80011cc:	46801200 	.word	0x46801200
 80011d0:	200001fc 	.word	0x200001fc
 80011d4:	20000200 	.word	0x20000200

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_MspInit+0x44>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <HAL_MspInit+0x44>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6613      	str	r3, [r2, #96]	; 0x60
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_MspInit+0x44>)
 80011fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_MspInit+0x44>)
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_MspInit+0x44>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6593      	str	r3, [r2, #88]	; 0x58
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_MspInit+0x44>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000

08001230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 f906 	bl	8001494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <DMA1_Channel5_IRQHandler+0x10>)
 8001292:	f000 fb88 	bl	80019a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000025c 	.word	0x2000025c

080012a0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <I2C2_EV_IRQHandler+0x10>)
 80012a6:	f001 f9e2 	bl	800266e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000210 	.word	0x20000210

080012b4 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <I2C2_ER_IRQHandler+0x10>)
 80012ba:	f001 f9f2 	bl	80026a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000210 	.word	0x20000210

080012c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80012cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012d0:	f000 fe30 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <_sbrk+0x50>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x16>
		heap_end = &end;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <_sbrk+0x50>)
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <_sbrk+0x54>)
 80012ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <_sbrk+0x50>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <_sbrk+0x50>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4413      	add	r3, r2
 80012fc:	466a      	mov	r2, sp
 80012fe:	4293      	cmp	r3, r2
 8001300:	d907      	bls.n	8001312 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001302:	f004 f8e1 	bl	80054c8 <__errno>
 8001306:	4602      	mov	r2, r0
 8001308:	230c      	movs	r3, #12
 800130a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800130c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001310:	e006      	b.n	8001320 <_sbrk+0x48>
	}

	heap_end += incr;
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <_sbrk+0x50>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a03      	ldr	r2, [pc, #12]	; (8001328 <_sbrk+0x50>)
 800131c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000204 	.word	0x20000204
 800132c:	200002c0 	.word	0x200002c0

08001330 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <SystemInit+0x64>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133a:	4a16      	ldr	r2, [pc, #88]	; (8001394 <SystemInit+0x64>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <SystemInit+0x68>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <SystemInit+0x68>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <SystemInit+0x68>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <SystemInit+0x68>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <SystemInit+0x68>)
 800135c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001360:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001364:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <SystemInit+0x68>)
 8001368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800136c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SystemInit+0x68>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <SystemInit+0x68>)
 8001374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <SystemInit+0x68>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <SystemInit+0x64>)
 8001382:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001386:	609a      	str	r2, [r3, #8]
#endif
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00
 8001398:	40021000 	.word	0x40021000

0800139c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013a2:	e003      	b.n	80013ac <LoopCopyDataInit>

080013a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013aa:	3104      	adds	r1, #4

080013ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013ac:	480b      	ldr	r0, [pc, #44]	; (80013dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013b4:	d3f6      	bcc.n	80013a4 <CopyDataInit>
	ldr	r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013b8:	e002      	b.n	80013c0 <LoopFillZerobss>

080013ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013bc:	f842 3b04 	str.w	r3, [r2], #4

080013c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <LoopForever+0x16>)
	cmp	r2, r3
 80013c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013c4:	d3f9      	bcc.n	80013ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013c6:	f7ff ffb3 	bl	8001330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f004 f883 	bl	80054d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ce:	f7ff fd6b 	bl	8000ea8 <main>

080013d2 <LoopForever>:

LoopForever:
    b LoopForever
 80013d2:	e7fe      	b.n	80013d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80013d8:	08007870 	.word	0x08007870
	ldr	r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013e0:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80013e4:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80013e8:	200002c0 	.word	0x200002c0

080013ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_2_IRQHandler>

080013ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f939 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f80e 	bl	8001420 <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	e001      	b.n	8001414 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001410:	f7ff feea 	bl	80011e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001414:	79fb      	ldrb	r3, [r7, #7]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800142c:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_InitTick+0x68>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d022      	beq.n	800147a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_InitTick+0x6c>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HAL_InitTick+0x68>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001440:	fbb1 f3f3 	udiv	r3, r1, r3
 8001444:	fbb2 f3f3 	udiv	r3, r2, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f946 	bl	80016da <HAL_SYSTICK_Config>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10f      	bne.n	8001474 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	d809      	bhi.n	800146e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145a:	2200      	movs	r2, #0
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001462:	f000 f910 	bl	8001686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_InitTick+0x70>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e007      	b.n	800147e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e004      	b.n	800147e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
 8001478:	e001      	b.n	800147e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800147e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000008 	.word	0x20000008
 800148c:	20000000 	.word	0x20000000
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_IncTick+0x1c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x20>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <HAL_IncTick+0x1c>)
 80014a4:	6013      	str	r3, [r2, #0]
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200002b8 	.word	0x200002b8
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200002b8 	.word	0x200002b8

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4907      	ldr	r1, [pc, #28]	; (800156c <__NVIC_EnableIRQ+0x38>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001650:	f7ff ff8e 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff29 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff3e 	bl	8001518 <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff8e 	bl	80015c4 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5d 	bl	8001570 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff31 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa2 	bl	800162c <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e098      	b.n	8001838 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b4d      	ldr	r3, [pc, #308]	; (8001844 <HAL_DMA_Init+0x150>)
 800170e:	429a      	cmp	r2, r3
 8001710:	d80f      	bhi.n	8001732 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	4b4b      	ldr	r3, [pc, #300]	; (8001848 <HAL_DMA_Init+0x154>)
 800171a:	4413      	add	r3, r2
 800171c:	4a4b      	ldr	r2, [pc, #300]	; (800184c <HAL_DMA_Init+0x158>)
 800171e:	fba2 2303 	umull	r2, r3, r2, r3
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	009a      	lsls	r2, r3, #2
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a48      	ldr	r2, [pc, #288]	; (8001850 <HAL_DMA_Init+0x15c>)
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
 8001730:	e00e      	b.n	8001750 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	4b46      	ldr	r3, [pc, #280]	; (8001854 <HAL_DMA_Init+0x160>)
 800173a:	4413      	add	r3, r2
 800173c:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_DMA_Init+0x158>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	009a      	lsls	r2, r3, #2
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a42      	ldr	r2, [pc, #264]	; (8001858 <HAL_DMA_Init+0x164>)
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800176a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017aa:	d039      	beq.n	8001820 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_DMA_Init+0x15c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d11a      	bne.n	80017ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017b6:	4b29      	ldr	r3, [pc, #164]	; (800185c <HAL_DMA_Init+0x168>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	210f      	movs	r1, #15
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4924      	ldr	r1, [pc, #144]	; (800185c <HAL_DMA_Init+0x168>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_DMA_Init+0x168>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6859      	ldr	r1, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017dc:	f003 031c 	and.w	r3, r3, #28
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	491d      	ldr	r1, [pc, #116]	; (800185c <HAL_DMA_Init+0x168>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
 80017ea:	e019      	b.n	8001820 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <HAL_DMA_Init+0x16c>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	f003 031c 	and.w	r3, r3, #28
 80017f8:	210f      	movs	r1, #15
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	4917      	ldr	r1, [pc, #92]	; (8001860 <HAL_DMA_Init+0x16c>)
 8001802:	4013      	ands	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001806:	4b16      	ldr	r3, [pc, #88]	; (8001860 <HAL_DMA_Init+0x16c>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6859      	ldr	r1, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f003 031c 	and.w	r3, r3, #28
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	4911      	ldr	r1, [pc, #68]	; (8001860 <HAL_DMA_Init+0x16c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40020407 	.word	0x40020407
 8001848:	bffdfff8 	.word	0xbffdfff8
 800184c:	cccccccd 	.word	0xcccccccd
 8001850:	40020000 	.word	0x40020000
 8001854:	bffdfbf8 	.word	0xbffdfbf8
 8001858:	40020400 	.word	0x40020400
 800185c:	400200a8 	.word	0x400200a8
 8001860:	400204a8 	.word	0x400204a8

08001864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_DMA_Start_IT+0x20>
 8001880:	2302      	movs	r3, #2
 8001882:	e04b      	b.n	800191c <HAL_DMA_Start_IT+0xb8>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d13a      	bne.n	800190e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 f92f 	bl	8001b20 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d008      	beq.n	80018dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 020e 	orr.w	r2, r2, #14
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e00f      	b.n	80018fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0204 	bic.w	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 020a 	orr.w	r2, r2, #10
 80018fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e005      	b.n	800191a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001916:	2302      	movs	r3, #2
 8001918:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800191a:	7dfb      	ldrb	r3, [r7, #23]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d005      	beq.n	8001948 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e029      	b.n	800199c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 020e 	bic.w	r2, r2, #14
 8001956:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	f003 021c 	and.w	r2, r3, #28
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	2101      	movs	r1, #1
 8001976:	fa01 f202 	lsl.w	r2, r1, r2
 800197a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
    }
  }
  return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f003 031c 	and.w	r3, r3, #28
 80019c6:	2204      	movs	r2, #4
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d026      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x7a>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d021      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0204 	bic.w	r2, r2, #4
 80019f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f003 021c 	and.w	r2, r3, #28
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2104      	movs	r1, #4
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d071      	beq.n	8001afa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a1e:	e06c      	b.n	8001afa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a24:	f003 031c 	and.w	r3, r3, #28
 8001a28:	2202      	movs	r2, #2
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d02e      	beq.n	8001a92 <HAL_DMA_IRQHandler+0xec>
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d029      	beq.n	8001a92 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10b      	bne.n	8001a64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 020a 	bic.w	r2, r2, #10
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f003 021c 	and.w	r2, r3, #28
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a70:	2102      	movs	r1, #2
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d038      	beq.n	8001afa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a90:	e033      	b.n	8001afa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f003 031c 	and.w	r3, r3, #28
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d02a      	beq.n	8001afc <HAL_DMA_IRQHandler+0x156>
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d025      	beq.n	8001afc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 020e 	bic.w	r2, r2, #14
 8001abe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	f003 021c 	and.w	r2, r3, #28
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	2101      	movs	r1, #1
 8001ace:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d004      	beq.n	8001afc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001afa:	bf00      	nop
 8001afc:	bf00      	nop
}
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b12:	b2db      	uxtb	r3, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b32:	f003 021c 	and.w	r2, r3, #28
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b10      	cmp	r3, #16
 8001b50:	d108      	bne.n	8001b64 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b62:	e007      	b.n	8001b74 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	60da      	str	r2, [r3, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b087      	sub	sp, #28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8e:	e17f      	b.n	8001e90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8171 	beq.w	8001e8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d00b      	beq.n	8001bc8 <HAL_GPIO_Init+0x48>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d007      	beq.n	8001bc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbc:	2b11      	cmp	r3, #17
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b12      	cmp	r3, #18
 8001bc6:	d130      	bne.n	8001c2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bfe:	2201      	movs	r2, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 0201 	and.w	r2, r3, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d118      	bne.n	8001c68 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	f003 0201 	and.w	r2, r3, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x128>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b12      	cmp	r3, #18
 8001ca6:	d123      	bne.n	8001cf0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0307 	and.w	r3, r3, #7
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	220f      	movs	r2, #15
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	6939      	ldr	r1, [r7, #16]
 8001cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 80ac 	beq.w	8001e8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d32:	4b5e      	ldr	r3, [pc, #376]	; (8001eac <HAL_GPIO_Init+0x32c>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	4a5d      	ldr	r2, [pc, #372]	; (8001eac <HAL_GPIO_Init+0x32c>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_GPIO_Init+0x32c>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d4a:	4a59      	ldr	r2, [pc, #356]	; (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x242>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4e      	ldr	r2, [pc, #312]	; (8001eb4 <HAL_GPIO_Init+0x334>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x23e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4d      	ldr	r2, [pc, #308]	; (8001eb8 <HAL_GPIO_Init+0x338>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x23a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4c      	ldr	r2, [pc, #304]	; (8001ebc <HAL_GPIO_Init+0x33c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x236>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4b      	ldr	r2, [pc, #300]	; (8001ec0 <HAL_GPIO_Init+0x340>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x232>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4a      	ldr	r2, [pc, #296]	; (8001ec4 <HAL_GPIO_Init+0x344>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x22e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a49      	ldr	r2, [pc, #292]	; (8001ec8 <HAL_GPIO_Init+0x348>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x22a>
 8001da6:	2306      	movs	r3, #6
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x244>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dd4:	4936      	ldr	r1, [pc, #216]	; (8001eb0 <HAL_GPIO_Init+0x330>)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e06:	4a31      	ldr	r2, [pc, #196]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e84:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f47f ae78 	bne.w	8001b90 <HAL_GPIO_Init+0x10>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	371c      	adds	r7, #28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40010000 	.word	0x40010000
 8001eb4:	48000400 	.word	0x48000400
 8001eb8:	48000800 	.word	0x48000800
 8001ebc:	48000c00 	.word	0x48000c00
 8001ec0:	48001000 	.word	0x48001000
 8001ec4:	48001400 	.word	0x48001400
 8001ec8:	48001800 	.word	0x48001800
 8001ecc:	40010400 	.word	0x40010400

08001ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	887b      	ldrh	r3, [r7, #2]
 8001f12:	4013      	ands	r3, r2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f806 	bl	8001f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40010400 	.word	0x40010400

08001f64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e081      	b.n	8002090 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d106      	bne.n	8001fa6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7fe fee7 	bl	8000d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2224      	movs	r2, #36	; 0x24
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0201 	bic.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	e006      	b.n	8002002 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002000:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d104      	bne.n	8002014 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002012:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002026:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002036:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	ea42 0103 	orr.w	r1, r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	021a      	lsls	r2, r3, #8
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69d9      	ldr	r1, [r3, #28]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1a      	ldr	r2, [r3, #32]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	461a      	mov	r2, r3
 80020a4:	460b      	mov	r3, r1
 80020a6:	817b      	strh	r3, [r7, #10]
 80020a8:	4613      	mov	r3, r2
 80020aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	f040 80da 	bne.w	800226e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_I2C_Master_Transmit+0x30>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e0d3      	b.n	8002270 <HAL_I2C_Master_Transmit+0x1d8>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020d0:	f7ff f9f2 	bl	80014b8 <HAL_GetTick>
 80020d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2319      	movs	r3, #25
 80020dc:	2201      	movs	r2, #1
 80020de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f001 fc7f 	bl	80039e6 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0be      	b.n	8002270 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2221      	movs	r2, #33	; 0x21
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2210      	movs	r2, #16
 80020fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	893a      	ldrh	r2, [r7, #8]
 8002112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	2bff      	cmp	r3, #255	; 0xff
 8002122:	d90e      	bls.n	8002142 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	22ff      	movs	r2, #255	; 0xff
 8002128:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	b2da      	uxtb	r2, r3
 8002130:	8979      	ldrh	r1, [r7, #10]
 8002132:	4b51      	ldr	r3, [pc, #324]	; (8002278 <HAL_I2C_Master_Transmit+0x1e0>)
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f001 fd76 	bl	8003c2c <I2C_TransferConfig>
 8002140:	e06c      	b.n	800221c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	b2da      	uxtb	r2, r3
 8002152:	8979      	ldrh	r1, [r7, #10]
 8002154:	4b48      	ldr	r3, [pc, #288]	; (8002278 <HAL_I2C_Master_Transmit+0x1e0>)
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f001 fd65 	bl	8003c2c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002162:	e05b      	b.n	800221c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	6a39      	ldr	r1, [r7, #32]
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f001 fc7c 	bl	8003a66 <I2C_WaitOnTXISFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e07b      	b.n	8002270 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d034      	beq.n	800221c <HAL_I2C_Master_Transmit+0x184>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d130      	bne.n	800221c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	2200      	movs	r2, #0
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f001 fc0e 	bl	80039e6 <I2C_WaitOnFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e04d      	b.n	8002270 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d90e      	bls.n	80021fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	22ff      	movs	r2, #255	; 0xff
 80021e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	8979      	ldrh	r1, [r7, #10]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f001 fd19 	bl	8003c2c <I2C_TransferConfig>
 80021fa:	e00f      	b.n	800221c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	b2da      	uxtb	r2, r3
 800220c:	8979      	ldrh	r1, [r7, #10]
 800220e:	2300      	movs	r3, #0
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f001 fd08 	bl	8003c2c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d19e      	bne.n	8002164 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	6a39      	ldr	r1, [r7, #32]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f001 fc5b 	bl	8003ae6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e01a      	b.n	8002270 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2220      	movs	r2, #32
 8002240:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_I2C_Master_Transmit+0x1e4>)
 800224e:	400b      	ands	r3, r1
 8002250:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800226e:	2302      	movs	r3, #2
  }
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	80002000 	.word	0x80002000
 800227c:	fe00e800 	.word	0xfe00e800

08002280 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	461a      	mov	r2, r3
 800228c:	460b      	mov	r3, r1
 800228e:	817b      	strh	r3, [r7, #10]
 8002290:	4613      	mov	r3, r2
 8002292:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b20      	cmp	r3, #32
 800229e:	f040 80cd 	bne.w	800243c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b0:	d101      	bne.n	80022b6 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0c3      	b.n	800243e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_I2C_Master_Receive_DMA+0x44>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e0bc      	b.n	800243e <HAL_I2C_Master_Receive_DMA+0x1be>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2222      	movs	r2, #34	; 0x22
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2210      	movs	r2, #16
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	893a      	ldrh	r2, [r7, #8]
 80022ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4a55      	ldr	r2, [pc, #340]	; (8002448 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a55      	ldr	r2, [pc, #340]	; (800244c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2bff      	cmp	r3, #255	; 0xff
 8002302:	d906      	bls.n	8002312 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	22ff      	movs	r2, #255	; 0xff
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800230a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e007      	b.n	8002322 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800231c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002320:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	2b00      	cmp	r3, #0
 8002328:	d070      	beq.n	800240c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d020      	beq.n	8002374 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	4a46      	ldr	r2, [pc, #280]	; (8002450 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	4a45      	ldr	r2, [pc, #276]	; (8002454 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8002340:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	2200      	movs	r2, #0
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	2200      	movs	r2, #0
 8002350:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3324      	adds	r3, #36	; 0x24
 800235c:	4619      	mov	r1, r3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	f7ff fa7e 	bl	8001864 <HAL_DMA_Start_IT>
 8002368:	4603      	mov	r3, r0
 800236a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d138      	bne.n	80023e4 <HAL_I2C_Master_Receive_DMA+0x164>
 8002372:	e013      	b.n	800239c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e050      	b.n	800243e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	4b2c      	ldr	r3, [pc, #176]	; (8002458 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f001 fc3e 	bl	8003c2c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80023ca:	2110      	movs	r1, #16
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f001 fc5b 	bl	8003c88 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e029      	b.n	8002438 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	f043 0210 	orr.w	r2, r3, #16
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e018      	b.n	800243e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4a13      	ldr	r2, [pc, #76]	; (800245c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8002410:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	b2da      	uxtb	r2, r3
 8002418:	8979      	ldrh	r1, [r7, #10]
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f001 fc02 	bl	8003c2c <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002430:	2101      	movs	r1, #1
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f001 fc28 	bl	8003c88 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800243c:	2302      	movs	r3, #2
  }
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	ffff0000 	.word	0xffff0000
 800244c:	08002c79 	.word	0x08002c79
 8002450:	080038e7 	.word	0x080038e7
 8002454:	0800397d 	.word	0x0800397d
 8002458:	80002400 	.word	0x80002400
 800245c:	08002821 	.word	0x08002821

08002460 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08a      	sub	sp, #40	; 0x28
 8002464:	af02      	add	r7, sp, #8
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	460b      	mov	r3, r1
 800246e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b20      	cmp	r3, #32
 800247e:	f040 80f1 	bne.w	8002664 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002490:	d101      	bne.n	8002496 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
 8002494:	e0e7      	b.n	8002666 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_I2C_IsDeviceReady+0x44>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e0e0      	b.n	8002666 <HAL_I2C_IsDeviceReady+0x206>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2224      	movs	r2, #36	; 0x24
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_I2C_IsDeviceReady+0x72>
 80024c2:	897b      	ldrh	r3, [r7, #10]
 80024c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d0:	e004      	b.n	80024dc <HAL_I2C_IsDeviceReady+0x7c>
 80024d2:	897b      	ldrh	r3, [r7, #10]
 80024d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80024e2:	f7fe ffe9 	bl	80014b8 <HAL_GetTick>
 80024e6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	bf0c      	ite	eq
 80024f6:	2301      	moveq	r3, #1
 80024f8:	2300      	movne	r3, #0
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b10      	cmp	r3, #16
 800250a:	bf0c      	ite	eq
 800250c:	2301      	moveq	r3, #1
 800250e:	2300      	movne	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002514:	e034      	b.n	8002580 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800251c:	d01a      	beq.n	8002554 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7fe ffcb 	bl	80014b8 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <HAL_I2C_IsDeviceReady+0xd4>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10f      	bne.n	8002554 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002540:	f043 0220 	orr.w	r2, r3, #32
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e088      	b.n	8002666 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b20      	cmp	r3, #32
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b10      	cmp	r3, #16
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002580:	7ffb      	ldrb	r3, [r7, #31]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <HAL_I2C_IsDeviceReady+0x12c>
 8002586:	7fbb      	ldrb	r3, [r7, #30]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0c4      	beq.n	8002516 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b10      	cmp	r3, #16
 8002598:	d01a      	beq.n	80025d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2200      	movs	r2, #0
 80025a2:	2120      	movs	r1, #32
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f001 fa1e 	bl	80039e6 <I2C_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e058      	b.n	8002666 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2220      	movs	r2, #32
 80025ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e04a      	b.n	8002666 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	2120      	movs	r1, #32
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f001 fa03 	bl	80039e6 <I2C_WaitOnFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e03d      	b.n	8002666 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2210      	movs	r2, #16
 80025f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2220      	movs	r2, #32
 80025f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d118      	bne.n	8002634 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002610:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	2120      	movs	r1, #32
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f001 f9e2 	bl	80039e6 <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e01c      	b.n	8002666 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2220      	movs	r2, #32
 8002632:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3301      	adds	r3, #1
 8002638:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	429a      	cmp	r2, r3
 8002640:	f63f af3b 	bhi.w	80024ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002664:	2302      	movs	r3, #2
  }
}
 8002666:	4618      	mov	r0, r3
 8002668:	3720      	adds	r7, #32
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b084      	sub	sp, #16
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	68f9      	ldr	r1, [r7, #12]
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	4798      	blx	r3
  }
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d010      	beq.n	80026e8 <HAL_I2C_ER_IRQHandler+0x46>
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	09db      	lsrs	r3, r3, #7
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_I2C_ER_IRQHandler+0x74>
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	09db      	lsrs	r3, r3, #7
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	f043 0208 	orr.w	r2, r3, #8
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002714:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	0a5b      	lsrs	r3, r3, #9
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d010      	beq.n	8002744 <HAL_I2C_ER_IRQHandler+0xa2>
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	09db      	lsrs	r3, r3, #7
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f043 0202 	orr.w	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002742:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f003 030b 	and.w	r3, r3, #11
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 ffaa 	bl	80036b0 <I2C_ITError>
  }
}
 800275c:	bf00      	nop
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
 80027ac:	4613      	mov	r3, r2
 80027ae:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <I2C_Master_ISR_IT+0x1e>
 800283a:	2302      	movs	r3, #2
 800283c:	e115      	b.n	8002a6a <I2C_Master_ISR_IT+0x24a>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d013      	beq.n	800287a <I2C_Master_ISR_IT+0x5a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	091b      	lsrs	r3, r3, #4
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2210      	movs	r2, #16
 8002864:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f043 0204 	orr.w	r2, r3, #4
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f001 f813 	bl	800389e <I2C_Flush_TXDR>
 8002878:	e0e2      	b.n	8002a40 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d023      	beq.n	80028ce <I2C_Master_ISR_IT+0xae>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d01d      	beq.n	80028ce <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f023 0304 	bic.w	r3, r3, #4
 8002898:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028cc:	e0b8      	b.n	8002a40 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d01e      	beq.n	8002918 <I2C_Master_ISR_IT+0xf8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d018      	beq.n	8002918 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002916:	e093      	b.n	8002a40 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	09db      	lsrs	r3, r3, #7
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d05e      	beq.n	80029e2 <I2C_Master_ISR_IT+0x1c2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	099b      	lsrs	r3, r3, #6
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d058      	beq.n	80029e2 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d041      	beq.n	80029be <I2C_Master_ISR_IT+0x19e>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	d13d      	bne.n	80029be <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2bff      	cmp	r3, #255	; 0xff
 8002958:	d90e      	bls.n	8002978 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	22ff      	movs	r2, #255	; 0xff
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	b2da      	uxtb	r2, r3
 8002966:	8a79      	ldrh	r1, [r7, #18]
 8002968:	2300      	movs	r3, #0
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f001 f95b 	bl	8003c2c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002976:	e033      	b.n	80029e0 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800298a:	d00c      	beq.n	80029a6 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002996:	8a79      	ldrh	r1, [r7, #18]
 8002998:	2300      	movs	r3, #0
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4603      	mov	r3, r0
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f001 f944 	bl	8003c2c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a4:	e01c      	b.n	80029e0 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	8a79      	ldrh	r1, [r7, #18]
 80029ae:	2300      	movs	r3, #0
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f001 f938 	bl	8003c2c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029bc:	e010      	b.n	80029e0 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029cc:	d003      	beq.n	80029d6 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fba9 	bl	8003126 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029d4:	e034      	b.n	8002a40 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80029d6:	2140      	movs	r1, #64	; 0x40
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fe69 	bl	80036b0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029de:	e02f      	b.n	8002a40 <I2C_Master_ISR_IT+0x220>
 80029e0:	e02e      	b.n	8002a40 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d028      	beq.n	8002a40 <I2C_Master_ISR_IT+0x220>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	099b      	lsrs	r3, r3, #6
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d022      	beq.n	8002a40 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d119      	bne.n	8002a38 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a12:	d015      	beq.n	8002a40 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a1c:	d108      	bne.n	8002a30 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	e007      	b.n	8002a40 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fb78 	bl	8003126 <I2C_ITMasterSeqCplt>
 8002a36:	e003      	b.n	8002a40 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a38:	2140      	movs	r1, #64	; 0x40
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 fe38 	bl	80036b0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <I2C_Master_ISR_IT+0x240>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002a58:	6979      	ldr	r1, [r7, #20]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fbfe 	bl	800325c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <I2C_Slave_ISR_IT+0x24>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e0ec      	b.n	8002c70 <I2C_Slave_ISR_IT+0x1fe>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <I2C_Slave_ISR_IT+0x4c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ab6:	6939      	ldr	r1, [r7, #16]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fc99 	bl	80033f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d04d      	beq.n	8002b66 <I2C_Slave_ISR_IT+0xf4>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d047      	beq.n	8002b66 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d128      	bne.n	8002b32 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b28      	cmp	r3, #40	; 0x28
 8002aea:	d108      	bne.n	8002afe <I2C_Slave_ISR_IT+0x8c>
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002af2:	d104      	bne.n	8002afe <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002af4:	6939      	ldr	r1, [r7, #16]
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fd84 	bl	8003604 <I2C_ITListenCplt>
 8002afc:	e032      	b.n	8002b64 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b29      	cmp	r3, #41	; 0x29
 8002b08:	d10e      	bne.n	8002b28 <I2C_Slave_ISR_IT+0xb6>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b10:	d00a      	beq.n	8002b28 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2210      	movs	r2, #16
 8002b18:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 febf 	bl	800389e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fb3d 	bl	80031a0 <I2C_ITSlaveSeqCplt>
 8002b26:	e01d      	b.n	8002b64 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002b30:	e096      	b.n	8002c60 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2210      	movs	r2, #16
 8002b38:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f043 0204 	orr.w	r2, r3, #4
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <I2C_Slave_ISR_IT+0xe4>
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b52:	f040 8085 	bne.w	8002c60 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 fda7 	bl	80036b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b62:	e07d      	b.n	8002c60 <I2C_Slave_ISR_IT+0x1ee>
 8002b64:	e07c      	b.n	8002c60 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d030      	beq.n	8002bd4 <I2C_Slave_ISR_IT+0x162>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d02a      	beq.n	8002bd4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d018      	beq.n	8002bba <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d14f      	bne.n	8002c64 <I2C_Slave_ISR_IT+0x1f2>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bca:	d04b      	beq.n	8002c64 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fae7 	bl	80031a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002bd2:	e047      	b.n	8002c64 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00a      	beq.n	8002bf6 <I2C_Slave_ISR_IT+0x184>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	08db      	lsrs	r3, r3, #3
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d004      	beq.n	8002bf6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002bec:	6939      	ldr	r1, [r7, #16]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fa15 	bl	800301e <I2C_ITAddrCplt>
 8002bf4:	e037      	b.n	8002c66 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d031      	beq.n	8002c66 <I2C_Slave_ISR_IT+0x1f4>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d02b      	beq.n	8002c66 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d018      	beq.n	8002c4a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c48:	e00d      	b.n	8002c66 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c50:	d002      	beq.n	8002c58 <I2C_Slave_ISR_IT+0x1e6>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 faa1 	bl	80031a0 <I2C_ITSlaveSeqCplt>
 8002c5e:	e002      	b.n	8002c66 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002c60:	bf00      	nop
 8002c62:	e000      	b.n	8002c66 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002c64:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <I2C_Master_ISR_DMA+0x1a>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0e1      	b.n	8002e56 <I2C_Master_ISR_DMA+0x1de>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d017      	beq.n	8002cd6 <I2C_Master_ISR_DMA+0x5e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d011      	beq.n	8002cd6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	f043 0204 	orr.w	r2, r3, #4
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002cc6:	2120      	movs	r1, #32
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 ffdd 	bl	8003c88 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fde5 	bl	800389e <I2C_Flush_TXDR>
 8002cd4:	e0ba      	b.n	8002e4c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	09db      	lsrs	r3, r3, #7
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d072      	beq.n	8002dc8 <I2C_Master_ISR_DMA+0x150>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d06c      	beq.n	8002dc8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d04e      	beq.n	8002da6 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d14:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2bff      	cmp	r3, #255	; 0xff
 8002d1e:	d906      	bls.n	8002d2e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	22ff      	movs	r2, #255	; 0xff
 8002d24:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002d26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	e010      	b.n	8002d50 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d40:	d003      	beq.n	8002d4a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e002      	b.n	8002d50 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	8a79      	ldrh	r1, [r7, #18]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 ff64 	bl	8003c2c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b22      	cmp	r3, #34	; 0x22
 8002d80:	d108      	bne.n	8002d94 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d90:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002d92:	e05b      	b.n	8002e4c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002da2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002da4:	e052      	b.n	8002e4c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002db4:	d003      	beq.n	8002dbe <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f9b5 	bl	8003126 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002dbc:	e046      	b.n	8002e4c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002dbe:	2140      	movs	r1, #64	; 0x40
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fc75 	bl	80036b0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002dc6:	e041      	b.n	8002e4c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d029      	beq.n	8002e28 <I2C_Master_ISR_DMA+0x1b0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d023      	beq.n	8002e28 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d119      	bne.n	8002e1e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002df8:	d027      	beq.n	8002e4a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e02:	d108      	bne.n	8002e16 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e12:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002e14:	e019      	b.n	8002e4a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f985 	bl	8003126 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002e1c:	e015      	b.n	8002e4a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e1e:	2140      	movs	r1, #64	; 0x40
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fc45 	bl	80036b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e26:	e010      	b.n	8002e4a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00b      	beq.n	8002e4c <I2C_Master_ISR_DMA+0x1d4>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa0a 	bl	800325c <I2C_ITMasterCplt>
 8002e48:	e000      	b.n	8002e4c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8002e4a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3718      	adds	r7, #24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b088      	sub	sp, #32
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <I2C_Slave_ISR_DMA+0x24>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0c9      	b.n	8003016 <I2C_Slave_ISR_DMA+0x1b8>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <I2C_Slave_ISR_DMA+0x4c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	095b      	lsrs	r3, r3, #5
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 faa3 	bl	80033f0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 809a 	beq.w	8002fec <I2C_Slave_ISR_DMA+0x18e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8093 	beq.w	8002fec <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0b9b      	lsrs	r3, r3, #14
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d105      	bne.n	8002ede <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0bdb      	lsrs	r3, r3, #15
 8002ed6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d07f      	beq.n	8002fde <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	0bdb      	lsrs	r3, r3, #15
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d007      	beq.n	8002f02 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002efe:	2301      	movs	r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0b9b      	lsrs	r3, r3, #14
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d128      	bne.n	8002f7e <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b28      	cmp	r3, #40	; 0x28
 8002f36:	d108      	bne.n	8002f4a <I2C_Slave_ISR_DMA+0xec>
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f3e:	d104      	bne.n	8002f4a <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fb5e 	bl	8003604 <I2C_ITListenCplt>
 8002f48:	e048      	b.n	8002fdc <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b29      	cmp	r3, #41	; 0x29
 8002f54:	d10e      	bne.n	8002f74 <I2C_Slave_ISR_DMA+0x116>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f5c:	d00a      	beq.n	8002f74 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2210      	movs	r2, #16
 8002f64:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fc99 	bl	800389e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f917 	bl	80031a0 <I2C_ITSlaveSeqCplt>
 8002f72:	e033      	b.n	8002fdc <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2210      	movs	r2, #16
 8002f7a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002f7c:	e034      	b.n	8002fe8 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2210      	movs	r2, #16
 8002f84:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f98:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <I2C_Slave_ISR_DMA+0x14a>
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa6:	d11f      	bne.n	8002fe8 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b21      	cmp	r3, #33	; 0x21
 8002fac:	d002      	beq.n	8002fb4 <I2C_Slave_ISR_DMA+0x156>
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b29      	cmp	r3, #41	; 0x29
 8002fb2:	d103      	bne.n	8002fbc <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2221      	movs	r2, #33	; 0x21
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8002fba:	e008      	b.n	8002fce <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fbc:	7dfb      	ldrb	r3, [r7, #23]
 8002fbe:	2b22      	cmp	r3, #34	; 0x22
 8002fc0:	d002      	beq.n	8002fc8 <I2C_Slave_ISR_DMA+0x16a>
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc6:	d102      	bne.n	8002fce <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2222      	movs	r2, #34	; 0x22
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fb6b 	bl	80036b0 <I2C_ITError>
      if (treatdmanack == 1U)
 8002fda:	e005      	b.n	8002fe8 <I2C_Slave_ISR_DMA+0x18a>
 8002fdc:	e004      	b.n	8002fe8 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2210      	movs	r2, #16
 8002fe4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002fe6:	e011      	b.n	800300c <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002fe8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002fea:	e00f      	b.n	800300c <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	08db      	lsrs	r3, r3, #3
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <I2C_Slave_ISR_DMA+0x1ae>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	08db      	lsrs	r3, r3, #3
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f809 	bl	800301e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003034:	2b28      	cmp	r3, #40	; 0x28
 8003036:	d16a      	bne.n	800310e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	0c1b      	lsrs	r3, r3, #16
 8003050:	b29b      	uxth	r3, r3
 8003052:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003056:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	b29b      	uxth	r3, r3
 8003060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003064:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003072:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d138      	bne.n	80030ee <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800307c:	897b      	ldrh	r3, [r7, #10]
 800307e:	09db      	lsrs	r3, r3, #7
 8003080:	b29a      	uxth	r2, r3
 8003082:	89bb      	ldrh	r3, [r7, #12]
 8003084:	4053      	eors	r3, r2
 8003086:	b29b      	uxth	r3, r3
 8003088:	f003 0306 	and.w	r3, r3, #6
 800308c:	2b00      	cmp	r3, #0
 800308e:	d11c      	bne.n	80030ca <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003090:	897b      	ldrh	r3, [r7, #10]
 8003092:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d13b      	bne.n	800311e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2208      	movs	r2, #8
 80030b2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030bc:	89ba      	ldrh	r2, [r7, #12]
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff fb6c 	bl	80027a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030c8:	e029      	b.n	800311e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80030ca:	893b      	ldrh	r3, [r7, #8]
 80030cc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fe3c 	bl	8003d50 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80030e0:	89ba      	ldrh	r2, [r7, #12]
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fb5a 	bl	80027a0 <HAL_I2C_AddrCallback>
}
 80030ec:	e017      	b.n	800311e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80030ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fe2c 	bl	8003d50 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003100:	89ba      	ldrh	r2, [r7, #12]
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff fb4a 	bl	80027a0 <HAL_I2C_AddrCallback>
}
 800310c:	e007      	b.n	800311e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2208      	movs	r2, #8
 8003114:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800311e:	bf00      	nop
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b21      	cmp	r3, #33	; 0x21
 8003140:	d115      	bne.n	800316e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2211      	movs	r2, #17
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003156:	2101      	movs	r1, #1
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fdf9 	bl	8003d50 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fafc 	bl	8002764 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800316c:	e014      	b.n	8003198 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2212      	movs	r2, #18
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003182:	2102      	movs	r1, #2
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fde3 	bl	8003d50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd ff88 	bl	80010a8 <HAL_I2C_MasterRxCpltCallback>
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	0b9b      	lsrs	r3, r3, #14
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e00d      	b.n	80031f2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	0bdb      	lsrs	r3, r3, #15
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b29      	cmp	r3, #41	; 0x29
 80031fc:	d112      	bne.n	8003224 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2228      	movs	r2, #40	; 0x28
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2221      	movs	r2, #33	; 0x21
 800320a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800320c:	2101      	movs	r1, #1
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fd9e 	bl	8003d50 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff faab 	bl	8002778 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003222:	e017      	b.n	8003254 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b2a      	cmp	r3, #42	; 0x2a
 800322e:	d111      	bne.n	8003254 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2228      	movs	r2, #40	; 0x28
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2222      	movs	r2, #34	; 0x22
 800323c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800323e:	2102      	movs	r1, #2
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 fd85 	bl	8003d50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff fa9c 	bl	800278c <HAL_I2C_SlaveRxCpltCallback>
}
 8003254:	bf00      	nop
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2220      	movs	r2, #32
 8003270:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b21      	cmp	r3, #33	; 0x21
 800327c:	d107      	bne.n	800328e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800327e:	2101      	movs	r1, #1
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fd65 	bl	8003d50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2211      	movs	r2, #17
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
 800328c:	e00c      	b.n	80032a8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b22      	cmp	r3, #34	; 0x22
 8003298:	d106      	bne.n	80032a8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800329a:	2102      	movs	r1, #2
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fd57 	bl	8003d50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2212      	movs	r2, #18
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4b4d      	ldr	r3, [pc, #308]	; (80033e8 <I2C_ITMasterCplt+0x18c>)
 80032b4:	400b      	ands	r3, r1
 80032b6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4a      	ldr	r2, [pc, #296]	; (80033ec <I2C_ITMasterCplt+0x190>)
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2210      	movs	r2, #16
 80032d6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b60      	cmp	r3, #96	; 0x60
 80032ee:	d10b      	bne.n	8003308 <I2C_ITMasterCplt+0xac>
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	b2db      	uxtb	r3, r3
 8003304:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003306:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fac8 	bl	800389e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b60      	cmp	r3, #96	; 0x60
 800331e:	d002      	beq.n	8003326 <I2C_ITMasterCplt+0xca>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d006      	beq.n	8003334 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4619      	mov	r1, r3
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f9bf 	bl	80036b0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003332:	e054      	b.n	80033de <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b21      	cmp	r3, #33	; 0x21
 800333e:	d124      	bne.n	800338a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d10b      	bne.n	8003372 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fa30 	bl	80027d0 <HAL_I2C_MemTxCpltCallback>
}
 8003370:	e035      	b.n	80033de <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff f9ee 	bl	8002764 <HAL_I2C_MasterTxCpltCallback>
}
 8003388:	e029      	b.n	80033de <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b22      	cmp	r3, #34	; 0x22
 8003394:	d123      	bne.n	80033de <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d10b      	bne.n	80033c8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fa0f 	bl	80027e4 <HAL_I2C_MemRxCpltCallback>
}
 80033c6:	e00a      	b.n	80033de <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7fd fe65 	bl	80010a8 <HAL_I2C_MasterRxCpltCallback>
}
 80033de:	bf00      	nop
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	fe00e800 	.word	0xfe00e800
 80033ec:	ffff0000 	.word	0xffff0000

080033f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800340c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2220      	movs	r2, #32
 8003414:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003416:	7bfb      	ldrb	r3, [r7, #15]
 8003418:	2b21      	cmp	r3, #33	; 0x21
 800341a:	d002      	beq.n	8003422 <I2C_ITSlaveCplt+0x32>
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b29      	cmp	r3, #41	; 0x29
 8003420:	d108      	bne.n	8003434 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003422:	f248 0101 	movw	r1, #32769	; 0x8001
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fc92 	bl	8003d50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2221      	movs	r2, #33	; 0x21
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
 8003432:	e00d      	b.n	8003450 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003434:	7bfb      	ldrb	r3, [r7, #15]
 8003436:	2b22      	cmp	r3, #34	; 0x22
 8003438:	d002      	beq.n	8003440 <I2C_ITSlaveCplt+0x50>
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	2b2a      	cmp	r3, #42	; 0x2a
 800343e:	d107      	bne.n	8003450 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003440:	f248 0102 	movw	r1, #32770	; 0x8002
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fc83 	bl	8003d50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2222      	movs	r2, #34	; 0x22
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800345e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b64      	ldr	r3, [pc, #400]	; (80035fc <I2C_ITSlaveCplt+0x20c>)
 800346c:	400b      	ands	r3, r1
 800346e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fa14 	bl	800389e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	0b9b      	lsrs	r3, r3, #14
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d013      	beq.n	80034aa <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003490:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003496:	2b00      	cmp	r3, #0
 8003498:	d020      	beq.n	80034dc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034a8:	e018      	b.n	80034dc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	0bdb      	lsrs	r3, r3, #15
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d012      	beq.n	80034dc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f023 0304 	bic.w	r3, r3, #4
 80034ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00c      	beq.n	800352a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4619      	mov	r1, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f8a7 	bl	80036b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b28      	cmp	r3, #40	; 0x28
 800356c:	d141      	bne.n	80035f2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f847 	bl	8003604 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003576:	e03c      	b.n	80035f2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003580:	d014      	beq.n	80035ac <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fe0c 	bl	80031a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <I2C_ITSlaveCplt+0x210>)
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff f909 	bl	80027bc <HAL_I2C_ListenCpltCallback>
}
 80035aa:	e022      	b.n	80035f2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b22      	cmp	r3, #34	; 0x22
 80035b6:	d10e      	bne.n	80035d6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff f8dc 	bl	800278c <HAL_I2C_SlaveRxCpltCallback>
}
 80035d4:	e00d      	b.n	80035f2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff f8c3 	bl	8002778 <HAL_I2C_SlaveTxCpltCallback>
}
 80035f2:	bf00      	nop
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	fe00e800 	.word	0xfe00e800
 8003600:	ffff0000 	.word	0xffff0000

08003604 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a26      	ldr	r2, [pc, #152]	; (80036ac <I2C_ITListenCplt+0xa8>)
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d022      	beq.n	8003682 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	3b01      	subs	r3, #1
 8003662:	b29a      	uxth	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f043 0204 	orr.w	r2, r3, #4
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003682:	f248 0103 	movw	r1, #32771	; 0x8003
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fb62 	bl	8003d50 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2210      	movs	r2, #16
 8003692:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff f88d 	bl	80027bc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	ffff0000 	.word	0xffff0000

080036b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a5d      	ldr	r2, [pc, #372]	; (8003844 <I2C_ITError+0x194>)
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b28      	cmp	r3, #40	; 0x28
 80036e6:	d005      	beq.n	80036f4 <I2C_ITError+0x44>
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	2b29      	cmp	r3, #41	; 0x29
 80036ec:	d002      	beq.n	80036f4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	2b2a      	cmp	r3, #42	; 0x2a
 80036f2:	d10b      	bne.n	800370c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036f4:	2103      	movs	r1, #3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fb2a 	bl	8003d50 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2228      	movs	r2, #40	; 0x28
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a50      	ldr	r2, [pc, #320]	; (8003848 <I2C_ITError+0x198>)
 8003708:	635a      	str	r2, [r3, #52]	; 0x34
 800370a:	e011      	b.n	8003730 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800370c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb1d 	bl	8003d50 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b60      	cmp	r3, #96	; 0x60
 8003720:	d003      	beq.n	800372a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373a:	2b00      	cmp	r3, #0
 800373c:	d039      	beq.n	80037b2 <I2C_ITError+0x102>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b11      	cmp	r3, #17
 8003742:	d002      	beq.n	800374a <I2C_ITError+0x9a>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b21      	cmp	r3, #33	; 0x21
 8003748:	d133      	bne.n	80037b2 <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003758:	d107      	bne.n	800376a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003768:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe f9c8 	bl	8001b04 <HAL_DMA_GetState>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d017      	beq.n	80037aa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	4a33      	ldr	r2, [pc, #204]	; (800384c <I2C_ITError+0x19c>)
 8003780:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe f8c8 	bl	8001924 <HAL_DMA_Abort_IT>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d04d      	beq.n	8003836 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a4:	4610      	mov	r0, r2
 80037a6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037a8:	e045      	b.n	8003836 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f850 	bl	8003850 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037b0:	e041      	b.n	8003836 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d039      	beq.n	800382e <I2C_ITError+0x17e>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b12      	cmp	r3, #18
 80037be:	d002      	beq.n	80037c6 <I2C_ITError+0x116>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b22      	cmp	r3, #34	; 0x22
 80037c4:	d133      	bne.n	800382e <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d4:	d107      	bne.n	80037e6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fe f98a 	bl	8001b04 <HAL_DMA_GetState>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d017      	beq.n	8003826 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	4a14      	ldr	r2, [pc, #80]	; (800384c <I2C_ITError+0x19c>)
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe f88a 	bl	8001924 <HAL_DMA_Abort_IT>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d011      	beq.n	800383a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003820:	4610      	mov	r0, r2
 8003822:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003824:	e009      	b.n	800383a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f812 	bl	8003850 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800382c:	e005      	b.n	800383a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f80e 	bl	8003850 <I2C_TreatErrorCallback>
  }
}
 8003834:	e002      	b.n	800383c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003836:	bf00      	nop
 8003838:	e000      	b.n	800383c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800383a:	bf00      	nop
}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	ffff0000 	.word	0xffff0000
 8003848:	08002a73 	.word	0x08002a73
 800384c:	080039ab 	.word	0x080039ab

08003850 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b60      	cmp	r3, #96	; 0x60
 8003862:	d10e      	bne.n	8003882 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fe ffc6 	bl	800280c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003880:	e009      	b.n	8003896 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7fe ffb1 	bl	80027f8 <HAL_I2C_ErrorCallback>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d103      	bne.n	80038bc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2200      	movs	r2, #0
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d007      	beq.n	80038da <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	619a      	str	r2, [r3, #24]
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003902:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800390e:	2120      	movs	r1, #32
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f9b9 	bl	8003c88 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8003916:	e02d      	b.n	8003974 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003920:	441a      	add	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	2bff      	cmp	r3, #255	; 0xff
 800392e:	d903      	bls.n	8003938 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
 8003936:	e004      	b.n	8003942 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	3324      	adds	r3, #36	; 0x24
 800394c:	4619      	mov	r1, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003958:	f7fd ff84 	bl	8001864 <HAL_DMA_Start_IT>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003962:	2110      	movs	r1, #16
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fea3 	bl	80036b0 <I2C_ITError>
}
 800396a:	e003      	b.n	8003974 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800396c:	2140      	movs	r1, #64	; 0x40
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 f98a 	bl	8003c88 <I2C_Enable_IRQ>
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003998:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800399a:	2110      	movs	r1, #16
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f7ff fe87 	bl	80036b0 <I2C_ITError>
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	2200      	movs	r2, #0
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	2200      	movs	r2, #0
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f7ff ff39 	bl	8003850 <I2C_TreatErrorCallback>
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	4613      	mov	r3, r2
 80039f4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f6:	e022      	b.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039fe:	d01e      	beq.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a00:	f7fd fd5a 	bl	80014b8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d113      	bne.n	8003a3e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00f      	b.n	8003a5e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4013      	ands	r3, r2
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	bf0c      	ite	eq
 8003a4e:	2301      	moveq	r3, #1
 8003a50:	2300      	movne	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d0cd      	beq.n	80039f8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a72:	e02c      	b.n	8003ace <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f871 	bl	8003b60 <I2C_IsAcknowledgeFailed>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e02a      	b.n	8003ade <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8e:	d01e      	beq.n	8003ace <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a90:	f7fd fd12 	bl	80014b8 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d302      	bcc.n	8003aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d113      	bne.n	8003ace <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f043 0220 	orr.w	r2, r3, #32
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e007      	b.n	8003ade <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d1cb      	bne.n	8003a74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af2:	e028      	b.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f831 	bl	8003b60 <I2C_IsAcknowledgeFailed>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e026      	b.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b08:	f7fd fcd6 	bl	80014b8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d113      	bne.n	8003b46 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e007      	b.n	8003b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d1cf      	bne.n	8003af4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d151      	bne.n	8003c1e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b7a:	e022      	b.n	8003bc2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b82:	d01e      	beq.n	8003bc2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	f7fd fc98 	bl	80014b8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <I2C_IsAcknowledgeFailed+0x3a>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d113      	bne.n	8003bc2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f043 0220 	orr.w	r2, r3, #32
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e02e      	b.n	8003c20 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d1d5      	bne.n	8003b7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7ff fe5c 	bl	800389e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <I2C_IsAcknowledgeFailed+0xc8>)
 8003bf2:	400b      	ands	r3, r1
 8003bf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	f043 0204 	orr.w	r2, r3, #4
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	fe00e800 	.word	0xfe00e800

08003c2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	607b      	str	r3, [r7, #4]
 8003c36:	460b      	mov	r3, r1
 8003c38:	817b      	strh	r3, [r7, #10]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	0d5b      	lsrs	r3, r3, #21
 8003c48:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <I2C_TransferConfig+0x58>)
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	43db      	mvns	r3, r3
 8003c52:	ea02 0103 	and.w	r1, r2, r3
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c5c:	7a7b      	ldrb	r3, [r7, #9]
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003c76:	bf00      	nop
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	03ff63ff 	.word	0x03ff63ff

08003c88 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <I2C_Enable_IRQ+0xc0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <I2C_Enable_IRQ+0xc4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d11d      	bne.n	8003ce8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da03      	bge.n	8003cbc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003cba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d103      	bne.n	8003cca <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003cc8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d103      	bne.n	8003cd8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cd6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003cd8:	887b      	ldrh	r3, [r7, #2]
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d125      	bne.n	8003d2a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ce6:	e020      	b.n	8003d2a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003ce8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da03      	bge.n	8003cf8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003cf6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003d08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d0a:	887b      	ldrh	r3, [r7, #2]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003d1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d103      	bne.n	8003d2a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f043 0320 	orr.w	r3, r3, #32
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6819      	ldr	r1, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	08002c79 	.word	0x08002c79
 8003d4c:	08002e5f 	.word	0x08002e5f

08003d50 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d60:	887b      	ldrh	r3, [r7, #2]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00f      	beq.n	8003d8a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003d70:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d7e:	2b28      	cmp	r3, #40	; 0x28
 8003d80:	d003      	beq.n	8003d8a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d88:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00f      	beq.n	8003db4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003d9a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003da8:	2b28      	cmp	r3, #40	; 0x28
 8003daa:	d003      	beq.n	8003db4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003db2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003db4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	da03      	bge.n	8003dc4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003dc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003dc4:	887b      	ldrh	r3, [r7, #2]
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d103      	bne.n	8003dd2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003dd0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d103      	bne.n	8003de0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f043 0320 	orr.w	r3, r3, #32
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003de0:	887b      	ldrh	r3, [r7, #2]
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d103      	bne.n	8003dee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	43da      	mvns	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	400a      	ands	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b20      	cmp	r3, #32
 8003e20:	d138      	bne.n	8003e94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e032      	b.n	8003e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2224      	movs	r2, #36	; 0x24
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6819      	ldr	r1, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d139      	bne.n	8003f2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e033      	b.n	8003f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2224      	movs	r2, #36	; 0x24
 8003ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ef4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40007000 	.word	0x40007000

08003f58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f66:	d130      	bne.n	8003fca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f74:	d038      	beq.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f76:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f86:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2232      	movs	r2, #50	; 0x32
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	0c9b      	lsrs	r3, r3, #18
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f9c:	e002      	b.n	8003fa4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fa4:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	d102      	bne.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f2      	bne.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc4:	d110      	bne.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e00f      	b.n	8003fea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd6:	d007      	beq.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe0:	4a05      	ldr	r2, [pc, #20]	; (8003ff8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fe6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40007000 	.word	0x40007000
 8003ffc:	20000000 	.word	0x20000000
 8004000:	431bde83 	.word	0x431bde83

08004004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e3d4      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004016:	4ba1      	ldr	r3, [pc, #644]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004020:	4b9e      	ldr	r3, [pc, #632]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80e4 	beq.w	8004200 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d007      	beq.n	800404e <HAL_RCC_OscConfig+0x4a>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b0c      	cmp	r3, #12
 8004042:	f040 808b 	bne.w	800415c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b01      	cmp	r3, #1
 800404a:	f040 8087 	bne.w	800415c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800404e:	4b93      	ldr	r3, [pc, #588]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_RCC_OscConfig+0x62>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e3ac      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	4b8c      	ldr	r3, [pc, #560]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d004      	beq.n	8004080 <HAL_RCC_OscConfig+0x7c>
 8004076:	4b89      	ldr	r3, [pc, #548]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407e:	e005      	b.n	800408c <HAL_RCC_OscConfig+0x88>
 8004080:	4b86      	ldr	r3, [pc, #536]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408c:	4293      	cmp	r3, r2
 800408e:	d223      	bcs.n	80040d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fd07 	bl	8004aa8 <RCC_SetFlashLatencyFromMSIRange>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e38d      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040a4:	4b7d      	ldr	r3, [pc, #500]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a7c      	ldr	r2, [pc, #496]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040aa:	f043 0308 	orr.w	r3, r3, #8
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b7a      	ldr	r3, [pc, #488]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	4977      	ldr	r1, [pc, #476]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040c2:	4b76      	ldr	r3, [pc, #472]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	4972      	ldr	r1, [pc, #456]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
 80040d6:	e025      	b.n	8004124 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040d8:	4b70      	ldr	r3, [pc, #448]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a6f      	ldr	r2, [pc, #444]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040de:	f043 0308 	orr.w	r3, r3, #8
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b6d      	ldr	r3, [pc, #436]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	496a      	ldr	r1, [pc, #424]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040f6:	4b69      	ldr	r3, [pc, #420]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	4965      	ldr	r1, [pc, #404]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004106:	4313      	orrs	r3, r2
 8004108:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d109      	bne.n	8004124 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fcc7 	bl	8004aa8 <RCC_SetFlashLatencyFromMSIRange>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e34d      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004124:	f000 fc36 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004128:	4601      	mov	r1, r0
 800412a:	4b5c      	ldr	r3, [pc, #368]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	4a5a      	ldr	r2, [pc, #360]	; (80042a0 <HAL_RCC_OscConfig+0x29c>)
 8004136:	5cd3      	ldrb	r3, [r2, r3]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	fa21 f303 	lsr.w	r3, r1, r3
 8004140:	4a58      	ldr	r2, [pc, #352]	; (80042a4 <HAL_RCC_OscConfig+0x2a0>)
 8004142:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004144:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <HAL_RCC_OscConfig+0x2a4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7fd f969 	bl	8001420 <HAL_InitTick>
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d052      	beq.n	80041fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	e331      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d032      	beq.n	80041ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004164:	4b4d      	ldr	r3, [pc, #308]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a4c      	ldr	r2, [pc, #304]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004170:	f7fd f9a2 	bl	80014b8 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004178:	f7fd f99e 	bl	80014b8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e31a      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800418a:	4b44      	ldr	r3, [pc, #272]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004196:	4b41      	ldr	r3, [pc, #260]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a40      	ldr	r2, [pc, #256]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800419c:	f043 0308 	orr.w	r3, r3, #8
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b3e      	ldr	r3, [pc, #248]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	493b      	ldr	r1, [pc, #236]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041b4:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	4936      	ldr	r1, [pc, #216]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
 80041c8:	e01a      	b.n	8004200 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ca:	4b34      	ldr	r3, [pc, #208]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a33      	ldr	r2, [pc, #204]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041d6:	f7fd f96f 	bl	80014b8 <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041de:	f7fd f96b 	bl	80014b8 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e2e7      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80041f0:	4b2a      	ldr	r3, [pc, #168]	; (800429c <HAL_RCC_OscConfig+0x298>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f0      	bne.n	80041de <HAL_RCC_OscConfig+0x1da>
 80041fc:	e000      	b.n	8004200 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d074      	beq.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	2b08      	cmp	r3, #8
 8004210:	d005      	beq.n	800421e <HAL_RCC_OscConfig+0x21a>
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b0c      	cmp	r3, #12
 8004216:	d10e      	bne.n	8004236 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b03      	cmp	r3, #3
 800421c:	d10b      	bne.n	8004236 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421e:	4b1f      	ldr	r3, [pc, #124]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d064      	beq.n	80042f4 <HAL_RCC_OscConfig+0x2f0>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d160      	bne.n	80042f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e2c4      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x24a>
 8004240:	4b16      	ldr	r3, [pc, #88]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a15      	ldr	r2, [pc, #84]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	e01d      	b.n	800428a <HAL_RCC_OscConfig+0x286>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004256:	d10c      	bne.n	8004272 <HAL_RCC_OscConfig+0x26e>
 8004258:	4b10      	ldr	r3, [pc, #64]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a0f      	ldr	r2, [pc, #60]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800425e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a0c      	ldr	r2, [pc, #48]	; (800429c <HAL_RCC_OscConfig+0x298>)
 800426a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	e00b      	b.n	800428a <HAL_RCC_OscConfig+0x286>
 8004272:	4b0a      	ldr	r3, [pc, #40]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a09      	ldr	r2, [pc, #36]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a06      	ldr	r2, [pc, #24]	; (800429c <HAL_RCC_OscConfig+0x298>)
 8004284:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004288:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01c      	beq.n	80042cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd f911 	bl	80014b8 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004298:	e011      	b.n	80042be <HAL_RCC_OscConfig+0x2ba>
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000
 80042a0:	080075c8 	.word	0x080075c8
 80042a4:	20000000 	.word	0x20000000
 80042a8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fd f904 	bl	80014b8 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e280      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042be:	4baf      	ldr	r3, [pc, #700]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x2a8>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fd f8f4 	bl	80014b8 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fd f8f0 	bl	80014b8 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	; 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e26c      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042e6:	4ba5      	ldr	r3, [pc, #660]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0x2d0>
 80042f2:	e000      	b.n	80042f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d060      	beq.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x310>
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b0c      	cmp	r3, #12
 800430c:	d119      	bne.n	8004342 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d116      	bne.n	8004342 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004314:	4b99      	ldr	r3, [pc, #612]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_OscConfig+0x328>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e249      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	4b93      	ldr	r3, [pc, #588]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	061b      	lsls	r3, r3, #24
 800433a:	4990      	ldr	r1, [pc, #576]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800433c:	4313      	orrs	r3, r2
 800433e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004340:	e040      	b.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d023      	beq.n	8004392 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800434a:	4b8c      	ldr	r3, [pc, #560]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a8b      	ldr	r2, [pc, #556]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004356:	f7fd f8af 	bl	80014b8 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800435e:	f7fd f8ab 	bl	80014b8 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e227      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004370:	4b82      	ldr	r3, [pc, #520]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437c:	4b7f      	ldr	r3, [pc, #508]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	497c      	ldr	r1, [pc, #496]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
 8004390:	e018      	b.n	80043c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004392:	4b7a      	ldr	r3, [pc, #488]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a79      	ldr	r2, [pc, #484]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800439c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fd f88b 	bl	80014b8 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a6:	f7fd f887 	bl	80014b8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e203      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043b8:	4b70      	ldr	r3, [pc, #448]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f0      	bne.n	80043a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d03c      	beq.n	800444a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01c      	beq.n	8004412 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043d8:	4b68      	ldr	r3, [pc, #416]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80043da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043de:	4a67      	ldr	r2, [pc, #412]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e8:	f7fd f866 	bl	80014b8 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f0:	f7fd f862 	bl	80014b8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1de      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004402:	4b5e      	ldr	r3, [pc, #376]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ef      	beq.n	80043f0 <HAL_RCC_OscConfig+0x3ec>
 8004410:	e01b      	b.n	800444a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004412:	4b5a      	ldr	r3, [pc, #360]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004418:	4a58      	ldr	r2, [pc, #352]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004422:	f7fd f849 	bl	80014b8 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800442a:	f7fd f845 	bl	80014b8 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e1c1      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800443c:	4b4f      	ldr	r3, [pc, #316]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1ef      	bne.n	800442a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80a6 	beq.w	80045a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800445c:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004468:	4b44      	ldr	r3, [pc, #272]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	4a43      	ldr	r2, [pc, #268]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800446e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004472:	6593      	str	r3, [r2, #88]	; 0x58
 8004474:	4b41      	ldr	r3, [pc, #260]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004480:	2301      	movs	r3, #1
 8004482:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004484:	4b3e      	ldr	r3, [pc, #248]	; (8004580 <HAL_RCC_OscConfig+0x57c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448c:	2b00      	cmp	r3, #0
 800448e:	d118      	bne.n	80044c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004490:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_RCC_OscConfig+0x57c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a3a      	ldr	r2, [pc, #232]	; (8004580 <HAL_RCC_OscConfig+0x57c>)
 8004496:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449c:	f7fd f80c 	bl	80014b8 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a4:	f7fd f808 	bl	80014b8 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e184      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044b6:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_RCC_OscConfig+0x57c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d108      	bne.n	80044dc <HAL_RCC_OscConfig+0x4d8>
 80044ca:	4b2c      	ldr	r3, [pc, #176]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d0:	4a2a      	ldr	r2, [pc, #168]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044da:	e024      	b.n	8004526 <HAL_RCC_OscConfig+0x522>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	d110      	bne.n	8004506 <HAL_RCC_OscConfig+0x502>
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044f4:	4b21      	ldr	r3, [pc, #132]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fa:	4a20      	ldr	r2, [pc, #128]	; (800457c <HAL_RCC_OscConfig+0x578>)
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004504:	e00f      	b.n	8004526 <HAL_RCC_OscConfig+0x522>
 8004506:	4b1d      	ldr	r3, [pc, #116]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450c:	4a1b      	ldr	r2, [pc, #108]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800450e:	f023 0301 	bic.w	r3, r3, #1
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004516:	4b19      	ldr	r3, [pc, #100]	; (800457c <HAL_RCC_OscConfig+0x578>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fc ffc3 	bl	80014b8 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fc ffbf 	bl	80014b8 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e139      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454c:	4b0b      	ldr	r3, [pc, #44]	; (800457c <HAL_RCC_OscConfig+0x578>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0ed      	beq.n	8004536 <HAL_RCC_OscConfig+0x532>
 800455a:	e01a      	b.n	8004592 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fc ffac 	bl	80014b8 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004562:	e00f      	b.n	8004584 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004564:	f7fc ffa8 	bl	80014b8 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d906      	bls.n	8004584 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e122      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
 800457a:	bf00      	nop
 800457c:	40021000 	.word	0x40021000
 8004580:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004584:	4b90      	ldr	r3, [pc, #576]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e8      	bne.n	8004564 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004592:	7ffb      	ldrb	r3, [r7, #31]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004598:	4b8b      	ldr	r3, [pc, #556]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459c:	4a8a      	ldr	r2, [pc, #552]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800459e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 8108 	beq.w	80047be <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	f040 80d0 	bne.w	8004758 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045b8:	4b83      	ldr	r3, [pc, #524]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f003 0203 	and.w	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d130      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	3b01      	subs	r3, #1
 80045d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d127      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d11f      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045f8:	2a07      	cmp	r2, #7
 80045fa:	bf14      	ite	ne
 80045fc:	2201      	movne	r2, #1
 80045fe:	2200      	moveq	r2, #0
 8004600:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004602:	4293      	cmp	r3, r2
 8004604:	d113      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	3b01      	subs	r3, #1
 8004614:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d109      	bne.n	800462e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	3b01      	subs	r3, #1
 8004628:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800462a:	429a      	cmp	r2, r3
 800462c:	d06e      	beq.n	800470c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b0c      	cmp	r3, #12
 8004632:	d069      	beq.n	8004708 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004634:	4b64      	ldr	r3, [pc, #400]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d105      	bne.n	800464c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004640:	4b61      	ldr	r3, [pc, #388]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0b7      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004650:	4b5d      	ldr	r3, [pc, #372]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a5c      	ldr	r2, [pc, #368]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800465a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800465c:	f7fc ff2c 	bl	80014b8 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fc ff28 	bl	80014b8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0a4      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004676:	4b54      	ldr	r3, [pc, #336]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004682:	4b51      	ldr	r3, [pc, #324]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	4b51      	ldr	r3, [pc, #324]	; (80047cc <HAL_RCC_OscConfig+0x7c8>)
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004692:	3a01      	subs	r2, #1
 8004694:	0112      	lsls	r2, r2, #4
 8004696:	4311      	orrs	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800469c:	0212      	lsls	r2, r2, #8
 800469e:	4311      	orrs	r1, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046a4:	0852      	lsrs	r2, r2, #1
 80046a6:	3a01      	subs	r2, #1
 80046a8:	0552      	lsls	r2, r2, #21
 80046aa:	4311      	orrs	r1, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046b0:	0852      	lsrs	r2, r2, #1
 80046b2:	3a01      	subs	r2, #1
 80046b4:	0652      	lsls	r2, r2, #25
 80046b6:	4311      	orrs	r1, r2
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046bc:	0912      	lsrs	r2, r2, #4
 80046be:	0452      	lsls	r2, r2, #17
 80046c0:	430a      	orrs	r2, r1
 80046c2:	4941      	ldr	r1, [pc, #260]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046c8:	4b3f      	ldr	r3, [pc, #252]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a3e      	ldr	r2, [pc, #248]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d4:	4b3c      	ldr	r3, [pc, #240]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a3b      	ldr	r2, [pc, #236]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046e0:	f7fc feea 	bl	80014b8 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e8:	f7fc fee6 	bl	80014b8 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e062      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fa:	4b33      	ldr	r3, [pc, #204]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004706:	e05a      	b.n	80047be <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e059      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800470c:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d152      	bne.n	80047be <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004718:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2a      	ldr	r2, [pc, #168]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800471e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004722:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004724:	4b28      	ldr	r3, [pc, #160]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800472a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004730:	f7fc fec2 	bl	80014b8 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004738:	f7fc febe 	bl	80014b8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e03a      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474a:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x734>
 8004756:	e032      	b.n	80047be <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d02d      	beq.n	80047ba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a19      	ldr	r2, [pc, #100]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004764:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004768:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800476a:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d105      	bne.n	8004782 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 800477c:	f023 0303 	bic.w	r3, r3, #3
 8004780:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 8004788:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800478c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004790:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fc fe91 	bl	80014b8 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479a:	f7fc fe8d 	bl	80014b8 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e009      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x7c4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x796>
 80047b8:	e001      	b.n	80047be <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	f99d808c 	.word	0xf99d808c

080047d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0c8      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e4:	4b66      	ldr	r3, [pc, #408]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d910      	bls.n	8004814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	4b63      	ldr	r3, [pc, #396]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f023 0207 	bic.w	r2, r3, #7
 80047fa:	4961      	ldr	r1, [pc, #388]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	4313      	orrs	r3, r2
 8004800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004802:	4b5f      	ldr	r3, [pc, #380]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0b0      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d04c      	beq.n	80048ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d107      	bne.n	8004838 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004828:	4b56      	ldr	r3, [pc, #344]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d121      	bne.n	8004878 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e09e      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2b02      	cmp	r3, #2
 800483e:	d107      	bne.n	8004850 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d115      	bne.n	8004878 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e092      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d107      	bne.n	8004868 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004858:	4b4a      	ldr	r3, [pc, #296]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e086      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004868:	4b46      	ldr	r3, [pc, #280]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e07e      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004878:	4b42      	ldr	r3, [pc, #264]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f023 0203 	bic.w	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	493f      	ldr	r1, [pc, #252]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800488a:	f7fc fe15 	bl	80014b8 <HAL_GetTick>
 800488e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004892:	f7fc fe11 	bl	80014b8 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e066      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a8:	4b36      	ldr	r3, [pc, #216]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 020c 	and.w	r2, r3, #12
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d1eb      	bne.n	8004892 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d008      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	492c      	ldr	r1, [pc, #176]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048d8:	4b29      	ldr	r3, [pc, #164]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d210      	bcs.n	8004908 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048e6:	4b26      	ldr	r3, [pc, #152]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 0207 	bic.w	r2, r3, #7
 80048ee:	4924      	ldr	r1, [pc, #144]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x1b0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d001      	beq.n	8004908 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e036      	b.n	8004976 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4918      	ldr	r1, [pc, #96]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	4910      	ldr	r1, [pc, #64]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004946:	f000 f825 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 800494a:	4601      	mov	r1, r0
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <HAL_RCC_ClockConfig+0x1b4>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	091b      	lsrs	r3, r3, #4
 8004952:	f003 030f 	and.w	r3, r3, #15
 8004956:	4a0c      	ldr	r2, [pc, #48]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	5cd3      	ldrb	r3, [r2, r3]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	fa21 f303 	lsr.w	r3, r1, r3
 8004962:	4a0a      	ldr	r2, [pc, #40]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004966:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f7fc fd58 	bl	8001420 <HAL_InitTick>
 8004970:	4603      	mov	r3, r0
 8004972:	72fb      	strb	r3, [r7, #11]

  return status;
 8004974:	7afb      	ldrb	r3, [r7, #11]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40022000 	.word	0x40022000
 8004984:	40021000 	.word	0x40021000
 8004988:	080075c8 	.word	0x080075c8
 800498c:	20000000 	.word	0x20000000
 8004990:	20000004 	.word	0x20000004

08004994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
 800499e:	2300      	movs	r3, #0
 80049a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a2:	4b3d      	ldr	r3, [pc, #244]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x104>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ac:	4b3a      	ldr	r3, [pc, #232]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x104>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x34>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d121      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d11e      	bne.n	8004a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049c8:	4b33      	ldr	r3, [pc, #204]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x104>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80049d4:	4b30      	ldr	r3, [pc, #192]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x104>)
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e005      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049e4:	4b2c      	ldr	r3, [pc, #176]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x104>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049f0:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10d      	bne.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a04:	e00a      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d102      	bne.n	8004a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a0c:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	e004      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d101      	bne.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a18:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d133      	bne.n	8004a8a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a22:	4b1d      	ldr	r3, [pc, #116]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d002      	beq.n	8004a38 <HAL_RCC_GetSysClockFreq+0xa4>
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d003      	beq.n	8004a3e <HAL_RCC_GetSysClockFreq+0xaa>
 8004a36:	e005      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a3a:	617b      	str	r3, [r7, #20]
      break;
 8004a3c:	e005      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a3e:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a40:	617b      	str	r3, [r7, #20]
      break;
 8004a42:	e002      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	617b      	str	r3, [r7, #20]
      break;
 8004a48:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a4a:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	3301      	adds	r3, #1
 8004a56:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a58:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	fb02 f203 	mul.w	r2, r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	0e5b      	lsrs	r3, r3, #25
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3724      	adds	r7, #36	; 0x24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	080075d8 	.word	0x080075d8
 8004aa0:	00f42400 	.word	0x00f42400
 8004aa4:	007a1200 	.word	0x007a1200

08004aa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ab4:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ac0:	f7ff fa3c 	bl	8003f3c <HAL_PWREx_GetVoltageRange>
 8004ac4:	6178      	str	r0, [r7, #20]
 8004ac6:	e014      	b.n	8004af2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ac8:	4b25      	ldr	r3, [pc, #148]	; (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad4:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ae0:	f7ff fa2c 	bl	8003f3c <HAL_PWREx_GetVoltageRange>
 8004ae4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004af8:	d10b      	bne.n	8004b12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b80      	cmp	r3, #128	; 0x80
 8004afe:	d919      	bls.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2ba0      	cmp	r3, #160	; 0xa0
 8004b04:	d902      	bls.n	8004b0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b06:	2302      	movs	r3, #2
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	e013      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	e010      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b80      	cmp	r3, #128	; 0x80
 8004b16:	d902      	bls.n	8004b1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b18:	2303      	movs	r3, #3
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	e00a      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b80      	cmp	r3, #128	; 0x80
 8004b22:	d102      	bne.n	8004b2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b24:	2302      	movs	r3, #2
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	e004      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b70      	cmp	r3, #112	; 0x70
 8004b2e:	d101      	bne.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b30:	2301      	movs	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f023 0207 	bic.w	r2, r3, #7
 8004b3c:	4909      	ldr	r1, [pc, #36]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b44:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d001      	beq.n	8004b56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40022000 	.word	0x40022000

08004b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b70:	2300      	movs	r3, #0
 8004b72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b74:	2300      	movs	r3, #0
 8004b76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d03f      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b8c:	d01c      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b92:	d802      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00e      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004b98:	e01f      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004b9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b9e:	d003      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004ba0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ba4:	d01c      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004ba6:	e018      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ba8:	4b85      	ldr	r3, [pc, #532]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4a84      	ldr	r2, [pc, #528]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bb4:	e015      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fab9 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bc6:	e00c      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3320      	adds	r3, #32
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fba0 	bl	8005314 <RCCEx_PLLSAI2_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bd8:	e003      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	74fb      	strb	r3, [r7, #19]
      break;
 8004bde:	e000      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be2:	7cfb      	ldrb	r3, [r7, #19]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10b      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004be8:	4b75      	ldr	r3, [pc, #468]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf6:	4972      	ldr	r1, [pc, #456]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bfe:	e001      	b.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d03f      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c18:	d01c      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004c1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c1e:	d802      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004c24:	e01f      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004c26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c2a:	d003      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004c2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c30:	d01c      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004c32:	e018      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c34:	4b62      	ldr	r3, [pc, #392]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a61      	ldr	r2, [pc, #388]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c40:	e015      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3304      	adds	r3, #4
 8004c46:	2100      	movs	r1, #0
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 fa73 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c52:	e00c      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3320      	adds	r3, #32
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fb5a 	bl	8005314 <RCCEx_PLLSAI2_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c64:	e003      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	74fb      	strb	r3, [r7, #19]
      break;
 8004c6a:	e000      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6e:	7cfb      	ldrb	r3, [r7, #19]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c74:	4b52      	ldr	r3, [pc, #328]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c82:	494f      	ldr	r1, [pc, #316]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c8a:	e001      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 80a0 	beq.w	8004dde <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ca2:	4b47      	ldr	r3, [pc, #284]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb8:	4b41      	ldr	r3, [pc, #260]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	4a40      	ldr	r2, [pc, #256]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc4:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cd4:	4b3b      	ldr	r3, [pc, #236]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a3a      	ldr	r2, [pc, #232]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ce0:	f7fc fbea 	bl	80014b8 <HAL_GetTick>
 8004ce4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ce6:	e009      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce8:	f7fc fbe6 	bl	80014b8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d902      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	74fb      	strb	r3, [r7, #19]
        break;
 8004cfa:	e005      	b.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cfc:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ef      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d15c      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d0e:	4b2c      	ldr	r3, [pc, #176]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01f      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d019      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d2c:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d38:	4b21      	ldr	r3, [pc, #132]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	4a20      	ldr	r2, [pc, #128]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d48:	4b1d      	ldr	r3, [pc, #116]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	4a1c      	ldr	r2, [pc, #112]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d58:	4a19      	ldr	r2, [pc, #100]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d016      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6a:	f7fc fba5 	bl	80014b8 <HAL_GetTick>
 8004d6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d70:	e00b      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d72:	f7fc fba1 	bl	80014b8 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d902      	bls.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	74fb      	strb	r3, [r7, #19]
            break;
 8004d88:	e006      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8a:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0ec      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d9e:	4b08      	ldr	r3, [pc, #32]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dae:	4904      	ldr	r1, [pc, #16]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004db6:	e009      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004db8:	7cfb      	ldrb	r3, [r7, #19]
 8004dba:	74bb      	strb	r3, [r7, #18]
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8004dbe:	bf00      	nop
 8004dc0:	40021000 	.word	0x40021000
 8004dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dcc:	7c7b      	ldrb	r3, [r7, #17]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d105      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd2:	4b9e      	ldr	r3, [pc, #632]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd6:	4a9d      	ldr	r2, [pc, #628]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dea:	4b98      	ldr	r3, [pc, #608]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df0:	f023 0203 	bic.w	r2, r3, #3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	4994      	ldr	r1, [pc, #592]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e0c:	4b8f      	ldr	r3, [pc, #572]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f023 020c 	bic.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	498c      	ldr	r1, [pc, #560]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0304 	and.w	r3, r3, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e2e:	4b87      	ldr	r3, [pc, #540]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	4983      	ldr	r1, [pc, #524]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00a      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e50:	4b7e      	ldr	r3, [pc, #504]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	497b      	ldr	r1, [pc, #492]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00a      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e72:	4b76      	ldr	r3, [pc, #472]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e80:	4972      	ldr	r1, [pc, #456]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e94:	4b6d      	ldr	r3, [pc, #436]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	496a      	ldr	r1, [pc, #424]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eb6:	4b65      	ldr	r3, [pc, #404]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	4961      	ldr	r1, [pc, #388]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ed8:	4b5c      	ldr	r3, [pc, #368]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee6:	4959      	ldr	r1, [pc, #356]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004efa:	4b54      	ldr	r3, [pc, #336]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	4950      	ldr	r1, [pc, #320]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f1c:	4b4b      	ldr	r3, [pc, #300]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	4948      	ldr	r1, [pc, #288]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f3e:	4b43      	ldr	r3, [pc, #268]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	493f      	ldr	r1, [pc, #252]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d028      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f60:	4b3a      	ldr	r3, [pc, #232]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6e:	4937      	ldr	r1, [pc, #220]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f80:	4b32      	ldr	r3, [pc, #200]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4a31      	ldr	r2, [pc, #196]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8a:	60d3      	str	r3, [r2, #12]
 8004f8c:	e011      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f96:	d10c      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f8c8 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d028      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fbe:	4b23      	ldr	r3, [pc, #140]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	491f      	ldr	r1, [pc, #124]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fde:	4b1b      	ldr	r3, [pc, #108]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	4a1a      	ldr	r2, [pc, #104]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fe8:	60d3      	str	r3, [r2, #12]
 8004fea:	e011      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ff4:	d10c      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f899 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8005002:	4603      	mov	r3, r0
 8005004:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005006:	7cfb      	ldrb	r3, [r7, #19]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800500c:	7cfb      	ldrb	r3, [r7, #19]
 800500e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d02b      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800501e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502a:	4908      	ldr	r1, [pc, #32]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503a:	d109      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800503c:	4b03      	ldr	r3, [pc, #12]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4a02      	ldr	r2, [pc, #8]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005046:	60d3      	str	r3, [r2, #12]
 8005048:	e014      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005058:	d10c      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3304      	adds	r3, #4
 800505e:	2101      	movs	r1, #1
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f867 	bl	8005134 <RCCEx_PLLSAI1_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02f      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005080:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800508e:	4928      	ldr	r1, [pc, #160]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800509a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800509e:	d10d      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	2102      	movs	r1, #2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f844 	bl	8005134 <RCCEx_PLLSAI1_Config>
 80050ac:	4603      	mov	r3, r0
 80050ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050b0:	7cfb      	ldrb	r3, [r7, #19]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d014      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80050b6:	7cfb      	ldrb	r3, [r7, #19]
 80050b8:	74bb      	strb	r3, [r7, #18]
 80050ba:	e011      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c4:	d10c      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3320      	adds	r3, #32
 80050ca:	2102      	movs	r1, #2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 f921 	bl	8005314 <RCCEx_PLLSAI2_Config>
 80050d2:	4603      	mov	r3, r0
 80050d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050d6:	7cfb      	ldrb	r3, [r7, #19]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050ec:	4b10      	ldr	r3, [pc, #64]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050fa:	490d      	ldr	r1, [pc, #52]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800510e:	4b08      	ldr	r3, [pc, #32]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800511e:	4904      	ldr	r1, [pc, #16]	; (8005130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005126:	7cbb      	ldrb	r3, [r7, #18]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40021000 	.word	0x40021000

08005134 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005142:	4b73      	ldr	r3, [pc, #460]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d018      	beq.n	8005180 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800514e:	4b70      	ldr	r3, [pc, #448]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0203 	and.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d10d      	bne.n	800517a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
       ||
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005166:	4b6a      	ldr	r3, [pc, #424]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	091b      	lsrs	r3, r3, #4
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
       ||
 8005176:	429a      	cmp	r2, r3
 8005178:	d044      	beq.n	8005204 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
 800517e:	e041      	b.n	8005204 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d00c      	beq.n	80051a2 <RCCEx_PLLSAI1_Config+0x6e>
 8005188:	2b03      	cmp	r3, #3
 800518a:	d013      	beq.n	80051b4 <RCCEx_PLLSAI1_Config+0x80>
 800518c:	2b01      	cmp	r3, #1
 800518e:	d120      	bne.n	80051d2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005190:	4b5f      	ldr	r3, [pc, #380]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d11d      	bne.n	80051d8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a0:	e01a      	b.n	80051d8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051a2:	4b5b      	ldr	r3, [pc, #364]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d116      	bne.n	80051dc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b2:	e013      	b.n	80051dc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051b4:	4b56      	ldr	r3, [pc, #344]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10f      	bne.n	80051e0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051c0:	4b53      	ldr	r3, [pc, #332]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051d0:	e006      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
      break;
 80051d6:	e004      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80051d8:	bf00      	nop
 80051da:	e002      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80051dc:	bf00      	nop
 80051de:	e000      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80051e0:	bf00      	nop
    }

    if(status == HAL_OK)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10d      	bne.n	8005204 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051e8:	4b49      	ldr	r3, [pc, #292]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6819      	ldr	r1, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	430b      	orrs	r3, r1
 80051fe:	4944      	ldr	r1, [pc, #272]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005200:	4313      	orrs	r3, r2
 8005202:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d17d      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800520a:	4b41      	ldr	r3, [pc, #260]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a40      	ldr	r2, [pc, #256]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005210:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005216:	f7fc f94f 	bl	80014b8 <HAL_GetTick>
 800521a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800521c:	e009      	b.n	8005232 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800521e:	f7fc f94b 	bl	80014b8 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d902      	bls.n	8005232 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	73fb      	strb	r3, [r7, #15]
        break;
 8005230:	e005      	b.n	800523e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005232:	4b37      	ldr	r3, [pc, #220]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1ef      	bne.n	800521e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d160      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d111      	bne.n	800526e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800524a:	4b31      	ldr	r3, [pc, #196]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6892      	ldr	r2, [r2, #8]
 800525a:	0211      	lsls	r1, r2, #8
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68d2      	ldr	r2, [r2, #12]
 8005260:	0912      	lsrs	r2, r2, #4
 8005262:	0452      	lsls	r2, r2, #17
 8005264:	430a      	orrs	r2, r1
 8005266:	492a      	ldr	r1, [pc, #168]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	610b      	str	r3, [r1, #16]
 800526c:	e027      	b.n	80052be <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d112      	bne.n	800529a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005274:	4b26      	ldr	r3, [pc, #152]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800527c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6892      	ldr	r2, [r2, #8]
 8005284:	0211      	lsls	r1, r2, #8
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6912      	ldr	r2, [r2, #16]
 800528a:	0852      	lsrs	r2, r2, #1
 800528c:	3a01      	subs	r2, #1
 800528e:	0552      	lsls	r2, r2, #21
 8005290:	430a      	orrs	r2, r1
 8005292:	491f      	ldr	r1, [pc, #124]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005294:	4313      	orrs	r3, r2
 8005296:	610b      	str	r3, [r1, #16]
 8005298:	e011      	b.n	80052be <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800529a:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6892      	ldr	r2, [r2, #8]
 80052aa:	0211      	lsls	r1, r2, #8
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6952      	ldr	r2, [r2, #20]
 80052b0:	0852      	lsrs	r2, r2, #1
 80052b2:	3a01      	subs	r2, #1
 80052b4:	0652      	lsls	r2, r2, #25
 80052b6:	430a      	orrs	r2, r1
 80052b8:	4915      	ldr	r1, [pc, #84]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052be:	4b14      	ldr	r3, [pc, #80]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a13      	ldr	r2, [pc, #76]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fc f8f5 	bl	80014b8 <HAL_GetTick>
 80052ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052d0:	e009      	b.n	80052e6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052d2:	f7fc f8f1 	bl	80014b8 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d902      	bls.n	80052e6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	73fb      	strb	r3, [r7, #15]
          break;
 80052e4:	e005      	b.n	80052f2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052e6:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0ef      	beq.n	80052d2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4903      	ldr	r1, [pc, #12]	; (8005310 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000

08005314 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005322:	4b68      	ldr	r3, [pc, #416]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d018      	beq.n	8005360 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800532e:	4b65      	ldr	r3, [pc, #404]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0203 	and.w	r2, r3, #3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d10d      	bne.n	800535a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
       ||
 8005342:	2b00      	cmp	r3, #0
 8005344:	d009      	beq.n	800535a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005346:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
       ||
 8005356:	429a      	cmp	r2, r3
 8005358:	d044      	beq.n	80053e4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	73fb      	strb	r3, [r7, #15]
 800535e:	e041      	b.n	80053e4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d00c      	beq.n	8005382 <RCCEx_PLLSAI2_Config+0x6e>
 8005368:	2b03      	cmp	r3, #3
 800536a:	d013      	beq.n	8005394 <RCCEx_PLLSAI2_Config+0x80>
 800536c:	2b01      	cmp	r3, #1
 800536e:	d120      	bne.n	80053b2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005370:	4b54      	ldr	r3, [pc, #336]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d11d      	bne.n	80053b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005380:	e01a      	b.n	80053b8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005382:	4b50      	ldr	r3, [pc, #320]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800538a:	2b00      	cmp	r3, #0
 800538c:	d116      	bne.n	80053bc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005392:	e013      	b.n	80053bc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005394:	4b4b      	ldr	r3, [pc, #300]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10f      	bne.n	80053c0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053a0:	4b48      	ldr	r3, [pc, #288]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053b0:	e006      	b.n	80053c0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	73fb      	strb	r3, [r7, #15]
      break;
 80053b6:	e004      	b.n	80053c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80053b8:	bf00      	nop
 80053ba:	e002      	b.n	80053c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80053bc:	bf00      	nop
 80053be:	e000      	b.n	80053c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80053c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10d      	bne.n	80053e4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053c8:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	3b01      	subs	r3, #1
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	430b      	orrs	r3, r1
 80053de:	4939      	ldr	r1, [pc, #228]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d167      	bne.n	80054ba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053ea:	4b36      	ldr	r3, [pc, #216]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a35      	ldr	r2, [pc, #212]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80053f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f6:	f7fc f85f 	bl	80014b8 <HAL_GetTick>
 80053fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053fc:	e009      	b.n	8005412 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053fe:	f7fc f85b 	bl	80014b8 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d902      	bls.n	8005412 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	73fb      	strb	r3, [r7, #15]
        break;
 8005410:	e005      	b.n	800541e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005412:	4b2c      	ldr	r3, [pc, #176]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1ef      	bne.n	80053fe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800541e:	7bfb      	ldrb	r3, [r7, #15]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d14a      	bne.n	80054ba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d111      	bne.n	800544e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800542a:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6892      	ldr	r2, [r2, #8]
 800543a:	0211      	lsls	r1, r2, #8
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	68d2      	ldr	r2, [r2, #12]
 8005440:	0912      	lsrs	r2, r2, #4
 8005442:	0452      	lsls	r2, r2, #17
 8005444:	430a      	orrs	r2, r1
 8005446:	491f      	ldr	r1, [pc, #124]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005448:	4313      	orrs	r3, r2
 800544a:	614b      	str	r3, [r1, #20]
 800544c:	e011      	b.n	8005472 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800544e:	4b1d      	ldr	r3, [pc, #116]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005456:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6892      	ldr	r2, [r2, #8]
 800545e:	0211      	lsls	r1, r2, #8
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6912      	ldr	r2, [r2, #16]
 8005464:	0852      	lsrs	r2, r2, #1
 8005466:	3a01      	subs	r2, #1
 8005468:	0652      	lsls	r2, r2, #25
 800546a:	430a      	orrs	r2, r1
 800546c:	4915      	ldr	r1, [pc, #84]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800546e:	4313      	orrs	r3, r2
 8005470:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a13      	ldr	r2, [pc, #76]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8005478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547e:	f7fc f81b 	bl	80014b8 <HAL_GetTick>
 8005482:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005484:	e009      	b.n	800549a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005486:	f7fc f817 	bl	80014b8 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d902      	bls.n	800549a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	73fb      	strb	r3, [r7, #15]
          break;
 8005498:	e005      	b.n	80054a6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800549a:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0ef      	beq.n	8005486 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054ae:	695a      	ldr	r2, [r3, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	4903      	ldr	r1, [pc, #12]	; (80054c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40021000 	.word	0x40021000

080054c8 <__errno>:
 80054c8:	4b01      	ldr	r3, [pc, #4]	; (80054d0 <__errno+0x8>)
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	2000000c 	.word	0x2000000c

080054d4 <__libc_init_array>:
 80054d4:	b570      	push	{r4, r5, r6, lr}
 80054d6:	4e0d      	ldr	r6, [pc, #52]	; (800550c <__libc_init_array+0x38>)
 80054d8:	4c0d      	ldr	r4, [pc, #52]	; (8005510 <__libc_init_array+0x3c>)
 80054da:	1ba4      	subs	r4, r4, r6
 80054dc:	10a4      	asrs	r4, r4, #2
 80054de:	2500      	movs	r5, #0
 80054e0:	42a5      	cmp	r5, r4
 80054e2:	d109      	bne.n	80054f8 <__libc_init_array+0x24>
 80054e4:	4e0b      	ldr	r6, [pc, #44]	; (8005514 <__libc_init_array+0x40>)
 80054e6:	4c0c      	ldr	r4, [pc, #48]	; (8005518 <__libc_init_array+0x44>)
 80054e8:	f002 f85e 	bl	80075a8 <_init>
 80054ec:	1ba4      	subs	r4, r4, r6
 80054ee:	10a4      	asrs	r4, r4, #2
 80054f0:	2500      	movs	r5, #0
 80054f2:	42a5      	cmp	r5, r4
 80054f4:	d105      	bne.n	8005502 <__libc_init_array+0x2e>
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80054fc:	4798      	blx	r3
 80054fe:	3501      	adds	r5, #1
 8005500:	e7ee      	b.n	80054e0 <__libc_init_array+0xc>
 8005502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005506:	4798      	blx	r3
 8005508:	3501      	adds	r5, #1
 800550a:	e7f2      	b.n	80054f2 <__libc_init_array+0x1e>
 800550c:	08007868 	.word	0x08007868
 8005510:	08007868 	.word	0x08007868
 8005514:	08007868 	.word	0x08007868
 8005518:	0800786c 	.word	0x0800786c

0800551c <memset>:
 800551c:	4402      	add	r2, r0
 800551e:	4603      	mov	r3, r0
 8005520:	4293      	cmp	r3, r2
 8005522:	d100      	bne.n	8005526 <memset+0xa>
 8005524:	4770      	bx	lr
 8005526:	f803 1b01 	strb.w	r1, [r3], #1
 800552a:	e7f9      	b.n	8005520 <memset+0x4>

0800552c <__cvt>:
 800552c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005530:	ec55 4b10 	vmov	r4, r5, d0
 8005534:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005536:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800553a:	2d00      	cmp	r5, #0
 800553c:	460e      	mov	r6, r1
 800553e:	4691      	mov	r9, r2
 8005540:	4619      	mov	r1, r3
 8005542:	bfb8      	it	lt
 8005544:	4622      	movlt	r2, r4
 8005546:	462b      	mov	r3, r5
 8005548:	f027 0720 	bic.w	r7, r7, #32
 800554c:	bfbb      	ittet	lt
 800554e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005552:	461d      	movlt	r5, r3
 8005554:	2300      	movge	r3, #0
 8005556:	232d      	movlt	r3, #45	; 0x2d
 8005558:	bfb8      	it	lt
 800555a:	4614      	movlt	r4, r2
 800555c:	2f46      	cmp	r7, #70	; 0x46
 800555e:	700b      	strb	r3, [r1, #0]
 8005560:	d004      	beq.n	800556c <__cvt+0x40>
 8005562:	2f45      	cmp	r7, #69	; 0x45
 8005564:	d100      	bne.n	8005568 <__cvt+0x3c>
 8005566:	3601      	adds	r6, #1
 8005568:	2102      	movs	r1, #2
 800556a:	e000      	b.n	800556e <__cvt+0x42>
 800556c:	2103      	movs	r1, #3
 800556e:	ab03      	add	r3, sp, #12
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	ab02      	add	r3, sp, #8
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	4632      	mov	r2, r6
 8005578:	4653      	mov	r3, sl
 800557a:	ec45 4b10 	vmov	d0, r4, r5
 800557e:	f000 fcdf 	bl	8005f40 <_dtoa_r>
 8005582:	2f47      	cmp	r7, #71	; 0x47
 8005584:	4680      	mov	r8, r0
 8005586:	d102      	bne.n	800558e <__cvt+0x62>
 8005588:	f019 0f01 	tst.w	r9, #1
 800558c:	d026      	beq.n	80055dc <__cvt+0xb0>
 800558e:	2f46      	cmp	r7, #70	; 0x46
 8005590:	eb08 0906 	add.w	r9, r8, r6
 8005594:	d111      	bne.n	80055ba <__cvt+0x8e>
 8005596:	f898 3000 	ldrb.w	r3, [r8]
 800559a:	2b30      	cmp	r3, #48	; 0x30
 800559c:	d10a      	bne.n	80055b4 <__cvt+0x88>
 800559e:	2200      	movs	r2, #0
 80055a0:	2300      	movs	r3, #0
 80055a2:	4620      	mov	r0, r4
 80055a4:	4629      	mov	r1, r5
 80055a6:	f7fb fa8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80055aa:	b918      	cbnz	r0, 80055b4 <__cvt+0x88>
 80055ac:	f1c6 0601 	rsb	r6, r6, #1
 80055b0:	f8ca 6000 	str.w	r6, [sl]
 80055b4:	f8da 3000 	ldr.w	r3, [sl]
 80055b8:	4499      	add	r9, r3
 80055ba:	2200      	movs	r2, #0
 80055bc:	2300      	movs	r3, #0
 80055be:	4620      	mov	r0, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	f7fb fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80055c6:	b938      	cbnz	r0, 80055d8 <__cvt+0xac>
 80055c8:	2230      	movs	r2, #48	; 0x30
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	454b      	cmp	r3, r9
 80055ce:	d205      	bcs.n	80055dc <__cvt+0xb0>
 80055d0:	1c59      	adds	r1, r3, #1
 80055d2:	9103      	str	r1, [sp, #12]
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e7f8      	b.n	80055ca <__cvt+0x9e>
 80055d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80055dc:	9b03      	ldr	r3, [sp, #12]
 80055de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055e0:	eba3 0308 	sub.w	r3, r3, r8
 80055e4:	4640      	mov	r0, r8
 80055e6:	6013      	str	r3, [r2, #0]
 80055e8:	b004      	add	sp, #16
 80055ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080055ee <__exponent>:
 80055ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055f0:	2900      	cmp	r1, #0
 80055f2:	4604      	mov	r4, r0
 80055f4:	bfba      	itte	lt
 80055f6:	4249      	neglt	r1, r1
 80055f8:	232d      	movlt	r3, #45	; 0x2d
 80055fa:	232b      	movge	r3, #43	; 0x2b
 80055fc:	2909      	cmp	r1, #9
 80055fe:	f804 2b02 	strb.w	r2, [r4], #2
 8005602:	7043      	strb	r3, [r0, #1]
 8005604:	dd20      	ble.n	8005648 <__exponent+0x5a>
 8005606:	f10d 0307 	add.w	r3, sp, #7
 800560a:	461f      	mov	r7, r3
 800560c:	260a      	movs	r6, #10
 800560e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005612:	fb06 1115 	mls	r1, r6, r5, r1
 8005616:	3130      	adds	r1, #48	; 0x30
 8005618:	2d09      	cmp	r5, #9
 800561a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800561e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005622:	4629      	mov	r1, r5
 8005624:	dc09      	bgt.n	800563a <__exponent+0x4c>
 8005626:	3130      	adds	r1, #48	; 0x30
 8005628:	3b02      	subs	r3, #2
 800562a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800562e:	42bb      	cmp	r3, r7
 8005630:	4622      	mov	r2, r4
 8005632:	d304      	bcc.n	800563e <__exponent+0x50>
 8005634:	1a10      	subs	r0, r2, r0
 8005636:	b003      	add	sp, #12
 8005638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800563a:	4613      	mov	r3, r2
 800563c:	e7e7      	b.n	800560e <__exponent+0x20>
 800563e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005642:	f804 2b01 	strb.w	r2, [r4], #1
 8005646:	e7f2      	b.n	800562e <__exponent+0x40>
 8005648:	2330      	movs	r3, #48	; 0x30
 800564a:	4419      	add	r1, r3
 800564c:	7083      	strb	r3, [r0, #2]
 800564e:	1d02      	adds	r2, r0, #4
 8005650:	70c1      	strb	r1, [r0, #3]
 8005652:	e7ef      	b.n	8005634 <__exponent+0x46>

08005654 <_printf_float>:
 8005654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	b08d      	sub	sp, #52	; 0x34
 800565a:	460c      	mov	r4, r1
 800565c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005660:	4616      	mov	r6, r2
 8005662:	461f      	mov	r7, r3
 8005664:	4605      	mov	r5, r0
 8005666:	f001 fa23 	bl	8006ab0 <_localeconv_r>
 800566a:	6803      	ldr	r3, [r0, #0]
 800566c:	9304      	str	r3, [sp, #16]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fa fdae 	bl	80001d0 <strlen>
 8005674:	2300      	movs	r3, #0
 8005676:	930a      	str	r3, [sp, #40]	; 0x28
 8005678:	f8d8 3000 	ldr.w	r3, [r8]
 800567c:	9005      	str	r0, [sp, #20]
 800567e:	3307      	adds	r3, #7
 8005680:	f023 0307 	bic.w	r3, r3, #7
 8005684:	f103 0208 	add.w	r2, r3, #8
 8005688:	f894 a018 	ldrb.w	sl, [r4, #24]
 800568c:	f8d4 b000 	ldr.w	fp, [r4]
 8005690:	f8c8 2000 	str.w	r2, [r8]
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800569c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80056a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056a4:	9307      	str	r3, [sp, #28]
 80056a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80056aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056ae:	4ba7      	ldr	r3, [pc, #668]	; (800594c <_printf_float+0x2f8>)
 80056b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056b4:	f7fb fa3a 	bl	8000b2c <__aeabi_dcmpun>
 80056b8:	bb70      	cbnz	r0, 8005718 <_printf_float+0xc4>
 80056ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056be:	4ba3      	ldr	r3, [pc, #652]	; (800594c <_printf_float+0x2f8>)
 80056c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056c4:	f7fb fa14 	bl	8000af0 <__aeabi_dcmple>
 80056c8:	bb30      	cbnz	r0, 8005718 <_printf_float+0xc4>
 80056ca:	2200      	movs	r2, #0
 80056cc:	2300      	movs	r3, #0
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fb fa03 	bl	8000adc <__aeabi_dcmplt>
 80056d6:	b110      	cbz	r0, 80056de <_printf_float+0x8a>
 80056d8:	232d      	movs	r3, #45	; 0x2d
 80056da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056de:	4a9c      	ldr	r2, [pc, #624]	; (8005950 <_printf_float+0x2fc>)
 80056e0:	4b9c      	ldr	r3, [pc, #624]	; (8005954 <_printf_float+0x300>)
 80056e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80056e6:	bf8c      	ite	hi
 80056e8:	4690      	movhi	r8, r2
 80056ea:	4698      	movls	r8, r3
 80056ec:	2303      	movs	r3, #3
 80056ee:	f02b 0204 	bic.w	r2, fp, #4
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	6022      	str	r2, [r4, #0]
 80056f6:	f04f 0900 	mov.w	r9, #0
 80056fa:	9700      	str	r7, [sp, #0]
 80056fc:	4633      	mov	r3, r6
 80056fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8005700:	4621      	mov	r1, r4
 8005702:	4628      	mov	r0, r5
 8005704:	f000 f9e6 	bl	8005ad4 <_printf_common>
 8005708:	3001      	adds	r0, #1
 800570a:	f040 808d 	bne.w	8005828 <_printf_float+0x1d4>
 800570e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005712:	b00d      	add	sp, #52	; 0x34
 8005714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005718:	4642      	mov	r2, r8
 800571a:	464b      	mov	r3, r9
 800571c:	4640      	mov	r0, r8
 800571e:	4649      	mov	r1, r9
 8005720:	f7fb fa04 	bl	8000b2c <__aeabi_dcmpun>
 8005724:	b110      	cbz	r0, 800572c <_printf_float+0xd8>
 8005726:	4a8c      	ldr	r2, [pc, #560]	; (8005958 <_printf_float+0x304>)
 8005728:	4b8c      	ldr	r3, [pc, #560]	; (800595c <_printf_float+0x308>)
 800572a:	e7da      	b.n	80056e2 <_printf_float+0x8e>
 800572c:	6861      	ldr	r1, [r4, #4]
 800572e:	1c4b      	adds	r3, r1, #1
 8005730:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005734:	a80a      	add	r0, sp, #40	; 0x28
 8005736:	d13e      	bne.n	80057b6 <_printf_float+0x162>
 8005738:	2306      	movs	r3, #6
 800573a:	6063      	str	r3, [r4, #4]
 800573c:	2300      	movs	r3, #0
 800573e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005742:	ab09      	add	r3, sp, #36	; 0x24
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	ec49 8b10 	vmov	d0, r8, r9
 800574a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800574e:	6022      	str	r2, [r4, #0]
 8005750:	f8cd a004 	str.w	sl, [sp, #4]
 8005754:	6861      	ldr	r1, [r4, #4]
 8005756:	4628      	mov	r0, r5
 8005758:	f7ff fee8 	bl	800552c <__cvt>
 800575c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005760:	2b47      	cmp	r3, #71	; 0x47
 8005762:	4680      	mov	r8, r0
 8005764:	d109      	bne.n	800577a <_printf_float+0x126>
 8005766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005768:	1cd8      	adds	r0, r3, #3
 800576a:	db02      	blt.n	8005772 <_printf_float+0x11e>
 800576c:	6862      	ldr	r2, [r4, #4]
 800576e:	4293      	cmp	r3, r2
 8005770:	dd47      	ble.n	8005802 <_printf_float+0x1ae>
 8005772:	f1aa 0a02 	sub.w	sl, sl, #2
 8005776:	fa5f fa8a 	uxtb.w	sl, sl
 800577a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800577e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005780:	d824      	bhi.n	80057cc <_printf_float+0x178>
 8005782:	3901      	subs	r1, #1
 8005784:	4652      	mov	r2, sl
 8005786:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800578a:	9109      	str	r1, [sp, #36]	; 0x24
 800578c:	f7ff ff2f 	bl	80055ee <__exponent>
 8005790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005792:	1813      	adds	r3, r2, r0
 8005794:	2a01      	cmp	r2, #1
 8005796:	4681      	mov	r9, r0
 8005798:	6123      	str	r3, [r4, #16]
 800579a:	dc02      	bgt.n	80057a2 <_printf_float+0x14e>
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	07d1      	lsls	r1, r2, #31
 80057a0:	d501      	bpl.n	80057a6 <_printf_float+0x152>
 80057a2:	3301      	adds	r3, #1
 80057a4:	6123      	str	r3, [r4, #16]
 80057a6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0a5      	beq.n	80056fa <_printf_float+0xa6>
 80057ae:	232d      	movs	r3, #45	; 0x2d
 80057b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057b4:	e7a1      	b.n	80056fa <_printf_float+0xa6>
 80057b6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80057ba:	f000 8177 	beq.w	8005aac <_printf_float+0x458>
 80057be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80057c2:	d1bb      	bne.n	800573c <_printf_float+0xe8>
 80057c4:	2900      	cmp	r1, #0
 80057c6:	d1b9      	bne.n	800573c <_printf_float+0xe8>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e7b6      	b.n	800573a <_printf_float+0xe6>
 80057cc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80057d0:	d119      	bne.n	8005806 <_printf_float+0x1b2>
 80057d2:	2900      	cmp	r1, #0
 80057d4:	6863      	ldr	r3, [r4, #4]
 80057d6:	dd0c      	ble.n	80057f2 <_printf_float+0x19e>
 80057d8:	6121      	str	r1, [r4, #16]
 80057da:	b913      	cbnz	r3, 80057e2 <_printf_float+0x18e>
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	07d2      	lsls	r2, r2, #31
 80057e0:	d502      	bpl.n	80057e8 <_printf_float+0x194>
 80057e2:	3301      	adds	r3, #1
 80057e4:	440b      	add	r3, r1
 80057e6:	6123      	str	r3, [r4, #16]
 80057e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ea:	65a3      	str	r3, [r4, #88]	; 0x58
 80057ec:	f04f 0900 	mov.w	r9, #0
 80057f0:	e7d9      	b.n	80057a6 <_printf_float+0x152>
 80057f2:	b913      	cbnz	r3, 80057fa <_printf_float+0x1a6>
 80057f4:	6822      	ldr	r2, [r4, #0]
 80057f6:	07d0      	lsls	r0, r2, #31
 80057f8:	d501      	bpl.n	80057fe <_printf_float+0x1aa>
 80057fa:	3302      	adds	r3, #2
 80057fc:	e7f3      	b.n	80057e6 <_printf_float+0x192>
 80057fe:	2301      	movs	r3, #1
 8005800:	e7f1      	b.n	80057e6 <_printf_float+0x192>
 8005802:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005806:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800580a:	4293      	cmp	r3, r2
 800580c:	db05      	blt.n	800581a <_printf_float+0x1c6>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	07d1      	lsls	r1, r2, #31
 8005814:	d5e8      	bpl.n	80057e8 <_printf_float+0x194>
 8005816:	3301      	adds	r3, #1
 8005818:	e7e5      	b.n	80057e6 <_printf_float+0x192>
 800581a:	2b00      	cmp	r3, #0
 800581c:	bfd4      	ite	le
 800581e:	f1c3 0302 	rsble	r3, r3, #2
 8005822:	2301      	movgt	r3, #1
 8005824:	4413      	add	r3, r2
 8005826:	e7de      	b.n	80057e6 <_printf_float+0x192>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	055a      	lsls	r2, r3, #21
 800582c:	d407      	bmi.n	800583e <_printf_float+0x1ea>
 800582e:	6923      	ldr	r3, [r4, #16]
 8005830:	4642      	mov	r2, r8
 8005832:	4631      	mov	r1, r6
 8005834:	4628      	mov	r0, r5
 8005836:	47b8      	blx	r7
 8005838:	3001      	adds	r0, #1
 800583a:	d12b      	bne.n	8005894 <_printf_float+0x240>
 800583c:	e767      	b.n	800570e <_printf_float+0xba>
 800583e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005842:	f240 80dc 	bls.w	80059fe <_printf_float+0x3aa>
 8005846:	2200      	movs	r2, #0
 8005848:	2300      	movs	r3, #0
 800584a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800584e:	f7fb f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005852:	2800      	cmp	r0, #0
 8005854:	d033      	beq.n	80058be <_printf_float+0x26a>
 8005856:	2301      	movs	r3, #1
 8005858:	4a41      	ldr	r2, [pc, #260]	; (8005960 <_printf_float+0x30c>)
 800585a:	4631      	mov	r1, r6
 800585c:	4628      	mov	r0, r5
 800585e:	47b8      	blx	r7
 8005860:	3001      	adds	r0, #1
 8005862:	f43f af54 	beq.w	800570e <_printf_float+0xba>
 8005866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800586a:	429a      	cmp	r2, r3
 800586c:	db02      	blt.n	8005874 <_printf_float+0x220>
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	07d8      	lsls	r0, r3, #31
 8005872:	d50f      	bpl.n	8005894 <_printf_float+0x240>
 8005874:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005878:	4631      	mov	r1, r6
 800587a:	4628      	mov	r0, r5
 800587c:	47b8      	blx	r7
 800587e:	3001      	adds	r0, #1
 8005880:	f43f af45 	beq.w	800570e <_printf_float+0xba>
 8005884:	f04f 0800 	mov.w	r8, #0
 8005888:	f104 091a 	add.w	r9, r4, #26
 800588c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588e:	3b01      	subs	r3, #1
 8005890:	4543      	cmp	r3, r8
 8005892:	dc09      	bgt.n	80058a8 <_printf_float+0x254>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	079b      	lsls	r3, r3, #30
 8005898:	f100 8103 	bmi.w	8005aa2 <_printf_float+0x44e>
 800589c:	68e0      	ldr	r0, [r4, #12]
 800589e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058a0:	4298      	cmp	r0, r3
 80058a2:	bfb8      	it	lt
 80058a4:	4618      	movlt	r0, r3
 80058a6:	e734      	b.n	8005712 <_printf_float+0xbe>
 80058a8:	2301      	movs	r3, #1
 80058aa:	464a      	mov	r2, r9
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	f43f af2b 	beq.w	800570e <_printf_float+0xba>
 80058b8:	f108 0801 	add.w	r8, r8, #1
 80058bc:	e7e6      	b.n	800588c <_printf_float+0x238>
 80058be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	dc2b      	bgt.n	800591c <_printf_float+0x2c8>
 80058c4:	2301      	movs	r3, #1
 80058c6:	4a26      	ldr	r2, [pc, #152]	; (8005960 <_printf_float+0x30c>)
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	f43f af1d 	beq.w	800570e <_printf_float+0xba>
 80058d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d6:	b923      	cbnz	r3, 80058e2 <_printf_float+0x28e>
 80058d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058da:	b913      	cbnz	r3, 80058e2 <_printf_float+0x28e>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	07d9      	lsls	r1, r3, #31
 80058e0:	d5d8      	bpl.n	8005894 <_printf_float+0x240>
 80058e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	f43f af0e 	beq.w	800570e <_printf_float+0xba>
 80058f2:	f04f 0900 	mov.w	r9, #0
 80058f6:	f104 0a1a 	add.w	sl, r4, #26
 80058fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fc:	425b      	negs	r3, r3
 80058fe:	454b      	cmp	r3, r9
 8005900:	dc01      	bgt.n	8005906 <_printf_float+0x2b2>
 8005902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005904:	e794      	b.n	8005830 <_printf_float+0x1dc>
 8005906:	2301      	movs	r3, #1
 8005908:	4652      	mov	r2, sl
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	f43f aefc 	beq.w	800570e <_printf_float+0xba>
 8005916:	f109 0901 	add.w	r9, r9, #1
 800591a:	e7ee      	b.n	80058fa <_printf_float+0x2a6>
 800591c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800591e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005920:	429a      	cmp	r2, r3
 8005922:	bfa8      	it	ge
 8005924:	461a      	movge	r2, r3
 8005926:	2a00      	cmp	r2, #0
 8005928:	4691      	mov	r9, r2
 800592a:	dd07      	ble.n	800593c <_printf_float+0x2e8>
 800592c:	4613      	mov	r3, r2
 800592e:	4631      	mov	r1, r6
 8005930:	4642      	mov	r2, r8
 8005932:	4628      	mov	r0, r5
 8005934:	47b8      	blx	r7
 8005936:	3001      	adds	r0, #1
 8005938:	f43f aee9 	beq.w	800570e <_printf_float+0xba>
 800593c:	f104 031a 	add.w	r3, r4, #26
 8005940:	f04f 0b00 	mov.w	fp, #0
 8005944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005948:	9306      	str	r3, [sp, #24]
 800594a:	e015      	b.n	8005978 <_printf_float+0x324>
 800594c:	7fefffff 	.word	0x7fefffff
 8005950:	0800760c 	.word	0x0800760c
 8005954:	08007608 	.word	0x08007608
 8005958:	08007614 	.word	0x08007614
 800595c:	08007610 	.word	0x08007610
 8005960:	08007618 	.word	0x08007618
 8005964:	2301      	movs	r3, #1
 8005966:	9a06      	ldr	r2, [sp, #24]
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	f43f aecd 	beq.w	800570e <_printf_float+0xba>
 8005974:	f10b 0b01 	add.w	fp, fp, #1
 8005978:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800597c:	ebaa 0309 	sub.w	r3, sl, r9
 8005980:	455b      	cmp	r3, fp
 8005982:	dcef      	bgt.n	8005964 <_printf_float+0x310>
 8005984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005988:	429a      	cmp	r2, r3
 800598a:	44d0      	add	r8, sl
 800598c:	db15      	blt.n	80059ba <_printf_float+0x366>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	07da      	lsls	r2, r3, #31
 8005992:	d412      	bmi.n	80059ba <_printf_float+0x366>
 8005994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005996:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005998:	eba3 020a 	sub.w	r2, r3, sl
 800599c:	eba3 0a01 	sub.w	sl, r3, r1
 80059a0:	4592      	cmp	sl, r2
 80059a2:	bfa8      	it	ge
 80059a4:	4692      	movge	sl, r2
 80059a6:	f1ba 0f00 	cmp.w	sl, #0
 80059aa:	dc0e      	bgt.n	80059ca <_printf_float+0x376>
 80059ac:	f04f 0800 	mov.w	r8, #0
 80059b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059b4:	f104 091a 	add.w	r9, r4, #26
 80059b8:	e019      	b.n	80059ee <_printf_float+0x39a>
 80059ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059be:	4631      	mov	r1, r6
 80059c0:	4628      	mov	r0, r5
 80059c2:	47b8      	blx	r7
 80059c4:	3001      	adds	r0, #1
 80059c6:	d1e5      	bne.n	8005994 <_printf_float+0x340>
 80059c8:	e6a1      	b.n	800570e <_printf_float+0xba>
 80059ca:	4653      	mov	r3, sl
 80059cc:	4642      	mov	r2, r8
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	d1e9      	bne.n	80059ac <_printf_float+0x358>
 80059d8:	e699      	b.n	800570e <_printf_float+0xba>
 80059da:	2301      	movs	r3, #1
 80059dc:	464a      	mov	r2, r9
 80059de:	4631      	mov	r1, r6
 80059e0:	4628      	mov	r0, r5
 80059e2:	47b8      	blx	r7
 80059e4:	3001      	adds	r0, #1
 80059e6:	f43f ae92 	beq.w	800570e <_printf_float+0xba>
 80059ea:	f108 0801 	add.w	r8, r8, #1
 80059ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	eba3 030a 	sub.w	r3, r3, sl
 80059f8:	4543      	cmp	r3, r8
 80059fa:	dcee      	bgt.n	80059da <_printf_float+0x386>
 80059fc:	e74a      	b.n	8005894 <_printf_float+0x240>
 80059fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a00:	2a01      	cmp	r2, #1
 8005a02:	dc01      	bgt.n	8005a08 <_printf_float+0x3b4>
 8005a04:	07db      	lsls	r3, r3, #31
 8005a06:	d53a      	bpl.n	8005a7e <_printf_float+0x42a>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4642      	mov	r2, r8
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	4628      	mov	r0, r5
 8005a10:	47b8      	blx	r7
 8005a12:	3001      	adds	r0, #1
 8005a14:	f43f ae7b 	beq.w	800570e <_printf_float+0xba>
 8005a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4628      	mov	r0, r5
 8005a20:	47b8      	blx	r7
 8005a22:	3001      	adds	r0, #1
 8005a24:	f108 0801 	add.w	r8, r8, #1
 8005a28:	f43f ae71 	beq.w	800570e <_printf_float+0xba>
 8005a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8005a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f7fb f845 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a3e:	b9c8      	cbnz	r0, 8005a74 <_printf_float+0x420>
 8005a40:	4653      	mov	r3, sl
 8005a42:	4642      	mov	r2, r8
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d10e      	bne.n	8005a6c <_printf_float+0x418>
 8005a4e:	e65e      	b.n	800570e <_printf_float+0xba>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4652      	mov	r2, sl
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	f43f ae57 	beq.w	800570e <_printf_float+0xba>
 8005a60:	f108 0801 	add.w	r8, r8, #1
 8005a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a66:	3b01      	subs	r3, #1
 8005a68:	4543      	cmp	r3, r8
 8005a6a:	dcf1      	bgt.n	8005a50 <_printf_float+0x3fc>
 8005a6c:	464b      	mov	r3, r9
 8005a6e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a72:	e6de      	b.n	8005832 <_printf_float+0x1de>
 8005a74:	f04f 0800 	mov.w	r8, #0
 8005a78:	f104 0a1a 	add.w	sl, r4, #26
 8005a7c:	e7f2      	b.n	8005a64 <_printf_float+0x410>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e7df      	b.n	8005a42 <_printf_float+0x3ee>
 8005a82:	2301      	movs	r3, #1
 8005a84:	464a      	mov	r2, r9
 8005a86:	4631      	mov	r1, r6
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b8      	blx	r7
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	f43f ae3e 	beq.w	800570e <_printf_float+0xba>
 8005a92:	f108 0801 	add.w	r8, r8, #1
 8005a96:	68e3      	ldr	r3, [r4, #12]
 8005a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a9a:	1a9b      	subs	r3, r3, r2
 8005a9c:	4543      	cmp	r3, r8
 8005a9e:	dcf0      	bgt.n	8005a82 <_printf_float+0x42e>
 8005aa0:	e6fc      	b.n	800589c <_printf_float+0x248>
 8005aa2:	f04f 0800 	mov.w	r8, #0
 8005aa6:	f104 0919 	add.w	r9, r4, #25
 8005aaa:	e7f4      	b.n	8005a96 <_printf_float+0x442>
 8005aac:	2900      	cmp	r1, #0
 8005aae:	f43f ae8b 	beq.w	80057c8 <_printf_float+0x174>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005ab8:	ab09      	add	r3, sp, #36	; 0x24
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	ec49 8b10 	vmov	d0, r8, r9
 8005ac0:	6022      	str	r2, [r4, #0]
 8005ac2:	f8cd a004 	str.w	sl, [sp, #4]
 8005ac6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005aca:	4628      	mov	r0, r5
 8005acc:	f7ff fd2e 	bl	800552c <__cvt>
 8005ad0:	4680      	mov	r8, r0
 8005ad2:	e648      	b.n	8005766 <_printf_float+0x112>

08005ad4 <_printf_common>:
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	4691      	mov	r9, r2
 8005ada:	461f      	mov	r7, r3
 8005adc:	688a      	ldr	r2, [r1, #8]
 8005ade:	690b      	ldr	r3, [r1, #16]
 8005ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	bfb8      	it	lt
 8005ae8:	4613      	movlt	r3, r2
 8005aea:	f8c9 3000 	str.w	r3, [r9]
 8005aee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005af2:	4606      	mov	r6, r0
 8005af4:	460c      	mov	r4, r1
 8005af6:	b112      	cbz	r2, 8005afe <_printf_common+0x2a>
 8005af8:	3301      	adds	r3, #1
 8005afa:	f8c9 3000 	str.w	r3, [r9]
 8005afe:	6823      	ldr	r3, [r4, #0]
 8005b00:	0699      	lsls	r1, r3, #26
 8005b02:	bf42      	ittt	mi
 8005b04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b08:	3302      	addmi	r3, #2
 8005b0a:	f8c9 3000 	strmi.w	r3, [r9]
 8005b0e:	6825      	ldr	r5, [r4, #0]
 8005b10:	f015 0506 	ands.w	r5, r5, #6
 8005b14:	d107      	bne.n	8005b26 <_printf_common+0x52>
 8005b16:	f104 0a19 	add.w	sl, r4, #25
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	f8d9 2000 	ldr.w	r2, [r9]
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	42ab      	cmp	r3, r5
 8005b24:	dc28      	bgt.n	8005b78 <_printf_common+0xa4>
 8005b26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005b2a:	6822      	ldr	r2, [r4, #0]
 8005b2c:	3300      	adds	r3, #0
 8005b2e:	bf18      	it	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	0692      	lsls	r2, r2, #26
 8005b34:	d42d      	bmi.n	8005b92 <_printf_common+0xbe>
 8005b36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	47c0      	blx	r8
 8005b40:	3001      	adds	r0, #1
 8005b42:	d020      	beq.n	8005b86 <_printf_common+0xb2>
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	68e5      	ldr	r5, [r4, #12]
 8005b48:	f8d9 2000 	ldr.w	r2, [r9]
 8005b4c:	f003 0306 	and.w	r3, r3, #6
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	bf08      	it	eq
 8005b54:	1aad      	subeq	r5, r5, r2
 8005b56:	68a3      	ldr	r3, [r4, #8]
 8005b58:	6922      	ldr	r2, [r4, #16]
 8005b5a:	bf0c      	ite	eq
 8005b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b60:	2500      	movne	r5, #0
 8005b62:	4293      	cmp	r3, r2
 8005b64:	bfc4      	itt	gt
 8005b66:	1a9b      	subgt	r3, r3, r2
 8005b68:	18ed      	addgt	r5, r5, r3
 8005b6a:	f04f 0900 	mov.w	r9, #0
 8005b6e:	341a      	adds	r4, #26
 8005b70:	454d      	cmp	r5, r9
 8005b72:	d11a      	bne.n	8005baa <_printf_common+0xd6>
 8005b74:	2000      	movs	r0, #0
 8005b76:	e008      	b.n	8005b8a <_printf_common+0xb6>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4652      	mov	r2, sl
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	4630      	mov	r0, r6
 8005b80:	47c0      	blx	r8
 8005b82:	3001      	adds	r0, #1
 8005b84:	d103      	bne.n	8005b8e <_printf_common+0xba>
 8005b86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8e:	3501      	adds	r5, #1
 8005b90:	e7c3      	b.n	8005b1a <_printf_common+0x46>
 8005b92:	18e1      	adds	r1, r4, r3
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	2030      	movs	r0, #48	; 0x30
 8005b98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b9c:	4422      	add	r2, r4
 8005b9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ba6:	3302      	adds	r3, #2
 8005ba8:	e7c5      	b.n	8005b36 <_printf_common+0x62>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4622      	mov	r2, r4
 8005bae:	4639      	mov	r1, r7
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	47c0      	blx	r8
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	d0e6      	beq.n	8005b86 <_printf_common+0xb2>
 8005bb8:	f109 0901 	add.w	r9, r9, #1
 8005bbc:	e7d8      	b.n	8005b70 <_printf_common+0x9c>
	...

08005bc0 <_printf_i>:
 8005bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005bc8:	460c      	mov	r4, r1
 8005bca:	7e09      	ldrb	r1, [r1, #24]
 8005bcc:	b085      	sub	sp, #20
 8005bce:	296e      	cmp	r1, #110	; 0x6e
 8005bd0:	4617      	mov	r7, r2
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	4698      	mov	r8, r3
 8005bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bd8:	f000 80b3 	beq.w	8005d42 <_printf_i+0x182>
 8005bdc:	d822      	bhi.n	8005c24 <_printf_i+0x64>
 8005bde:	2963      	cmp	r1, #99	; 0x63
 8005be0:	d036      	beq.n	8005c50 <_printf_i+0x90>
 8005be2:	d80a      	bhi.n	8005bfa <_printf_i+0x3a>
 8005be4:	2900      	cmp	r1, #0
 8005be6:	f000 80b9 	beq.w	8005d5c <_printf_i+0x19c>
 8005bea:	2958      	cmp	r1, #88	; 0x58
 8005bec:	f000 8083 	beq.w	8005cf6 <_printf_i+0x136>
 8005bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005bf8:	e032      	b.n	8005c60 <_printf_i+0xa0>
 8005bfa:	2964      	cmp	r1, #100	; 0x64
 8005bfc:	d001      	beq.n	8005c02 <_printf_i+0x42>
 8005bfe:	2969      	cmp	r1, #105	; 0x69
 8005c00:	d1f6      	bne.n	8005bf0 <_printf_i+0x30>
 8005c02:	6820      	ldr	r0, [r4, #0]
 8005c04:	6813      	ldr	r3, [r2, #0]
 8005c06:	0605      	lsls	r5, r0, #24
 8005c08:	f103 0104 	add.w	r1, r3, #4
 8005c0c:	d52a      	bpl.n	8005c64 <_printf_i+0xa4>
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6011      	str	r1, [r2, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da03      	bge.n	8005c1e <_printf_i+0x5e>
 8005c16:	222d      	movs	r2, #45	; 0x2d
 8005c18:	425b      	negs	r3, r3
 8005c1a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005c1e:	486f      	ldr	r0, [pc, #444]	; (8005ddc <_printf_i+0x21c>)
 8005c20:	220a      	movs	r2, #10
 8005c22:	e039      	b.n	8005c98 <_printf_i+0xd8>
 8005c24:	2973      	cmp	r1, #115	; 0x73
 8005c26:	f000 809d 	beq.w	8005d64 <_printf_i+0x1a4>
 8005c2a:	d808      	bhi.n	8005c3e <_printf_i+0x7e>
 8005c2c:	296f      	cmp	r1, #111	; 0x6f
 8005c2e:	d020      	beq.n	8005c72 <_printf_i+0xb2>
 8005c30:	2970      	cmp	r1, #112	; 0x70
 8005c32:	d1dd      	bne.n	8005bf0 <_printf_i+0x30>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	f043 0320 	orr.w	r3, r3, #32
 8005c3a:	6023      	str	r3, [r4, #0]
 8005c3c:	e003      	b.n	8005c46 <_printf_i+0x86>
 8005c3e:	2975      	cmp	r1, #117	; 0x75
 8005c40:	d017      	beq.n	8005c72 <_printf_i+0xb2>
 8005c42:	2978      	cmp	r1, #120	; 0x78
 8005c44:	d1d4      	bne.n	8005bf0 <_printf_i+0x30>
 8005c46:	2378      	movs	r3, #120	; 0x78
 8005c48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c4c:	4864      	ldr	r0, [pc, #400]	; (8005de0 <_printf_i+0x220>)
 8005c4e:	e055      	b.n	8005cfc <_printf_i+0x13c>
 8005c50:	6813      	ldr	r3, [r2, #0]
 8005c52:	1d19      	adds	r1, r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6011      	str	r1, [r2, #0]
 8005c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c60:	2301      	movs	r3, #1
 8005c62:	e08c      	b.n	8005d7e <_printf_i+0x1be>
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6011      	str	r1, [r2, #0]
 8005c68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005c6c:	bf18      	it	ne
 8005c6e:	b21b      	sxthne	r3, r3
 8005c70:	e7cf      	b.n	8005c12 <_printf_i+0x52>
 8005c72:	6813      	ldr	r3, [r2, #0]
 8005c74:	6825      	ldr	r5, [r4, #0]
 8005c76:	1d18      	adds	r0, r3, #4
 8005c78:	6010      	str	r0, [r2, #0]
 8005c7a:	0628      	lsls	r0, r5, #24
 8005c7c:	d501      	bpl.n	8005c82 <_printf_i+0xc2>
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	e002      	b.n	8005c88 <_printf_i+0xc8>
 8005c82:	0668      	lsls	r0, r5, #25
 8005c84:	d5fb      	bpl.n	8005c7e <_printf_i+0xbe>
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	4854      	ldr	r0, [pc, #336]	; (8005ddc <_printf_i+0x21c>)
 8005c8a:	296f      	cmp	r1, #111	; 0x6f
 8005c8c:	bf14      	ite	ne
 8005c8e:	220a      	movne	r2, #10
 8005c90:	2208      	moveq	r2, #8
 8005c92:	2100      	movs	r1, #0
 8005c94:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c98:	6865      	ldr	r5, [r4, #4]
 8005c9a:	60a5      	str	r5, [r4, #8]
 8005c9c:	2d00      	cmp	r5, #0
 8005c9e:	f2c0 8095 	blt.w	8005dcc <_printf_i+0x20c>
 8005ca2:	6821      	ldr	r1, [r4, #0]
 8005ca4:	f021 0104 	bic.w	r1, r1, #4
 8005ca8:	6021      	str	r1, [r4, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d13d      	bne.n	8005d2a <_printf_i+0x16a>
 8005cae:	2d00      	cmp	r5, #0
 8005cb0:	f040 808e 	bne.w	8005dd0 <_printf_i+0x210>
 8005cb4:	4665      	mov	r5, ip
 8005cb6:	2a08      	cmp	r2, #8
 8005cb8:	d10b      	bne.n	8005cd2 <_printf_i+0x112>
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	07db      	lsls	r3, r3, #31
 8005cbe:	d508      	bpl.n	8005cd2 <_printf_i+0x112>
 8005cc0:	6923      	ldr	r3, [r4, #16]
 8005cc2:	6862      	ldr	r2, [r4, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	bfde      	ittt	le
 8005cc8:	2330      	movle	r3, #48	; 0x30
 8005cca:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005cd2:	ebac 0305 	sub.w	r3, ip, r5
 8005cd6:	6123      	str	r3, [r4, #16]
 8005cd8:	f8cd 8000 	str.w	r8, [sp]
 8005cdc:	463b      	mov	r3, r7
 8005cde:	aa03      	add	r2, sp, #12
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	f7ff fef6 	bl	8005ad4 <_printf_common>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d14d      	bne.n	8005d88 <_printf_i+0x1c8>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cf0:	b005      	add	sp, #20
 8005cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cf6:	4839      	ldr	r0, [pc, #228]	; (8005ddc <_printf_i+0x21c>)
 8005cf8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	6821      	ldr	r1, [r4, #0]
 8005d00:	1d1d      	adds	r5, r3, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6015      	str	r5, [r2, #0]
 8005d06:	060a      	lsls	r2, r1, #24
 8005d08:	d50b      	bpl.n	8005d22 <_printf_i+0x162>
 8005d0a:	07ca      	lsls	r2, r1, #31
 8005d0c:	bf44      	itt	mi
 8005d0e:	f041 0120 	orrmi.w	r1, r1, #32
 8005d12:	6021      	strmi	r1, [r4, #0]
 8005d14:	b91b      	cbnz	r3, 8005d1e <_printf_i+0x15e>
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	f022 0220 	bic.w	r2, r2, #32
 8005d1c:	6022      	str	r2, [r4, #0]
 8005d1e:	2210      	movs	r2, #16
 8005d20:	e7b7      	b.n	8005c92 <_printf_i+0xd2>
 8005d22:	064d      	lsls	r5, r1, #25
 8005d24:	bf48      	it	mi
 8005d26:	b29b      	uxthmi	r3, r3
 8005d28:	e7ef      	b.n	8005d0a <_printf_i+0x14a>
 8005d2a:	4665      	mov	r5, ip
 8005d2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d30:	fb02 3311 	mls	r3, r2, r1, r3
 8005d34:	5cc3      	ldrb	r3, [r0, r3]
 8005d36:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	2900      	cmp	r1, #0
 8005d3e:	d1f5      	bne.n	8005d2c <_printf_i+0x16c>
 8005d40:	e7b9      	b.n	8005cb6 <_printf_i+0xf6>
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	6825      	ldr	r5, [r4, #0]
 8005d46:	6961      	ldr	r1, [r4, #20]
 8005d48:	1d18      	adds	r0, r3, #4
 8005d4a:	6010      	str	r0, [r2, #0]
 8005d4c:	0628      	lsls	r0, r5, #24
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	d501      	bpl.n	8005d56 <_printf_i+0x196>
 8005d52:	6019      	str	r1, [r3, #0]
 8005d54:	e002      	b.n	8005d5c <_printf_i+0x19c>
 8005d56:	066a      	lsls	r2, r5, #25
 8005d58:	d5fb      	bpl.n	8005d52 <_printf_i+0x192>
 8005d5a:	8019      	strh	r1, [r3, #0]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	6123      	str	r3, [r4, #16]
 8005d60:	4665      	mov	r5, ip
 8005d62:	e7b9      	b.n	8005cd8 <_printf_i+0x118>
 8005d64:	6813      	ldr	r3, [r2, #0]
 8005d66:	1d19      	adds	r1, r3, #4
 8005d68:	6011      	str	r1, [r2, #0]
 8005d6a:	681d      	ldr	r5, [r3, #0]
 8005d6c:	6862      	ldr	r2, [r4, #4]
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4628      	mov	r0, r5
 8005d72:	f7fa fa35 	bl	80001e0 <memchr>
 8005d76:	b108      	cbz	r0, 8005d7c <_printf_i+0x1bc>
 8005d78:	1b40      	subs	r0, r0, r5
 8005d7a:	6060      	str	r0, [r4, #4]
 8005d7c:	6863      	ldr	r3, [r4, #4]
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	2300      	movs	r3, #0
 8005d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d86:	e7a7      	b.n	8005cd8 <_printf_i+0x118>
 8005d88:	6923      	ldr	r3, [r4, #16]
 8005d8a:	462a      	mov	r2, r5
 8005d8c:	4639      	mov	r1, r7
 8005d8e:	4630      	mov	r0, r6
 8005d90:	47c0      	blx	r8
 8005d92:	3001      	adds	r0, #1
 8005d94:	d0aa      	beq.n	8005cec <_printf_i+0x12c>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	079b      	lsls	r3, r3, #30
 8005d9a:	d413      	bmi.n	8005dc4 <_printf_i+0x204>
 8005d9c:	68e0      	ldr	r0, [r4, #12]
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	4298      	cmp	r0, r3
 8005da2:	bfb8      	it	lt
 8005da4:	4618      	movlt	r0, r3
 8005da6:	e7a3      	b.n	8005cf0 <_printf_i+0x130>
 8005da8:	2301      	movs	r3, #1
 8005daa:	464a      	mov	r2, r9
 8005dac:	4639      	mov	r1, r7
 8005dae:	4630      	mov	r0, r6
 8005db0:	47c0      	blx	r8
 8005db2:	3001      	adds	r0, #1
 8005db4:	d09a      	beq.n	8005cec <_printf_i+0x12c>
 8005db6:	3501      	adds	r5, #1
 8005db8:	68e3      	ldr	r3, [r4, #12]
 8005dba:	9a03      	ldr	r2, [sp, #12]
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	42ab      	cmp	r3, r5
 8005dc0:	dcf2      	bgt.n	8005da8 <_printf_i+0x1e8>
 8005dc2:	e7eb      	b.n	8005d9c <_printf_i+0x1dc>
 8005dc4:	2500      	movs	r5, #0
 8005dc6:	f104 0919 	add.w	r9, r4, #25
 8005dca:	e7f5      	b.n	8005db8 <_printf_i+0x1f8>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1ac      	bne.n	8005d2a <_printf_i+0x16a>
 8005dd0:	7803      	ldrb	r3, [r0, #0]
 8005dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dd6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dda:	e76c      	b.n	8005cb6 <_printf_i+0xf6>
 8005ddc:	0800761a 	.word	0x0800761a
 8005de0:	0800762b 	.word	0x0800762b

08005de4 <_vsiprintf_r>:
 8005de4:	b500      	push	{lr}
 8005de6:	b09b      	sub	sp, #108	; 0x6c
 8005de8:	9100      	str	r1, [sp, #0]
 8005dea:	9104      	str	r1, [sp, #16]
 8005dec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005df0:	9105      	str	r1, [sp, #20]
 8005df2:	9102      	str	r1, [sp, #8]
 8005df4:	4905      	ldr	r1, [pc, #20]	; (8005e0c <_vsiprintf_r+0x28>)
 8005df6:	9103      	str	r1, [sp, #12]
 8005df8:	4669      	mov	r1, sp
 8005dfa:	f001 fa65 	bl	80072c8 <_svfiprintf_r>
 8005dfe:	9b00      	ldr	r3, [sp, #0]
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	b01b      	add	sp, #108	; 0x6c
 8005e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e0a:	bf00      	nop
 8005e0c:	ffff0208 	.word	0xffff0208

08005e10 <vsiprintf>:
 8005e10:	4613      	mov	r3, r2
 8005e12:	460a      	mov	r2, r1
 8005e14:	4601      	mov	r1, r0
 8005e16:	4802      	ldr	r0, [pc, #8]	; (8005e20 <vsiprintf+0x10>)
 8005e18:	6800      	ldr	r0, [r0, #0]
 8005e1a:	f7ff bfe3 	b.w	8005de4 <_vsiprintf_r>
 8005e1e:	bf00      	nop
 8005e20:	2000000c 	.word	0x2000000c

08005e24 <quorem>:
 8005e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e28:	6903      	ldr	r3, [r0, #16]
 8005e2a:	690c      	ldr	r4, [r1, #16]
 8005e2c:	42a3      	cmp	r3, r4
 8005e2e:	4680      	mov	r8, r0
 8005e30:	f2c0 8082 	blt.w	8005f38 <quorem+0x114>
 8005e34:	3c01      	subs	r4, #1
 8005e36:	f101 0714 	add.w	r7, r1, #20
 8005e3a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005e3e:	f100 0614 	add.w	r6, r0, #20
 8005e42:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005e46:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005e4a:	eb06 030c 	add.w	r3, r6, ip
 8005e4e:	3501      	adds	r5, #1
 8005e50:	eb07 090c 	add.w	r9, r7, ip
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	fbb0 f5f5 	udiv	r5, r0, r5
 8005e5a:	b395      	cbz	r5, 8005ec2 <quorem+0x9e>
 8005e5c:	f04f 0a00 	mov.w	sl, #0
 8005e60:	4638      	mov	r0, r7
 8005e62:	46b6      	mov	lr, r6
 8005e64:	46d3      	mov	fp, sl
 8005e66:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e6a:	b293      	uxth	r3, r2
 8005e6c:	fb05 a303 	mla	r3, r5, r3, sl
 8005e70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	ebab 0303 	sub.w	r3, fp, r3
 8005e7a:	0c12      	lsrs	r2, r2, #16
 8005e7c:	f8de b000 	ldr.w	fp, [lr]
 8005e80:	fb05 a202 	mla	r2, r5, r2, sl
 8005e84:	fa13 f38b 	uxtah	r3, r3, fp
 8005e88:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005e8c:	fa1f fb82 	uxth.w	fp, r2
 8005e90:	f8de 2000 	ldr.w	r2, [lr]
 8005e94:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005e98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ea2:	4581      	cmp	r9, r0
 8005ea4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005ea8:	f84e 3b04 	str.w	r3, [lr], #4
 8005eac:	d2db      	bcs.n	8005e66 <quorem+0x42>
 8005eae:	f856 300c 	ldr.w	r3, [r6, ip]
 8005eb2:	b933      	cbnz	r3, 8005ec2 <quorem+0x9e>
 8005eb4:	9b01      	ldr	r3, [sp, #4]
 8005eb6:	3b04      	subs	r3, #4
 8005eb8:	429e      	cmp	r6, r3
 8005eba:	461a      	mov	r2, r3
 8005ebc:	d330      	bcc.n	8005f20 <quorem+0xfc>
 8005ebe:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	f001 f82a 	bl	8006f1c <__mcmp>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	db25      	blt.n	8005f18 <quorem+0xf4>
 8005ecc:	3501      	adds	r5, #1
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f04f 0c00 	mov.w	ip, #0
 8005ed4:	f857 2b04 	ldr.w	r2, [r7], #4
 8005ed8:	f8d0 e000 	ldr.w	lr, [r0]
 8005edc:	b293      	uxth	r3, r2
 8005ede:	ebac 0303 	sub.w	r3, ip, r3
 8005ee2:	0c12      	lsrs	r2, r2, #16
 8005ee4:	fa13 f38e 	uxtah	r3, r3, lr
 8005ee8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005eec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ef6:	45b9      	cmp	r9, r7
 8005ef8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005efc:	f840 3b04 	str.w	r3, [r0], #4
 8005f00:	d2e8      	bcs.n	8005ed4 <quorem+0xb0>
 8005f02:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005f06:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005f0a:	b92a      	cbnz	r2, 8005f18 <quorem+0xf4>
 8005f0c:	3b04      	subs	r3, #4
 8005f0e:	429e      	cmp	r6, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	d30b      	bcc.n	8005f2c <quorem+0x108>
 8005f14:	f8c8 4010 	str.w	r4, [r8, #16]
 8005f18:	4628      	mov	r0, r5
 8005f1a:	b003      	add	sp, #12
 8005f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f20:	6812      	ldr	r2, [r2, #0]
 8005f22:	3b04      	subs	r3, #4
 8005f24:	2a00      	cmp	r2, #0
 8005f26:	d1ca      	bne.n	8005ebe <quorem+0x9a>
 8005f28:	3c01      	subs	r4, #1
 8005f2a:	e7c5      	b.n	8005eb8 <quorem+0x94>
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	3b04      	subs	r3, #4
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	d1ef      	bne.n	8005f14 <quorem+0xf0>
 8005f34:	3c01      	subs	r4, #1
 8005f36:	e7ea      	b.n	8005f0e <quorem+0xea>
 8005f38:	2000      	movs	r0, #0
 8005f3a:	e7ee      	b.n	8005f1a <quorem+0xf6>
 8005f3c:	0000      	movs	r0, r0
	...

08005f40 <_dtoa_r>:
 8005f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f44:	ec57 6b10 	vmov	r6, r7, d0
 8005f48:	b097      	sub	sp, #92	; 0x5c
 8005f4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f4c:	9106      	str	r1, [sp, #24]
 8005f4e:	4604      	mov	r4, r0
 8005f50:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f52:	9312      	str	r3, [sp, #72]	; 0x48
 8005f54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f58:	e9cd 6700 	strd	r6, r7, [sp]
 8005f5c:	b93d      	cbnz	r5, 8005f6e <_dtoa_r+0x2e>
 8005f5e:	2010      	movs	r0, #16
 8005f60:	f000 fdb4 	bl	8006acc <malloc>
 8005f64:	6260      	str	r0, [r4, #36]	; 0x24
 8005f66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f6a:	6005      	str	r5, [r0, #0]
 8005f6c:	60c5      	str	r5, [r0, #12]
 8005f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f70:	6819      	ldr	r1, [r3, #0]
 8005f72:	b151      	cbz	r1, 8005f8a <_dtoa_r+0x4a>
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	604a      	str	r2, [r1, #4]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4093      	lsls	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f000 fdeb 	bl	8006b5a <_Bfree>
 8005f84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	1e3b      	subs	r3, r7, #0
 8005f8c:	bfbb      	ittet	lt
 8005f8e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f92:	9301      	strlt	r3, [sp, #4]
 8005f94:	2300      	movge	r3, #0
 8005f96:	2201      	movlt	r2, #1
 8005f98:	bfac      	ite	ge
 8005f9a:	f8c8 3000 	strge.w	r3, [r8]
 8005f9e:	f8c8 2000 	strlt.w	r2, [r8]
 8005fa2:	4baf      	ldr	r3, [pc, #700]	; (8006260 <_dtoa_r+0x320>)
 8005fa4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005fa8:	ea33 0308 	bics.w	r3, r3, r8
 8005fac:	d114      	bne.n	8005fd8 <_dtoa_r+0x98>
 8005fae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	9b00      	ldr	r3, [sp, #0]
 8005fb8:	b923      	cbnz	r3, 8005fc4 <_dtoa_r+0x84>
 8005fba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f000 8542 	beq.w	8006a48 <_dtoa_r+0xb08>
 8005fc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fc6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006274 <_dtoa_r+0x334>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 8544 	beq.w	8006a58 <_dtoa_r+0xb18>
 8005fd0:	f10b 0303 	add.w	r3, fp, #3
 8005fd4:	f000 bd3e 	b.w	8006a54 <_dtoa_r+0xb14>
 8005fd8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2300      	movs	r3, #0
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	f7fa fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe8:	4681      	mov	r9, r0
 8005fea:	b168      	cbz	r0, 8006008 <_dtoa_r+0xc8>
 8005fec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fee:	2301      	movs	r3, #1
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 8524 	beq.w	8006a42 <_dtoa_r+0xb02>
 8005ffa:	4b9a      	ldr	r3, [pc, #616]	; (8006264 <_dtoa_r+0x324>)
 8005ffc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ffe:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	f000 bd28 	b.w	8006a58 <_dtoa_r+0xb18>
 8006008:	aa14      	add	r2, sp, #80	; 0x50
 800600a:	a915      	add	r1, sp, #84	; 0x54
 800600c:	ec47 6b10 	vmov	d0, r6, r7
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fffa 	bl	800700a <__d2b>
 8006016:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800601a:	9004      	str	r0, [sp, #16]
 800601c:	2d00      	cmp	r5, #0
 800601e:	d07c      	beq.n	800611a <_dtoa_r+0x1da>
 8006020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006024:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006028:	46b2      	mov	sl, r6
 800602a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800602e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006032:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006036:	2200      	movs	r2, #0
 8006038:	4b8b      	ldr	r3, [pc, #556]	; (8006268 <_dtoa_r+0x328>)
 800603a:	4650      	mov	r0, sl
 800603c:	4659      	mov	r1, fp
 800603e:	f7fa f923 	bl	8000288 <__aeabi_dsub>
 8006042:	a381      	add	r3, pc, #516	; (adr r3, 8006248 <_dtoa_r+0x308>)
 8006044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006048:	f7fa fad6 	bl	80005f8 <__aeabi_dmul>
 800604c:	a380      	add	r3, pc, #512	; (adr r3, 8006250 <_dtoa_r+0x310>)
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	f7fa f91b 	bl	800028c <__adddf3>
 8006056:	4606      	mov	r6, r0
 8006058:	4628      	mov	r0, r5
 800605a:	460f      	mov	r7, r1
 800605c:	f7fa fa62 	bl	8000524 <__aeabi_i2d>
 8006060:	a37d      	add	r3, pc, #500	; (adr r3, 8006258 <_dtoa_r+0x318>)
 8006062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006066:	f7fa fac7 	bl	80005f8 <__aeabi_dmul>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4630      	mov	r0, r6
 8006070:	4639      	mov	r1, r7
 8006072:	f7fa f90b 	bl	800028c <__adddf3>
 8006076:	4606      	mov	r6, r0
 8006078:	460f      	mov	r7, r1
 800607a:	f7fa fd6d 	bl	8000b58 <__aeabi_d2iz>
 800607e:	2200      	movs	r2, #0
 8006080:	4682      	mov	sl, r0
 8006082:	2300      	movs	r3, #0
 8006084:	4630      	mov	r0, r6
 8006086:	4639      	mov	r1, r7
 8006088:	f7fa fd28 	bl	8000adc <__aeabi_dcmplt>
 800608c:	b148      	cbz	r0, 80060a2 <_dtoa_r+0x162>
 800608e:	4650      	mov	r0, sl
 8006090:	f7fa fa48 	bl	8000524 <__aeabi_i2d>
 8006094:	4632      	mov	r2, r6
 8006096:	463b      	mov	r3, r7
 8006098:	f7fa fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800609c:	b908      	cbnz	r0, 80060a2 <_dtoa_r+0x162>
 800609e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80060a2:	f1ba 0f16 	cmp.w	sl, #22
 80060a6:	d859      	bhi.n	800615c <_dtoa_r+0x21c>
 80060a8:	4970      	ldr	r1, [pc, #448]	; (800626c <_dtoa_r+0x32c>)
 80060aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80060ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060b6:	f7fa fd2f 	bl	8000b18 <__aeabi_dcmpgt>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d050      	beq.n	8006160 <_dtoa_r+0x220>
 80060be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80060c2:	2300      	movs	r3, #0
 80060c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80060c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060c8:	1b5d      	subs	r5, r3, r5
 80060ca:	f1b5 0801 	subs.w	r8, r5, #1
 80060ce:	bf49      	itett	mi
 80060d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80060d4:	2300      	movpl	r3, #0
 80060d6:	9305      	strmi	r3, [sp, #20]
 80060d8:	f04f 0800 	movmi.w	r8, #0
 80060dc:	bf58      	it	pl
 80060de:	9305      	strpl	r3, [sp, #20]
 80060e0:	f1ba 0f00 	cmp.w	sl, #0
 80060e4:	db3e      	blt.n	8006164 <_dtoa_r+0x224>
 80060e6:	2300      	movs	r3, #0
 80060e8:	44d0      	add	r8, sl
 80060ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80060ee:	9307      	str	r3, [sp, #28]
 80060f0:	9b06      	ldr	r3, [sp, #24]
 80060f2:	2b09      	cmp	r3, #9
 80060f4:	f200 8090 	bhi.w	8006218 <_dtoa_r+0x2d8>
 80060f8:	2b05      	cmp	r3, #5
 80060fa:	bfc4      	itt	gt
 80060fc:	3b04      	subgt	r3, #4
 80060fe:	9306      	strgt	r3, [sp, #24]
 8006100:	9b06      	ldr	r3, [sp, #24]
 8006102:	f1a3 0302 	sub.w	r3, r3, #2
 8006106:	bfcc      	ite	gt
 8006108:	2500      	movgt	r5, #0
 800610a:	2501      	movle	r5, #1
 800610c:	2b03      	cmp	r3, #3
 800610e:	f200 808f 	bhi.w	8006230 <_dtoa_r+0x2f0>
 8006112:	e8df f003 	tbb	[pc, r3]
 8006116:	7f7d      	.short	0x7f7d
 8006118:	7131      	.short	0x7131
 800611a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800611e:	441d      	add	r5, r3
 8006120:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006124:	2820      	cmp	r0, #32
 8006126:	dd13      	ble.n	8006150 <_dtoa_r+0x210>
 8006128:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800612c:	9b00      	ldr	r3, [sp, #0]
 800612e:	fa08 f800 	lsl.w	r8, r8, r0
 8006132:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006136:	fa23 f000 	lsr.w	r0, r3, r0
 800613a:	ea48 0000 	orr.w	r0, r8, r0
 800613e:	f7fa f9e1 	bl	8000504 <__aeabi_ui2d>
 8006142:	2301      	movs	r3, #1
 8006144:	4682      	mov	sl, r0
 8006146:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800614a:	3d01      	subs	r5, #1
 800614c:	9313      	str	r3, [sp, #76]	; 0x4c
 800614e:	e772      	b.n	8006036 <_dtoa_r+0xf6>
 8006150:	9b00      	ldr	r3, [sp, #0]
 8006152:	f1c0 0020 	rsb	r0, r0, #32
 8006156:	fa03 f000 	lsl.w	r0, r3, r0
 800615a:	e7f0      	b.n	800613e <_dtoa_r+0x1fe>
 800615c:	2301      	movs	r3, #1
 800615e:	e7b1      	b.n	80060c4 <_dtoa_r+0x184>
 8006160:	900f      	str	r0, [sp, #60]	; 0x3c
 8006162:	e7b0      	b.n	80060c6 <_dtoa_r+0x186>
 8006164:	9b05      	ldr	r3, [sp, #20]
 8006166:	eba3 030a 	sub.w	r3, r3, sl
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	f1ca 0300 	rsb	r3, sl, #0
 8006170:	9307      	str	r3, [sp, #28]
 8006172:	2300      	movs	r3, #0
 8006174:	930e      	str	r3, [sp, #56]	; 0x38
 8006176:	e7bb      	b.n	80060f0 <_dtoa_r+0x1b0>
 8006178:	2301      	movs	r3, #1
 800617a:	930a      	str	r3, [sp, #40]	; 0x28
 800617c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800617e:	2b00      	cmp	r3, #0
 8006180:	dd59      	ble.n	8006236 <_dtoa_r+0x2f6>
 8006182:	9302      	str	r3, [sp, #8]
 8006184:	4699      	mov	r9, r3
 8006186:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006188:	2200      	movs	r2, #0
 800618a:	6072      	str	r2, [r6, #4]
 800618c:	2204      	movs	r2, #4
 800618e:	f102 0014 	add.w	r0, r2, #20
 8006192:	4298      	cmp	r0, r3
 8006194:	6871      	ldr	r1, [r6, #4]
 8006196:	d953      	bls.n	8006240 <_dtoa_r+0x300>
 8006198:	4620      	mov	r0, r4
 800619a:	f000 fcaa 	bl	8006af2 <_Balloc>
 800619e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a0:	6030      	str	r0, [r6, #0]
 80061a2:	f1b9 0f0e 	cmp.w	r9, #14
 80061a6:	f8d3 b000 	ldr.w	fp, [r3]
 80061aa:	f200 80e6 	bhi.w	800637a <_dtoa_r+0x43a>
 80061ae:	2d00      	cmp	r5, #0
 80061b0:	f000 80e3 	beq.w	800637a <_dtoa_r+0x43a>
 80061b4:	ed9d 7b00 	vldr	d7, [sp]
 80061b8:	f1ba 0f00 	cmp.w	sl, #0
 80061bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80061c0:	dd74      	ble.n	80062ac <_dtoa_r+0x36c>
 80061c2:	4a2a      	ldr	r2, [pc, #168]	; (800626c <_dtoa_r+0x32c>)
 80061c4:	f00a 030f 	and.w	r3, sl, #15
 80061c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061cc:	ed93 7b00 	vldr	d7, [r3]
 80061d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80061d4:	06f0      	lsls	r0, r6, #27
 80061d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80061da:	d565      	bpl.n	80062a8 <_dtoa_r+0x368>
 80061dc:	4b24      	ldr	r3, [pc, #144]	; (8006270 <_dtoa_r+0x330>)
 80061de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061e6:	f7fa fb31 	bl	800084c <__aeabi_ddiv>
 80061ea:	e9cd 0100 	strd	r0, r1, [sp]
 80061ee:	f006 060f 	and.w	r6, r6, #15
 80061f2:	2503      	movs	r5, #3
 80061f4:	4f1e      	ldr	r7, [pc, #120]	; (8006270 <_dtoa_r+0x330>)
 80061f6:	e04c      	b.n	8006292 <_dtoa_r+0x352>
 80061f8:	2301      	movs	r3, #1
 80061fa:	930a      	str	r3, [sp, #40]	; 0x28
 80061fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061fe:	4453      	add	r3, sl
 8006200:	f103 0901 	add.w	r9, r3, #1
 8006204:	9302      	str	r3, [sp, #8]
 8006206:	464b      	mov	r3, r9
 8006208:	2b01      	cmp	r3, #1
 800620a:	bfb8      	it	lt
 800620c:	2301      	movlt	r3, #1
 800620e:	e7ba      	b.n	8006186 <_dtoa_r+0x246>
 8006210:	2300      	movs	r3, #0
 8006212:	e7b2      	b.n	800617a <_dtoa_r+0x23a>
 8006214:	2300      	movs	r3, #0
 8006216:	e7f0      	b.n	80061fa <_dtoa_r+0x2ba>
 8006218:	2501      	movs	r5, #1
 800621a:	2300      	movs	r3, #0
 800621c:	9306      	str	r3, [sp, #24]
 800621e:	950a      	str	r5, [sp, #40]	; 0x28
 8006220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006224:	9302      	str	r3, [sp, #8]
 8006226:	4699      	mov	r9, r3
 8006228:	2200      	movs	r2, #0
 800622a:	2312      	movs	r3, #18
 800622c:	920b      	str	r2, [sp, #44]	; 0x2c
 800622e:	e7aa      	b.n	8006186 <_dtoa_r+0x246>
 8006230:	2301      	movs	r3, #1
 8006232:	930a      	str	r3, [sp, #40]	; 0x28
 8006234:	e7f4      	b.n	8006220 <_dtoa_r+0x2e0>
 8006236:	2301      	movs	r3, #1
 8006238:	9302      	str	r3, [sp, #8]
 800623a:	4699      	mov	r9, r3
 800623c:	461a      	mov	r2, r3
 800623e:	e7f5      	b.n	800622c <_dtoa_r+0x2ec>
 8006240:	3101      	adds	r1, #1
 8006242:	6071      	str	r1, [r6, #4]
 8006244:	0052      	lsls	r2, r2, #1
 8006246:	e7a2      	b.n	800618e <_dtoa_r+0x24e>
 8006248:	636f4361 	.word	0x636f4361
 800624c:	3fd287a7 	.word	0x3fd287a7
 8006250:	8b60c8b3 	.word	0x8b60c8b3
 8006254:	3fc68a28 	.word	0x3fc68a28
 8006258:	509f79fb 	.word	0x509f79fb
 800625c:	3fd34413 	.word	0x3fd34413
 8006260:	7ff00000 	.word	0x7ff00000
 8006264:	08007619 	.word	0x08007619
 8006268:	3ff80000 	.word	0x3ff80000
 800626c:	08007678 	.word	0x08007678
 8006270:	08007650 	.word	0x08007650
 8006274:	08007645 	.word	0x08007645
 8006278:	07f1      	lsls	r1, r6, #31
 800627a:	d508      	bpl.n	800628e <_dtoa_r+0x34e>
 800627c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006280:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006284:	f7fa f9b8 	bl	80005f8 <__aeabi_dmul>
 8006288:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800628c:	3501      	adds	r5, #1
 800628e:	1076      	asrs	r6, r6, #1
 8006290:	3708      	adds	r7, #8
 8006292:	2e00      	cmp	r6, #0
 8006294:	d1f0      	bne.n	8006278 <_dtoa_r+0x338>
 8006296:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800629a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800629e:	f7fa fad5 	bl	800084c <__aeabi_ddiv>
 80062a2:	e9cd 0100 	strd	r0, r1, [sp]
 80062a6:	e01a      	b.n	80062de <_dtoa_r+0x39e>
 80062a8:	2502      	movs	r5, #2
 80062aa:	e7a3      	b.n	80061f4 <_dtoa_r+0x2b4>
 80062ac:	f000 80a0 	beq.w	80063f0 <_dtoa_r+0x4b0>
 80062b0:	f1ca 0600 	rsb	r6, sl, #0
 80062b4:	4b9f      	ldr	r3, [pc, #636]	; (8006534 <_dtoa_r+0x5f4>)
 80062b6:	4fa0      	ldr	r7, [pc, #640]	; (8006538 <_dtoa_r+0x5f8>)
 80062b8:	f006 020f 	and.w	r2, r6, #15
 80062bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062c8:	f7fa f996 	bl	80005f8 <__aeabi_dmul>
 80062cc:	e9cd 0100 	strd	r0, r1, [sp]
 80062d0:	1136      	asrs	r6, r6, #4
 80062d2:	2300      	movs	r3, #0
 80062d4:	2502      	movs	r5, #2
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d17f      	bne.n	80063da <_dtoa_r+0x49a>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e1      	bne.n	80062a2 <_dtoa_r+0x362>
 80062de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8087 	beq.w	80063f4 <_dtoa_r+0x4b4>
 80062e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80062ea:	2200      	movs	r2, #0
 80062ec:	4b93      	ldr	r3, [pc, #588]	; (800653c <_dtoa_r+0x5fc>)
 80062ee:	4630      	mov	r0, r6
 80062f0:	4639      	mov	r1, r7
 80062f2:	f7fa fbf3 	bl	8000adc <__aeabi_dcmplt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d07c      	beq.n	80063f4 <_dtoa_r+0x4b4>
 80062fa:	f1b9 0f00 	cmp.w	r9, #0
 80062fe:	d079      	beq.n	80063f4 <_dtoa_r+0x4b4>
 8006300:	9b02      	ldr	r3, [sp, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dd35      	ble.n	8006372 <_dtoa_r+0x432>
 8006306:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800630a:	9308      	str	r3, [sp, #32]
 800630c:	4639      	mov	r1, r7
 800630e:	2200      	movs	r2, #0
 8006310:	4b8b      	ldr	r3, [pc, #556]	; (8006540 <_dtoa_r+0x600>)
 8006312:	4630      	mov	r0, r6
 8006314:	f7fa f970 	bl	80005f8 <__aeabi_dmul>
 8006318:	e9cd 0100 	strd	r0, r1, [sp]
 800631c:	9f02      	ldr	r7, [sp, #8]
 800631e:	3501      	adds	r5, #1
 8006320:	4628      	mov	r0, r5
 8006322:	f7fa f8ff 	bl	8000524 <__aeabi_i2d>
 8006326:	e9dd 2300 	ldrd	r2, r3, [sp]
 800632a:	f7fa f965 	bl	80005f8 <__aeabi_dmul>
 800632e:	2200      	movs	r2, #0
 8006330:	4b84      	ldr	r3, [pc, #528]	; (8006544 <_dtoa_r+0x604>)
 8006332:	f7f9 ffab 	bl	800028c <__adddf3>
 8006336:	4605      	mov	r5, r0
 8006338:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800633c:	2f00      	cmp	r7, #0
 800633e:	d15d      	bne.n	80063fc <_dtoa_r+0x4bc>
 8006340:	2200      	movs	r2, #0
 8006342:	4b81      	ldr	r3, [pc, #516]	; (8006548 <_dtoa_r+0x608>)
 8006344:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006348:	f7f9 ff9e 	bl	8000288 <__aeabi_dsub>
 800634c:	462a      	mov	r2, r5
 800634e:	4633      	mov	r3, r6
 8006350:	e9cd 0100 	strd	r0, r1, [sp]
 8006354:	f7fa fbe0 	bl	8000b18 <__aeabi_dcmpgt>
 8006358:	2800      	cmp	r0, #0
 800635a:	f040 8288 	bne.w	800686e <_dtoa_r+0x92e>
 800635e:	462a      	mov	r2, r5
 8006360:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006368:	f7fa fbb8 	bl	8000adc <__aeabi_dcmplt>
 800636c:	2800      	cmp	r0, #0
 800636e:	f040 827c 	bne.w	800686a <_dtoa_r+0x92a>
 8006372:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006376:	e9cd 2300 	strd	r2, r3, [sp]
 800637a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800637c:	2b00      	cmp	r3, #0
 800637e:	f2c0 8150 	blt.w	8006622 <_dtoa_r+0x6e2>
 8006382:	f1ba 0f0e 	cmp.w	sl, #14
 8006386:	f300 814c 	bgt.w	8006622 <_dtoa_r+0x6e2>
 800638a:	4b6a      	ldr	r3, [pc, #424]	; (8006534 <_dtoa_r+0x5f4>)
 800638c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006390:	ed93 7b00 	vldr	d7, [r3]
 8006394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006396:	2b00      	cmp	r3, #0
 8006398:	ed8d 7b02 	vstr	d7, [sp, #8]
 800639c:	f280 80d8 	bge.w	8006550 <_dtoa_r+0x610>
 80063a0:	f1b9 0f00 	cmp.w	r9, #0
 80063a4:	f300 80d4 	bgt.w	8006550 <_dtoa_r+0x610>
 80063a8:	f040 825e 	bne.w	8006868 <_dtoa_r+0x928>
 80063ac:	2200      	movs	r2, #0
 80063ae:	4b66      	ldr	r3, [pc, #408]	; (8006548 <_dtoa_r+0x608>)
 80063b0:	ec51 0b17 	vmov	r0, r1, d7
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063bc:	f7fa fba2 	bl	8000b04 <__aeabi_dcmpge>
 80063c0:	464f      	mov	r7, r9
 80063c2:	464e      	mov	r6, r9
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f040 8234 	bne.w	8006832 <_dtoa_r+0x8f2>
 80063ca:	2331      	movs	r3, #49	; 0x31
 80063cc:	f10b 0501 	add.w	r5, fp, #1
 80063d0:	f88b 3000 	strb.w	r3, [fp]
 80063d4:	f10a 0a01 	add.w	sl, sl, #1
 80063d8:	e22f      	b.n	800683a <_dtoa_r+0x8fa>
 80063da:	07f2      	lsls	r2, r6, #31
 80063dc:	d505      	bpl.n	80063ea <_dtoa_r+0x4aa>
 80063de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e2:	f7fa f909 	bl	80005f8 <__aeabi_dmul>
 80063e6:	3501      	adds	r5, #1
 80063e8:	2301      	movs	r3, #1
 80063ea:	1076      	asrs	r6, r6, #1
 80063ec:	3708      	adds	r7, #8
 80063ee:	e772      	b.n	80062d6 <_dtoa_r+0x396>
 80063f0:	2502      	movs	r5, #2
 80063f2:	e774      	b.n	80062de <_dtoa_r+0x39e>
 80063f4:	f8cd a020 	str.w	sl, [sp, #32]
 80063f8:	464f      	mov	r7, r9
 80063fa:	e791      	b.n	8006320 <_dtoa_r+0x3e0>
 80063fc:	4b4d      	ldr	r3, [pc, #308]	; (8006534 <_dtoa_r+0x5f4>)
 80063fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006402:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	d047      	beq.n	800649c <_dtoa_r+0x55c>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	2000      	movs	r0, #0
 8006412:	494e      	ldr	r1, [pc, #312]	; (800654c <_dtoa_r+0x60c>)
 8006414:	f7fa fa1a 	bl	800084c <__aeabi_ddiv>
 8006418:	462a      	mov	r2, r5
 800641a:	4633      	mov	r3, r6
 800641c:	f7f9 ff34 	bl	8000288 <__aeabi_dsub>
 8006420:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006424:	465d      	mov	r5, fp
 8006426:	e9dd 0100 	ldrd	r0, r1, [sp]
 800642a:	f7fa fb95 	bl	8000b58 <__aeabi_d2iz>
 800642e:	4606      	mov	r6, r0
 8006430:	f7fa f878 	bl	8000524 <__aeabi_i2d>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800643c:	f7f9 ff24 	bl	8000288 <__aeabi_dsub>
 8006440:	3630      	adds	r6, #48	; 0x30
 8006442:	f805 6b01 	strb.w	r6, [r5], #1
 8006446:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800644a:	e9cd 0100 	strd	r0, r1, [sp]
 800644e:	f7fa fb45 	bl	8000adc <__aeabi_dcmplt>
 8006452:	2800      	cmp	r0, #0
 8006454:	d163      	bne.n	800651e <_dtoa_r+0x5de>
 8006456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800645a:	2000      	movs	r0, #0
 800645c:	4937      	ldr	r1, [pc, #220]	; (800653c <_dtoa_r+0x5fc>)
 800645e:	f7f9 ff13 	bl	8000288 <__aeabi_dsub>
 8006462:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006466:	f7fa fb39 	bl	8000adc <__aeabi_dcmplt>
 800646a:	2800      	cmp	r0, #0
 800646c:	f040 80b7 	bne.w	80065de <_dtoa_r+0x69e>
 8006470:	eba5 030b 	sub.w	r3, r5, fp
 8006474:	429f      	cmp	r7, r3
 8006476:	f77f af7c 	ble.w	8006372 <_dtoa_r+0x432>
 800647a:	2200      	movs	r2, #0
 800647c:	4b30      	ldr	r3, [pc, #192]	; (8006540 <_dtoa_r+0x600>)
 800647e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006482:	f7fa f8b9 	bl	80005f8 <__aeabi_dmul>
 8006486:	2200      	movs	r2, #0
 8006488:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800648c:	4b2c      	ldr	r3, [pc, #176]	; (8006540 <_dtoa_r+0x600>)
 800648e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006492:	f7fa f8b1 	bl	80005f8 <__aeabi_dmul>
 8006496:	e9cd 0100 	strd	r0, r1, [sp]
 800649a:	e7c4      	b.n	8006426 <_dtoa_r+0x4e6>
 800649c:	462a      	mov	r2, r5
 800649e:	4633      	mov	r3, r6
 80064a0:	f7fa f8aa 	bl	80005f8 <__aeabi_dmul>
 80064a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80064a8:	eb0b 0507 	add.w	r5, fp, r7
 80064ac:	465e      	mov	r6, fp
 80064ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064b2:	f7fa fb51 	bl	8000b58 <__aeabi_d2iz>
 80064b6:	4607      	mov	r7, r0
 80064b8:	f7fa f834 	bl	8000524 <__aeabi_i2d>
 80064bc:	3730      	adds	r7, #48	; 0x30
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064c6:	f7f9 fedf 	bl	8000288 <__aeabi_dsub>
 80064ca:	f806 7b01 	strb.w	r7, [r6], #1
 80064ce:	42ae      	cmp	r6, r5
 80064d0:	e9cd 0100 	strd	r0, r1, [sp]
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	d126      	bne.n	8006528 <_dtoa_r+0x5e8>
 80064da:	4b1c      	ldr	r3, [pc, #112]	; (800654c <_dtoa_r+0x60c>)
 80064dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064e0:	f7f9 fed4 	bl	800028c <__adddf3>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064ec:	f7fa fb14 	bl	8000b18 <__aeabi_dcmpgt>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	d174      	bne.n	80065de <_dtoa_r+0x69e>
 80064f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80064f8:	2000      	movs	r0, #0
 80064fa:	4914      	ldr	r1, [pc, #80]	; (800654c <_dtoa_r+0x60c>)
 80064fc:	f7f9 fec4 	bl	8000288 <__aeabi_dsub>
 8006500:	4602      	mov	r2, r0
 8006502:	460b      	mov	r3, r1
 8006504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006508:	f7fa fae8 	bl	8000adc <__aeabi_dcmplt>
 800650c:	2800      	cmp	r0, #0
 800650e:	f43f af30 	beq.w	8006372 <_dtoa_r+0x432>
 8006512:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006516:	2b30      	cmp	r3, #48	; 0x30
 8006518:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800651c:	d002      	beq.n	8006524 <_dtoa_r+0x5e4>
 800651e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006522:	e04a      	b.n	80065ba <_dtoa_r+0x67a>
 8006524:	4615      	mov	r5, r2
 8006526:	e7f4      	b.n	8006512 <_dtoa_r+0x5d2>
 8006528:	4b05      	ldr	r3, [pc, #20]	; (8006540 <_dtoa_r+0x600>)
 800652a:	f7fa f865 	bl	80005f8 <__aeabi_dmul>
 800652e:	e9cd 0100 	strd	r0, r1, [sp]
 8006532:	e7bc      	b.n	80064ae <_dtoa_r+0x56e>
 8006534:	08007678 	.word	0x08007678
 8006538:	08007650 	.word	0x08007650
 800653c:	3ff00000 	.word	0x3ff00000
 8006540:	40240000 	.word	0x40240000
 8006544:	401c0000 	.word	0x401c0000
 8006548:	40140000 	.word	0x40140000
 800654c:	3fe00000 	.word	0x3fe00000
 8006550:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006554:	465d      	mov	r5, fp
 8006556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800655a:	4630      	mov	r0, r6
 800655c:	4639      	mov	r1, r7
 800655e:	f7fa f975 	bl	800084c <__aeabi_ddiv>
 8006562:	f7fa faf9 	bl	8000b58 <__aeabi_d2iz>
 8006566:	4680      	mov	r8, r0
 8006568:	f7f9 ffdc 	bl	8000524 <__aeabi_i2d>
 800656c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006570:	f7fa f842 	bl	80005f8 <__aeabi_dmul>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4630      	mov	r0, r6
 800657a:	4639      	mov	r1, r7
 800657c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006580:	f7f9 fe82 	bl	8000288 <__aeabi_dsub>
 8006584:	f805 6b01 	strb.w	r6, [r5], #1
 8006588:	eba5 060b 	sub.w	r6, r5, fp
 800658c:	45b1      	cmp	r9, r6
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	d139      	bne.n	8006608 <_dtoa_r+0x6c8>
 8006594:	f7f9 fe7a 	bl	800028c <__adddf3>
 8006598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800659c:	4606      	mov	r6, r0
 800659e:	460f      	mov	r7, r1
 80065a0:	f7fa faba 	bl	8000b18 <__aeabi_dcmpgt>
 80065a4:	b9c8      	cbnz	r0, 80065da <_dtoa_r+0x69a>
 80065a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065aa:	4630      	mov	r0, r6
 80065ac:	4639      	mov	r1, r7
 80065ae:	f7fa fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80065b2:	b110      	cbz	r0, 80065ba <_dtoa_r+0x67a>
 80065b4:	f018 0f01 	tst.w	r8, #1
 80065b8:	d10f      	bne.n	80065da <_dtoa_r+0x69a>
 80065ba:	9904      	ldr	r1, [sp, #16]
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 facc 	bl	8006b5a <_Bfree>
 80065c2:	2300      	movs	r3, #0
 80065c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065c6:	702b      	strb	r3, [r5, #0]
 80065c8:	f10a 0301 	add.w	r3, sl, #1
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8241 	beq.w	8006a58 <_dtoa_r+0xb18>
 80065d6:	601d      	str	r5, [r3, #0]
 80065d8:	e23e      	b.n	8006a58 <_dtoa_r+0xb18>
 80065da:	f8cd a020 	str.w	sl, [sp, #32]
 80065de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065e2:	2a39      	cmp	r2, #57	; 0x39
 80065e4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80065e8:	d108      	bne.n	80065fc <_dtoa_r+0x6bc>
 80065ea:	459b      	cmp	fp, r3
 80065ec:	d10a      	bne.n	8006604 <_dtoa_r+0x6c4>
 80065ee:	9b08      	ldr	r3, [sp, #32]
 80065f0:	3301      	adds	r3, #1
 80065f2:	9308      	str	r3, [sp, #32]
 80065f4:	2330      	movs	r3, #48	; 0x30
 80065f6:	f88b 3000 	strb.w	r3, [fp]
 80065fa:	465b      	mov	r3, fp
 80065fc:	781a      	ldrb	r2, [r3, #0]
 80065fe:	3201      	adds	r2, #1
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e78c      	b.n	800651e <_dtoa_r+0x5de>
 8006604:	461d      	mov	r5, r3
 8006606:	e7ea      	b.n	80065de <_dtoa_r+0x69e>
 8006608:	2200      	movs	r2, #0
 800660a:	4b9b      	ldr	r3, [pc, #620]	; (8006878 <_dtoa_r+0x938>)
 800660c:	f7f9 fff4 	bl	80005f8 <__aeabi_dmul>
 8006610:	2200      	movs	r2, #0
 8006612:	2300      	movs	r3, #0
 8006614:	4606      	mov	r6, r0
 8006616:	460f      	mov	r7, r1
 8006618:	f7fa fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800661c:	2800      	cmp	r0, #0
 800661e:	d09a      	beq.n	8006556 <_dtoa_r+0x616>
 8006620:	e7cb      	b.n	80065ba <_dtoa_r+0x67a>
 8006622:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006624:	2a00      	cmp	r2, #0
 8006626:	f000 808b 	beq.w	8006740 <_dtoa_r+0x800>
 800662a:	9a06      	ldr	r2, [sp, #24]
 800662c:	2a01      	cmp	r2, #1
 800662e:	dc6e      	bgt.n	800670e <_dtoa_r+0x7ce>
 8006630:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006632:	2a00      	cmp	r2, #0
 8006634:	d067      	beq.n	8006706 <_dtoa_r+0x7c6>
 8006636:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800663a:	9f07      	ldr	r7, [sp, #28]
 800663c:	9d05      	ldr	r5, [sp, #20]
 800663e:	9a05      	ldr	r2, [sp, #20]
 8006640:	2101      	movs	r1, #1
 8006642:	441a      	add	r2, r3
 8006644:	4620      	mov	r0, r4
 8006646:	9205      	str	r2, [sp, #20]
 8006648:	4498      	add	r8, r3
 800664a:	f000 fb26 	bl	8006c9a <__i2b>
 800664e:	4606      	mov	r6, r0
 8006650:	2d00      	cmp	r5, #0
 8006652:	dd0c      	ble.n	800666e <_dtoa_r+0x72e>
 8006654:	f1b8 0f00 	cmp.w	r8, #0
 8006658:	dd09      	ble.n	800666e <_dtoa_r+0x72e>
 800665a:	4545      	cmp	r5, r8
 800665c:	9a05      	ldr	r2, [sp, #20]
 800665e:	462b      	mov	r3, r5
 8006660:	bfa8      	it	ge
 8006662:	4643      	movge	r3, r8
 8006664:	1ad2      	subs	r2, r2, r3
 8006666:	9205      	str	r2, [sp, #20]
 8006668:	1aed      	subs	r5, r5, r3
 800666a:	eba8 0803 	sub.w	r8, r8, r3
 800666e:	9b07      	ldr	r3, [sp, #28]
 8006670:	b1eb      	cbz	r3, 80066ae <_dtoa_r+0x76e>
 8006672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006674:	2b00      	cmp	r3, #0
 8006676:	d067      	beq.n	8006748 <_dtoa_r+0x808>
 8006678:	b18f      	cbz	r7, 800669e <_dtoa_r+0x75e>
 800667a:	4631      	mov	r1, r6
 800667c:	463a      	mov	r2, r7
 800667e:	4620      	mov	r0, r4
 8006680:	f000 fbaa 	bl	8006dd8 <__pow5mult>
 8006684:	9a04      	ldr	r2, [sp, #16]
 8006686:	4601      	mov	r1, r0
 8006688:	4606      	mov	r6, r0
 800668a:	4620      	mov	r0, r4
 800668c:	f000 fb0e 	bl	8006cac <__multiply>
 8006690:	9904      	ldr	r1, [sp, #16]
 8006692:	9008      	str	r0, [sp, #32]
 8006694:	4620      	mov	r0, r4
 8006696:	f000 fa60 	bl	8006b5a <_Bfree>
 800669a:	9b08      	ldr	r3, [sp, #32]
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	9b07      	ldr	r3, [sp, #28]
 80066a0:	1bda      	subs	r2, r3, r7
 80066a2:	d004      	beq.n	80066ae <_dtoa_r+0x76e>
 80066a4:	9904      	ldr	r1, [sp, #16]
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fb96 	bl	8006dd8 <__pow5mult>
 80066ac:	9004      	str	r0, [sp, #16]
 80066ae:	2101      	movs	r1, #1
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 faf2 	bl	8006c9a <__i2b>
 80066b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066b8:	4607      	mov	r7, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 81d0 	beq.w	8006a60 <_dtoa_r+0xb20>
 80066c0:	461a      	mov	r2, r3
 80066c2:	4601      	mov	r1, r0
 80066c4:	4620      	mov	r0, r4
 80066c6:	f000 fb87 	bl	8006dd8 <__pow5mult>
 80066ca:	9b06      	ldr	r3, [sp, #24]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	4607      	mov	r7, r0
 80066d0:	dc40      	bgt.n	8006754 <_dtoa_r+0x814>
 80066d2:	9b00      	ldr	r3, [sp, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d139      	bne.n	800674c <_dtoa_r+0x80c>
 80066d8:	9b01      	ldr	r3, [sp, #4]
 80066da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d136      	bne.n	8006750 <_dtoa_r+0x810>
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80066e8:	0d1b      	lsrs	r3, r3, #20
 80066ea:	051b      	lsls	r3, r3, #20
 80066ec:	b12b      	cbz	r3, 80066fa <_dtoa_r+0x7ba>
 80066ee:	9b05      	ldr	r3, [sp, #20]
 80066f0:	3301      	adds	r3, #1
 80066f2:	9305      	str	r3, [sp, #20]
 80066f4:	f108 0801 	add.w	r8, r8, #1
 80066f8:	2301      	movs	r3, #1
 80066fa:	9307      	str	r3, [sp, #28]
 80066fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d12a      	bne.n	8006758 <_dtoa_r+0x818>
 8006702:	2001      	movs	r0, #1
 8006704:	e030      	b.n	8006768 <_dtoa_r+0x828>
 8006706:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006708:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800670c:	e795      	b.n	800663a <_dtoa_r+0x6fa>
 800670e:	9b07      	ldr	r3, [sp, #28]
 8006710:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8006714:	42bb      	cmp	r3, r7
 8006716:	bfbf      	itttt	lt
 8006718:	9b07      	ldrlt	r3, [sp, #28]
 800671a:	9707      	strlt	r7, [sp, #28]
 800671c:	1afa      	sublt	r2, r7, r3
 800671e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006720:	bfbb      	ittet	lt
 8006722:	189b      	addlt	r3, r3, r2
 8006724:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006726:	1bdf      	subge	r7, r3, r7
 8006728:	2700      	movlt	r7, #0
 800672a:	f1b9 0f00 	cmp.w	r9, #0
 800672e:	bfb5      	itete	lt
 8006730:	9b05      	ldrlt	r3, [sp, #20]
 8006732:	9d05      	ldrge	r5, [sp, #20]
 8006734:	eba3 0509 	sublt.w	r5, r3, r9
 8006738:	464b      	movge	r3, r9
 800673a:	bfb8      	it	lt
 800673c:	2300      	movlt	r3, #0
 800673e:	e77e      	b.n	800663e <_dtoa_r+0x6fe>
 8006740:	9f07      	ldr	r7, [sp, #28]
 8006742:	9d05      	ldr	r5, [sp, #20]
 8006744:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006746:	e783      	b.n	8006650 <_dtoa_r+0x710>
 8006748:	9a07      	ldr	r2, [sp, #28]
 800674a:	e7ab      	b.n	80066a4 <_dtoa_r+0x764>
 800674c:	2300      	movs	r3, #0
 800674e:	e7d4      	b.n	80066fa <_dtoa_r+0x7ba>
 8006750:	9b00      	ldr	r3, [sp, #0]
 8006752:	e7d2      	b.n	80066fa <_dtoa_r+0x7ba>
 8006754:	2300      	movs	r3, #0
 8006756:	9307      	str	r3, [sp, #28]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800675e:	6918      	ldr	r0, [r3, #16]
 8006760:	f000 fa4d 	bl	8006bfe <__hi0bits>
 8006764:	f1c0 0020 	rsb	r0, r0, #32
 8006768:	4440      	add	r0, r8
 800676a:	f010 001f 	ands.w	r0, r0, #31
 800676e:	d047      	beq.n	8006800 <_dtoa_r+0x8c0>
 8006770:	f1c0 0320 	rsb	r3, r0, #32
 8006774:	2b04      	cmp	r3, #4
 8006776:	dd3b      	ble.n	80067f0 <_dtoa_r+0x8b0>
 8006778:	9b05      	ldr	r3, [sp, #20]
 800677a:	f1c0 001c 	rsb	r0, r0, #28
 800677e:	4403      	add	r3, r0
 8006780:	9305      	str	r3, [sp, #20]
 8006782:	4405      	add	r5, r0
 8006784:	4480      	add	r8, r0
 8006786:	9b05      	ldr	r3, [sp, #20]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dd05      	ble.n	8006798 <_dtoa_r+0x858>
 800678c:	461a      	mov	r2, r3
 800678e:	9904      	ldr	r1, [sp, #16]
 8006790:	4620      	mov	r0, r4
 8006792:	f000 fb6f 	bl	8006e74 <__lshift>
 8006796:	9004      	str	r0, [sp, #16]
 8006798:	f1b8 0f00 	cmp.w	r8, #0
 800679c:	dd05      	ble.n	80067aa <_dtoa_r+0x86a>
 800679e:	4639      	mov	r1, r7
 80067a0:	4642      	mov	r2, r8
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 fb66 	bl	8006e74 <__lshift>
 80067a8:	4607      	mov	r7, r0
 80067aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067ac:	b353      	cbz	r3, 8006804 <_dtoa_r+0x8c4>
 80067ae:	4639      	mov	r1, r7
 80067b0:	9804      	ldr	r0, [sp, #16]
 80067b2:	f000 fbb3 	bl	8006f1c <__mcmp>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	da24      	bge.n	8006804 <_dtoa_r+0x8c4>
 80067ba:	2300      	movs	r3, #0
 80067bc:	220a      	movs	r2, #10
 80067be:	9904      	ldr	r1, [sp, #16]
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 f9e1 	bl	8006b88 <__multadd>
 80067c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c8:	9004      	str	r0, [sp, #16]
 80067ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 814d 	beq.w	8006a6e <_dtoa_r+0xb2e>
 80067d4:	2300      	movs	r3, #0
 80067d6:	4631      	mov	r1, r6
 80067d8:	220a      	movs	r2, #10
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 f9d4 	bl	8006b88 <__multadd>
 80067e0:	9b02      	ldr	r3, [sp, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	4606      	mov	r6, r0
 80067e6:	dc4f      	bgt.n	8006888 <_dtoa_r+0x948>
 80067e8:	9b06      	ldr	r3, [sp, #24]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	dd4c      	ble.n	8006888 <_dtoa_r+0x948>
 80067ee:	e011      	b.n	8006814 <_dtoa_r+0x8d4>
 80067f0:	d0c9      	beq.n	8006786 <_dtoa_r+0x846>
 80067f2:	9a05      	ldr	r2, [sp, #20]
 80067f4:	331c      	adds	r3, #28
 80067f6:	441a      	add	r2, r3
 80067f8:	9205      	str	r2, [sp, #20]
 80067fa:	441d      	add	r5, r3
 80067fc:	4498      	add	r8, r3
 80067fe:	e7c2      	b.n	8006786 <_dtoa_r+0x846>
 8006800:	4603      	mov	r3, r0
 8006802:	e7f6      	b.n	80067f2 <_dtoa_r+0x8b2>
 8006804:	f1b9 0f00 	cmp.w	r9, #0
 8006808:	dc38      	bgt.n	800687c <_dtoa_r+0x93c>
 800680a:	9b06      	ldr	r3, [sp, #24]
 800680c:	2b02      	cmp	r3, #2
 800680e:	dd35      	ble.n	800687c <_dtoa_r+0x93c>
 8006810:	f8cd 9008 	str.w	r9, [sp, #8]
 8006814:	9b02      	ldr	r3, [sp, #8]
 8006816:	b963      	cbnz	r3, 8006832 <_dtoa_r+0x8f2>
 8006818:	4639      	mov	r1, r7
 800681a:	2205      	movs	r2, #5
 800681c:	4620      	mov	r0, r4
 800681e:	f000 f9b3 	bl	8006b88 <__multadd>
 8006822:	4601      	mov	r1, r0
 8006824:	4607      	mov	r7, r0
 8006826:	9804      	ldr	r0, [sp, #16]
 8006828:	f000 fb78 	bl	8006f1c <__mcmp>
 800682c:	2800      	cmp	r0, #0
 800682e:	f73f adcc 	bgt.w	80063ca <_dtoa_r+0x48a>
 8006832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006834:	465d      	mov	r5, fp
 8006836:	ea6f 0a03 	mvn.w	sl, r3
 800683a:	f04f 0900 	mov.w	r9, #0
 800683e:	4639      	mov	r1, r7
 8006840:	4620      	mov	r0, r4
 8006842:	f000 f98a 	bl	8006b5a <_Bfree>
 8006846:	2e00      	cmp	r6, #0
 8006848:	f43f aeb7 	beq.w	80065ba <_dtoa_r+0x67a>
 800684c:	f1b9 0f00 	cmp.w	r9, #0
 8006850:	d005      	beq.n	800685e <_dtoa_r+0x91e>
 8006852:	45b1      	cmp	r9, r6
 8006854:	d003      	beq.n	800685e <_dtoa_r+0x91e>
 8006856:	4649      	mov	r1, r9
 8006858:	4620      	mov	r0, r4
 800685a:	f000 f97e 	bl	8006b5a <_Bfree>
 800685e:	4631      	mov	r1, r6
 8006860:	4620      	mov	r0, r4
 8006862:	f000 f97a 	bl	8006b5a <_Bfree>
 8006866:	e6a8      	b.n	80065ba <_dtoa_r+0x67a>
 8006868:	2700      	movs	r7, #0
 800686a:	463e      	mov	r6, r7
 800686c:	e7e1      	b.n	8006832 <_dtoa_r+0x8f2>
 800686e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006872:	463e      	mov	r6, r7
 8006874:	e5a9      	b.n	80063ca <_dtoa_r+0x48a>
 8006876:	bf00      	nop
 8006878:	40240000 	.word	0x40240000
 800687c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80fa 	beq.w	8006a7c <_dtoa_r+0xb3c>
 8006888:	2d00      	cmp	r5, #0
 800688a:	dd05      	ble.n	8006898 <_dtoa_r+0x958>
 800688c:	4631      	mov	r1, r6
 800688e:	462a      	mov	r2, r5
 8006890:	4620      	mov	r0, r4
 8006892:	f000 faef 	bl	8006e74 <__lshift>
 8006896:	4606      	mov	r6, r0
 8006898:	9b07      	ldr	r3, [sp, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d04c      	beq.n	8006938 <_dtoa_r+0x9f8>
 800689e:	6871      	ldr	r1, [r6, #4]
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 f926 	bl	8006af2 <_Balloc>
 80068a6:	6932      	ldr	r2, [r6, #16]
 80068a8:	3202      	adds	r2, #2
 80068aa:	4605      	mov	r5, r0
 80068ac:	0092      	lsls	r2, r2, #2
 80068ae:	f106 010c 	add.w	r1, r6, #12
 80068b2:	300c      	adds	r0, #12
 80068b4:	f000 f912 	bl	8006adc <memcpy>
 80068b8:	2201      	movs	r2, #1
 80068ba:	4629      	mov	r1, r5
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 fad9 	bl	8006e74 <__lshift>
 80068c2:	9b00      	ldr	r3, [sp, #0]
 80068c4:	f8cd b014 	str.w	fp, [sp, #20]
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	46b1      	mov	r9, r6
 80068ce:	9307      	str	r3, [sp, #28]
 80068d0:	4606      	mov	r6, r0
 80068d2:	4639      	mov	r1, r7
 80068d4:	9804      	ldr	r0, [sp, #16]
 80068d6:	f7ff faa5 	bl	8005e24 <quorem>
 80068da:	4649      	mov	r1, r9
 80068dc:	4605      	mov	r5, r0
 80068de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80068e2:	9804      	ldr	r0, [sp, #16]
 80068e4:	f000 fb1a 	bl	8006f1c <__mcmp>
 80068e8:	4632      	mov	r2, r6
 80068ea:	9000      	str	r0, [sp, #0]
 80068ec:	4639      	mov	r1, r7
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 fb2e 	bl	8006f50 <__mdiff>
 80068f4:	68c3      	ldr	r3, [r0, #12]
 80068f6:	4602      	mov	r2, r0
 80068f8:	bb03      	cbnz	r3, 800693c <_dtoa_r+0x9fc>
 80068fa:	4601      	mov	r1, r0
 80068fc:	9008      	str	r0, [sp, #32]
 80068fe:	9804      	ldr	r0, [sp, #16]
 8006900:	f000 fb0c 	bl	8006f1c <__mcmp>
 8006904:	9a08      	ldr	r2, [sp, #32]
 8006906:	4603      	mov	r3, r0
 8006908:	4611      	mov	r1, r2
 800690a:	4620      	mov	r0, r4
 800690c:	9308      	str	r3, [sp, #32]
 800690e:	f000 f924 	bl	8006b5a <_Bfree>
 8006912:	9b08      	ldr	r3, [sp, #32]
 8006914:	b9a3      	cbnz	r3, 8006940 <_dtoa_r+0xa00>
 8006916:	9a06      	ldr	r2, [sp, #24]
 8006918:	b992      	cbnz	r2, 8006940 <_dtoa_r+0xa00>
 800691a:	9a07      	ldr	r2, [sp, #28]
 800691c:	b982      	cbnz	r2, 8006940 <_dtoa_r+0xa00>
 800691e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006922:	d029      	beq.n	8006978 <_dtoa_r+0xa38>
 8006924:	9b00      	ldr	r3, [sp, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	dd01      	ble.n	800692e <_dtoa_r+0x9ee>
 800692a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800692e:	9b05      	ldr	r3, [sp, #20]
 8006930:	1c5d      	adds	r5, r3, #1
 8006932:	f883 8000 	strb.w	r8, [r3]
 8006936:	e782      	b.n	800683e <_dtoa_r+0x8fe>
 8006938:	4630      	mov	r0, r6
 800693a:	e7c2      	b.n	80068c2 <_dtoa_r+0x982>
 800693c:	2301      	movs	r3, #1
 800693e:	e7e3      	b.n	8006908 <_dtoa_r+0x9c8>
 8006940:	9a00      	ldr	r2, [sp, #0]
 8006942:	2a00      	cmp	r2, #0
 8006944:	db04      	blt.n	8006950 <_dtoa_r+0xa10>
 8006946:	d125      	bne.n	8006994 <_dtoa_r+0xa54>
 8006948:	9a06      	ldr	r2, [sp, #24]
 800694a:	bb1a      	cbnz	r2, 8006994 <_dtoa_r+0xa54>
 800694c:	9a07      	ldr	r2, [sp, #28]
 800694e:	bb0a      	cbnz	r2, 8006994 <_dtoa_r+0xa54>
 8006950:	2b00      	cmp	r3, #0
 8006952:	ddec      	ble.n	800692e <_dtoa_r+0x9ee>
 8006954:	2201      	movs	r2, #1
 8006956:	9904      	ldr	r1, [sp, #16]
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fa8b 	bl	8006e74 <__lshift>
 800695e:	4639      	mov	r1, r7
 8006960:	9004      	str	r0, [sp, #16]
 8006962:	f000 fadb 	bl	8006f1c <__mcmp>
 8006966:	2800      	cmp	r0, #0
 8006968:	dc03      	bgt.n	8006972 <_dtoa_r+0xa32>
 800696a:	d1e0      	bne.n	800692e <_dtoa_r+0x9ee>
 800696c:	f018 0f01 	tst.w	r8, #1
 8006970:	d0dd      	beq.n	800692e <_dtoa_r+0x9ee>
 8006972:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006976:	d1d8      	bne.n	800692a <_dtoa_r+0x9ea>
 8006978:	9b05      	ldr	r3, [sp, #20]
 800697a:	9a05      	ldr	r2, [sp, #20]
 800697c:	1c5d      	adds	r5, r3, #1
 800697e:	2339      	movs	r3, #57	; 0x39
 8006980:	7013      	strb	r3, [r2, #0]
 8006982:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006986:	2b39      	cmp	r3, #57	; 0x39
 8006988:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800698c:	d04f      	beq.n	8006a2e <_dtoa_r+0xaee>
 800698e:	3301      	adds	r3, #1
 8006990:	7013      	strb	r3, [r2, #0]
 8006992:	e754      	b.n	800683e <_dtoa_r+0x8fe>
 8006994:	9a05      	ldr	r2, [sp, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f102 0501 	add.w	r5, r2, #1
 800699c:	dd06      	ble.n	80069ac <_dtoa_r+0xa6c>
 800699e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80069a2:	d0e9      	beq.n	8006978 <_dtoa_r+0xa38>
 80069a4:	f108 0801 	add.w	r8, r8, #1
 80069a8:	9b05      	ldr	r3, [sp, #20]
 80069aa:	e7c2      	b.n	8006932 <_dtoa_r+0x9f2>
 80069ac:	9a02      	ldr	r2, [sp, #8]
 80069ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80069b2:	eba5 030b 	sub.w	r3, r5, fp
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d021      	beq.n	80069fe <_dtoa_r+0xabe>
 80069ba:	2300      	movs	r3, #0
 80069bc:	220a      	movs	r2, #10
 80069be:	9904      	ldr	r1, [sp, #16]
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 f8e1 	bl	8006b88 <__multadd>
 80069c6:	45b1      	cmp	r9, r6
 80069c8:	9004      	str	r0, [sp, #16]
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	f04f 020a 	mov.w	r2, #10
 80069d2:	4649      	mov	r1, r9
 80069d4:	4620      	mov	r0, r4
 80069d6:	d105      	bne.n	80069e4 <_dtoa_r+0xaa4>
 80069d8:	f000 f8d6 	bl	8006b88 <__multadd>
 80069dc:	4681      	mov	r9, r0
 80069de:	4606      	mov	r6, r0
 80069e0:	9505      	str	r5, [sp, #20]
 80069e2:	e776      	b.n	80068d2 <_dtoa_r+0x992>
 80069e4:	f000 f8d0 	bl	8006b88 <__multadd>
 80069e8:	4631      	mov	r1, r6
 80069ea:	4681      	mov	r9, r0
 80069ec:	2300      	movs	r3, #0
 80069ee:	220a      	movs	r2, #10
 80069f0:	4620      	mov	r0, r4
 80069f2:	f000 f8c9 	bl	8006b88 <__multadd>
 80069f6:	4606      	mov	r6, r0
 80069f8:	e7f2      	b.n	80069e0 <_dtoa_r+0xaa0>
 80069fa:	f04f 0900 	mov.w	r9, #0
 80069fe:	2201      	movs	r2, #1
 8006a00:	9904      	ldr	r1, [sp, #16]
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 fa36 	bl	8006e74 <__lshift>
 8006a08:	4639      	mov	r1, r7
 8006a0a:	9004      	str	r0, [sp, #16]
 8006a0c:	f000 fa86 	bl	8006f1c <__mcmp>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	dcb6      	bgt.n	8006982 <_dtoa_r+0xa42>
 8006a14:	d102      	bne.n	8006a1c <_dtoa_r+0xadc>
 8006a16:	f018 0f01 	tst.w	r8, #1
 8006a1a:	d1b2      	bne.n	8006982 <_dtoa_r+0xa42>
 8006a1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a20:	2b30      	cmp	r3, #48	; 0x30
 8006a22:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006a26:	f47f af0a 	bne.w	800683e <_dtoa_r+0x8fe>
 8006a2a:	4615      	mov	r5, r2
 8006a2c:	e7f6      	b.n	8006a1c <_dtoa_r+0xadc>
 8006a2e:	4593      	cmp	fp, r2
 8006a30:	d105      	bne.n	8006a3e <_dtoa_r+0xafe>
 8006a32:	2331      	movs	r3, #49	; 0x31
 8006a34:	f10a 0a01 	add.w	sl, sl, #1
 8006a38:	f88b 3000 	strb.w	r3, [fp]
 8006a3c:	e6ff      	b.n	800683e <_dtoa_r+0x8fe>
 8006a3e:	4615      	mov	r5, r2
 8006a40:	e79f      	b.n	8006982 <_dtoa_r+0xa42>
 8006a42:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006aa8 <_dtoa_r+0xb68>
 8006a46:	e007      	b.n	8006a58 <_dtoa_r+0xb18>
 8006a48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006aac <_dtoa_r+0xb6c>
 8006a4e:	b11b      	cbz	r3, 8006a58 <_dtoa_r+0xb18>
 8006a50:	f10b 0308 	add.w	r3, fp, #8
 8006a54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	4658      	mov	r0, fp
 8006a5a:	b017      	add	sp, #92	; 0x5c
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a60:	9b06      	ldr	r3, [sp, #24]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	f77f ae35 	ble.w	80066d2 <_dtoa_r+0x792>
 8006a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a6a:	9307      	str	r3, [sp, #28]
 8006a6c:	e649      	b.n	8006702 <_dtoa_r+0x7c2>
 8006a6e:	9b02      	ldr	r3, [sp, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	dc03      	bgt.n	8006a7c <_dtoa_r+0xb3c>
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	f73f aecc 	bgt.w	8006814 <_dtoa_r+0x8d4>
 8006a7c:	465d      	mov	r5, fp
 8006a7e:	4639      	mov	r1, r7
 8006a80:	9804      	ldr	r0, [sp, #16]
 8006a82:	f7ff f9cf 	bl	8005e24 <quorem>
 8006a86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a8a:	f805 8b01 	strb.w	r8, [r5], #1
 8006a8e:	9a02      	ldr	r2, [sp, #8]
 8006a90:	eba5 030b 	sub.w	r3, r5, fp
 8006a94:	429a      	cmp	r2, r3
 8006a96:	ddb0      	ble.n	80069fa <_dtoa_r+0xaba>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	220a      	movs	r2, #10
 8006a9c:	9904      	ldr	r1, [sp, #16]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 f872 	bl	8006b88 <__multadd>
 8006aa4:	9004      	str	r0, [sp, #16]
 8006aa6:	e7ea      	b.n	8006a7e <_dtoa_r+0xb3e>
 8006aa8:	08007618 	.word	0x08007618
 8006aac:	0800763c 	.word	0x0800763c

08006ab0 <_localeconv_r>:
 8006ab0:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <_localeconv_r+0x14>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6a18      	ldr	r0, [r3, #32]
 8006ab6:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <_localeconv_r+0x18>)
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	bf08      	it	eq
 8006abc:	4618      	moveq	r0, r3
 8006abe:	30f0      	adds	r0, #240	; 0xf0
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	2000000c 	.word	0x2000000c
 8006ac8:	20000070 	.word	0x20000070

08006acc <malloc>:
 8006acc:	4b02      	ldr	r3, [pc, #8]	; (8006ad8 <malloc+0xc>)
 8006ace:	4601      	mov	r1, r0
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	f000 bb45 	b.w	8007160 <_malloc_r>
 8006ad6:	bf00      	nop
 8006ad8:	2000000c 	.word	0x2000000c

08006adc <memcpy>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	1e43      	subs	r3, r0, #1
 8006ae0:	440a      	add	r2, r1
 8006ae2:	4291      	cmp	r1, r2
 8006ae4:	d100      	bne.n	8006ae8 <memcpy+0xc>
 8006ae6:	bd10      	pop	{r4, pc}
 8006ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006af0:	e7f7      	b.n	8006ae2 <memcpy+0x6>

08006af2 <_Balloc>:
 8006af2:	b570      	push	{r4, r5, r6, lr}
 8006af4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006af6:	4604      	mov	r4, r0
 8006af8:	460e      	mov	r6, r1
 8006afa:	b93d      	cbnz	r5, 8006b0c <_Balloc+0x1a>
 8006afc:	2010      	movs	r0, #16
 8006afe:	f7ff ffe5 	bl	8006acc <malloc>
 8006b02:	6260      	str	r0, [r4, #36]	; 0x24
 8006b04:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b08:	6005      	str	r5, [r0, #0]
 8006b0a:	60c5      	str	r5, [r0, #12]
 8006b0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006b0e:	68eb      	ldr	r3, [r5, #12]
 8006b10:	b183      	cbz	r3, 8006b34 <_Balloc+0x42>
 8006b12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006b1a:	b9b8      	cbnz	r0, 8006b4c <_Balloc+0x5a>
 8006b1c:	2101      	movs	r1, #1
 8006b1e:	fa01 f506 	lsl.w	r5, r1, r6
 8006b22:	1d6a      	adds	r2, r5, #5
 8006b24:	0092      	lsls	r2, r2, #2
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 fabe 	bl	80070a8 <_calloc_r>
 8006b2c:	b160      	cbz	r0, 8006b48 <_Balloc+0x56>
 8006b2e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006b32:	e00e      	b.n	8006b52 <_Balloc+0x60>
 8006b34:	2221      	movs	r2, #33	; 0x21
 8006b36:	2104      	movs	r1, #4
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fab5 	bl	80070a8 <_calloc_r>
 8006b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b40:	60e8      	str	r0, [r5, #12]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e4      	bne.n	8006b12 <_Balloc+0x20>
 8006b48:	2000      	movs	r0, #0
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	6802      	ldr	r2, [r0, #0]
 8006b4e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006b52:	2300      	movs	r3, #0
 8006b54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b58:	e7f7      	b.n	8006b4a <_Balloc+0x58>

08006b5a <_Bfree>:
 8006b5a:	b570      	push	{r4, r5, r6, lr}
 8006b5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460d      	mov	r5, r1
 8006b62:	b93c      	cbnz	r4, 8006b74 <_Bfree+0x1a>
 8006b64:	2010      	movs	r0, #16
 8006b66:	f7ff ffb1 	bl	8006acc <malloc>
 8006b6a:	6270      	str	r0, [r6, #36]	; 0x24
 8006b6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b70:	6004      	str	r4, [r0, #0]
 8006b72:	60c4      	str	r4, [r0, #12]
 8006b74:	b13d      	cbz	r5, 8006b86 <_Bfree+0x2c>
 8006b76:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b78:	686a      	ldr	r2, [r5, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b80:	6029      	str	r1, [r5, #0]
 8006b82:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b86:	bd70      	pop	{r4, r5, r6, pc}

08006b88 <__multadd>:
 8006b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b8c:	690d      	ldr	r5, [r1, #16]
 8006b8e:	461f      	mov	r7, r3
 8006b90:	4606      	mov	r6, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	f101 0c14 	add.w	ip, r1, #20
 8006b98:	2300      	movs	r3, #0
 8006b9a:	f8dc 0000 	ldr.w	r0, [ip]
 8006b9e:	b281      	uxth	r1, r0
 8006ba0:	fb02 7101 	mla	r1, r2, r1, r7
 8006ba4:	0c0f      	lsrs	r7, r1, #16
 8006ba6:	0c00      	lsrs	r0, r0, #16
 8006ba8:	fb02 7000 	mla	r0, r2, r0, r7
 8006bac:	b289      	uxth	r1, r1
 8006bae:	3301      	adds	r3, #1
 8006bb0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006bb4:	429d      	cmp	r5, r3
 8006bb6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006bba:	f84c 1b04 	str.w	r1, [ip], #4
 8006bbe:	dcec      	bgt.n	8006b9a <__multadd+0x12>
 8006bc0:	b1d7      	cbz	r7, 8006bf8 <__multadd+0x70>
 8006bc2:	68a3      	ldr	r3, [r4, #8]
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	dc12      	bgt.n	8006bee <__multadd+0x66>
 8006bc8:	6861      	ldr	r1, [r4, #4]
 8006bca:	4630      	mov	r0, r6
 8006bcc:	3101      	adds	r1, #1
 8006bce:	f7ff ff90 	bl	8006af2 <_Balloc>
 8006bd2:	6922      	ldr	r2, [r4, #16]
 8006bd4:	3202      	adds	r2, #2
 8006bd6:	f104 010c 	add.w	r1, r4, #12
 8006bda:	4680      	mov	r8, r0
 8006bdc:	0092      	lsls	r2, r2, #2
 8006bde:	300c      	adds	r0, #12
 8006be0:	f7ff ff7c 	bl	8006adc <memcpy>
 8006be4:	4621      	mov	r1, r4
 8006be6:	4630      	mov	r0, r6
 8006be8:	f7ff ffb7 	bl	8006b5a <_Bfree>
 8006bec:	4644      	mov	r4, r8
 8006bee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bf2:	3501      	adds	r5, #1
 8006bf4:	615f      	str	r7, [r3, #20]
 8006bf6:	6125      	str	r5, [r4, #16]
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006bfe <__hi0bits>:
 8006bfe:	0c02      	lsrs	r2, r0, #16
 8006c00:	0412      	lsls	r2, r2, #16
 8006c02:	4603      	mov	r3, r0
 8006c04:	b9b2      	cbnz	r2, 8006c34 <__hi0bits+0x36>
 8006c06:	0403      	lsls	r3, r0, #16
 8006c08:	2010      	movs	r0, #16
 8006c0a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006c0e:	bf04      	itt	eq
 8006c10:	021b      	lsleq	r3, r3, #8
 8006c12:	3008      	addeq	r0, #8
 8006c14:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006c18:	bf04      	itt	eq
 8006c1a:	011b      	lsleq	r3, r3, #4
 8006c1c:	3004      	addeq	r0, #4
 8006c1e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006c22:	bf04      	itt	eq
 8006c24:	009b      	lsleq	r3, r3, #2
 8006c26:	3002      	addeq	r0, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	db06      	blt.n	8006c3a <__hi0bits+0x3c>
 8006c2c:	005b      	lsls	r3, r3, #1
 8006c2e:	d503      	bpl.n	8006c38 <__hi0bits+0x3a>
 8006c30:	3001      	adds	r0, #1
 8006c32:	4770      	bx	lr
 8006c34:	2000      	movs	r0, #0
 8006c36:	e7e8      	b.n	8006c0a <__hi0bits+0xc>
 8006c38:	2020      	movs	r0, #32
 8006c3a:	4770      	bx	lr

08006c3c <__lo0bits>:
 8006c3c:	6803      	ldr	r3, [r0, #0]
 8006c3e:	f013 0207 	ands.w	r2, r3, #7
 8006c42:	4601      	mov	r1, r0
 8006c44:	d00b      	beq.n	8006c5e <__lo0bits+0x22>
 8006c46:	07da      	lsls	r2, r3, #31
 8006c48:	d423      	bmi.n	8006c92 <__lo0bits+0x56>
 8006c4a:	0798      	lsls	r0, r3, #30
 8006c4c:	bf49      	itett	mi
 8006c4e:	085b      	lsrmi	r3, r3, #1
 8006c50:	089b      	lsrpl	r3, r3, #2
 8006c52:	2001      	movmi	r0, #1
 8006c54:	600b      	strmi	r3, [r1, #0]
 8006c56:	bf5c      	itt	pl
 8006c58:	600b      	strpl	r3, [r1, #0]
 8006c5a:	2002      	movpl	r0, #2
 8006c5c:	4770      	bx	lr
 8006c5e:	b298      	uxth	r0, r3
 8006c60:	b9a8      	cbnz	r0, 8006c8e <__lo0bits+0x52>
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	2010      	movs	r0, #16
 8006c66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006c6a:	bf04      	itt	eq
 8006c6c:	0a1b      	lsreq	r3, r3, #8
 8006c6e:	3008      	addeq	r0, #8
 8006c70:	071a      	lsls	r2, r3, #28
 8006c72:	bf04      	itt	eq
 8006c74:	091b      	lsreq	r3, r3, #4
 8006c76:	3004      	addeq	r0, #4
 8006c78:	079a      	lsls	r2, r3, #30
 8006c7a:	bf04      	itt	eq
 8006c7c:	089b      	lsreq	r3, r3, #2
 8006c7e:	3002      	addeq	r0, #2
 8006c80:	07da      	lsls	r2, r3, #31
 8006c82:	d402      	bmi.n	8006c8a <__lo0bits+0x4e>
 8006c84:	085b      	lsrs	r3, r3, #1
 8006c86:	d006      	beq.n	8006c96 <__lo0bits+0x5a>
 8006c88:	3001      	adds	r0, #1
 8006c8a:	600b      	str	r3, [r1, #0]
 8006c8c:	4770      	bx	lr
 8006c8e:	4610      	mov	r0, r2
 8006c90:	e7e9      	b.n	8006c66 <__lo0bits+0x2a>
 8006c92:	2000      	movs	r0, #0
 8006c94:	4770      	bx	lr
 8006c96:	2020      	movs	r0, #32
 8006c98:	4770      	bx	lr

08006c9a <__i2b>:
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	f7ff ff27 	bl	8006af2 <_Balloc>
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	6144      	str	r4, [r0, #20]
 8006ca8:	6102      	str	r2, [r0, #16]
 8006caa:	bd10      	pop	{r4, pc}

08006cac <__multiply>:
 8006cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	690a      	ldr	r2, [r1, #16]
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	bfb8      	it	lt
 8006cba:	460b      	movlt	r3, r1
 8006cbc:	4688      	mov	r8, r1
 8006cbe:	bfbc      	itt	lt
 8006cc0:	46a0      	movlt	r8, r4
 8006cc2:	461c      	movlt	r4, r3
 8006cc4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cc8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ccc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006cd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006cd4:	eb07 0609 	add.w	r6, r7, r9
 8006cd8:	42b3      	cmp	r3, r6
 8006cda:	bfb8      	it	lt
 8006cdc:	3101      	addlt	r1, #1
 8006cde:	f7ff ff08 	bl	8006af2 <_Balloc>
 8006ce2:	f100 0514 	add.w	r5, r0, #20
 8006ce6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006cea:	462b      	mov	r3, r5
 8006cec:	2200      	movs	r2, #0
 8006cee:	4573      	cmp	r3, lr
 8006cf0:	d316      	bcc.n	8006d20 <__multiply+0x74>
 8006cf2:	f104 0214 	add.w	r2, r4, #20
 8006cf6:	f108 0114 	add.w	r1, r8, #20
 8006cfa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006cfe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	9b00      	ldr	r3, [sp, #0]
 8006d06:	9201      	str	r2, [sp, #4]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d80c      	bhi.n	8006d26 <__multiply+0x7a>
 8006d0c:	2e00      	cmp	r6, #0
 8006d0e:	dd03      	ble.n	8006d18 <__multiply+0x6c>
 8006d10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d05d      	beq.n	8006dd4 <__multiply+0x128>
 8006d18:	6106      	str	r6, [r0, #16]
 8006d1a:	b003      	add	sp, #12
 8006d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d20:	f843 2b04 	str.w	r2, [r3], #4
 8006d24:	e7e3      	b.n	8006cee <__multiply+0x42>
 8006d26:	f8b2 b000 	ldrh.w	fp, [r2]
 8006d2a:	f1bb 0f00 	cmp.w	fp, #0
 8006d2e:	d023      	beq.n	8006d78 <__multiply+0xcc>
 8006d30:	4689      	mov	r9, r1
 8006d32:	46ac      	mov	ip, r5
 8006d34:	f04f 0800 	mov.w	r8, #0
 8006d38:	f859 4b04 	ldr.w	r4, [r9], #4
 8006d3c:	f8dc a000 	ldr.w	sl, [ip]
 8006d40:	b2a3      	uxth	r3, r4
 8006d42:	fa1f fa8a 	uxth.w	sl, sl
 8006d46:	fb0b a303 	mla	r3, fp, r3, sl
 8006d4a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006d4e:	f8dc 4000 	ldr.w	r4, [ip]
 8006d52:	4443      	add	r3, r8
 8006d54:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006d58:	fb0b 840a 	mla	r4, fp, sl, r8
 8006d5c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006d60:	46e2      	mov	sl, ip
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d68:	454f      	cmp	r7, r9
 8006d6a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006d6e:	f84a 3b04 	str.w	r3, [sl], #4
 8006d72:	d82b      	bhi.n	8006dcc <__multiply+0x120>
 8006d74:	f8cc 8004 	str.w	r8, [ip, #4]
 8006d78:	9b01      	ldr	r3, [sp, #4]
 8006d7a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006d7e:	3204      	adds	r2, #4
 8006d80:	f1ba 0f00 	cmp.w	sl, #0
 8006d84:	d020      	beq.n	8006dc8 <__multiply+0x11c>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	4689      	mov	r9, r1
 8006d8a:	46a8      	mov	r8, r5
 8006d8c:	f04f 0b00 	mov.w	fp, #0
 8006d90:	f8b9 c000 	ldrh.w	ip, [r9]
 8006d94:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006d98:	fb0a 440c 	mla	r4, sl, ip, r4
 8006d9c:	445c      	add	r4, fp
 8006d9e:	46c4      	mov	ip, r8
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006da6:	f84c 3b04 	str.w	r3, [ip], #4
 8006daa:	f859 3b04 	ldr.w	r3, [r9], #4
 8006dae:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006db2:	0c1b      	lsrs	r3, r3, #16
 8006db4:	fb0a b303 	mla	r3, sl, r3, fp
 8006db8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006dbc:	454f      	cmp	r7, r9
 8006dbe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006dc2:	d805      	bhi.n	8006dd0 <__multiply+0x124>
 8006dc4:	f8c8 3004 	str.w	r3, [r8, #4]
 8006dc8:	3504      	adds	r5, #4
 8006dca:	e79b      	b.n	8006d04 <__multiply+0x58>
 8006dcc:	46d4      	mov	ip, sl
 8006dce:	e7b3      	b.n	8006d38 <__multiply+0x8c>
 8006dd0:	46e0      	mov	r8, ip
 8006dd2:	e7dd      	b.n	8006d90 <__multiply+0xe4>
 8006dd4:	3e01      	subs	r6, #1
 8006dd6:	e799      	b.n	8006d0c <__multiply+0x60>

08006dd8 <__pow5mult>:
 8006dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ddc:	4615      	mov	r5, r2
 8006dde:	f012 0203 	ands.w	r2, r2, #3
 8006de2:	4606      	mov	r6, r0
 8006de4:	460f      	mov	r7, r1
 8006de6:	d007      	beq.n	8006df8 <__pow5mult+0x20>
 8006de8:	3a01      	subs	r2, #1
 8006dea:	4c21      	ldr	r4, [pc, #132]	; (8006e70 <__pow5mult+0x98>)
 8006dec:	2300      	movs	r3, #0
 8006dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006df2:	f7ff fec9 	bl	8006b88 <__multadd>
 8006df6:	4607      	mov	r7, r0
 8006df8:	10ad      	asrs	r5, r5, #2
 8006dfa:	d035      	beq.n	8006e68 <__pow5mult+0x90>
 8006dfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006dfe:	b93c      	cbnz	r4, 8006e10 <__pow5mult+0x38>
 8006e00:	2010      	movs	r0, #16
 8006e02:	f7ff fe63 	bl	8006acc <malloc>
 8006e06:	6270      	str	r0, [r6, #36]	; 0x24
 8006e08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e0c:	6004      	str	r4, [r0, #0]
 8006e0e:	60c4      	str	r4, [r0, #12]
 8006e10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e18:	b94c      	cbnz	r4, 8006e2e <__pow5mult+0x56>
 8006e1a:	f240 2171 	movw	r1, #625	; 0x271
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f7ff ff3b 	bl	8006c9a <__i2b>
 8006e24:	2300      	movs	r3, #0
 8006e26:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	6003      	str	r3, [r0, #0]
 8006e2e:	f04f 0800 	mov.w	r8, #0
 8006e32:	07eb      	lsls	r3, r5, #31
 8006e34:	d50a      	bpl.n	8006e4c <__pow5mult+0x74>
 8006e36:	4639      	mov	r1, r7
 8006e38:	4622      	mov	r2, r4
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f7ff ff36 	bl	8006cac <__multiply>
 8006e40:	4639      	mov	r1, r7
 8006e42:	4681      	mov	r9, r0
 8006e44:	4630      	mov	r0, r6
 8006e46:	f7ff fe88 	bl	8006b5a <_Bfree>
 8006e4a:	464f      	mov	r7, r9
 8006e4c:	106d      	asrs	r5, r5, #1
 8006e4e:	d00b      	beq.n	8006e68 <__pow5mult+0x90>
 8006e50:	6820      	ldr	r0, [r4, #0]
 8006e52:	b938      	cbnz	r0, 8006e64 <__pow5mult+0x8c>
 8006e54:	4622      	mov	r2, r4
 8006e56:	4621      	mov	r1, r4
 8006e58:	4630      	mov	r0, r6
 8006e5a:	f7ff ff27 	bl	8006cac <__multiply>
 8006e5e:	6020      	str	r0, [r4, #0]
 8006e60:	f8c0 8000 	str.w	r8, [r0]
 8006e64:	4604      	mov	r4, r0
 8006e66:	e7e4      	b.n	8006e32 <__pow5mult+0x5a>
 8006e68:	4638      	mov	r0, r7
 8006e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6e:	bf00      	nop
 8006e70:	08007740 	.word	0x08007740

08006e74 <__lshift>:
 8006e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e78:	460c      	mov	r4, r1
 8006e7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	6849      	ldr	r1, [r1, #4]
 8006e82:	eb0a 0903 	add.w	r9, sl, r3
 8006e86:	68a3      	ldr	r3, [r4, #8]
 8006e88:	4607      	mov	r7, r0
 8006e8a:	4616      	mov	r6, r2
 8006e8c:	f109 0501 	add.w	r5, r9, #1
 8006e90:	42ab      	cmp	r3, r5
 8006e92:	db32      	blt.n	8006efa <__lshift+0x86>
 8006e94:	4638      	mov	r0, r7
 8006e96:	f7ff fe2c 	bl	8006af2 <_Balloc>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	f100 0114 	add.w	r1, r0, #20
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4553      	cmp	r3, sl
 8006ea6:	db2b      	blt.n	8006f00 <__lshift+0x8c>
 8006ea8:	6920      	ldr	r0, [r4, #16]
 8006eaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006eae:	f104 0314 	add.w	r3, r4, #20
 8006eb2:	f016 021f 	ands.w	r2, r6, #31
 8006eb6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006eba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ebe:	d025      	beq.n	8006f0c <__lshift+0x98>
 8006ec0:	f1c2 0e20 	rsb	lr, r2, #32
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	681e      	ldr	r6, [r3, #0]
 8006ec8:	468a      	mov	sl, r1
 8006eca:	4096      	lsls	r6, r2
 8006ecc:	4330      	orrs	r0, r6
 8006ece:	f84a 0b04 	str.w	r0, [sl], #4
 8006ed2:	f853 0b04 	ldr.w	r0, [r3], #4
 8006ed6:	459c      	cmp	ip, r3
 8006ed8:	fa20 f00e 	lsr.w	r0, r0, lr
 8006edc:	d814      	bhi.n	8006f08 <__lshift+0x94>
 8006ede:	6048      	str	r0, [r1, #4]
 8006ee0:	b108      	cbz	r0, 8006ee6 <__lshift+0x72>
 8006ee2:	f109 0502 	add.w	r5, r9, #2
 8006ee6:	3d01      	subs	r5, #1
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f8c8 5010 	str.w	r5, [r8, #16]
 8006eee:	4621      	mov	r1, r4
 8006ef0:	f7ff fe33 	bl	8006b5a <_Bfree>
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efa:	3101      	adds	r1, #1
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	e7c7      	b.n	8006e90 <__lshift+0x1c>
 8006f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006f04:	3301      	adds	r3, #1
 8006f06:	e7cd      	b.n	8006ea4 <__lshift+0x30>
 8006f08:	4651      	mov	r1, sl
 8006f0a:	e7dc      	b.n	8006ec6 <__lshift+0x52>
 8006f0c:	3904      	subs	r1, #4
 8006f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f12:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f16:	459c      	cmp	ip, r3
 8006f18:	d8f9      	bhi.n	8006f0e <__lshift+0x9a>
 8006f1a:	e7e4      	b.n	8006ee6 <__lshift+0x72>

08006f1c <__mcmp>:
 8006f1c:	6903      	ldr	r3, [r0, #16]
 8006f1e:	690a      	ldr	r2, [r1, #16]
 8006f20:	1a9b      	subs	r3, r3, r2
 8006f22:	b530      	push	{r4, r5, lr}
 8006f24:	d10c      	bne.n	8006f40 <__mcmp+0x24>
 8006f26:	0092      	lsls	r2, r2, #2
 8006f28:	3014      	adds	r0, #20
 8006f2a:	3114      	adds	r1, #20
 8006f2c:	1884      	adds	r4, r0, r2
 8006f2e:	4411      	add	r1, r2
 8006f30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f38:	4295      	cmp	r5, r2
 8006f3a:	d003      	beq.n	8006f44 <__mcmp+0x28>
 8006f3c:	d305      	bcc.n	8006f4a <__mcmp+0x2e>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	4618      	mov	r0, r3
 8006f42:	bd30      	pop	{r4, r5, pc}
 8006f44:	42a0      	cmp	r0, r4
 8006f46:	d3f3      	bcc.n	8006f30 <__mcmp+0x14>
 8006f48:	e7fa      	b.n	8006f40 <__mcmp+0x24>
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f4e:	e7f7      	b.n	8006f40 <__mcmp+0x24>

08006f50 <__mdiff>:
 8006f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f54:	460d      	mov	r5, r1
 8006f56:	4607      	mov	r7, r0
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	4614      	mov	r4, r2
 8006f5e:	f7ff ffdd 	bl	8006f1c <__mcmp>
 8006f62:	1e06      	subs	r6, r0, #0
 8006f64:	d108      	bne.n	8006f78 <__mdiff+0x28>
 8006f66:	4631      	mov	r1, r6
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f7ff fdc2 	bl	8006af2 <_Balloc>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f78:	bfa4      	itt	ge
 8006f7a:	4623      	movge	r3, r4
 8006f7c:	462c      	movge	r4, r5
 8006f7e:	4638      	mov	r0, r7
 8006f80:	6861      	ldr	r1, [r4, #4]
 8006f82:	bfa6      	itte	ge
 8006f84:	461d      	movge	r5, r3
 8006f86:	2600      	movge	r6, #0
 8006f88:	2601      	movlt	r6, #1
 8006f8a:	f7ff fdb2 	bl	8006af2 <_Balloc>
 8006f8e:	692b      	ldr	r3, [r5, #16]
 8006f90:	60c6      	str	r6, [r0, #12]
 8006f92:	6926      	ldr	r6, [r4, #16]
 8006f94:	f105 0914 	add.w	r9, r5, #20
 8006f98:	f104 0214 	add.w	r2, r4, #20
 8006f9c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006fa0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006fa4:	f100 0514 	add.w	r5, r0, #20
 8006fa8:	f04f 0e00 	mov.w	lr, #0
 8006fac:	f852 ab04 	ldr.w	sl, [r2], #4
 8006fb0:	f859 4b04 	ldr.w	r4, [r9], #4
 8006fb4:	fa1e f18a 	uxtah	r1, lr, sl
 8006fb8:	b2a3      	uxth	r3, r4
 8006fba:	1ac9      	subs	r1, r1, r3
 8006fbc:	0c23      	lsrs	r3, r4, #16
 8006fbe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006fc2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006fc6:	b289      	uxth	r1, r1
 8006fc8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006fcc:	45c8      	cmp	r8, r9
 8006fce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006fd2:	4694      	mov	ip, r2
 8006fd4:	f845 3b04 	str.w	r3, [r5], #4
 8006fd8:	d8e8      	bhi.n	8006fac <__mdiff+0x5c>
 8006fda:	45bc      	cmp	ip, r7
 8006fdc:	d304      	bcc.n	8006fe8 <__mdiff+0x98>
 8006fde:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006fe2:	b183      	cbz	r3, 8007006 <__mdiff+0xb6>
 8006fe4:	6106      	str	r6, [r0, #16]
 8006fe6:	e7c5      	b.n	8006f74 <__mdiff+0x24>
 8006fe8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006fec:	fa1e f381 	uxtah	r3, lr, r1
 8006ff0:	141a      	asrs	r2, r3, #16
 8006ff2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ffc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007000:	f845 3b04 	str.w	r3, [r5], #4
 8007004:	e7e9      	b.n	8006fda <__mdiff+0x8a>
 8007006:	3e01      	subs	r6, #1
 8007008:	e7e9      	b.n	8006fde <__mdiff+0x8e>

0800700a <__d2b>:
 800700a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800700e:	460e      	mov	r6, r1
 8007010:	2101      	movs	r1, #1
 8007012:	ec59 8b10 	vmov	r8, r9, d0
 8007016:	4615      	mov	r5, r2
 8007018:	f7ff fd6b 	bl	8006af2 <_Balloc>
 800701c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007020:	4607      	mov	r7, r0
 8007022:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007026:	bb34      	cbnz	r4, 8007076 <__d2b+0x6c>
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	f1b8 0300 	subs.w	r3, r8, #0
 800702e:	d027      	beq.n	8007080 <__d2b+0x76>
 8007030:	a802      	add	r0, sp, #8
 8007032:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007036:	f7ff fe01 	bl	8006c3c <__lo0bits>
 800703a:	9900      	ldr	r1, [sp, #0]
 800703c:	b1f0      	cbz	r0, 800707c <__d2b+0x72>
 800703e:	9a01      	ldr	r2, [sp, #4]
 8007040:	f1c0 0320 	rsb	r3, r0, #32
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	430b      	orrs	r3, r1
 800704a:	40c2      	lsrs	r2, r0
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	9201      	str	r2, [sp, #4]
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	61bb      	str	r3, [r7, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	bf14      	ite	ne
 8007058:	2102      	movne	r1, #2
 800705a:	2101      	moveq	r1, #1
 800705c:	6139      	str	r1, [r7, #16]
 800705e:	b1c4      	cbz	r4, 8007092 <__d2b+0x88>
 8007060:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007064:	4404      	add	r4, r0
 8007066:	6034      	str	r4, [r6, #0]
 8007068:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800706c:	6028      	str	r0, [r5, #0]
 800706e:	4638      	mov	r0, r7
 8007070:	b003      	add	sp, #12
 8007072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800707a:	e7d5      	b.n	8007028 <__d2b+0x1e>
 800707c:	6179      	str	r1, [r7, #20]
 800707e:	e7e7      	b.n	8007050 <__d2b+0x46>
 8007080:	a801      	add	r0, sp, #4
 8007082:	f7ff fddb 	bl	8006c3c <__lo0bits>
 8007086:	9b01      	ldr	r3, [sp, #4]
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	2101      	movs	r1, #1
 800708c:	6139      	str	r1, [r7, #16]
 800708e:	3020      	adds	r0, #32
 8007090:	e7e5      	b.n	800705e <__d2b+0x54>
 8007092:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007096:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800709a:	6030      	str	r0, [r6, #0]
 800709c:	6918      	ldr	r0, [r3, #16]
 800709e:	f7ff fdae 	bl	8006bfe <__hi0bits>
 80070a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80070a6:	e7e1      	b.n	800706c <__d2b+0x62>

080070a8 <_calloc_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	fb02 f401 	mul.w	r4, r2, r1
 80070ae:	4621      	mov	r1, r4
 80070b0:	f000 f856 	bl	8007160 <_malloc_r>
 80070b4:	4605      	mov	r5, r0
 80070b6:	b118      	cbz	r0, 80070c0 <_calloc_r+0x18>
 80070b8:	4622      	mov	r2, r4
 80070ba:	2100      	movs	r1, #0
 80070bc:	f7fe fa2e 	bl	800551c <memset>
 80070c0:	4628      	mov	r0, r5
 80070c2:	bd38      	pop	{r3, r4, r5, pc}

080070c4 <_free_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4605      	mov	r5, r0
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d045      	beq.n	8007158 <_free_r+0x94>
 80070cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d0:	1f0c      	subs	r4, r1, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bfb8      	it	lt
 80070d6:	18e4      	addlt	r4, r4, r3
 80070d8:	f000 fa29 	bl	800752e <__malloc_lock>
 80070dc:	4a1f      	ldr	r2, [pc, #124]	; (800715c <_free_r+0x98>)
 80070de:	6813      	ldr	r3, [r2, #0]
 80070e0:	4610      	mov	r0, r2
 80070e2:	b933      	cbnz	r3, 80070f2 <_free_r+0x2e>
 80070e4:	6063      	str	r3, [r4, #4]
 80070e6:	6014      	str	r4, [r2, #0]
 80070e8:	4628      	mov	r0, r5
 80070ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ee:	f000 ba1f 	b.w	8007530 <__malloc_unlock>
 80070f2:	42a3      	cmp	r3, r4
 80070f4:	d90c      	bls.n	8007110 <_free_r+0x4c>
 80070f6:	6821      	ldr	r1, [r4, #0]
 80070f8:	1862      	adds	r2, r4, r1
 80070fa:	4293      	cmp	r3, r2
 80070fc:	bf04      	itt	eq
 80070fe:	681a      	ldreq	r2, [r3, #0]
 8007100:	685b      	ldreq	r3, [r3, #4]
 8007102:	6063      	str	r3, [r4, #4]
 8007104:	bf04      	itt	eq
 8007106:	1852      	addeq	r2, r2, r1
 8007108:	6022      	streq	r2, [r4, #0]
 800710a:	6004      	str	r4, [r0, #0]
 800710c:	e7ec      	b.n	80070e8 <_free_r+0x24>
 800710e:	4613      	mov	r3, r2
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	b10a      	cbz	r2, 8007118 <_free_r+0x54>
 8007114:	42a2      	cmp	r2, r4
 8007116:	d9fa      	bls.n	800710e <_free_r+0x4a>
 8007118:	6819      	ldr	r1, [r3, #0]
 800711a:	1858      	adds	r0, r3, r1
 800711c:	42a0      	cmp	r0, r4
 800711e:	d10b      	bne.n	8007138 <_free_r+0x74>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	4401      	add	r1, r0
 8007124:	1858      	adds	r0, r3, r1
 8007126:	4282      	cmp	r2, r0
 8007128:	6019      	str	r1, [r3, #0]
 800712a:	d1dd      	bne.n	80070e8 <_free_r+0x24>
 800712c:	6810      	ldr	r0, [r2, #0]
 800712e:	6852      	ldr	r2, [r2, #4]
 8007130:	605a      	str	r2, [r3, #4]
 8007132:	4401      	add	r1, r0
 8007134:	6019      	str	r1, [r3, #0]
 8007136:	e7d7      	b.n	80070e8 <_free_r+0x24>
 8007138:	d902      	bls.n	8007140 <_free_r+0x7c>
 800713a:	230c      	movs	r3, #12
 800713c:	602b      	str	r3, [r5, #0]
 800713e:	e7d3      	b.n	80070e8 <_free_r+0x24>
 8007140:	6820      	ldr	r0, [r4, #0]
 8007142:	1821      	adds	r1, r4, r0
 8007144:	428a      	cmp	r2, r1
 8007146:	bf04      	itt	eq
 8007148:	6811      	ldreq	r1, [r2, #0]
 800714a:	6852      	ldreq	r2, [r2, #4]
 800714c:	6062      	str	r2, [r4, #4]
 800714e:	bf04      	itt	eq
 8007150:	1809      	addeq	r1, r1, r0
 8007152:	6021      	streq	r1, [r4, #0]
 8007154:	605c      	str	r4, [r3, #4]
 8007156:	e7c7      	b.n	80070e8 <_free_r+0x24>
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	bf00      	nop
 800715c:	20000208 	.word	0x20000208

08007160 <_malloc_r>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	1ccd      	adds	r5, r1, #3
 8007164:	f025 0503 	bic.w	r5, r5, #3
 8007168:	3508      	adds	r5, #8
 800716a:	2d0c      	cmp	r5, #12
 800716c:	bf38      	it	cc
 800716e:	250c      	movcc	r5, #12
 8007170:	2d00      	cmp	r5, #0
 8007172:	4606      	mov	r6, r0
 8007174:	db01      	blt.n	800717a <_malloc_r+0x1a>
 8007176:	42a9      	cmp	r1, r5
 8007178:	d903      	bls.n	8007182 <_malloc_r+0x22>
 800717a:	230c      	movs	r3, #12
 800717c:	6033      	str	r3, [r6, #0]
 800717e:	2000      	movs	r0, #0
 8007180:	bd70      	pop	{r4, r5, r6, pc}
 8007182:	f000 f9d4 	bl	800752e <__malloc_lock>
 8007186:	4a21      	ldr	r2, [pc, #132]	; (800720c <_malloc_r+0xac>)
 8007188:	6814      	ldr	r4, [r2, #0]
 800718a:	4621      	mov	r1, r4
 800718c:	b991      	cbnz	r1, 80071b4 <_malloc_r+0x54>
 800718e:	4c20      	ldr	r4, [pc, #128]	; (8007210 <_malloc_r+0xb0>)
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	b91b      	cbnz	r3, 800719c <_malloc_r+0x3c>
 8007194:	4630      	mov	r0, r6
 8007196:	f000 f98f 	bl	80074b8 <_sbrk_r>
 800719a:	6020      	str	r0, [r4, #0]
 800719c:	4629      	mov	r1, r5
 800719e:	4630      	mov	r0, r6
 80071a0:	f000 f98a 	bl	80074b8 <_sbrk_r>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d124      	bne.n	80071f2 <_malloc_r+0x92>
 80071a8:	230c      	movs	r3, #12
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	4630      	mov	r0, r6
 80071ae:	f000 f9bf 	bl	8007530 <__malloc_unlock>
 80071b2:	e7e4      	b.n	800717e <_malloc_r+0x1e>
 80071b4:	680b      	ldr	r3, [r1, #0]
 80071b6:	1b5b      	subs	r3, r3, r5
 80071b8:	d418      	bmi.n	80071ec <_malloc_r+0x8c>
 80071ba:	2b0b      	cmp	r3, #11
 80071bc:	d90f      	bls.n	80071de <_malloc_r+0x7e>
 80071be:	600b      	str	r3, [r1, #0]
 80071c0:	50cd      	str	r5, [r1, r3]
 80071c2:	18cc      	adds	r4, r1, r3
 80071c4:	4630      	mov	r0, r6
 80071c6:	f000 f9b3 	bl	8007530 <__malloc_unlock>
 80071ca:	f104 000b 	add.w	r0, r4, #11
 80071ce:	1d23      	adds	r3, r4, #4
 80071d0:	f020 0007 	bic.w	r0, r0, #7
 80071d4:	1ac3      	subs	r3, r0, r3
 80071d6:	d0d3      	beq.n	8007180 <_malloc_r+0x20>
 80071d8:	425a      	negs	r2, r3
 80071da:	50e2      	str	r2, [r4, r3]
 80071dc:	e7d0      	b.n	8007180 <_malloc_r+0x20>
 80071de:	428c      	cmp	r4, r1
 80071e0:	684b      	ldr	r3, [r1, #4]
 80071e2:	bf16      	itet	ne
 80071e4:	6063      	strne	r3, [r4, #4]
 80071e6:	6013      	streq	r3, [r2, #0]
 80071e8:	460c      	movne	r4, r1
 80071ea:	e7eb      	b.n	80071c4 <_malloc_r+0x64>
 80071ec:	460c      	mov	r4, r1
 80071ee:	6849      	ldr	r1, [r1, #4]
 80071f0:	e7cc      	b.n	800718c <_malloc_r+0x2c>
 80071f2:	1cc4      	adds	r4, r0, #3
 80071f4:	f024 0403 	bic.w	r4, r4, #3
 80071f8:	42a0      	cmp	r0, r4
 80071fa:	d005      	beq.n	8007208 <_malloc_r+0xa8>
 80071fc:	1a21      	subs	r1, r4, r0
 80071fe:	4630      	mov	r0, r6
 8007200:	f000 f95a 	bl	80074b8 <_sbrk_r>
 8007204:	3001      	adds	r0, #1
 8007206:	d0cf      	beq.n	80071a8 <_malloc_r+0x48>
 8007208:	6025      	str	r5, [r4, #0]
 800720a:	e7db      	b.n	80071c4 <_malloc_r+0x64>
 800720c:	20000208 	.word	0x20000208
 8007210:	2000020c 	.word	0x2000020c

08007214 <__ssputs_r>:
 8007214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007218:	688e      	ldr	r6, [r1, #8]
 800721a:	429e      	cmp	r6, r3
 800721c:	4682      	mov	sl, r0
 800721e:	460c      	mov	r4, r1
 8007220:	4690      	mov	r8, r2
 8007222:	4699      	mov	r9, r3
 8007224:	d837      	bhi.n	8007296 <__ssputs_r+0x82>
 8007226:	898a      	ldrh	r2, [r1, #12]
 8007228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800722c:	d031      	beq.n	8007292 <__ssputs_r+0x7e>
 800722e:	6825      	ldr	r5, [r4, #0]
 8007230:	6909      	ldr	r1, [r1, #16]
 8007232:	1a6f      	subs	r7, r5, r1
 8007234:	6965      	ldr	r5, [r4, #20]
 8007236:	2302      	movs	r3, #2
 8007238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800723c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007240:	f109 0301 	add.w	r3, r9, #1
 8007244:	443b      	add	r3, r7
 8007246:	429d      	cmp	r5, r3
 8007248:	bf38      	it	cc
 800724a:	461d      	movcc	r5, r3
 800724c:	0553      	lsls	r3, r2, #21
 800724e:	d530      	bpl.n	80072b2 <__ssputs_r+0x9e>
 8007250:	4629      	mov	r1, r5
 8007252:	f7ff ff85 	bl	8007160 <_malloc_r>
 8007256:	4606      	mov	r6, r0
 8007258:	b950      	cbnz	r0, 8007270 <__ssputs_r+0x5c>
 800725a:	230c      	movs	r3, #12
 800725c:	f8ca 3000 	str.w	r3, [sl]
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007266:	81a3      	strh	r3, [r4, #12]
 8007268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800726c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007270:	463a      	mov	r2, r7
 8007272:	6921      	ldr	r1, [r4, #16]
 8007274:	f7ff fc32 	bl	8006adc <memcpy>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800727e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007282:	81a3      	strh	r3, [r4, #12]
 8007284:	6126      	str	r6, [r4, #16]
 8007286:	6165      	str	r5, [r4, #20]
 8007288:	443e      	add	r6, r7
 800728a:	1bed      	subs	r5, r5, r7
 800728c:	6026      	str	r6, [r4, #0]
 800728e:	60a5      	str	r5, [r4, #8]
 8007290:	464e      	mov	r6, r9
 8007292:	454e      	cmp	r6, r9
 8007294:	d900      	bls.n	8007298 <__ssputs_r+0x84>
 8007296:	464e      	mov	r6, r9
 8007298:	4632      	mov	r2, r6
 800729a:	4641      	mov	r1, r8
 800729c:	6820      	ldr	r0, [r4, #0]
 800729e:	f000 f92d 	bl	80074fc <memmove>
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	1b9b      	subs	r3, r3, r6
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	441e      	add	r6, r3
 80072ac:	6026      	str	r6, [r4, #0]
 80072ae:	2000      	movs	r0, #0
 80072b0:	e7dc      	b.n	800726c <__ssputs_r+0x58>
 80072b2:	462a      	mov	r2, r5
 80072b4:	f000 f93d 	bl	8007532 <_realloc_r>
 80072b8:	4606      	mov	r6, r0
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d1e2      	bne.n	8007284 <__ssputs_r+0x70>
 80072be:	6921      	ldr	r1, [r4, #16]
 80072c0:	4650      	mov	r0, sl
 80072c2:	f7ff feff 	bl	80070c4 <_free_r>
 80072c6:	e7c8      	b.n	800725a <__ssputs_r+0x46>

080072c8 <_svfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	461d      	mov	r5, r3
 80072ce:	898b      	ldrh	r3, [r1, #12]
 80072d0:	061f      	lsls	r7, r3, #24
 80072d2:	b09d      	sub	sp, #116	; 0x74
 80072d4:	4680      	mov	r8, r0
 80072d6:	460c      	mov	r4, r1
 80072d8:	4616      	mov	r6, r2
 80072da:	d50f      	bpl.n	80072fc <_svfiprintf_r+0x34>
 80072dc:	690b      	ldr	r3, [r1, #16]
 80072de:	b96b      	cbnz	r3, 80072fc <_svfiprintf_r+0x34>
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	f7ff ff3d 	bl	8007160 <_malloc_r>
 80072e6:	6020      	str	r0, [r4, #0]
 80072e8:	6120      	str	r0, [r4, #16]
 80072ea:	b928      	cbnz	r0, 80072f8 <_svfiprintf_r+0x30>
 80072ec:	230c      	movs	r3, #12
 80072ee:	f8c8 3000 	str.w	r3, [r8]
 80072f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f6:	e0c8      	b.n	800748a <_svfiprintf_r+0x1c2>
 80072f8:	2340      	movs	r3, #64	; 0x40
 80072fa:	6163      	str	r3, [r4, #20]
 80072fc:	2300      	movs	r3, #0
 80072fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007300:	2320      	movs	r3, #32
 8007302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007306:	2330      	movs	r3, #48	; 0x30
 8007308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800730c:	9503      	str	r5, [sp, #12]
 800730e:	f04f 0b01 	mov.w	fp, #1
 8007312:	4637      	mov	r7, r6
 8007314:	463d      	mov	r5, r7
 8007316:	f815 3b01 	ldrb.w	r3, [r5], #1
 800731a:	b10b      	cbz	r3, 8007320 <_svfiprintf_r+0x58>
 800731c:	2b25      	cmp	r3, #37	; 0x25
 800731e:	d13e      	bne.n	800739e <_svfiprintf_r+0xd6>
 8007320:	ebb7 0a06 	subs.w	sl, r7, r6
 8007324:	d00b      	beq.n	800733e <_svfiprintf_r+0x76>
 8007326:	4653      	mov	r3, sl
 8007328:	4632      	mov	r2, r6
 800732a:	4621      	mov	r1, r4
 800732c:	4640      	mov	r0, r8
 800732e:	f7ff ff71 	bl	8007214 <__ssputs_r>
 8007332:	3001      	adds	r0, #1
 8007334:	f000 80a4 	beq.w	8007480 <_svfiprintf_r+0x1b8>
 8007338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733a:	4453      	add	r3, sl
 800733c:	9309      	str	r3, [sp, #36]	; 0x24
 800733e:	783b      	ldrb	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 809d 	beq.w	8007480 <_svfiprintf_r+0x1b8>
 8007346:	2300      	movs	r3, #0
 8007348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800734c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007350:	9304      	str	r3, [sp, #16]
 8007352:	9307      	str	r3, [sp, #28]
 8007354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007358:	931a      	str	r3, [sp, #104]	; 0x68
 800735a:	462f      	mov	r7, r5
 800735c:	2205      	movs	r2, #5
 800735e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007362:	4850      	ldr	r0, [pc, #320]	; (80074a4 <_svfiprintf_r+0x1dc>)
 8007364:	f7f8 ff3c 	bl	80001e0 <memchr>
 8007368:	9b04      	ldr	r3, [sp, #16]
 800736a:	b9d0      	cbnz	r0, 80073a2 <_svfiprintf_r+0xda>
 800736c:	06d9      	lsls	r1, r3, #27
 800736e:	bf44      	itt	mi
 8007370:	2220      	movmi	r2, #32
 8007372:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007376:	071a      	lsls	r2, r3, #28
 8007378:	bf44      	itt	mi
 800737a:	222b      	movmi	r2, #43	; 0x2b
 800737c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007380:	782a      	ldrb	r2, [r5, #0]
 8007382:	2a2a      	cmp	r2, #42	; 0x2a
 8007384:	d015      	beq.n	80073b2 <_svfiprintf_r+0xea>
 8007386:	9a07      	ldr	r2, [sp, #28]
 8007388:	462f      	mov	r7, r5
 800738a:	2000      	movs	r0, #0
 800738c:	250a      	movs	r5, #10
 800738e:	4639      	mov	r1, r7
 8007390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007394:	3b30      	subs	r3, #48	; 0x30
 8007396:	2b09      	cmp	r3, #9
 8007398:	d94d      	bls.n	8007436 <_svfiprintf_r+0x16e>
 800739a:	b1b8      	cbz	r0, 80073cc <_svfiprintf_r+0x104>
 800739c:	e00f      	b.n	80073be <_svfiprintf_r+0xf6>
 800739e:	462f      	mov	r7, r5
 80073a0:	e7b8      	b.n	8007314 <_svfiprintf_r+0x4c>
 80073a2:	4a40      	ldr	r2, [pc, #256]	; (80074a4 <_svfiprintf_r+0x1dc>)
 80073a4:	1a80      	subs	r0, r0, r2
 80073a6:	fa0b f000 	lsl.w	r0, fp, r0
 80073aa:	4318      	orrs	r0, r3
 80073ac:	9004      	str	r0, [sp, #16]
 80073ae:	463d      	mov	r5, r7
 80073b0:	e7d3      	b.n	800735a <_svfiprintf_r+0x92>
 80073b2:	9a03      	ldr	r2, [sp, #12]
 80073b4:	1d11      	adds	r1, r2, #4
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	9103      	str	r1, [sp, #12]
 80073ba:	2a00      	cmp	r2, #0
 80073bc:	db01      	blt.n	80073c2 <_svfiprintf_r+0xfa>
 80073be:	9207      	str	r2, [sp, #28]
 80073c0:	e004      	b.n	80073cc <_svfiprintf_r+0x104>
 80073c2:	4252      	negs	r2, r2
 80073c4:	f043 0302 	orr.w	r3, r3, #2
 80073c8:	9207      	str	r2, [sp, #28]
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	783b      	ldrb	r3, [r7, #0]
 80073ce:	2b2e      	cmp	r3, #46	; 0x2e
 80073d0:	d10c      	bne.n	80073ec <_svfiprintf_r+0x124>
 80073d2:	787b      	ldrb	r3, [r7, #1]
 80073d4:	2b2a      	cmp	r3, #42	; 0x2a
 80073d6:	d133      	bne.n	8007440 <_svfiprintf_r+0x178>
 80073d8:	9b03      	ldr	r3, [sp, #12]
 80073da:	1d1a      	adds	r2, r3, #4
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	9203      	str	r2, [sp, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfb8      	it	lt
 80073e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073e8:	3702      	adds	r7, #2
 80073ea:	9305      	str	r3, [sp, #20]
 80073ec:	4d2e      	ldr	r5, [pc, #184]	; (80074a8 <_svfiprintf_r+0x1e0>)
 80073ee:	7839      	ldrb	r1, [r7, #0]
 80073f0:	2203      	movs	r2, #3
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7f8 fef4 	bl	80001e0 <memchr>
 80073f8:	b138      	cbz	r0, 800740a <_svfiprintf_r+0x142>
 80073fa:	2340      	movs	r3, #64	; 0x40
 80073fc:	1b40      	subs	r0, r0, r5
 80073fe:	fa03 f000 	lsl.w	r0, r3, r0
 8007402:	9b04      	ldr	r3, [sp, #16]
 8007404:	4303      	orrs	r3, r0
 8007406:	3701      	adds	r7, #1
 8007408:	9304      	str	r3, [sp, #16]
 800740a:	7839      	ldrb	r1, [r7, #0]
 800740c:	4827      	ldr	r0, [pc, #156]	; (80074ac <_svfiprintf_r+0x1e4>)
 800740e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007412:	2206      	movs	r2, #6
 8007414:	1c7e      	adds	r6, r7, #1
 8007416:	f7f8 fee3 	bl	80001e0 <memchr>
 800741a:	2800      	cmp	r0, #0
 800741c:	d038      	beq.n	8007490 <_svfiprintf_r+0x1c8>
 800741e:	4b24      	ldr	r3, [pc, #144]	; (80074b0 <_svfiprintf_r+0x1e8>)
 8007420:	bb13      	cbnz	r3, 8007468 <_svfiprintf_r+0x1a0>
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	3307      	adds	r3, #7
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	3308      	adds	r3, #8
 800742c:	9303      	str	r3, [sp, #12]
 800742e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007430:	444b      	add	r3, r9
 8007432:	9309      	str	r3, [sp, #36]	; 0x24
 8007434:	e76d      	b.n	8007312 <_svfiprintf_r+0x4a>
 8007436:	fb05 3202 	mla	r2, r5, r2, r3
 800743a:	2001      	movs	r0, #1
 800743c:	460f      	mov	r7, r1
 800743e:	e7a6      	b.n	800738e <_svfiprintf_r+0xc6>
 8007440:	2300      	movs	r3, #0
 8007442:	3701      	adds	r7, #1
 8007444:	9305      	str	r3, [sp, #20]
 8007446:	4619      	mov	r1, r3
 8007448:	250a      	movs	r5, #10
 800744a:	4638      	mov	r0, r7
 800744c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007450:	3a30      	subs	r2, #48	; 0x30
 8007452:	2a09      	cmp	r2, #9
 8007454:	d903      	bls.n	800745e <_svfiprintf_r+0x196>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d0c8      	beq.n	80073ec <_svfiprintf_r+0x124>
 800745a:	9105      	str	r1, [sp, #20]
 800745c:	e7c6      	b.n	80073ec <_svfiprintf_r+0x124>
 800745e:	fb05 2101 	mla	r1, r5, r1, r2
 8007462:	2301      	movs	r3, #1
 8007464:	4607      	mov	r7, r0
 8007466:	e7f0      	b.n	800744a <_svfiprintf_r+0x182>
 8007468:	ab03      	add	r3, sp, #12
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	4622      	mov	r2, r4
 800746e:	4b11      	ldr	r3, [pc, #68]	; (80074b4 <_svfiprintf_r+0x1ec>)
 8007470:	a904      	add	r1, sp, #16
 8007472:	4640      	mov	r0, r8
 8007474:	f7fe f8ee 	bl	8005654 <_printf_float>
 8007478:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800747c:	4681      	mov	r9, r0
 800747e:	d1d6      	bne.n	800742e <_svfiprintf_r+0x166>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	065b      	lsls	r3, r3, #25
 8007484:	f53f af35 	bmi.w	80072f2 <_svfiprintf_r+0x2a>
 8007488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800748a:	b01d      	add	sp, #116	; 0x74
 800748c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007490:	ab03      	add	r3, sp, #12
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	4622      	mov	r2, r4
 8007496:	4b07      	ldr	r3, [pc, #28]	; (80074b4 <_svfiprintf_r+0x1ec>)
 8007498:	a904      	add	r1, sp, #16
 800749a:	4640      	mov	r0, r8
 800749c:	f7fe fb90 	bl	8005bc0 <_printf_i>
 80074a0:	e7ea      	b.n	8007478 <_svfiprintf_r+0x1b0>
 80074a2:	bf00      	nop
 80074a4:	0800774c 	.word	0x0800774c
 80074a8:	08007752 	.word	0x08007752
 80074ac:	08007756 	.word	0x08007756
 80074b0:	08005655 	.word	0x08005655
 80074b4:	08007215 	.word	0x08007215

080074b8 <_sbrk_r>:
 80074b8:	b538      	push	{r3, r4, r5, lr}
 80074ba:	4c06      	ldr	r4, [pc, #24]	; (80074d4 <_sbrk_r+0x1c>)
 80074bc:	2300      	movs	r3, #0
 80074be:	4605      	mov	r5, r0
 80074c0:	4608      	mov	r0, r1
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	f7f9 ff08 	bl	80012d8 <_sbrk>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_sbrk_r+0x1a>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_sbrk_r+0x1a>
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	200002bc 	.word	0x200002bc

080074d8 <__ascii_mbtowc>:
 80074d8:	b082      	sub	sp, #8
 80074da:	b901      	cbnz	r1, 80074de <__ascii_mbtowc+0x6>
 80074dc:	a901      	add	r1, sp, #4
 80074de:	b142      	cbz	r2, 80074f2 <__ascii_mbtowc+0x1a>
 80074e0:	b14b      	cbz	r3, 80074f6 <__ascii_mbtowc+0x1e>
 80074e2:	7813      	ldrb	r3, [r2, #0]
 80074e4:	600b      	str	r3, [r1, #0]
 80074e6:	7812      	ldrb	r2, [r2, #0]
 80074e8:	1c10      	adds	r0, r2, #0
 80074ea:	bf18      	it	ne
 80074ec:	2001      	movne	r0, #1
 80074ee:	b002      	add	sp, #8
 80074f0:	4770      	bx	lr
 80074f2:	4610      	mov	r0, r2
 80074f4:	e7fb      	b.n	80074ee <__ascii_mbtowc+0x16>
 80074f6:	f06f 0001 	mvn.w	r0, #1
 80074fa:	e7f8      	b.n	80074ee <__ascii_mbtowc+0x16>

080074fc <memmove>:
 80074fc:	4288      	cmp	r0, r1
 80074fe:	b510      	push	{r4, lr}
 8007500:	eb01 0302 	add.w	r3, r1, r2
 8007504:	d807      	bhi.n	8007516 <memmove+0x1a>
 8007506:	1e42      	subs	r2, r0, #1
 8007508:	4299      	cmp	r1, r3
 800750a:	d00a      	beq.n	8007522 <memmove+0x26>
 800750c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007510:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007514:	e7f8      	b.n	8007508 <memmove+0xc>
 8007516:	4283      	cmp	r3, r0
 8007518:	d9f5      	bls.n	8007506 <memmove+0xa>
 800751a:	1881      	adds	r1, r0, r2
 800751c:	1ad2      	subs	r2, r2, r3
 800751e:	42d3      	cmn	r3, r2
 8007520:	d100      	bne.n	8007524 <memmove+0x28>
 8007522:	bd10      	pop	{r4, pc}
 8007524:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007528:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800752c:	e7f7      	b.n	800751e <memmove+0x22>

0800752e <__malloc_lock>:
 800752e:	4770      	bx	lr

08007530 <__malloc_unlock>:
 8007530:	4770      	bx	lr

08007532 <_realloc_r>:
 8007532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007534:	4607      	mov	r7, r0
 8007536:	4614      	mov	r4, r2
 8007538:	460e      	mov	r6, r1
 800753a:	b921      	cbnz	r1, 8007546 <_realloc_r+0x14>
 800753c:	4611      	mov	r1, r2
 800753e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007542:	f7ff be0d 	b.w	8007160 <_malloc_r>
 8007546:	b922      	cbnz	r2, 8007552 <_realloc_r+0x20>
 8007548:	f7ff fdbc 	bl	80070c4 <_free_r>
 800754c:	4625      	mov	r5, r4
 800754e:	4628      	mov	r0, r5
 8007550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007552:	f000 f821 	bl	8007598 <_malloc_usable_size_r>
 8007556:	42a0      	cmp	r0, r4
 8007558:	d20f      	bcs.n	800757a <_realloc_r+0x48>
 800755a:	4621      	mov	r1, r4
 800755c:	4638      	mov	r0, r7
 800755e:	f7ff fdff 	bl	8007160 <_malloc_r>
 8007562:	4605      	mov	r5, r0
 8007564:	2800      	cmp	r0, #0
 8007566:	d0f2      	beq.n	800754e <_realloc_r+0x1c>
 8007568:	4631      	mov	r1, r6
 800756a:	4622      	mov	r2, r4
 800756c:	f7ff fab6 	bl	8006adc <memcpy>
 8007570:	4631      	mov	r1, r6
 8007572:	4638      	mov	r0, r7
 8007574:	f7ff fda6 	bl	80070c4 <_free_r>
 8007578:	e7e9      	b.n	800754e <_realloc_r+0x1c>
 800757a:	4635      	mov	r5, r6
 800757c:	e7e7      	b.n	800754e <_realloc_r+0x1c>

0800757e <__ascii_wctomb>:
 800757e:	b149      	cbz	r1, 8007594 <__ascii_wctomb+0x16>
 8007580:	2aff      	cmp	r2, #255	; 0xff
 8007582:	bf85      	ittet	hi
 8007584:	238a      	movhi	r3, #138	; 0x8a
 8007586:	6003      	strhi	r3, [r0, #0]
 8007588:	700a      	strbls	r2, [r1, #0]
 800758a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800758e:	bf98      	it	ls
 8007590:	2001      	movls	r0, #1
 8007592:	4770      	bx	lr
 8007594:	4608      	mov	r0, r1
 8007596:	4770      	bx	lr

08007598 <_malloc_usable_size_r>:
 8007598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759c:	1f18      	subs	r0, r3, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfbc      	itt	lt
 80075a2:	580b      	ldrlt	r3, [r1, r0]
 80075a4:	18c0      	addlt	r0, r0, r3
 80075a6:	4770      	bx	lr

080075a8 <_init>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	bf00      	nop
 80075ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ae:	bc08      	pop	{r3}
 80075b0:	469e      	mov	lr, r3
 80075b2:	4770      	bx	lr

080075b4 <_fini>:
 80075b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b6:	bf00      	nop
 80075b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ba:	bc08      	pop	{r3}
 80075bc:	469e      	mov	lr, r3
 80075be:	4770      	bx	lr
